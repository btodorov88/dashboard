
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026270  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004390  08026440  08026440  00036440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003ca2  0802a7d0  0802a7d0  0003a7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  0802e474  0802e474  0003e474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000001f4  0806196c  0806196c  0007196c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08061b60  08061b60  0008010c  2**0
                  CONTENTS
  7 .ARM          00000008  08061b60  08061b60  00071b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08061b68  08061b68  0008010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08061b68  08061b68  00071b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08061b7c  08061b7c  00071b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000010c  20000000  08061b84  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c858  2000010c  08061c90  0008010c  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000c964  08061c90  0008c964  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0008010c  2**0
                  CONTENTS, READONLY
 15 .comment      000000c2  00000000  00000000  0008013c  2**0
                  CONTENTS, READONLY
 16 .debug_info   0005974a  00000000  00000000  000801fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000105c4  00000000  00000000  000d9948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004148  00000000  00000000  000e9f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00003021  00000000  00000000  000ee058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a452  00000000  00000000  000f1079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005159b  00000000  00000000  0012b4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001314f1  00000000  00000000  0017ca66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00011954  00000000  00000000  002adf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000003f  00000000  00000000  002bf8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08026428 	.word	0x08026428

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000110 	.word	0x20000110
 800020c:	08026428 	.word	0x08026428

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <vApplicationGetIdleTaskMemory+0x30>)
 8000dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000128 	.word	0x20000128
 8000ddc:	20000180 	.word	0x20000180

08000de0 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b09c      	sub	sp, #112	; 0x70
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {7000, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000de8:	4b83      	ldr	r3, [pc, #524]	; (8000ff8 <SecondTask+0x218>)
 8000dea:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000dee:	461d      	mov	r5, r3
 8000df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dfc:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000e00:	4b7e      	ldr	r3, [pc, #504]	; (8000ffc <SecondTask+0x21c>)
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e08:	2300      	movs	r3, #0
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f00b ff76 	bl	800ccfc <xQueueGenericSend>
	osDelay(150);
 8000e10:	2096      	movs	r0, #150	; 0x96
 8000e12:	f00b fc81 	bl	800c718 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000e16:	4b7a      	ldr	r3, [pc, #488]	; (8001000 <SecondTask+0x220>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8127 	beq.w	800106e <SecondTask+0x28e>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000e20:	4b78      	ldr	r3, [pc, #480]	; (8001004 <SecondTask+0x224>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000e28:	da03      	bge.n	8000e32 <SecondTask+0x52>
 8000e2a:	4b76      	ldr	r3, [pc, #472]	; (8001004 <SecondTask+0x224>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3364      	adds	r3, #100	; 0x64
 8000e30:	e000      	b.n	8000e34 <SecondTask+0x54>
 8000e32:	2300      	movs	r3, #0
 8000e34:	4a73      	ldr	r2, [pc, #460]	; (8001004 <SecondTask+0x224>)
 8000e36:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000e38:	4b73      	ldr	r3, [pc, #460]	; (8001008 <SecondTask+0x228>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2bf9      	cmp	r3, #249	; 0xf9
 8000e3e:	dc03      	bgt.n	8000e48 <SecondTask+0x68>
 8000e40:	4b71      	ldr	r3, [pc, #452]	; (8001008 <SecondTask+0x228>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3303      	adds	r3, #3
 8000e46:	e001      	b.n	8000e4c <SecondTask+0x6c>
 8000e48:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000e4c:	4a6e      	ldr	r2, [pc, #440]	; (8001008 <SecondTask+0x228>)
 8000e4e:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000e50:	4b6e      	ldr	r3, [pc, #440]	; (800100c <SecondTask+0x22c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000e58:	da03      	bge.n	8000e62 <SecondTask+0x82>
 8000e5a:	4b6c      	ldr	r3, [pc, #432]	; (800100c <SecondTask+0x22c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3306      	adds	r3, #6
 8000e60:	e000      	b.n	8000e64 <SecondTask+0x84>
 8000e62:	2301      	movs	r3, #1
 8000e64:	4a69      	ldr	r2, [pc, #420]	; (800100c <SecondTask+0x22c>)
 8000e66:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000e68:	4b69      	ldr	r3, [pc, #420]	; (8001010 <SecondTask+0x230>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcad 	bl	80007cc <__aeabi_f2d>
 8000e72:	a359      	add	r3, pc, #356	; (adr r3, 8000fd8 <SecondTask+0x1f8>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fd74 	bl	8000964 <__aeabi_dcmpge>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SecondTask+0xa6>
 8000e82:	4b64      	ldr	r3, [pc, #400]	; (8001014 <SecondTask+0x234>)
 8000e84:	e010      	b.n	8000ea8 <SecondTask+0xc8>
 8000e86:	4b62      	ldr	r3, [pc, #392]	; (8001010 <SecondTask+0x230>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc9e 	bl	80007cc <__aeabi_f2d>
 8000e90:	a353      	add	r3, pc, #332	; (adr r3, 8000fe0 <SecondTask+0x200>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fb3b 	bl	8000510 <__adddf3>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fd9b 	bl	80009dc <__aeabi_d2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a59      	ldr	r2, [pc, #356]	; (8001010 <SecondTask+0x230>)
 8000eaa:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000eac:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <SecondTask+0x238>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc8b 	bl	80007cc <__aeabi_f2d>
 8000eb6:	a348      	add	r3, pc, #288	; (adr r3, 8000fd8 <SecondTask+0x1f8>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fd52 	bl	8000964 <__aeabi_dcmpge>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SecondTask+0xea>
 8000ec6:	4b55      	ldr	r3, [pc, #340]	; (800101c <SecondTask+0x23c>)
 8000ec8:	e010      	b.n	8000eec <SecondTask+0x10c>
 8000eca:	4b53      	ldr	r3, [pc, #332]	; (8001018 <SecondTask+0x238>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc7c 	bl	80007cc <__aeabi_f2d>
 8000ed4:	a344      	add	r3, pc, #272	; (adr r3, 8000fe8 <SecondTask+0x208>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff fb19 	bl	8000510 <__adddf3>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fd79 	bl	80009dc <__aeabi_d2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a4a      	ldr	r2, [pc, #296]	; (8001018 <SecondTask+0x238>)
 8000eee:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <SecondTask+0x240>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b9f      	cmp	r3, #159	; 0x9f
 8000ef6:	dc03      	bgt.n	8000f00 <SecondTask+0x120>
 8000ef8:	4b49      	ldr	r3, [pc, #292]	; (8001020 <SecondTask+0x240>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3302      	adds	r3, #2
 8000efe:	e000      	b.n	8000f02 <SecondTask+0x122>
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a47      	ldr	r2, [pc, #284]	; (8001020 <SecondTask+0x240>)
 8000f04:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <SecondTask+0x244>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	db01      	blt.n	8000f1e <SecondTask+0x13e>
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <SecondTask+0x248>)
 8000f1c:	e010      	b.n	8000f40 <SecondTask+0x160>
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <SecondTask+0x244>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fc52 	bl	80007cc <__aeabi_f2d>
 8000f28:	a331      	add	r3, pc, #196	; (adr r3, 8000ff0 <SecondTask+0x210>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f7ff faef 	bl	8000510 <__adddf3>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fd4f 	bl	80009dc <__aeabi_d2f>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a38      	ldr	r2, [pc, #224]	; (8001024 <SecondTask+0x244>)
 8000f42:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <SecondTask+0x24c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b63      	cmp	r3, #99	; 0x63
 8000f4a:	dc03      	bgt.n	8000f54 <SecondTask+0x174>
 8000f4c:	4b38      	ldr	r3, [pc, #224]	; (8001030 <SecondTask+0x250>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3302      	adds	r3, #2
 8000f52:	e000      	b.n	8000f56 <SecondTask+0x176>
 8000f54:	2301      	movs	r3, #1
 8000f56:	4a35      	ldr	r2, [pc, #212]	; (800102c <SecondTask+0x24c>)
 8000f58:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <SecondTask+0x250>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b63      	cmp	r3, #99	; 0x63
 8000f60:	dc03      	bgt.n	8000f6a <SecondTask+0x18a>
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <SecondTask+0x250>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3302      	adds	r3, #2
 8000f68:	e000      	b.n	8000f6c <SecondTask+0x18c>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4a30      	ldr	r2, [pc, #192]	; (8001030 <SecondTask+0x250>)
 8000f6e:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000f70:	4b30      	ldr	r3, [pc, #192]	; (8001034 <SecondTask+0x254>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000f78:	da03      	bge.n	8000f82 <SecondTask+0x1a2>
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <SecondTask+0x254>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	330c      	adds	r3, #12
 8000f80:	e001      	b.n	8000f86 <SecondTask+0x1a6>
 8000f82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f86:	4a2b      	ldr	r2, [pc, #172]	; (8001034 <SecondTask+0x254>)
 8000f88:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <SecondTask+0x254>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000f92:	da03      	bge.n	8000f9c <SecondTask+0x1bc>
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <SecondTask+0x258>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	330c      	adds	r3, #12
 8000f9a:	e001      	b.n	8000fa0 <SecondTask+0x1c0>
 8000f9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fa0:	4a25      	ldr	r2, [pc, #148]	; (8001038 <SecondTask+0x258>)
 8000fa2:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <SecondTask+0x25c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b63      	cmp	r3, #99	; 0x63
 8000faa:	dc03      	bgt.n	8000fb4 <SecondTask+0x1d4>
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <SecondTask+0x25c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	e000      	b.n	8000fb6 <SecondTask+0x1d6>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	4a21      	ldr	r2, [pc, #132]	; (800103c <SecondTask+0x25c>)
 8000fb8:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <SecondTask+0x260>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	db3c      	blt.n	8001048 <SecondTask+0x268>
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <SecondTask+0x264>)
 8000fd0:	e04b      	b.n	800106a <SecondTask+0x28a>
 8000fd2:	bf00      	nop
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	66666666 	.word	0x66666666
 8000fdc:	3ff66666 	.word	0x3ff66666
 8000fe0:	9999999a 	.word	0x9999999a
 8000fe4:	3fa99999 	.word	0x3fa99999
 8000fe8:	eb851eb8 	.word	0xeb851eb8
 8000fec:	3faeb851 	.word	0x3faeb851
 8000ff0:	9999999a 	.word	0x9999999a
 8000ff4:	3fb99999 	.word	0x3fb99999
 8000ff8:	08026440 	.word	0x08026440
 8000ffc:	20008ecc 	.word	0x20008ecc
 8001000:	08026ed0 	.word	0x08026ed0
 8001004:	20000ae4 	.word	0x20000ae4
 8001008:	20000aec 	.word	0x20000aec
 800100c:	20000004 	.word	0x20000004
 8001010:	20000af4 	.word	0x20000af4
 8001014:	3f19999a 	.word	0x3f19999a
 8001018:	20000008 	.word	0x20000008
 800101c:	3f266666 	.word	0x3f266666
 8001020:	20000b00 	.word	0x20000b00
 8001024:	20000b08 	.word	0x20000b08
 8001028:	3dcccccd 	.word	0x3dcccccd
 800102c:	20000b0c 	.word	0x20000b0c
 8001030:	20000b10 	.word	0x20000b10
 8001034:	20000b14 	.word	0x20000b14
 8001038:	20000b18 	.word	0x20000b18
 800103c:	20000b1c 	.word	0x20000b1c
 8001040:	20000b20 	.word	0x20000b20
 8001044:	41200000 	.word	0x41200000
 8001048:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <SecondTask+0x310>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fbbd 	bl	80007cc <__aeabi_f2d>
 8001052:	a325      	add	r3, pc, #148	; (adr r3, 80010e8 <SecondTask+0x308>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fa5a 	bl	8000510 <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fcba 	bl	80009dc <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <SecondTask+0x310>)
 800106c:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, max_rpm, clt, max_clt, speed, max_speed, lambda, oil_tmp, max_oil_tmp, oil_press, min_oil_press, fuel_press, min_fuel_press, iat, tps, batt_v};
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <SecondTask+0x314>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <SecondTask+0x318>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <SecondTask+0x31c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <SecondTask+0x320>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <SecondTask+0x324>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <SecondTask+0x328>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <SecondTask+0x32c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	623b      	str	r3, [r7, #32]
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <SecondTask+0x330>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <SecondTask+0x334>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <SecondTask+0x338>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <SecondTask+0x33c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <SecondTask+0x340>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <SecondTask+0x344>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <SecondTask+0x348>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <SecondTask+0x34c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	643b      	str	r3, [r7, #64]	; 0x40
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <SecondTask+0x310>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
	    xQueueSend(messageQ, &dispVals,0);
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <SecondTask+0x350>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f107 0108 	add.w	r1, r7, #8
 80010d6:	2300      	movs	r3, #0
 80010d8:	2200      	movs	r2, #0
 80010da:	f00b fe0f 	bl	800ccfc <xQueueGenericSend>
		osDelay(50);
 80010de:	2032      	movs	r0, #50	; 0x32
 80010e0:	f00b fb1a 	bl	800c718 <osDelay>
	{
 80010e4:	e697      	b.n	8000e16 <SecondTask+0x36>
 80010e6:	bf00      	nop
 80010e8:	33333333 	.word	0x33333333
 80010ec:	3fe33333 	.word	0x3fe33333
 80010f0:	20000b20 	.word	0x20000b20
 80010f4:	20000ae4 	.word	0x20000ae4
 80010f8:	20000ae8 	.word	0x20000ae8
 80010fc:	20000aec 	.word	0x20000aec
 8001100:	20000af0 	.word	0x20000af0
 8001104:	20000af8 	.word	0x20000af8
 8001108:	20000afc 	.word	0x20000afc
 800110c:	20000af4 	.word	0x20000af4
 8001110:	20000b00 	.word	0x20000b00
 8001114:	20000b04 	.word	0x20000b04
 8001118:	20000b08 	.word	0x20000b08
 800111c:	2000000c 	.word	0x2000000c
 8001120:	20000b0c 	.word	0x20000b0c
 8001124:	20000010 	.word	0x20000010
 8001128:	20000b10 	.word	0x20000b10
 800112c:	20000b1c 	.word	0x20000b1c
 8001130:	20008ec8 	.word	0x20008ec8

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b08e      	sub	sp, #56	; 0x38
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f002 fd46 	bl	8003bca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f85f 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f001 fa19 	bl	8002578 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001146:	f000 f917 	bl	8001378 <MX_ADC3_Init>
  MX_CRC_Init();
 800114a:	f000 fb51 	bl	80017f0 <MX_CRC_Init>
  MX_DCMI_Init();
 800114e:	f000 fb71 	bl	8001834 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001152:	f000 fba3 	bl	800189c <MX_DMA2D_Init>
  MX_FMC_Init();
 8001156:	f001 f963 	bl	8002420 <MX_FMC_Init>
  MX_LTDC_Init();
 800115a:	f000 fbd1 	bl	8001900 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800115e:	f000 fc51 	bl	8001a04 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001162:	f000 fc7b 	bl	8001a5c <MX_RTC_Init>
  MX_SAI2_Init();
 8001166:	f000 fd21 	bl	8001bac <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800116a:	f000 fdc7 	bl	8001cfc <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800116e:	f000 fde5 	bl	8001d3c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001172:	f000 fe13 	bl	8001d9c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001176:	f000 fe4f 	bl	8001e18 <MX_TIM1_Init>
  MX_TIM2_Init();
 800117a:	f000 fef9 	bl	8001f70 <MX_TIM2_Init>
  MX_TIM3_Init();
 800117e:	f000 ff6d 	bl	800205c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001182:	f000 ffe1 	bl	8002148 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001186:	f001 f855 	bl	8002234 <MX_TIM8_Init>
  MX_TIM12_Init();
 800118a:	f001 f8a5 	bl	80022d8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800118e:	f001 f8e7 	bl	8002360 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001192:	f001 f915 	bl	80023c0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001196:	f00a ff7b 	bl	800c090 <MX_FATFS_Init>
  MX_CAN1_Init();
 800119a:	f000 f93f 	bl	800141c <MX_CAN1_Init>
  MX_TouchGFX_Init();
 800119e:	f00e f82b 	bl	800f1f8 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <main+0xbc>)
 80011a4:	f107 041c 	add.w	r4, r7, #28
 80011a8:	461d      	mov	r5, r3
 80011aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f00b fa5f 	bl	800c680 <osThreadCreate>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <main+0xc0>)
 80011c6:	6013      	str	r3, [r2, #0]

  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <main+0xc4>)
 80011ca:	463c      	mov	r4, r7
 80011cc:	461d      	mov	r5, r3
 80011ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 80011da:	463b      	mov	r3, r7
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00b fa4e 	bl	800c680 <osThreadCreate>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <main+0xc8>)
 80011e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011ea:	f00b fa26 	bl	800c63a <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <main+0xba>
 80011f0:	08026474 	.word	0x08026474
 80011f4:	20000acc 	.word	0x20000acc
 80011f8:	08026498 	.word	0x08026498
 80011fc:	20000ad0 	.word	0x20000ad0

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0b4      	sub	sp, #208	; 0xd0
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800120a:	2230      	movs	r2, #48	; 0x30
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f024 fae7 	bl	80257e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	2284      	movs	r2, #132	; 0x84
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f024 fad8 	bl	80257e2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001232:	f005 f9ab 	bl	800658c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b4d      	ldr	r3, [pc, #308]	; (800136c <SystemClock_Config+0x16c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a4c      	ldr	r2, [pc, #304]	; (800136c <SystemClock_Config+0x16c>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b4a      	ldr	r3, [pc, #296]	; (800136c <SystemClock_Config+0x16c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800124e:	4b48      	ldr	r3, [pc, #288]	; (8001370 <SystemClock_Config+0x170>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a47      	ldr	r2, [pc, #284]	; (8001370 <SystemClock_Config+0x170>)
 8001254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <SystemClock_Config+0x170>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001266:	2309      	movs	r3, #9
 8001268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001274:	2301      	movs	r3, #1
 8001276:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001288:	2319      	movs	r3, #25
 800128a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800128e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800129c:	2309      	movs	r3, #9
 800129e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f005 fa92 	bl	80067d0 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80012b2:	f001 fb95 	bl	80029e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012b6:	f005 f979 	bl	80065ac <HAL_PWREx_EnableOverDrive>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012c0:	f001 fb8e 	bl	80029e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012ea:	2106      	movs	r1, #6
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fd13 	bl	8006d18 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80012f8:	f001 fb72 	bl	80029e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <SystemClock_Config+0x174>)
 80012fe:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001300:	2364      	movs	r3, #100	; 0x64
 8001302:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001310:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001314:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001316:	2305      	movs	r3, #5
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800131a:	2302      	movs	r3, #2
 800131c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800132a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001336:	2300      	movs	r3, #0
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800133a:	2300      	movs	r3, #0
 800133c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800133e:	2300      	movs	r3, #0
 8001340:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001342:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f005 fef7 	bl	8007148 <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x164>
  {
    Error_Handler();
 8001360:	f001 fb3e 	bl	80029e0 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	37d0      	adds	r7, #208	; 0xd0
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000
 8001374:	01b00868 	.word	0x01b00868

08001378 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800137e:	463b      	mov	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_ADC3_Init+0x98>)
 800138c:	4a21      	ldr	r2, [pc, #132]	; (8001414 <MX_ADC3_Init+0x9c>)
 800138e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_ADC3_Init+0x98>)
 8001392:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001396:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_ADC3_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_ADC3_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_ADC3_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_ADC3_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_ADC3_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_ADC3_Init+0x98>)
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <MX_ADC3_Init+0xa0>)
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_ADC3_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_ADC3_Init+0x98>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_ADC3_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_ADC3_Init+0x98>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <MX_ADC3_Init+0x98>)
 80013da:	f002 fc47 	bl	8003c6c <HAL_ADC_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80013e4:	f001 fafc 	bl	80029e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013e8:	2304      	movs	r3, #4
 80013ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_ADC3_Init+0x98>)
 80013fa:	f002 fc7b 	bl	8003cf4 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001404:	f001 faec 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000380 	.word	0x20000380
 8001414:	40012200 	.word	0x40012200
 8001418:	0f000001 	.word	0x0f000001

0800141c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001422:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <MX_CAN1_Init+0xc8>)
 8001424:	4a30      	ldr	r2, [pc, #192]	; (80014e8 <MX_CAN1_Init+0xcc>)
 8001426:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <MX_CAN1_Init+0xc8>)
 800142a:	2205      	movs	r2, #5
 800142c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <MX_CAN1_Init+0xc8>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <MX_CAN1_Init+0xc8>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800143a:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <MX_CAN1_Init+0xc8>)
 800143c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001440:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <MX_CAN1_Init+0xc8>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <MX_CAN1_Init+0xc8>)
 800144a:	2200      	movs	r2, #0
 800144c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <MX_CAN1_Init+0xc8>)
 8001450:	2200      	movs	r2, #0
 8001452:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <MX_CAN1_Init+0xc8>)
 8001456:	2200      	movs	r2, #0
 8001458:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_CAN1_Init+0xc8>)
 800145c:	2200      	movs	r2, #0
 800145e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <MX_CAN1_Init+0xc8>)
 8001462:	2200      	movs	r2, #0
 8001464:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_CAN1_Init+0xc8>)
 8001468:	2200      	movs	r2, #0
 800146a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800146c:	481d      	ldr	r0, [pc, #116]	; (80014e4 <MX_CAN1_Init+0xc8>)
 800146e:	f002 fe85 	bl	800417c <HAL_CAN_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001478:	f001 fab2 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001484:	2301      	movs	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80014a0:	230e      	movs	r3, #14
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	480e      	ldr	r0, [pc, #56]	; (80014e4 <MX_CAN1_Init+0xc8>)
 80014aa:	f002 ff63 	bl	8004374 <HAL_CAN_ConfigFilter>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80014b4:	f001 fa94 	bl	80029e0 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80014b8:	480a      	ldr	r0, [pc, #40]	; (80014e4 <MX_CAN1_Init+0xc8>)
 80014ba:	f003 f83b 	bl	8004534 <HAL_CAN_Start>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 80014c4:	f001 fa8c 	bl	80029e0 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80014c8:	2102      	movs	r1, #2
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_CAN1_Init+0xc8>)
 80014cc:	f003 f988 	bl	80047e0 <HAL_CAN_ActivateNotification>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 80014d6:	f001 fa83 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200003c8 	.word	0x200003c8
 80014e8:	40006400 	.word	0x40006400
 80014ec:	00000000 	.word	0x00000000

080014f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80014f8:	4b9b      	ldr	r3, [pc, #620]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80014fa:	4a9c      	ldr	r2, [pc, #624]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f003 f85c 	bl	80045bc <HAL_CAN_GetRxMessage>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800150a:	f001 fa69 	bl	80029e0 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x360) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800150e:	4b97      	ldr	r3, [pc, #604]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8001516:	d13a      	bne.n	800158e <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8001518:	4b94      	ldr	r3, [pc, #592]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d136      	bne.n	800158e <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8001520:	4b92      	ldr	r3, [pc, #584]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d132      	bne.n	800158e <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
  {
	 uint16_t rpm_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001528:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	4b8d      	ldr	r3, [pc, #564]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	83fb      	strh	r3, [r7, #30]
	 uint16_t tps_in = (RxData[4] << 8) | (RxData[5] << 0);
 800153c:	4b8a      	ldr	r3, [pc, #552]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b88      	ldr	r3, [pc, #544]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001546:	795b      	ldrb	r3, [r3, #5]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	83bb      	strh	r3, [r7, #28]

	 rpm = (int)rpm_in;
 8001550:	8bfb      	ldrh	r3, [r7, #30]
 8001552:	4a87      	ldr	r2, [pc, #540]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001554:	6013      	str	r3, [r2, #0]
	 if(rpm > max_rpm) {
 8001556:	4b86      	ldr	r3, [pc, #536]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b86      	ldr	r3, [pc, #536]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	dd03      	ble.n	800156a <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		 max_rpm = rpm;
 8001562:	4b83      	ldr	r3, [pc, #524]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a83      	ldr	r2, [pc, #524]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8001568:	6013      	str	r3, [r2, #0]
	 }
	 tps = (int)tps_in * 0.1;
 800156a:	8bbb      	ldrh	r3, [r7, #28]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f91b 	bl	80007a8 <__aeabi_i2d>
 8001572:	a37b      	add	r3, pc, #492	; (adr r3, 8001760 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7fe fe9a 	bl	80002b0 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fa02 	bl	800098c <__aeabi_d2iz>
 8001588:	4603      	mov	r3, r0
 800158a:	4a7b      	ldr	r2, [pc, #492]	; (8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800158c:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x370) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 800158e:	4b77      	ldr	r3, [pc, #476]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f5b3 7f5c 	cmp.w	r3, #880	; 0x370
 8001596:	d12d      	bne.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 8001598:	4b74      	ldr	r3, [pc, #464]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d129      	bne.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 80015a0:	4b72      	ldr	r3, [pc, #456]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d125      	bne.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
  {
	 uint16_t speed_in = (RxData[0] << 8) | (RxData[1] << 0);
 80015a8:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b6d      	ldr	r3, [pc, #436]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	837b      	strh	r3, [r7, #26]

	 speed = (int)speed_in * 0.1;
 80015bc:	8b7b      	ldrh	r3, [r7, #26]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff f8f2 	bl	80007a8 <__aeabi_i2d>
 80015c4:	a366      	add	r3, pc, #408	; (adr r3, 8001760 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe fe71 	bl	80002b0 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff f9d9 	bl	800098c <__aeabi_d2iz>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a67      	ldr	r2, [pc, #412]	; (800177c <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80015de:	6013      	str	r3, [r2, #0]
	 if(speed > max_speed) {
 80015e0:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dd03      	ble.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
		 max_speed = speed;
 80015ec:	4b63      	ldr	r3, [pc, #396]	; (800177c <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a63      	ldr	r2, [pc, #396]	; (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80015f2:	6013      	str	r3, [r2, #0]
	 }
  }

  if ((RxHeader.StdId == 0x3E0) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015f4:	4b5d      	ldr	r3, [pc, #372]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 80015fc:	d157      	bne.n	80016ae <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d153      	bne.n	80016ae <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
 8001606:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d14f      	bne.n	80016ae <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
  {
	 uint16_t clt_in = (RxData[0] << 8) | (RxData[1] << 0);
 800160e:	4b56      	ldr	r3, [pc, #344]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b54      	ldr	r3, [pc, #336]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001618:	785b      	ldrb	r3, [r3, #1]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21b      	sxth	r3, r3
 8001620:	833b      	strh	r3, [r7, #24]
	 uint16_t iat_in = (RxData[2] << 8) | (RxData[3] << 0);
 8001622:	4b51      	ldr	r3, [pc, #324]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001624:	789b      	ldrb	r3, [r3, #2]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b4f      	ldr	r3, [pc, #316]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800162c:	78db      	ldrb	r3, [r3, #3]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21b      	sxth	r3, r3
 8001634:	82fb      	strh	r3, [r7, #22]
	 uint16_t oil_tmp_in = (RxData[6] << 8) | (RxData[7] << 0);
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001638:	799b      	ldrb	r3, [r3, #6]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001640:	79db      	ldrb	r3, [r3, #7]
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21b      	sxth	r3, r3
 8001648:	82bb      	strh	r3, [r7, #20]

	 clt = ((int)clt_in - 2731) * 0.1;
 800164a:	8b3b      	ldrh	r3, [r7, #24]
 800164c:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff f8a9 	bl	80007a8 <__aeabi_i2d>
 8001656:	a342      	add	r3, pc, #264	; (adr r3, 8001760 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe fe28 	bl	80002b0 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff f990 	bl	800098c <__aeabi_d2iz>
 800166c:	4603      	mov	r3, r0
 800166e:	4a45      	ldr	r2, [pc, #276]	; (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001670:	6013      	str	r3, [r2, #0]
	 if(clt > max_clt){
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	dd03      	ble.n	8001686 <HAL_CAN_RxFifo0MsgPendingCallback+0x196>
		 max_clt = clt;
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a41      	ldr	r2, [pc, #260]	; (8001788 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001684:	6013      	str	r3, [r2, #0]
	 }

	 iat = ((int)iat_in - 2731) * 0.1;
 8001686:	8afb      	ldrh	r3, [r7, #22]
 8001688:	f6a3 23ab 	subw	r3, r3, #2731	; 0xaab
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff f88b 	bl	80007a8 <__aeabi_i2d>
 8001692:	a333      	add	r3, pc, #204	; (adr r3, 8001760 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe fe0a 	bl	80002b0 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff f972 	bl	800098c <__aeabi_d2iz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a38      	ldr	r2, [pc, #224]	; (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80016ac:	6013      	str	r3, [r2, #0]
//	 if(oil_tmp > max_oil_tmp){
//		 max_oil_tmp = oil_tmp;
//	 }
  }

  if ((RxHeader.StdId == 0x368) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80016b6:	d11d      	bne.n	80016f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d119      	bne.n	80016f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d115      	bne.n	80016f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
  {
	 uint16_t lambda_in = (RxData[0] << 8) | (RxData[1] << 0);
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b21b      	sxth	r3, r3
 80016da:	827b      	strh	r3, [r7, #18]
	 lambda = ((float)lambda_in)*0.001f;
 80016dc:	8a7b      	ldrh	r3, [r7, #18]
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>
 80016ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80016f0:	edc3 7a00 	vstr	s15, [r3]
   }

  if ((RxHeader.StdId == 0x372) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f240 3272 	movw	r2, #882	; 0x372
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d11f      	bne.n	8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d11b      	bne.n	8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	2b08      	cmp	r3, #8
 800170e:	d117      	bne.n	8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
  {
	 uint16_t batt_in = (RxData[0] << 8) | (RxData[1] << 0);
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	b21b      	sxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b21b      	sxth	r3, r3
 8001722:	823b      	strh	r3, [r7, #16]
	 float battery_voltage = ((float)batt_in)*0.1f;
 8001724:	8a3b      	ldrh	r3, [r7, #16]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001798 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001736:	edc7 7a03 	vstr	s15, [r7, #12]
	 batt_v = battery_voltage;
 800173a:	4a18      	ldr	r2, [pc, #96]	; (800179c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001748:	d146      	bne.n	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d142      	bne.n	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d13e      	bne.n	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>
 800175a:	e021      	b.n	80017a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>
 800175c:	f3af 8000 	nop.w
 8001760:	9999999a 	.word	0x9999999a
 8001764:	3fb99999 	.word	0x3fb99999
 8001768:	2000040c 	.word	0x2000040c
 800176c:	200003f0 	.word	0x200003f0
 8001770:	20000ae4 	.word	0x20000ae4
 8001774:	20000ae8 	.word	0x20000ae8
 8001778:	20000b1c 	.word	0x20000b1c
 800177c:	20000af8 	.word	0x20000af8
 8001780:	20000afc 	.word	0x20000afc
 8001784:	20000aec 	.word	0x20000aec
 8001788:	20000af0 	.word	0x20000af0
 800178c:	20000b10 	.word	0x20000b10
 8001790:	3a83126f 	.word	0x3a83126f
 8001794:	20000af4 	.word	0x20000af4
 8001798:	3dcccccd 	.word	0x3dcccccd
 800179c:	20000b20 	.word	0x20000b20
    {
  	 uint8_t lambda_targ_in = RxData[0];
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	72fb      	strb	r3, [r7, #11]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	4313      	orrs	r3, r2
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	813b      	strh	r3, [r7, #8]
  	 lambda_targ = ((float)lambda_targ_in) / 100;
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017c4:	eddf 6a07 	vldr	s13, [pc, #28]	; 80017e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>
 80017c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>)
 80017ce:	edc3 7a00 	vstr	s15, [r3]
  	 fuel_press = ((int)fuel_p_d);
 80017d2:	893b      	ldrh	r3, [r7, #8]
 80017d4:	4a05      	ldr	r2, [pc, #20]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80017d6:	6013      	str	r3, [r2, #0]
    }
}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000040c 	.word	0x2000040c
 80017e4:	42c80000 	.word	0x42c80000
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000b0c 	.word	0x20000b0c

080017f0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <MX_CRC_Init+0x3c>)
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <MX_CRC_Init+0x40>)
 80017f8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_CRC_Init+0x3c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <MX_CRC_Init+0x3c>)
 8001802:	2200      	movs	r2, #0
 8001804:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_CRC_Init+0x3c>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_CRC_Init+0x3c>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_CRC_Init+0x3c>)
 8001814:	2201      	movs	r2, #1
 8001816:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_CRC_Init+0x3c>)
 800181a:	f003 fb4b 	bl	8004eb4 <HAL_CRC_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001824:	f001 f8dc 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000414 	.word	0x20000414
 8001830:	40023000 	.word	0x40023000

08001834 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_DCMI_Init+0x60>)
 800183a:	4a17      	ldr	r2, [pc, #92]	; (8001898 <MX_DCMI_Init+0x64>)
 800183c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_DCMI_Init+0x60>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <MX_DCMI_Init+0x60>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_DCMI_Init+0x60>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <MX_DCMI_Init+0x60>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_DCMI_Init+0x60>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <MX_DCMI_Init+0x60>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_DCMI_Init+0x60>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <MX_DCMI_Init+0x60>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_DCMI_Init+0x60>)
 8001870:	2200      	movs	r2, #0
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <MX_DCMI_Init+0x60>)
 8001876:	2200      	movs	r2, #0
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_DCMI_Init+0x60>)
 800187c:	2200      	movs	r2, #0
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <MX_DCMI_Init+0x60>)
 8001882:	f003 fc01 	bl	8005088 <HAL_DCMI_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800188c:	f001 f8a8 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000438 	.word	0x20000438
 8001898:	50050000 	.word	0x50050000

0800189c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018a2:	4a16      	ldr	r2, [pc, #88]	; (80018fc <MX_DMA2D_Init+0x60>)
 80018a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018d2:	f003 fced 	bl	80052b0 <HAL_DMA2D_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80018dc:	f001 f880 	bl	80029e0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80018e0:	2101      	movs	r1, #1
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_DMA2D_Init+0x5c>)
 80018e4:	f003 ffae 	bl	8005844 <HAL_DMA2D_ConfigLayer>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80018ee:	f001 f877 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000488 	.word	0x20000488
 80018fc:	4002b000 	.word	0x4002b000

08001900 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2234      	movs	r2, #52	; 0x34
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f023 ff68 	bl	80257e2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001912:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001914:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <MX_LTDC_Init+0x100>)
 8001916:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001918:	4b38      	ldr	r3, [pc, #224]	; (80019fc <MX_LTDC_Init+0xfc>)
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <MX_LTDC_Init+0xfc>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001932:	2228      	movs	r2, #40	; 0x28
 8001934:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001936:	4b31      	ldr	r3, [pc, #196]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001938:	2209      	movs	r2, #9
 800193a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <MX_LTDC_Init+0xfc>)
 800193e:	2235      	movs	r2, #53	; 0x35
 8001940:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001944:	220b      	movs	r2, #11
 8001946:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001948:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <MX_LTDC_Init+0xfc>)
 800194a:	f240 2215 	movw	r2, #533	; 0x215
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001952:	f240 121b 	movw	r2, #283	; 0x11b
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <MX_LTDC_Init+0xfc>)
 800195a:	f240 2235 	movw	r2, #565	; 0x235
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001962:	f240 121d 	movw	r2, #285	; 0x11d
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <MX_LTDC_Init+0xfc>)
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <MX_LTDC_Init+0xfc>)
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001980:	481e      	ldr	r0, [pc, #120]	; (80019fc <MX_LTDC_Init+0xfc>)
 8001982:	f004 fa6b 	bl	8005e5c <HAL_LTDC_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800198c:	f001 f828 	bl	80029e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001994:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001998:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800199e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019a2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80019a4:	2301      	movs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80019a8:	23ff      	movs	r3, #255	; 0xff
 80019aa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019b6:	2305      	movs	r3, #5
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80019ba:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80019c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80019c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_LTDC_Init+0xfc>)
 80019e6:	f004 fbc1 	bl	800616c <HAL_LTDC_ConfigLayer>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80019f0:	f000 fff6 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	3738      	adds	r7, #56	; 0x38
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200004c8 	.word	0x200004c8
 8001a00:	40016800 	.word	0x40016800

08001a04 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <MX_QUADSPI_Init+0x54>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a10:	22ff      	movs	r2, #255	; 0xff
 8001a12:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_QUADSPI_Init+0x50>)
 8001a40:	f004 fe04 	bl	800664c <HAL_QSPI_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001a4a:	f000 ffc9 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000570 	.word	0x20000570
 8001a58:	a0001000 	.word	0xa0001000

08001a5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b092      	sub	sp, #72	; 0x48
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001a78:	463b      	mov	r3, r7
 8001a7a:	222c      	movs	r2, #44	; 0x2c
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f023 feaf 	bl	80257e2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001a84:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001a86:	4a48      	ldr	r2, [pc, #288]	; (8001ba8 <MX_RTC_Init+0x14c>)
 8001a88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a90:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001a92:	227f      	movs	r2, #127	; 0x7f
 8001a94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a96:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001a98:	22ff      	movs	r2, #255	; 0xff
 8001a9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a9c:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aa2:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aae:	483d      	ldr	r0, [pc, #244]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001ab0:	f006 f87a 	bl	8007ba8 <HAL_RTC_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001aba:	f000 ff91 	bl	80029e0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001adc:	2201      	movs	r2, #1
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4830      	ldr	r0, [pc, #192]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001ae2:	f006 f8dd 	bl	8007ca0 <HAL_RTC_SetTime>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001aec:	f000 ff78 	bl	80029e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4824      	ldr	r0, [pc, #144]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001b12:	f006 f983 	bl	8007e1c <HAL_RTC_SetDate>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001b1c:	f000 ff60 	bl	80029e0 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	2201      	movs	r2, #1
 8001b54:	4619      	mov	r1, r3
 8001b56:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001b58:	f006 fa08 	bl	8007f6c <HAL_RTC_SetAlarm>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001b62:	f000 ff3d 	bl	80029e0 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b72:	463b      	mov	r3, r7
 8001b74:	2201      	movs	r2, #1
 8001b76:	4619      	mov	r1, r3
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001b7a:	f006 f9f7 	bl	8007f6c <HAL_RTC_SetAlarm>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001b84:	f000 ff2c 	bl	80029e0 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001b88:	2202      	movs	r2, #2
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_RTC_Init+0x148>)
 8001b8e:	f006 fb77 	bl	8008280 <HAL_RTCEx_SetTimeStamp>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001b98:	f000 ff22 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3748      	adds	r7, #72	; 0x48
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200005bc 	.word	0x200005bc
 8001ba8:	40002800 	.word	0x40002800

08001bac <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001bb0:	4b4d      	ldr	r3, [pc, #308]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bb2:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <MX_SAI2_Init+0x140>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001bbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001bc2:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bce:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bd4:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bda:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001be0:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001be6:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001bec:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bee:	4a40      	ldr	r2, [pc, #256]	; (8001cf0 <MX_SAI2_Init+0x144>)
 8001bf0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001c10:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001c34:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001c40:	4829      	ldr	r0, [pc, #164]	; (8001ce8 <MX_SAI2_Init+0x13c>)
 8001c42:	f006 fb73 	bl	800832c <HAL_SAI_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001c4c:	f000 fec8 	bl	80029e0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001c50:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c52:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <MX_SAI2_Init+0x14c>)
 8001c54:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c56:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c5e:	2203      	movs	r2, #3
 8001c60:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c6e:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001cd4:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <MX_SAI2_Init+0x148>)
 8001cd6:	f006 fb29 	bl	800832c <HAL_SAI_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001ce0:	f000 fe7e 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200005dc 	.word	0x200005dc
 8001cec:	40015c04 	.word	0x40015c04
 8001cf0:	0002ee00 	.word	0x0002ee00
 8001cf4:	20000660 	.word	0x20000660
 8001cf8:	40015c24 	.word	0x40015c24

08001cfc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_SDMMC1_SD_Init+0x38>)
 8001d02:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <MX_SDMMC1_SD_Init+0x3c>)
 8001d04:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_SDMMC1_SD_Init+0x38>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_SDMMC1_SD_Init+0x38>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_SDMMC1_SD_Init+0x38>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_SDMMC1_SD_Init+0x38>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <MX_SDMMC1_SD_Init+0x38>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <MX_SDMMC1_SD_Init+0x38>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	200006e4 	.word	0x200006e4
 8001d38:	40012c00 	.word	0x40012c00

08001d3c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d42:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d46:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001d84:	4804      	ldr	r0, [pc, #16]	; (8001d98 <MX_SPDIFRX_Init+0x5c>)
 8001d86:	f007 fd69 	bl	800985c <HAL_SPDIFRX_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001d90:	f000 fe26 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000768 	.word	0x20000768

08001d9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <MX_SPI2_Init+0x78>)
 8001da4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001da8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001db6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001dba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001dea:	2207      	movs	r2, #7
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001df6:	2208      	movs	r2, #8
 8001df8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_SPI2_Init+0x74>)
 8001dfc:	f007 fd8a 	bl	8009914 <HAL_SPI_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e06:	f000 fdeb 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200007b4 	.word	0x200007b4
 8001e14:	40003800 	.word	0x40003800

08001e18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b09a      	sub	sp, #104	; 0x68
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	615a      	str	r2, [r3, #20]
 8001e4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	222c      	movs	r2, #44	; 0x2c
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f023 fcc5 	bl	80257e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001e5a:	4a44      	ldr	r2, [pc, #272]	; (8001f6c <MX_TIM1_Init+0x154>)
 8001e5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e5e:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001e6a:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7c:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e82:	4839      	ldr	r0, [pc, #228]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001e84:	f007 fdd8 	bl	8009a38 <HAL_TIM_Base_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e8e:	f000 fda7 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e96:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4832      	ldr	r0, [pc, #200]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001ea0:	f008 f882 	bl	8009fa8 <HAL_TIM_ConfigClockSource>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001eaa:	f000 fd99 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eae:	482e      	ldr	r0, [pc, #184]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001eb0:	f007 fe18 	bl	8009ae4 <HAL_TIM_PWM_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001eba:	f000 fd91 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4825      	ldr	r0, [pc, #148]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001ed2:	f008 fcef 	bl	800a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001edc:	f000 fd80 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee0:	2360      	movs	r3, #96	; 0x60
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4818      	ldr	r0, [pc, #96]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001f06:	f007 ff37 	bl	8009d78 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001f10:	f000 fd66 	bl	80029e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4807      	ldr	r0, [pc, #28]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001f4a:	f008 fd41 	bl	800a9d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001f54:	f000 fd44 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f58:	4803      	ldr	r0, [pc, #12]	; (8001f68 <MX_TIM1_Init+0x150>)
 8001f5a:	f001 fa3b 	bl	80033d4 <HAL_TIM_MspPostInit>

}
 8001f5e:	bf00      	nop
 8001f60:	3768      	adds	r7, #104	; 0x68
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000818 	.word	0x20000818
 8001f6c:	40010000 	.word	0x40010000

08001f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08e      	sub	sp, #56	; 0x38
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f90:	463b      	mov	r3, r7
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <MX_TIM2_Init+0xe8>)
 8001fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <MX_TIM2_Init+0xe8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <MX_TIM2_Init+0xe8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001fb6:	4b28      	ldr	r3, [pc, #160]	; (8002058 <MX_TIM2_Init+0xe8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <MX_TIM2_Init+0xe8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <MX_TIM2_Init+0xe8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fc8:	4823      	ldr	r0, [pc, #140]	; (8002058 <MX_TIM2_Init+0xe8>)
 8001fca:	f007 fd35 	bl	8009a38 <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fd4:	f000 fd04 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481c      	ldr	r0, [pc, #112]	; (8002058 <MX_TIM2_Init+0xe8>)
 8001fe6:	f007 ffdf 	bl	8009fa8 <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ff0:	f000 fcf6 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ff4:	4818      	ldr	r0, [pc, #96]	; (8002058 <MX_TIM2_Init+0xe8>)
 8001ff6:	f007 fd75 	bl	8009ae4 <HAL_TIM_PWM_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002000:	f000 fcee 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	4619      	mov	r1, r3
 8002012:	4811      	ldr	r0, [pc, #68]	; (8002058 <MX_TIM2_Init+0xe8>)
 8002014:	f008 fc4e 	bl	800a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800201e:	f000 fcdf 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002022:	2360      	movs	r3, #96	; 0x60
 8002024:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	4807      	ldr	r0, [pc, #28]	; (8002058 <MX_TIM2_Init+0xe8>)
 800203a:	f007 fe9d 	bl	8009d78 <HAL_TIM_PWM_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002044:	f000 fccc 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002048:	4803      	ldr	r0, [pc, #12]	; (8002058 <MX_TIM2_Init+0xe8>)
 800204a:	f001 f9c3 	bl	80033d4 <HAL_TIM_MspPostInit>

}
 800204e:	bf00      	nop
 8002050:	3738      	adds	r7, #56	; 0x38
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000858 	.word	0x20000858

0800205c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08e      	sub	sp, #56	; 0x38
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800207c:	463b      	mov	r3, r7
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	611a      	str	r2, [r3, #16]
 800208a:	615a      	str	r2, [r3, #20]
 800208c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800208e:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <MX_TIM3_Init+0xe4>)
 8002090:	4a2c      	ldr	r2, [pc, #176]	; (8002144 <MX_TIM3_Init+0xe8>)
 8002092:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <MX_TIM3_Init+0xe4>)
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209a:	4b29      	ldr	r3, [pc, #164]	; (8002140 <MX_TIM3_Init+0xe4>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <MX_TIM3_Init+0xe4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <MX_TIM3_Init+0xe4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <MX_TIM3_Init+0xe4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020b2:	4823      	ldr	r0, [pc, #140]	; (8002140 <MX_TIM3_Init+0xe4>)
 80020b4:	f007 fcc0 	bl	8009a38 <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020be:	f000 fc8f 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020cc:	4619      	mov	r1, r3
 80020ce:	481c      	ldr	r0, [pc, #112]	; (8002140 <MX_TIM3_Init+0xe4>)
 80020d0:	f007 ff6a 	bl	8009fa8 <HAL_TIM_ConfigClockSource>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80020da:	f000 fc81 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020de:	4818      	ldr	r0, [pc, #96]	; (8002140 <MX_TIM3_Init+0xe4>)
 80020e0:	f007 fd00 	bl	8009ae4 <HAL_TIM_PWM_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020ea:	f000 fc79 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	4810      	ldr	r0, [pc, #64]	; (8002140 <MX_TIM3_Init+0xe4>)
 80020fe:	f008 fbd9 	bl	800a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002108:	f000 fc6a 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210c:	2360      	movs	r3, #96	; 0x60
 800210e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	4619      	mov	r1, r3
 8002122:	4807      	ldr	r0, [pc, #28]	; (8002140 <MX_TIM3_Init+0xe4>)
 8002124:	f007 fe28 	bl	8009d78 <HAL_TIM_PWM_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800212e:	f000 fc57 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <MX_TIM3_Init+0xe4>)
 8002134:	f001 f94e 	bl	80033d4 <HAL_TIM_MspPostInit>

}
 8002138:	bf00      	nop
 800213a:	3738      	adds	r7, #56	; 0x38
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000898 	.word	0x20000898
 8002144:	40000400 	.word	0x40000400

08002148 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08e      	sub	sp, #56	; 0x38
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002168:	463b      	mov	r3, r7
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	611a      	str	r2, [r3, #16]
 8002176:	615a      	str	r2, [r3, #20]
 8002178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <MX_TIM5_Init+0xe4>)
 800217c:	4a2c      	ldr	r2, [pc, #176]	; (8002230 <MX_TIM5_Init+0xe8>)
 800217e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <MX_TIM5_Init+0xe4>)
 8002182:	2200      	movs	r2, #0
 8002184:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <MX_TIM5_Init+0xe4>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <MX_TIM5_Init+0xe4>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <MX_TIM5_Init+0xe4>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <MX_TIM5_Init+0xe4>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800219e:	4823      	ldr	r0, [pc, #140]	; (800222c <MX_TIM5_Init+0xe4>)
 80021a0:	f007 fc4a 	bl	8009a38 <HAL_TIM_Base_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80021aa:	f000 fc19 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b8:	4619      	mov	r1, r3
 80021ba:	481c      	ldr	r0, [pc, #112]	; (800222c <MX_TIM5_Init+0xe4>)
 80021bc:	f007 fef4 	bl	8009fa8 <HAL_TIM_ConfigClockSource>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80021c6:	f000 fc0b 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80021ca:	4818      	ldr	r0, [pc, #96]	; (800222c <MX_TIM5_Init+0xe4>)
 80021cc:	f007 fc8a 	bl	8009ae4 <HAL_TIM_PWM_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80021d6:	f000 fc03 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4619      	mov	r1, r3
 80021e8:	4810      	ldr	r0, [pc, #64]	; (800222c <MX_TIM5_Init+0xe4>)
 80021ea:	f008 fb63 	bl	800a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80021f4:	f000 fbf4 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f8:	2360      	movs	r3, #96	; 0x60
 80021fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002208:	463b      	mov	r3, r7
 800220a:	220c      	movs	r2, #12
 800220c:	4619      	mov	r1, r3
 800220e:	4807      	ldr	r0, [pc, #28]	; (800222c <MX_TIM5_Init+0xe4>)
 8002210:	f007 fdb2 	bl	8009d78 <HAL_TIM_PWM_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800221a:	f000 fbe1 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800221e:	4803      	ldr	r0, [pc, #12]	; (800222c <MX_TIM5_Init+0xe4>)
 8002220:	f001 f8d8 	bl	80033d4 <HAL_TIM_MspPostInit>

}
 8002224:	bf00      	nop
 8002226:	3738      	adds	r7, #56	; 0x38
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200008d8 	.word	0x200008d8
 8002230:	40000c00 	.word	0x40000c00

08002234 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223a:	f107 0310 	add.w	r3, r7, #16
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002252:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <MX_TIM8_Init+0x9c>)
 8002254:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <MX_TIM8_Init+0xa0>)
 8002256:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <MX_TIM8_Init+0x9c>)
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <MX_TIM8_Init+0x9c>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_TIM8_Init+0x9c>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <MX_TIM8_Init+0x9c>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <MX_TIM8_Init+0x9c>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <MX_TIM8_Init+0x9c>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800227c:	4814      	ldr	r0, [pc, #80]	; (80022d0 <MX_TIM8_Init+0x9c>)
 800227e:	f007 fbdb 	bl	8009a38 <HAL_TIM_Base_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002288:	f000 fbaa 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800228c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002290:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	4619      	mov	r1, r3
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <MX_TIM8_Init+0x9c>)
 800229a:	f007 fe85 	bl	8009fa8 <HAL_TIM_ConfigClockSource>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80022a4:	f000 fb9c 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_TIM8_Init+0x9c>)
 80022ba:	f008 fafb 	bl	800a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80022c4:	f000 fb8c 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000918 	.word	0x20000918
 80022d4:	40010400 	.word	0x40010400

080022d8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
 80022ec:	615a      	str	r2, [r3, #20]
 80022ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <MX_TIM12_Init+0x80>)
 80022f2:	4a1a      	ldr	r2, [pc, #104]	; (800235c <MX_TIM12_Init+0x84>)
 80022f4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <MX_TIM12_Init+0x80>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fc:	4b16      	ldr	r3, [pc, #88]	; (8002358 <MX_TIM12_Init+0x80>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <MX_TIM12_Init+0x80>)
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <MX_TIM12_Init+0x80>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <MX_TIM12_Init+0x80>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002314:	4810      	ldr	r0, [pc, #64]	; (8002358 <MX_TIM12_Init+0x80>)
 8002316:	f007 fbe5 	bl	8009ae4 <HAL_TIM_PWM_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002320:	f000 fb5e 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002324:	2360      	movs	r3, #96	; 0x60
 8002326:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	4807      	ldr	r0, [pc, #28]	; (8002358 <MX_TIM12_Init+0x80>)
 800233c:	f007 fd1c 	bl	8009d78 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002346:	f000 fb4b 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <MX_TIM12_Init+0x80>)
 800234c:	f001 f842 	bl	80033d4 <HAL_TIM_MspPostInit>

}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000958 	.word	0x20000958
 800235c:	40001800 	.word	0x40001800

08002360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <MX_USART1_UART_Init+0x5c>)
 8002368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 800236c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_USART1_UART_Init+0x58>)
 80023a4:	f008 fbb0 	bl	800ab08 <HAL_UART_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023ae:	f000 fb17 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000998 	.word	0x20000998
 80023bc:	40011000 	.word	0x40011000

080023c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023c6:	4a15      	ldr	r2, [pc, #84]	; (800241c <MX_USART6_UART_Init+0x5c>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_USART6_UART_Init+0x58>)
 80023fe:	2200      	movs	r2, #0
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_USART6_UART_Init+0x58>)
 8002404:	f008 fb80 	bl	800ab08 <HAL_UART_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800240e:	f000 fae7 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000a18 	.word	0x20000a18
 800241c:	40011400 	.word	0x40011400

08002420 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
 8002434:	615a      	str	r2, [r3, #20]
 8002436:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <MX_FMC_Init+0x14c>)
 800243a:	4a4d      	ldr	r2, [pc, #308]	; (8002570 <MX_FMC_Init+0x150>)
 800243c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800243e:	4b4b      	ldr	r3, [pc, #300]	; (800256c <MX_FMC_Init+0x14c>)
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002444:	4b49      	ldr	r3, [pc, #292]	; (800256c <MX_FMC_Init+0x14c>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800244a:	4b48      	ldr	r3, [pc, #288]	; (800256c <MX_FMC_Init+0x14c>)
 800244c:	2204      	movs	r2, #4
 800244e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <MX_FMC_Init+0x14c>)
 8002452:	2210      	movs	r2, #16
 8002454:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002456:	4b45      	ldr	r3, [pc, #276]	; (800256c <MX_FMC_Init+0x14c>)
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800245c:	4b43      	ldr	r3, [pc, #268]	; (800256c <MX_FMC_Init+0x14c>)
 800245e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002462:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002464:	4b41      	ldr	r3, [pc, #260]	; (800256c <MX_FMC_Init+0x14c>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <MX_FMC_Init+0x14c>)
 800246c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002470:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002472:	4b3e      	ldr	r3, [pc, #248]	; (800256c <MX_FMC_Init+0x14c>)
 8002474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800247a:	4b3c      	ldr	r3, [pc, #240]	; (800256c <MX_FMC_Init+0x14c>)
 800247c:	2200      	movs	r2, #0
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002480:	2302      	movs	r3, #2
 8002482:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002484:	2307      	movs	r3, #7
 8002486:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002488:	2304      	movs	r3, #4
 800248a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800248c:	2307      	movs	r3, #7
 800248e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002490:	2303      	movs	r3, #3
 8002492:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002494:	2302      	movs	r3, #2
 8002496:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	4832      	ldr	r0, [pc, #200]	; (800256c <MX_FMC_Init+0x14c>)
 80024a2:	f007 f95b 	bl	800975c <HAL_SDRAM_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80024ac:	f000 fa98 	bl	80029e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80024b4:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <MX_FMC_Init+0x154>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80024ba:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <MX_FMC_Init+0x154>)
 80024bc:	2210      	movs	r2, #16
 80024be:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80024c0:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <MX_FMC_Init+0x154>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80024c6:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <MX_FMC_Init+0x154>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80024cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d0:	4928      	ldr	r1, [pc, #160]	; (8002574 <MX_FMC_Init+0x154>)
 80024d2:	4826      	ldr	r0, [pc, #152]	; (800256c <MX_FMC_Init+0x14c>)
 80024d4:	f007 f976 	bl	80097c4 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80024d8:	2001      	movs	r0, #1
 80024da:	f001 fba3 	bl	8003c24 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80024de:	4b25      	ldr	r3, [pc, #148]	; (8002574 <MX_FMC_Init+0x154>)
 80024e0:	2202      	movs	r2, #2
 80024e2:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80024e4:	4b23      	ldr	r3, [pc, #140]	; (8002574 <MX_FMC_Init+0x154>)
 80024e6:	2210      	movs	r2, #16
 80024e8:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 80024ea:	4b22      	ldr	r3, [pc, #136]	; (8002574 <MX_FMC_Init+0x154>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 80024f0:	4b20      	ldr	r3, [pc, #128]	; (8002574 <MX_FMC_Init+0x154>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80024f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fa:	491e      	ldr	r1, [pc, #120]	; (8002574 <MX_FMC_Init+0x154>)
 80024fc:	481b      	ldr	r0, [pc, #108]	; (800256c <MX_FMC_Init+0x14c>)
 80024fe:	f007 f961 	bl	80097c4 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <MX_FMC_Init+0x154>)
 8002504:	2203      	movs	r2, #3
 8002506:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <MX_FMC_Init+0x154>)
 800250a:	2210      	movs	r2, #16
 800250c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <MX_FMC_Init+0x154>)
 8002510:	2208      	movs	r2, #8
 8002512:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <MX_FMC_Init+0x154>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800251a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800251e:	4915      	ldr	r1, [pc, #84]	; (8002574 <MX_FMC_Init+0x154>)
 8002520:	4812      	ldr	r0, [pc, #72]	; (800256c <MX_FMC_Init+0x14c>)
 8002522:	f007 f94f 	bl	80097c4 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8002526:	f44f 730c 	mov.w	r3, #560	; 0x230
 800252a:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <MX_FMC_Init+0x154>)
 800252e:	2204      	movs	r2, #4
 8002530:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <MX_FMC_Init+0x154>)
 8002534:	2210      	movs	r2, #16
 8002536:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <MX_FMC_Init+0x154>)
 800253a:	2201      	movs	r2, #1
 800253c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <MX_FMC_Init+0x154>)
 8002542:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002548:	490a      	ldr	r1, [pc, #40]	; (8002574 <MX_FMC_Init+0x154>)
 800254a:	4808      	ldr	r0, [pc, #32]	; (800256c <MX_FMC_Init+0x14c>)
 800254c:	f007 f93a 	bl	80097c4 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8002550:	f240 712b 	movw	r1, #1835	; 0x72b
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_FMC_Init+0x14c>)
 8002556:	f007 f960 	bl	800981a <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800255a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800255e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002562:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8002564:	bf00      	nop
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000a98 	.word	0x20000a98
 8002570:	a0000140 	.word	0xa0000140
 8002574:	20000ad4 	.word	0x20000ad4

08002578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b090      	sub	sp, #64	; 0x40
 800257c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800258e:	4baf      	ldr	r3, [pc, #700]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4aae      	ldr	r2, [pc, #696]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002594:	f043 0310 	orr.w	r3, r3, #16
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4bac      	ldr	r3, [pc, #688]	; (800284c <MX_GPIO_Init+0x2d4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025a6:	4ba9      	ldr	r3, [pc, #676]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4aa8      	ldr	r2, [pc, #672]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4ba6      	ldr	r3, [pc, #664]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	4ba3      	ldr	r3, [pc, #652]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4aa2      	ldr	r2, [pc, #648]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4ba0      	ldr	r3, [pc, #640]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d6:	4b9d      	ldr	r3, [pc, #628]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a9c      	ldr	r2, [pc, #624]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b9a      	ldr	r3, [pc, #616]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ee:	4b97      	ldr	r3, [pc, #604]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a96      	ldr	r2, [pc, #600]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b94      	ldr	r3, [pc, #592]	; (800284c <MX_GPIO_Init+0x2d4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	4b91      	ldr	r3, [pc, #580]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a90      	ldr	r2, [pc, #576]	; (800284c <MX_GPIO_Init+0x2d4>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b8e      	ldr	r3, [pc, #568]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800261e:	4b8b      	ldr	r3, [pc, #556]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a8a      	ldr	r2, [pc, #552]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b88      	ldr	r3, [pc, #544]	; (800284c <MX_GPIO_Init+0x2d4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002636:	4b85      	ldr	r3, [pc, #532]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a84      	ldr	r2, [pc, #528]	; (800284c <MX_GPIO_Init+0x2d4>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b82      	ldr	r3, [pc, #520]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800264e:	4b7f      	ldr	r3, [pc, #508]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a7e      	ldr	r2, [pc, #504]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b7c      	ldr	r3, [pc, #496]	; (800284c <MX_GPIO_Init+0x2d4>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002666:	4b79      	ldr	r3, [pc, #484]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a78      	ldr	r2, [pc, #480]	; (800284c <MX_GPIO_Init+0x2d4>)
 800266c:	f043 0320 	orr.w	r3, r3, #32
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b76      	ldr	r3, [pc, #472]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a72      	ldr	r2, [pc, #456]	; (800284c <MX_GPIO_Init+0x2d4>)
 8002684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b70      	ldr	r3, [pc, #448]	; (800284c <MX_GPIO_Init+0x2d4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002696:	2201      	movs	r2, #1
 8002698:	2120      	movs	r1, #32
 800269a:	486d      	ldr	r0, [pc, #436]	; (8002850 <MX_GPIO_Init+0x2d8>)
 800269c:	f003 fbc4 	bl	8005e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80026a0:	2200      	movs	r2, #0
 80026a2:	210c      	movs	r1, #12
 80026a4:	486b      	ldr	r0, [pc, #428]	; (8002854 <MX_GPIO_Init+0x2dc>)
 80026a6:	f003 fbbf 	bl	8005e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80026aa:	2201      	movs	r2, #1
 80026ac:	2108      	movs	r1, #8
 80026ae:	486a      	ldr	r0, [pc, #424]	; (8002858 <MX_GPIO_Init+0x2e0>)
 80026b0:	f003 fbba 	bl	8005e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ba:	4866      	ldr	r0, [pc, #408]	; (8002854 <MX_GPIO_Init+0x2dc>)
 80026bc:	f003 fbb4 	bl	8005e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80026c0:	2200      	movs	r2, #0
 80026c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026c6:	4865      	ldr	r0, [pc, #404]	; (800285c <MX_GPIO_Init+0x2e4>)
 80026c8:	f003 fbae 	bl	8005e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	21c8      	movs	r1, #200	; 0xc8
 80026d0:	4863      	ldr	r0, [pc, #396]	; (8002860 <MX_GPIO_Init+0x2e8>)
 80026d2:	f003 fba9 	bl	8005e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80026d6:	2308      	movs	r3, #8
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026da:	2300      	movs	r3, #0
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e6:	4619      	mov	r1, r3
 80026e8:	485e      	ldr	r0, [pc, #376]	; (8002864 <MX_GPIO_Init+0x2ec>)
 80026ea:	f003 f9d9 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80026ee:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002700:	230b      	movs	r3, #11
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002708:	4619      	mov	r1, r3
 800270a:	4855      	ldr	r0, [pc, #340]	; (8002860 <MX_GPIO_Init+0x2e8>)
 800270c:	f003 f9c8 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002710:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002722:	230a      	movs	r3, #10
 8002724:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800272a:	4619      	mov	r1, r3
 800272c:	484e      	ldr	r0, [pc, #312]	; (8002868 <MX_GPIO_Init+0x2f0>)
 800272e:	f003 f9b7 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002738:	2300      	movs	r3, #0
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002744:	4619      	mov	r1, r3
 8002746:	4849      	ldr	r0, [pc, #292]	; (800286c <MX_GPIO_Init+0x2f4>)
 8002748:	f003 f9aa 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800274c:	2340      	movs	r3, #64	; 0x40
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002750:	4b47      	ldr	r3, [pc, #284]	; (8002870 <MX_GPIO_Init+0x2f8>)
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800275c:	4619      	mov	r1, r3
 800275e:	483c      	ldr	r0, [pc, #240]	; (8002850 <MX_GPIO_Init+0x2d8>)
 8002760:	f003 f99e 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002764:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002776:	230a      	movs	r3, #10
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800277e:	4619      	mov	r1, r3
 8002780:	483c      	ldr	r0, [pc, #240]	; (8002874 <MX_GPIO_Init+0x2fc>)
 8002782:	f003 f98d 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002786:	2320      	movs	r3, #32
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279a:	4619      	mov	r1, r3
 800279c:	482c      	ldr	r0, [pc, #176]	; (8002850 <MX_GPIO_Init+0x2d8>)
 800279e:	f003 f97f 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80027a2:	f241 030c 	movw	r3, #4108	; 0x100c
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b8:	4619      	mov	r1, r3
 80027ba:	4826      	ldr	r0, [pc, #152]	; (8002854 <MX_GPIO_Init+0x2dc>)
 80027bc:	f003 f970 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80027c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c6:	2300      	movs	r3, #0
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d2:	4619      	mov	r1, r3
 80027d4:	4828      	ldr	r0, [pc, #160]	; (8002878 <MX_GPIO_Init+0x300>)
 80027d6:	f003 f963 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80027da:	2308      	movs	r3, #8
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027de:	2301      	movs	r3, #1
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80027ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ee:	4619      	mov	r1, r3
 80027f0:	4819      	ldr	r0, [pc, #100]	; (8002858 <MX_GPIO_Init+0x2e0>)
 80027f2:	f003 f955 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80027f6:	2310      	movs	r3, #16
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fa:	2300      	movs	r3, #0
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002806:	4619      	mov	r1, r3
 8002808:	4811      	ldr	r0, [pc, #68]	; (8002850 <MX_GPIO_Init+0x2d8>)
 800280a:	f003 f949 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800280e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002814:	2300      	movs	r3, #0
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800281c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002820:	4619      	mov	r1, r3
 8002822:	480e      	ldr	r0, [pc, #56]	; (800285c <MX_GPIO_Init+0x2e4>)
 8002824:	f003 f93c 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282e:	2301      	movs	r3, #1
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800283a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800283e:	4619      	mov	r1, r3
 8002840:	4806      	ldr	r0, [pc, #24]	; (800285c <MX_GPIO_Init+0x2e4>)
 8002842:	f003 f92d 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800284a:	e017      	b.n	800287c <MX_GPIO_Init+0x304>
 800284c:	40023800 	.word	0x40023800
 8002850:	40020c00 	.word	0x40020c00
 8002854:	40022000 	.word	0x40022000
 8002858:	40022800 	.word	0x40022800
 800285c:	40021c00 	.word	0x40021c00
 8002860:	40021800 	.word	0x40021800
 8002864:	40021000 	.word	0x40021000
 8002868:	40020400 	.word	0x40020400
 800286c:	40022400 	.word	0x40022400
 8002870:	10120000 	.word	0x10120000
 8002874:	40020000 	.word	0x40020000
 8002878:	40020800 	.word	0x40020800
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800287e:	4b44      	ldr	r3, [pc, #272]	; (8002990 <MX_GPIO_Init+0x418>)
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288a:	4619      	mov	r1, r3
 800288c:	4841      	ldr	r0, [pc, #260]	; (8002994 <MX_GPIO_Init+0x41c>)
 800288e:	f003 f907 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002892:	2310      	movs	r3, #16
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028a2:	230a      	movs	r3, #10
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028aa:	4619      	mov	r1, r3
 80028ac:	483a      	ldr	r0, [pc, #232]	; (8002998 <MX_GPIO_Init+0x420>)
 80028ae:	f003 f8f7 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80028b2:	23c8      	movs	r3, #200	; 0xc8
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c6:	4619      	mov	r1, r3
 80028c8:	4834      	ldr	r0, [pc, #208]	; (800299c <MX_GPIO_Init+0x424>)
 80028ca:	f003 f8e9 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80028ce:	2305      	movs	r3, #5
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028de:	230a      	movs	r3, #10
 80028e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e6:	4619      	mov	r1, r3
 80028e8:	482d      	ldr	r0, [pc, #180]	; (80029a0 <MX_GPIO_Init+0x428>)
 80028ea:	f003 f8d9 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80028ee:	2332      	movs	r3, #50	; 0x32
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028fe:	230b      	movs	r3, #11
 8002900:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002906:	4619      	mov	r1, r3
 8002908:	4825      	ldr	r0, [pc, #148]	; (80029a0 <MX_GPIO_Init+0x428>)
 800290a:	f003 f8c9 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800290e:	2304      	movs	r3, #4
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002912:	2300      	movs	r3, #0
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291e:	4619      	mov	r1, r3
 8002920:	481e      	ldr	r0, [pc, #120]	; (800299c <MX_GPIO_Init+0x424>)
 8002922:	f003 f8bd 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002926:	2386      	movs	r3, #134	; 0x86
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002936:	230b      	movs	r3, #11
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800293e:	4619      	mov	r1, r3
 8002940:	4818      	ldr	r0, [pc, #96]	; (80029a4 <MX_GPIO_Init+0x42c>)
 8002942:	f003 f8ad 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002946:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800294c:	2312      	movs	r3, #18
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002950:	2301      	movs	r3, #1
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002958:	2304      	movs	r3, #4
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800295c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002960:	4619      	mov	r1, r3
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <MX_GPIO_Init+0x420>)
 8002964:	f003 f89c 	bl	8005aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002968:	2328      	movs	r3, #40	; 0x28
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002974:	2303      	movs	r3, #3
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002978:	230a      	movs	r3, #10
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002980:	4619      	mov	r1, r3
 8002982:	4808      	ldr	r0, [pc, #32]	; (80029a4 <MX_GPIO_Init+0x42c>)
 8002984:	f003 f88c 	bl	8005aa0 <HAL_GPIO_Init>

}
 8002988:	bf00      	nop
 800298a:	3740      	adds	r7, #64	; 0x40
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	10120000 	.word	0x10120000
 8002994:	40022000 	.word	0x40022000
 8002998:	40021c00 	.word	0x40021c00
 800299c:	40021800 	.word	0x40021800
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020000 	.word	0x40020000

080029a8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 80029b0:	f00c fc28 	bl	800f204 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80029b4:	2001      	movs	r0, #1
 80029b6:	f009 feaf 	bl	800c718 <osDelay>
 80029ba:	e7fb      	b.n	80029b4 <StartDefaultTask+0xc>

080029bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029ce:	f001 f909 	bl	8003be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40001000 	.word	0x40001000

080029e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_MspInit+0x4c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <HAL_MspInit+0x4c>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_MspInit+0x4c>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_MspInit+0x4c>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_MspInit+0x4c>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_MspInit+0x4c>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	210f      	movs	r1, #15
 8002a2a:	f06f 0001 	mvn.w	r0, #1
 8002a2e:	f002 fa09 	bl	8004e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800

08002a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <HAL_ADC_MspInit+0xa4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d13c      	bne.n	8002adc <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a62:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_ADC_MspInit+0xa8>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a20      	ldr	r2, [pc, #128]	; (8002ae8 <HAL_ADC_MspInit+0xa8>)
 8002a68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_ADC_MspInit+0xa8>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_ADC_MspInit+0xa8>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ae8 <HAL_ADC_MspInit+0xa8>)
 8002a80:	f043 0320 	orr.w	r3, r3, #32
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_ADC_MspInit+0xa8>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_ADC_MspInit+0xa8>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <HAL_ADC_MspInit+0xa8>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_ADC_MspInit+0xa8>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002aaa:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002aae:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4619      	mov	r1, r3
 8002abe:	480b      	ldr	r0, [pc, #44]	; (8002aec <HAL_ADC_MspInit+0xac>)
 8002ac0:	f002 ffee 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4806      	ldr	r0, [pc, #24]	; (8002af0 <HAL_ADC_MspInit+0xb0>)
 8002ad8:	f002 ffe2 	bl	8005aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002adc:	bf00      	nop
 8002ade:	3728      	adds	r7, #40	; 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40012200 	.word	0x40012200
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40021400 	.word	0x40021400
 8002af0:	40020000 	.word	0x40020000

08002af4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_CAN_MspInit+0x8c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d130      	bne.n	8002b78 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_CAN_MspInit+0x90>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_CAN_MspInit+0x90>)
 8002b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <HAL_CAN_MspInit+0x90>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_CAN_MspInit+0x90>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <HAL_CAN_MspInit+0x90>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_CAN_MspInit+0x90>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002b58:	2309      	movs	r3, #9
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	4809      	ldr	r0, [pc, #36]	; (8002b88 <HAL_CAN_MspInit+0x94>)
 8002b64:	f002 ff9c 	bl	8005aa0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2105      	movs	r1, #5
 8002b6c:	2014      	movs	r0, #20
 8002b6e:	f002 f969 	bl	8004e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002b72:	2014      	movs	r0, #20
 8002b74:	f002 f982 	bl	8004e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002b78:	bf00      	nop
 8002b7a:	3728      	adds	r7, #40	; 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40006400 	.word	0x40006400
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40020400 	.word	0x40020400

08002b8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_CRC_MspInit+0x38>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_CRC_MspInit+0x3c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_CRC_MspInit+0x3c>)
 8002ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <HAL_CRC_MspInit+0x3c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40023000 	.word	0x40023000
 8002bc8:	40023800 	.word	0x40023800

08002bcc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08e      	sub	sp, #56	; 0x38
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a50      	ldr	r2, [pc, #320]	; (8002d2c <HAL_DCMI_MspInit+0x160>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	f040 809a 	bne.w	8002d24 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf4:	4a4e      	ldr	r2, [pc, #312]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6353      	str	r3, [r2, #52]	; 0x34
 8002bfc:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c08:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	4a48      	ldr	r2, [pc, #288]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c0e:	f043 0310 	orr.w	r3, r3, #16
 8002c12:	6313      	str	r3, [r2, #48]	; 0x30
 8002c14:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c20:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	4a42      	ldr	r2, [pc, #264]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c26:	f043 0308 	orr.w	r3, r3, #8
 8002c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2c:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c38:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	4a3c      	ldr	r2, [pc, #240]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c42:	6313      	str	r3, [r2, #48]	; 0x30
 8002c44:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c50:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	4a36      	ldr	r2, [pc, #216]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5c:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	4a30      	ldr	r2, [pc, #192]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6313      	str	r3, [r2, #48]	; 0x30
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_DCMI_MspInit+0x164>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002c80:	2360      	movs	r3, #96	; 0x60
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c90:	230d      	movs	r3, #13
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4826      	ldr	r0, [pc, #152]	; (8002d34 <HAL_DCMI_MspInit+0x168>)
 8002c9c:	f002 ff00 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cb0:	230d      	movs	r3, #13
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb8:	4619      	mov	r1, r3
 8002cba:	481f      	ldr	r0, [pc, #124]	; (8002d38 <HAL_DCMI_MspInit+0x16c>)
 8002cbc:	f002 fef0 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cd2:	230d      	movs	r3, #13
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4817      	ldr	r0, [pc, #92]	; (8002d3c <HAL_DCMI_MspInit+0x170>)
 8002cde:	f002 fedf 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002ce2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002cf4:	230d      	movs	r3, #13
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4810      	ldr	r0, [pc, #64]	; (8002d40 <HAL_DCMI_MspInit+0x174>)
 8002d00:	f002 fece 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002d04:	2350      	movs	r3, #80	; 0x50
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002d14:	230d      	movs	r3, #13
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4809      	ldr	r0, [pc, #36]	; (8002d44 <HAL_DCMI_MspInit+0x178>)
 8002d20:	f002 febe 	bl	8005aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002d24:	bf00      	nop
 8002d26:	3738      	adds	r7, #56	; 0x38
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	50050000 	.word	0x50050000
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021800 	.word	0x40021800
 8002d40:	40021c00 	.word	0x40021c00
 8002d44:	40020000 	.word	0x40020000

08002d48 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <HAL_DMA2D_MspInit+0x44>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d113      	bne.n	8002d82 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_DMA2D_MspInit+0x48>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <HAL_DMA2D_MspInit+0x48>)
 8002d60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_DMA2D_MspInit+0x48>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2105      	movs	r1, #5
 8002d76:	205a      	movs	r0, #90	; 0x5a
 8002d78:	f002 f864 	bl	8004e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002d7c:	205a      	movs	r0, #90	; 0x5a
 8002d7e:	f002 f87d 	bl	8004e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	4002b000 	.word	0x4002b000
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <HAL_DMA2D_MspDeInit+0x2c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d108      	bne.n	8002db8 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_DMA2D_MspDeInit+0x30>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <HAL_DMA2D_MspDeInit+0x30>)
 8002dac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002db2:	205a      	movs	r0, #90	; 0x5a
 8002db4:	f002 f870 	bl	8004e98 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	4002b000 	.word	0x4002b000
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08e      	sub	sp, #56	; 0x38
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a55      	ldr	r2, [pc, #340]	; (8002f3c <HAL_LTDC_MspInit+0x174>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	f040 80a3 	bne.w	8002f32 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002dec:	4b54      	ldr	r3, [pc, #336]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df6:	6453      	str	r3, [r2, #68]	; 0x44
 8002df8:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e04:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a4d      	ldr	r2, [pc, #308]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e0a:	f043 0310 	orr.w	r3, r3, #16
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b4b      	ldr	r3, [pc, #300]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e1c:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	4a47      	ldr	r2, [pc, #284]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e26:	6313      	str	r3, [r2, #48]	; 0x30
 8002e28:	4b45      	ldr	r3, [pc, #276]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e34:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	4a41      	ldr	r2, [pc, #260]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e40:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e4c:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	4a3b      	ldr	r2, [pc, #236]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e56:	6313      	str	r3, [r2, #48]	; 0x30
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_LTDC_MspInit+0x178>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e8c:	230e      	movs	r3, #14
 8002e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e94:	4619      	mov	r1, r3
 8002e96:	482b      	ldr	r0, [pc, #172]	; (8002f44 <HAL_LTDC_MspInit+0x17c>)
 8002e98:	f002 fe02 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002e9c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eae:	230e      	movs	r3, #14
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4823      	ldr	r0, [pc, #140]	; (8002f48 <HAL_LTDC_MspInit+0x180>)
 8002eba:	f002 fdf1 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002ebe:	23f7      	movs	r3, #247	; 0xf7
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ece:	230e      	movs	r3, #14
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	481c      	ldr	r0, [pc, #112]	; (8002f4c <HAL_LTDC_MspInit+0x184>)
 8002eda:	f002 fde1 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ef0:	2309      	movs	r3, #9
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4815      	ldr	r0, [pc, #84]	; (8002f50 <HAL_LTDC_MspInit+0x188>)
 8002efc:	f002 fdd0 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002f00:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f12:	230e      	movs	r3, #14
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480d      	ldr	r0, [pc, #52]	; (8002f54 <HAL_LTDC_MspInit+0x18c>)
 8002f1e:	f002 fdbf 	bl	8005aa0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2105      	movs	r1, #5
 8002f26:	2058      	movs	r0, #88	; 0x58
 8002f28:	f001 ff8c 	bl	8004e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002f2c:	2058      	movs	r0, #88	; 0x58
 8002f2e:	f001 ffa5 	bl	8004e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f32:	bf00      	nop
 8002f34:	3738      	adds	r7, #56	; 0x38
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40016800 	.word	0x40016800
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40022400 	.word	0x40022400
 8002f4c:	40022800 	.word	0x40022800
 8002f50:	40021800 	.word	0x40021800
 8002f54:	40022000 	.word	0x40022000

08002f58 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	; 0x30
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a3b      	ldr	r2, [pc, #236]	; (8003064 <HAL_QSPI_MspInit+0x10c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d170      	bne.n	800305c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6393      	str	r3, [r2, #56]	; 0x38
 8002f86:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f92:	4b35      	ldr	r3, [pc, #212]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a34      	ldr	r2, [pc, #208]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002f98:	f043 0310 	orr.w	r3, r3, #16
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b32      	ldr	r3, [pc, #200]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a2e      	ldr	r2, [pc, #184]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fc2:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a28      	ldr	r2, [pc, #160]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b26      	ldr	r3, [pc, #152]	; (8003068 <HAL_QSPI_MspInit+0x110>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002fea:	2309      	movs	r3, #9
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 031c 	add.w	r3, r7, #28
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	481d      	ldr	r0, [pc, #116]	; (800306c <HAL_QSPI_MspInit+0x114>)
 8002ff6:	f002 fd53 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002ffa:	2340      	movs	r3, #64	; 0x40
 8002ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003006:	2303      	movs	r3, #3
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800300a:	230a      	movs	r3, #10
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	4619      	mov	r1, r3
 8003014:	4816      	ldr	r0, [pc, #88]	; (8003070 <HAL_QSPI_MspInit+0x118>)
 8003016:	f002 fd43 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800301a:	2304      	movs	r3, #4
 800301c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003026:	2303      	movs	r3, #3
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800302a:	2309      	movs	r3, #9
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302e:	f107 031c 	add.w	r3, r7, #28
 8003032:	4619      	mov	r1, r3
 8003034:	480e      	ldr	r0, [pc, #56]	; (8003070 <HAL_QSPI_MspInit+0x118>)
 8003036:	f002 fd33 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800303a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003048:	2303      	movs	r3, #3
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800304c:	2309      	movs	r3, #9
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003050:	f107 031c 	add.w	r3, r7, #28
 8003054:	4619      	mov	r1, r3
 8003056:	4807      	ldr	r0, [pc, #28]	; (8003074 <HAL_QSPI_MspInit+0x11c>)
 8003058:	f002 fd22 	bl	8005aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800305c:	bf00      	nop
 800305e:	3730      	adds	r7, #48	; 0x30
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	a0001000 	.word	0xa0001000
 8003068:	40023800 	.word	0x40023800
 800306c:	40021000 	.word	0x40021000
 8003070:	40020400 	.word	0x40020400
 8003074:	40020c00 	.word	0x40020c00

08003078 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <HAL_RTC_MspInit+0x2c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d105      	bne.n	8003096 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <HAL_RTC_MspInit+0x30>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a06      	ldr	r2, [pc, #24]	; (80030a8 <HAL_RTC_MspInit+0x30>)
 8003090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40002800 	.word	0x40002800
 80030a8:	40023800 	.word	0x40023800

080030ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_SD_MspInit+0xb4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d144      	bne.n	8003158 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80030ce:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_SD_MspInit+0xb8>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4a24      	ldr	r2, [pc, #144]	; (8003164 <HAL_SD_MspInit+0xb8>)
 80030d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030d8:	6453      	str	r3, [r2, #68]	; 0x44
 80030da:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_SD_MspInit+0xb8>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e6:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_SD_MspInit+0xb8>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_SD_MspInit+0xb8>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_SD_MspInit+0xb8>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_SD_MspInit+0xb8>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_SD_MspInit+0xb8>)
 8003104:	f043 0308 	orr.w	r3, r3, #8
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_SD_MspInit+0xb8>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8003116:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800311a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003124:	2303      	movs	r3, #3
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003128:	230c      	movs	r3, #12
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	4619      	mov	r1, r3
 8003132:	480d      	ldr	r0, [pc, #52]	; (8003168 <HAL_SD_MspInit+0xbc>)
 8003134:	f002 fcb4 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003138:	2304      	movs	r3, #4
 800313a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313c:	2302      	movs	r3, #2
 800313e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003144:	2303      	movs	r3, #3
 8003146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003148:	230c      	movs	r3, #12
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4619      	mov	r1, r3
 8003152:	4806      	ldr	r0, [pc, #24]	; (800316c <HAL_SD_MspInit+0xc0>)
 8003154:	f002 fca4 	bl	8005aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003158:	bf00      	nop
 800315a:	3728      	adds	r7, #40	; 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40023800 	.word	0x40023800
 8003168:	40020800 	.word	0x40020800
 800316c:	40020c00 	.word	0x40020c00

08003170 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003190:	d127      	bne.n	80031e2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a15      	ldr	r2, [pc, #84]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <HAL_SPDIFRX_MspInit+0x7c>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80031d2:	2308      	movs	r3, #8
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	4619      	mov	r1, r3
 80031dc:	4804      	ldr	r0, [pc, #16]	; (80031f0 <HAL_SPDIFRX_MspInit+0x80>)
 80031de:	f002 fc5f 	bl	8005aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80031e2:	bf00      	nop
 80031e4:	3728      	adds	r7, #40	; 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020c00 	.word	0x40020c00

080031f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <HAL_SPI_MspInit+0xb4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d144      	bne.n	80032a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003216:	4b25      	ldr	r3, [pc, #148]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a24      	ldr	r2, [pc, #144]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
 8003222:	4b22      	ldr	r3, [pc, #136]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800322e:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a18      	ldr	r2, [pc, #96]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_SPI_MspInit+0xb8>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800325e:	2302      	movs	r3, #2
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800326e:	2305      	movs	r3, #5
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <HAL_SPI_MspInit+0xbc>)
 800327a:	f002 fc11 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800327e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2302      	movs	r3, #2
 8003286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328c:	2300      	movs	r3, #0
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003290:	2305      	movs	r3, #5
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	4619      	mov	r1, r3
 800329a:	4806      	ldr	r0, [pc, #24]	; (80032b4 <HAL_SPI_MspInit+0xc0>)
 800329c:	f002 fc00 	bl	8005aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032a0:	bf00      	nop
 80032a2:	3728      	adds	r7, #40	; 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40003800 	.word	0x40003800
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40020400 	.word	0x40020400

080032b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a2e      	ldr	r2, [pc, #184]	; (8003380 <HAL_TIM_Base_MspInit+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10c      	bne.n	80032e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ca:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6453      	str	r3, [r2, #68]	; 0x44
 80032d6:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80032e2:	e046      	b.n	8003372 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ec:	d10c      	bne.n	8003308 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ee:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]
}
 8003306:	e034      	b.n	8003372 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_TIM_Base_MspInit+0xd0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10c      	bne.n	800332c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]
}
 800332a:	e022      	b.n	8003372 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_TIM_Base_MspInit+0xd4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10c      	bne.n	8003350 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
}
 800334e:	e010      	b.n	8003372 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <HAL_TIM_Base_MspInit+0xd8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10b      	bne.n	8003372 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	4a09      	ldr	r2, [pc, #36]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 8003360:	f043 0302 	orr.w	r3, r3, #2
 8003364:	6453      	str	r3, [r2, #68]	; 0x44
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_TIM_Base_MspInit+0xcc>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
}
 8003372:	bf00      	nop
 8003374:	3724      	adds	r7, #36	; 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40010000 	.word	0x40010000
 8003384:	40023800 	.word	0x40023800
 8003388:	40000400 	.word	0x40000400
 800338c:	40000c00 	.word	0x40000c00
 8003390:	40010400 	.word	0x40010400

08003394 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_TIM_PWM_MspInit+0x38>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10b      	bne.n	80033be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80033ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40001800 	.word	0x40001800
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 031c 	add.w	r3, r7, #28
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a56      	ldr	r2, [pc, #344]	; (800354c <HAL_TIM_MspPostInit+0x178>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d11d      	bne.n	8003432 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	4b56      	ldr	r3, [pc, #344]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a55      	ldr	r2, [pc, #340]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800340e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003414:	2302      	movs	r3, #2
 8003416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	2300      	movs	r3, #0
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003420:	2301      	movs	r3, #1
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003424:	f107 031c 	add.w	r3, r7, #28
 8003428:	4619      	mov	r1, r3
 800342a:	484a      	ldr	r0, [pc, #296]	; (8003554 <HAL_TIM_MspPostInit+0x180>)
 800342c:	f002 fb38 	bl	8005aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003430:	e087      	b.n	8003542 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d11d      	bne.n	8003478 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343c:	4b44      	ldr	r3, [pc, #272]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	4a43      	ldr	r2, [pc, #268]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6313      	str	r3, [r2, #48]	; 0x30
 8003448:	4b41      	ldr	r3, [pc, #260]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	2302      	movs	r3, #2
 800345c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003462:	2300      	movs	r3, #0
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003466:	2301      	movs	r3, #1
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800346a:	f107 031c 	add.w	r3, r7, #28
 800346e:	4619      	mov	r1, r3
 8003470:	4838      	ldr	r0, [pc, #224]	; (8003554 <HAL_TIM_MspPostInit+0x180>)
 8003472:	f002 fb15 	bl	8005aa0 <HAL_GPIO_Init>
}
 8003476:	e064      	b.n	8003542 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a36      	ldr	r2, [pc, #216]	; (8003558 <HAL_TIM_MspPostInit+0x184>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d11c      	bne.n	80034bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003482:	4b33      	ldr	r3, [pc, #204]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a32      	ldr	r2, [pc, #200]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b30      	ldr	r3, [pc, #192]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800349a:	2310      	movs	r3, #16
 800349c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349e:	2302      	movs	r3, #2
 80034a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034aa:	2302      	movs	r3, #2
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80034ae:	f107 031c 	add.w	r3, r7, #28
 80034b2:	4619      	mov	r1, r3
 80034b4:	4829      	ldr	r0, [pc, #164]	; (800355c <HAL_TIM_MspPostInit+0x188>)
 80034b6:	f002 faf3 	bl	8005aa0 <HAL_GPIO_Init>
}
 80034ba:	e042      	b.n	8003542 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a27      	ldr	r2, [pc, #156]	; (8003560 <HAL_TIM_MspPostInit+0x18c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d11c      	bne.n	8003500 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034c6:	4b22      	ldr	r3, [pc, #136]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a21      	ldr	r2, [pc, #132]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80034de:	2301      	movs	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034ee:	2302      	movs	r3, #2
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80034f2:	f107 031c 	add.w	r3, r7, #28
 80034f6:	4619      	mov	r1, r3
 80034f8:	481a      	ldr	r0, [pc, #104]	; (8003564 <HAL_TIM_MspPostInit+0x190>)
 80034fa:	f002 fad1 	bl	8005aa0 <HAL_GPIO_Init>
}
 80034fe:	e020      	b.n	8003542 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_TIM_MspPostInit+0x194>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d11b      	bne.n	8003542 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a10      	ldr	r2, [pc, #64]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 8003510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <HAL_TIM_MspPostInit+0x17c>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003522:	2340      	movs	r3, #64	; 0x40
 8003524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2300      	movs	r3, #0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003532:	2309      	movs	r3, #9
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003536:	f107 031c 	add.w	r3, r7, #28
 800353a:	4619      	mov	r1, r3
 800353c:	480b      	ldr	r0, [pc, #44]	; (800356c <HAL_TIM_MspPostInit+0x198>)
 800353e:	f002 faaf 	bl	8005aa0 <HAL_GPIO_Init>
}
 8003542:	bf00      	nop
 8003544:	3730      	adds	r7, #48	; 0x30
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40023800 	.word	0x40023800
 8003554:	40020000 	.word	0x40020000
 8003558:	40000400 	.word	0x40000400
 800355c:	40020400 	.word	0x40020400
 8003560:	40000c00 	.word	0x40000c00
 8003564:	40022000 	.word	0x40022000
 8003568:	40001800 	.word	0x40001800
 800356c:	40021c00 	.word	0x40021c00

08003570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	; 0x30
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 031c 	add.w	r3, r7, #28
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a3c      	ldr	r2, [pc, #240]	; (8003680 <HAL_UART_MspInit+0x110>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d145      	bne.n	800361e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003592:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <HAL_UART_MspInit+0x114>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4a3b      	ldr	r2, [pc, #236]	; (8003684 <HAL_UART_MspInit+0x114>)
 8003598:	f043 0310 	orr.w	r3, r3, #16
 800359c:	6453      	str	r3, [r2, #68]	; 0x44
 800359e:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_UART_MspInit+0x114>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_UART_MspInit+0x114>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a35      	ldr	r2, [pc, #212]	; (8003684 <HAL_UART_MspInit+0x114>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <HAL_UART_MspInit+0x114>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c2:	4b30      	ldr	r3, [pc, #192]	; (8003684 <HAL_UART_MspInit+0x114>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a2f      	ldr	r2, [pc, #188]	; (8003684 <HAL_UART_MspInit+0x114>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <HAL_UART_MspInit+0x114>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	2302      	movs	r3, #2
 80035e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035ea:	2307      	movs	r3, #7
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80035ee:	f107 031c 	add.w	r3, r7, #28
 80035f2:	4619      	mov	r1, r3
 80035f4:	4824      	ldr	r0, [pc, #144]	; (8003688 <HAL_UART_MspInit+0x118>)
 80035f6:	f002 fa53 	bl	8005aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80035fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003600:	2302      	movs	r3, #2
 8003602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003608:	2300      	movs	r3, #0
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800360c:	2307      	movs	r3, #7
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003610:	f107 031c 	add.w	r3, r7, #28
 8003614:	4619      	mov	r1, r3
 8003616:	481d      	ldr	r0, [pc, #116]	; (800368c <HAL_UART_MspInit+0x11c>)
 8003618:	f002 fa42 	bl	8005aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800361c:	e02c      	b.n	8003678 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <HAL_UART_MspInit+0x120>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d127      	bne.n	8003678 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003628:	4b16      	ldr	r3, [pc, #88]	; (8003684 <HAL_UART_MspInit+0x114>)
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	4a15      	ldr	r2, [pc, #84]	; (8003684 <HAL_UART_MspInit+0x114>)
 800362e:	f043 0320 	orr.w	r3, r3, #32
 8003632:	6453      	str	r3, [r2, #68]	; 0x44
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_UART_MspInit+0x114>)
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_UART_MspInit+0x114>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	4a0f      	ldr	r2, [pc, #60]	; (8003684 <HAL_UART_MspInit+0x114>)
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	6313      	str	r3, [r2, #48]	; 0x30
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_UART_MspInit+0x114>)
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003658:	23c0      	movs	r3, #192	; 0xc0
 800365a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003664:	2303      	movs	r3, #3
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003668:	2308      	movs	r3, #8
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366c:	f107 031c 	add.w	r3, r7, #28
 8003670:	4619      	mov	r1, r3
 8003672:	4808      	ldr	r0, [pc, #32]	; (8003694 <HAL_UART_MspInit+0x124>)
 8003674:	f002 fa14 	bl	8005aa0 <HAL_GPIO_Init>
}
 8003678:	bf00      	nop
 800367a:	3730      	adds	r7, #48	; 0x30
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40011000 	.word	0x40011000
 8003684:	40023800 	.word	0x40023800
 8003688:	40020400 	.word	0x40020400
 800368c:	40020000 	.word	0x40020000
 8003690:	40011400 	.word	0x40011400
 8003694:	40020800 	.word	0x40020800

08003698 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_FMC_MspInit+0x100>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d16d      	bne.n	8003790 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80036b4:	4b38      	ldr	r3, [pc, #224]	; (8003798 <HAL_FMC_MspInit+0x100>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_FMC_MspInit+0x104>)
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	4a37      	ldr	r2, [pc, #220]	; (800379c <HAL_FMC_MspInit+0x104>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6393      	str	r3, [r2, #56]	; 0x38
 80036c6:	4b35      	ldr	r3, [pc, #212]	; (800379c <HAL_FMC_MspInit+0x104>)
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 80036d2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80036d6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e0:	2303      	movs	r3, #3
 80036e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036e4:	230c      	movs	r3, #12
 80036e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036e8:	1d3b      	adds	r3, r7, #4
 80036ea:	4619      	mov	r1, r3
 80036ec:	482c      	ldr	r0, [pc, #176]	; (80037a0 <HAL_FMC_MspInit+0x108>)
 80036ee:	f002 f9d7 	bl	8005aa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80036f2:	f248 1333 	movw	r3, #33075	; 0x8133
 80036f6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	2303      	movs	r3, #3
 8003702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003704:	230c      	movs	r3, #12
 8003706:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	4619      	mov	r1, r3
 800370c:	4825      	ldr	r0, [pc, #148]	; (80037a4 <HAL_FMC_MspInit+0x10c>)
 800370e:	f002 f9c7 	bl	8005aa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003712:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003716:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	2302      	movs	r3, #2
 800371a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003720:	2303      	movs	r3, #3
 8003722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003724:	230c      	movs	r3, #12
 8003726:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	4619      	mov	r1, r3
 800372c:	481e      	ldr	r0, [pc, #120]	; (80037a8 <HAL_FMC_MspInit+0x110>)
 800372e:	f002 f9b7 	bl	8005aa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003732:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003736:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	2302      	movs	r3, #2
 800373a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003740:	2303      	movs	r3, #3
 8003742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003744:	230c      	movs	r3, #12
 8003746:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	4619      	mov	r1, r3
 800374c:	4817      	ldr	r0, [pc, #92]	; (80037ac <HAL_FMC_MspInit+0x114>)
 800374e:	f002 f9a7 	bl	8005aa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003752:	2328      	movs	r3, #40	; 0x28
 8003754:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003756:	2302      	movs	r3, #2
 8003758:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375e:	2303      	movs	r3, #3
 8003760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003762:	230c      	movs	r3, #12
 8003764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4811      	ldr	r0, [pc, #68]	; (80037b0 <HAL_FMC_MspInit+0x118>)
 800376c:	f002 f998 	bl	8005aa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003770:	2308      	movs	r3, #8
 8003772:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377c:	2303      	movs	r3, #3
 800377e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003780:	230c      	movs	r3, #12
 8003782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	4619      	mov	r1, r3
 8003788:	480a      	ldr	r0, [pc, #40]	; (80037b4 <HAL_FMC_MspInit+0x11c>)
 800378a:	f002 f989 	bl	8005aa0 <HAL_GPIO_Init>
 800378e:	e000      	b.n	8003792 <HAL_FMC_MspInit+0xfa>
    return;
 8003790:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000b24 	.word	0x20000b24
 800379c:	40023800 	.word	0x40023800
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40021800 	.word	0x40021800
 80037a8:	40020c00 	.word	0x40020c00
 80037ac:	40021400 	.word	0x40021400
 80037b0:	40021c00 	.word	0x40021c00
 80037b4:	40020800 	.word	0x40020800

080037b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80037c0:	f7ff ff6a 	bl	8003698 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <HAL_SAI_MspInit+0xbc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d124      	bne.n	8003828 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_SAI_MspInit+0xc0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80037e6:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_SAI_MspInit+0xc4>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_SAI_MspInit+0xc4>)
 80037ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037f0:	6453      	str	r3, [r2, #68]	; 0x44
 80037f2:	4b27      	ldr	r3, [pc, #156]	; (8003890 <HAL_SAI_MspInit+0xc4>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <HAL_SAI_MspInit+0xc0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	4a21      	ldr	r2, [pc, #132]	; (800388c <HAL_SAI_MspInit+0xc0>)
 8003806:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003808:	23f0      	movs	r3, #240	; 0xf0
 800380a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	2302      	movs	r3, #2
 800380e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003814:	2300      	movs	r3, #0
 8003816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003818:	230a      	movs	r3, #10
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	4619      	mov	r1, r3
 8003822:	481c      	ldr	r0, [pc, #112]	; (8003894 <HAL_SAI_MspInit+0xc8>)
 8003824:	f002 f93c 	bl	8005aa0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <HAL_SAI_MspInit+0xcc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d125      	bne.n	800387e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <HAL_SAI_MspInit+0xc0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_SAI_MspInit+0xc4>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a14      	ldr	r2, [pc, #80]	; (8003890 <HAL_SAI_MspInit+0xc4>)
 8003840:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_SAI_MspInit+0xc4>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003852:	4b0e      	ldr	r3, [pc, #56]	; (800388c <HAL_SAI_MspInit+0xc0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	4a0c      	ldr	r2, [pc, #48]	; (800388c <HAL_SAI_MspInit+0xc0>)
 800385a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800385c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386a:	2300      	movs	r3, #0
 800386c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800386e:	230a      	movs	r3, #10
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003872:	f107 0314 	add.w	r3, r7, #20
 8003876:	4619      	mov	r1, r3
 8003878:	4808      	ldr	r0, [pc, #32]	; (800389c <HAL_SAI_MspInit+0xd0>)
 800387a:	f002 f911 	bl	8005aa0 <HAL_GPIO_Init>

    }
}
 800387e:	bf00      	nop
 8003880:	3728      	adds	r7, #40	; 0x28
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40015c04 	.word	0x40015c04
 800388c:	20000b28 	.word	0x20000b28
 8003890:	40023800 	.word	0x40023800
 8003894:	40022000 	.word	0x40022000
 8003898:	40015c24 	.word	0x40015c24
 800389c:	40021800 	.word	0x40021800

080038a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	; 0x30
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80038b0:	2200      	movs	r2, #0
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	2036      	movs	r0, #54	; 0x36
 80038b6:	f001 fac5 	bl	8004e44 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80038ba:	2036      	movs	r0, #54	; 0x36
 80038bc:	f001 fade 	bl	8004e7c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <HAL_InitTick+0xa0>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <HAL_InitTick+0xa0>)
 80038c6:	f043 0310 	orr.w	r3, r3, #16
 80038ca:	6413      	str	r3, [r2, #64]	; 0x40
 80038cc:	4b1c      	ldr	r3, [pc, #112]	; (8003940 <HAL_InitTick+0xa0>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038d8:	f107 0210 	add.w	r2, r7, #16
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f003 fbfe 	bl	80070e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038e8:	f003 fbd4 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 80038ec:	4603      	mov	r3, r0
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	4a13      	ldr	r2, [pc, #76]	; (8003944 <HAL_InitTick+0xa4>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0c9b      	lsrs	r3, r3, #18
 80038fc:	3b01      	subs	r3, #1
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_InitTick+0xa8>)
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <HAL_InitTick+0xac>)
 8003904:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_InitTick+0xa8>)
 8003908:	f240 32e7 	movw	r2, #999	; 0x3e7
 800390c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800390e:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <HAL_InitTick+0xa8>)
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_InitTick+0xa8>)
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_InitTick+0xa8>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003920:	4809      	ldr	r0, [pc, #36]	; (8003948 <HAL_InitTick+0xa8>)
 8003922:	f006 f889 	bl	8009a38 <HAL_TIM_Base_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800392c:	4806      	ldr	r0, [pc, #24]	; (8003948 <HAL_InitTick+0xa8>)
 800392e:	f006 f8af 	bl	8009a90 <HAL_TIM_Base_Start_IT>
 8003932:	4603      	mov	r3, r0
 8003934:	e000      	b.n	8003938 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
}
 8003938:	4618      	mov	r0, r3
 800393a:	3730      	adds	r7, #48	; 0x30
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	431bde83 	.word	0x431bde83
 8003948:	20000b2c 	.word	0x20000b2c
 800394c:	40001000 	.word	0x40001000

08003950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003962:	e7fe      	b.n	8003962 <HardFault_Handler+0x4>

08003964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <MemManage_Handler+0x4>

0800396a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800396e:	e7fe      	b.n	800396e <BusFault_Handler+0x4>

08003970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <UsageFault_Handler+0x4>

08003976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <CAN1_RX0_IRQHandler+0x10>)
 800398a:	f000 ff4f 	bl	800482c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200003c8 	.word	0x200003c8

08003998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <TIM6_DAC_IRQHandler+0x10>)
 800399e:	f006 f8cc 	bl	8009b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000b2c 	.word	0x20000b2c

080039ac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <LTDC_IRQHandler+0x10>)
 80039b2:	f002 fb23 	bl	8005ffc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200004c8 	.word	0x200004c8

080039c0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <DMA2D_IRQHandler+0x10>)
 80039c6:	f001 fe2c 	bl	8005622 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000488 	.word	0x20000488

080039d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
	return 1;
 80039d8:	2301      	movs	r3, #1
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <_kill>:

int _kill(int pid, int sig)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039ee:	f021 ff9b 	bl	8025928 <__errno>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2216      	movs	r2, #22
 80039f6:	601a      	str	r2, [r3, #0]
	return -1;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_exit>:

void _exit (int status)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ffe7 	bl	80039e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a16:	e7fe      	b.n	8003a16 <_exit+0x12>

08003a18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e00a      	b.n	8003a40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a2a:	f3af 8000 	nop.w
 8003a2e:	4601      	mov	r1, r0
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	60ba      	str	r2, [r7, #8]
 8003a36:	b2ca      	uxtb	r2, r1
 8003a38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	dbf0      	blt.n	8003a2a <_read+0x12>
	}

return len;
 8003a48:	687b      	ldr	r3, [r7, #4]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e009      	b.n	8003a78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	60ba      	str	r2, [r7, #8]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dbf1      	blt.n	8003a64 <_write+0x12>
	}
	return len;
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <_close>:

int _close(int file)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
	return -1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ab2:	605a      	str	r2, [r3, #4]
	return 0;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <_isatty>:

int _isatty(int file)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
	return 1;
 8003aca:	2301      	movs	r3, #1
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <_sbrk+0x50>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <_sbrk+0x16>
		heap_end = &end;
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <_sbrk+0x50>)
 8003b06:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <_sbrk+0x54>)
 8003b08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <_sbrk+0x50>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <_sbrk+0x50>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	466a      	mov	r2, sp
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d907      	bls.n	8003b2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b1e:	f021 ff03 	bl	8025928 <__errno>
 8003b22:	4603      	mov	r3, r0
 8003b24:	220c      	movs	r2, #12
 8003b26:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2c:	e006      	b.n	8003b3c <_sbrk+0x48>
	}

	heap_end += incr;
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <_sbrk+0x50>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <_sbrk+0x50>)
 8003b38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000b6c 	.word	0x20000b6c
 8003b48:	2000c968 	.word	0x2000c968

08003b4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <SystemInit+0x28>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <SystemInit+0x28>)
 8003b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <SystemInit+0x28>)
 8003b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b66:	609a      	str	r2, [r3, #8]
#endif
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b7e:	e003      	b.n	8003b88 <LoopCopyDataInit>

08003b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b86:	3104      	adds	r1, #4

08003b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b88:	480b      	ldr	r0, [pc, #44]	; (8003bb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b90:	d3f6      	bcc.n	8003b80 <CopyDataInit>
  ldr  r2, =_sbss
 8003b92:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b94:	e002      	b.n	8003b9c <LoopFillZerobss>

08003b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b98:	f842 3b04 	str.w	r3, [r2], #4

08003b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ba0:	d3f9      	bcc.n	8003b96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ba2:	f7ff ffd3 	bl	8003b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ba6:	f021 fec5 	bl	8025934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003baa:	f7fd fac3 	bl	8001134 <main>
  bx  lr    
 8003bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bb0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003bb4:	08061b84 	.word	0x08061b84
  ldr  r0, =_sdata
 8003bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bbc:	2000010c 	.word	0x2000010c
  ldr  r2, =_sbss
 8003bc0:	2000010c 	.word	0x2000010c
  ldr  r3, = _ebss
 8003bc4:	2000c964 	.word	0x2000c964

08003bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bc8:	e7fe      	b.n	8003bc8 <ADC_IRQHandler>

08003bca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bce:	2003      	movs	r0, #3
 8003bd0:	f001 f92d 	bl	8004e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f7ff fe63 	bl	80038a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003bda:	f7fe ff09 	bl	80029f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_IncTick+0x20>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_IncTick+0x24>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <HAL_IncTick+0x24>)
 8003bf6:	6013      	str	r3, [r2, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	2000001c 	.word	0x2000001c
 8003c08:	20000b70 	.word	0x20000b70

08003c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <HAL_GetTick+0x14>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000b70 	.word	0x20000b70

08003c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c2c:	f7ff ffee 	bl	8003c0c <HAL_GetTick>
 8003c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d005      	beq.n	8003c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <HAL_Delay+0x44>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c4a:	bf00      	nop
 8003c4c:	f7ff ffde 	bl	8003c0c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d8f7      	bhi.n	8003c4c <HAL_Delay+0x28>
  {
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	2000001c 	.word	0x2000001c

08003c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e031      	b.n	8003ce6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe fed8 	bl	8002a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_ADC_Init+0x84>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	f043 0202 	orr.w	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f964 	bl	8003f88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8003cd6:	e001      	b.n	8003cdc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	ffffeefd 	.word	0xffffeefd

08003cf4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x1c>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e12a      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x272>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b09      	cmp	r3, #9
 8003d1e:	d93a      	bls.n	8003d96 <HAL_ADC_ConfigChannel+0xa2>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d28:	d035      	beq.n	8003d96 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68d9      	ldr	r1, [r3, #12]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3b1e      	subs	r3, #30
 8003d40:	2207      	movs	r2, #7
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43da      	mvns	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a87      	ldr	r2, [pc, #540]	; (8003f74 <HAL_ADC_ConfigChannel+0x280>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10a      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68d9      	ldr	r1, [r3, #12]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	061a      	lsls	r2, r3, #24
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d6e:	e035      	b.n	8003ddc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68d9      	ldr	r1, [r3, #12]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4618      	mov	r0, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4403      	add	r3, r0
 8003d88:	3b1e      	subs	r3, #30
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d94:	e022      	b.n	8003ddc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6919      	ldr	r1, [r3, #16]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	4613      	mov	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4413      	add	r3, r2
 8003daa:	2207      	movs	r2, #7
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43da      	mvns	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	400a      	ands	r2, r1
 8003db8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6919      	ldr	r1, [r3, #16]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	4603      	mov	r3, r0
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4403      	add	r3, r0
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d824      	bhi.n	8003e2e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	3b05      	subs	r3, #5
 8003df6:	221f      	movs	r2, #31
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	400a      	ands	r2, r1
 8003e04:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	4618      	mov	r0, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3b05      	subs	r3, #5
 8003e20:	fa00 f203 	lsl.w	r2, r0, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	635a      	str	r2, [r3, #52]	; 0x34
 8003e2c:	e04c      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d824      	bhi.n	8003e80 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	3b23      	subs	r3, #35	; 0x23
 8003e48:	221f      	movs	r2, #31
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	400a      	ands	r2, r1
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	4618      	mov	r0, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	3b23      	subs	r3, #35	; 0x23
 8003e72:	fa00 f203 	lsl.w	r2, r0, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e7e:	e023      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	3b41      	subs	r3, #65	; 0x41
 8003e92:	221f      	movs	r2, #31
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	4618      	mov	r0, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	3b41      	subs	r3, #65	; 0x41
 8003ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <HAL_ADC_ConfigChannel+0x284>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x1f4>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eda:	d105      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003edc:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <HAL_ADC_ConfigChannel+0x288>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <HAL_ADC_ConfigChannel+0x288>)
 8003ee2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003ee6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <HAL_ADC_ConfigChannel+0x284>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d109      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x212>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b12      	cmp	r3, #18
 8003ef8:	d105      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_ADC_ConfigChannel+0x288>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_ADC_ConfigChannel+0x288>)
 8003f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f04:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <HAL_ADC_ConfigChannel+0x284>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d125      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x268>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_ADC_ConfigChannel+0x280>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <HAL_ADC_ConfigChannel+0x22e>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b11      	cmp	r3, #17
 8003f20:	d11c      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003f22:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <HAL_ADC_ConfigChannel+0x288>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <HAL_ADC_ConfigChannel+0x288>)
 8003f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f2c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <HAL_ADC_ConfigChannel+0x280>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d111      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_ADC_ConfigChannel+0x28c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <HAL_ADC_ConfigChannel+0x290>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	0c9a      	lsrs	r2, r3, #18
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003f4e:	e002      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f9      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	10000012 	.word	0x10000012
 8003f78:	40012000 	.word	0x40012000
 8003f7c:	40012300 	.word	0x40012300
 8003f80:	20000014 	.word	0x20000014
 8003f84:	431bde83 	.word	0x431bde83

08003f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003f90:	4b78      	ldr	r3, [pc, #480]	; (8004174 <ADC_Init+0x1ec>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a77      	ldr	r2, [pc, #476]	; (8004174 <ADC_Init+0x1ec>)
 8003f96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f9a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003f9c:	4b75      	ldr	r3, [pc, #468]	; (8004174 <ADC_Init+0x1ec>)
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4973      	ldr	r1, [pc, #460]	; (8004174 <ADC_Init+0x1ec>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	021a      	lsls	r2, r3, #8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6899      	ldr	r1, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	4a58      	ldr	r2, [pc, #352]	; (8004178 <ADC_Init+0x1f0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800402a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6899      	ldr	r1, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800404c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6899      	ldr	r1, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	e00f      	b.n	8004082 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004070:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004080:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0202 	bic.w	r2, r2, #2
 8004090:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6899      	ldr	r1, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	005a      	lsls	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01b      	beq.n	80040e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6859      	ldr	r1, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	3b01      	subs	r3, #1
 80040dc:	035a      	lsls	r2, r3, #13
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	e007      	b.n	80040f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	3b01      	subs	r3, #1
 8004114:	051a      	lsls	r2, r3, #20
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800412c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6899      	ldr	r1, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800413a:	025a      	lsls	r2, r3, #9
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004152:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6899      	ldr	r1, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	029a      	lsls	r2, r3, #10
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40012300 	.word	0x40012300
 8004178:	0f000001 	.word	0x0f000001

0800417c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0ed      	b.n	800436a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fcaa 	bl	8002af4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0202 	bic.w	r2, r2, #2
 80041ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041b0:	f7ff fd2c 	bl	8003c0c <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80041b6:	e012      	b.n	80041de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041b8:	f7ff fd28 	bl	8003c0c <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b0a      	cmp	r3, #10
 80041c4:	d90b      	bls.n	80041de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2205      	movs	r2, #5
 80041d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e0c5      	b.n	800436a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e5      	bne.n	80041b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041fc:	f7ff fd06 	bl	8003c0c <HAL_GetTick>
 8004200:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004202:	e012      	b.n	800422a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004204:	f7ff fd02 	bl	8003c0c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b0a      	cmp	r3, #10
 8004210:	d90b      	bls.n	800422a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2205      	movs	r2, #5
 8004222:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e09f      	b.n	800436a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0e5      	beq.n	8004204 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7e1b      	ldrb	r3, [r3, #24]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d108      	bne.n	8004252 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e007      	b.n	8004262 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004260:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	7e5b      	ldrb	r3, [r3, #25]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d108      	bne.n	800427c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e007      	b.n	800428c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7e9b      	ldrb	r3, [r3, #26]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d108      	bne.n	80042a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0220 	orr.w	r2, r2, #32
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e007      	b.n	80042b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0220 	bic.w	r2, r2, #32
 80042b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7edb      	ldrb	r3, [r3, #27]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d108      	bne.n	80042d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0210 	bic.w	r2, r2, #16
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e007      	b.n	80042e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0210 	orr.w	r2, r2, #16
 80042de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7f1b      	ldrb	r3, [r3, #28]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d108      	bne.n	80042fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0208 	orr.w	r2, r2, #8
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e007      	b.n	800430a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0208 	bic.w	r2, r2, #8
 8004308:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	7f5b      	ldrb	r3, [r3, #29]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d108      	bne.n	8004324 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0204 	orr.w	r2, r2, #4
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e007      	b.n	8004334 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0204 	bic.w	r2, r2, #4
 8004332:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	ea42 0103 	orr.w	r1, r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800438a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d003      	beq.n	800439a <HAL_CAN_ConfigFilter+0x26>
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b02      	cmp	r3, #2
 8004396:	f040 80be 	bne.w	8004516 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800439a:	4b65      	ldr	r3, [pc, #404]	; (8004530 <HAL_CAN_ConfigFilter+0x1bc>)
 800439c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043a4:	f043 0201 	orr.w	r2, r3, #1
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	431a      	orrs	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2201      	movs	r2, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	401a      	ands	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d123      	bne.n	8004444 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800441e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3248      	adds	r2, #72	; 0x48
 8004424:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004438:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800443a:	6979      	ldr	r1, [r7, #20]
 800443c:	3348      	adds	r3, #72	; 0x48
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	440b      	add	r3, r1
 8004442:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d122      	bne.n	8004492 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	431a      	orrs	r2, r3
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800446c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	3248      	adds	r2, #72	; 0x48
 8004472:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004486:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004488:	6979      	ldr	r1, [r7, #20]
 800448a:	3348      	adds	r3, #72	; 0x48
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	401a      	ands	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80044ac:	e007      	b.n	80044be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	43db      	mvns	r3, r3
 80044d0:	401a      	ands	r2, r3
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80044d8:	e007      	b.n	80044ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004508:	f023 0201 	bic.w	r2, r3, #1
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e006      	b.n	8004524 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40006400 	.word	0x40006400

08004534 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d12e      	bne.n	80045a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004560:	f7ff fb54 	bl	8003c0c <HAL_GetTick>
 8004564:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004566:	e012      	b.n	800458e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004568:	f7ff fb50 	bl	8003c0c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b0a      	cmp	r3, #10
 8004574:	d90b      	bls.n	800458e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2205      	movs	r2, #5
 8004586:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e012      	b.n	80045b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e5      	bne.n	8004568 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e006      	b.n	80045b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
  }
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045d0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d003      	beq.n	80045e0 <HAL_CAN_GetRxMessage+0x24>
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	f040 80f3 	bne.w	80047c6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10e      	bne.n	8004604 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d116      	bne.n	8004622 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0e7      	b.n	80047d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d107      	bne.n	8004622 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0d8      	b.n	80047d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	331b      	adds	r3, #27
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4413      	add	r3, r2
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0204 	and.w	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10c      	bne.n	800465a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	331b      	adds	r3, #27
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	4413      	add	r3, r2
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	0d5b      	lsrs	r3, r3, #21
 8004650:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e00b      	b.n	8004672 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	331b      	adds	r3, #27
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	4413      	add	r3, r2
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	08db      	lsrs	r3, r3, #3
 800466a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	331b      	adds	r3, #27
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	4413      	add	r3, r2
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0202 	and.w	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	331b      	adds	r3, #27
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	4413      	add	r3, r2
 8004694:	3304      	adds	r3, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	331b      	adds	r3, #27
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	4413      	add	r3, r2
 80046ac:	3304      	adds	r3, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0a1b      	lsrs	r3, r3, #8
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	331b      	adds	r3, #27
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	4413      	add	r3, r2
 80046c4:	3304      	adds	r3, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	4413      	add	r3, r2
 80046da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	0a1a      	lsrs	r2, r3, #8
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	4413      	add	r3, r2
 800470a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	0c1a      	lsrs	r2, r3, #16
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	3302      	adds	r3, #2
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	4413      	add	r3, r2
 8004724:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	0e1a      	lsrs	r2, r3, #24
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	3303      	adds	r3, #3
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	4413      	add	r3, r2
 800473e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	3304      	adds	r3, #4
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	4413      	add	r3, r2
 8004756:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	0a1a      	lsrs	r2, r3, #8
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	3305      	adds	r3, #5
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	4413      	add	r3, r2
 8004770:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	0c1a      	lsrs	r2, r3, #16
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	3306      	adds	r3, #6
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	4413      	add	r3, r2
 800478a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0e1a      	lsrs	r2, r3, #24
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	3307      	adds	r3, #7
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d108      	bne.n	80047b2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0220 	orr.w	r2, r2, #32
 80047ae:	60da      	str	r2, [r3, #12]
 80047b0:	e007      	b.n	80047c2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0220 	orr.w	r2, r2, #32
 80047c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e006      	b.n	80047d4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
  }
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d002      	beq.n	80047fe <HAL_CAN_ActivateNotification+0x1e>
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d109      	bne.n	8004812 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6959      	ldr	r1, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e006      	b.n	8004820 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
  }
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d07c      	beq.n	800496c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d023      	beq.n	80048c4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f983 	bl	8004b9a <HAL_CAN_TxMailbox0CompleteCallback>
 8004894:	e016      	b.n	80048c4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
 80048a8:	e00c      	b.n	80048c4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
 80048bc:	e002      	b.n	80048c4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f989 	bl	8004bd6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d024      	beq.n	8004918 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f963 	bl	8004bae <HAL_CAN_TxMailbox1CompleteCallback>
 80048e8:	e016      	b.n	8004918 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
 80048fc:	e00c      	b.n	8004918 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
 8004910:	e002      	b.n	8004918 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f969 	bl	8004bea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d024      	beq.n	800496c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800492a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f943 	bl	8004bc2 <HAL_CAN_TxMailbox2CompleteCallback>
 800493c:	e016      	b.n	800496c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
 8004950:	e00c      	b.n	800496c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	e002      	b.n	800496c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f949 	bl	8004bfe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00c      	beq.n	8004990 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004986:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2210      	movs	r2, #16
 800498e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2208      	movs	r2, #8
 80049aa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f930 	bl	8004c12 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc fd90 	bl	80014f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00c      	beq.n	80049f4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2210      	movs	r2, #16
 80049f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d006      	beq.n	8004a16 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f912 	bl	8004c3a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f8f9 	bl	8004c26 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d006      	beq.n	8004a56 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f8fc 	bl	8004c4e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8f5 	bl	8004c62 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d07b      	beq.n	8004b7a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d072      	beq.n	8004b72 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d008      	beq.n	8004ac4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	f043 0302 	orr.w	r3, r3, #2
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d043      	beq.n	8004b72 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d03e      	beq.n	8004b72 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004afa:	2b60      	cmp	r3, #96	; 0x60
 8004afc:	d02b      	beq.n	8004b56 <HAL_CAN_IRQHandler+0x32a>
 8004afe:	2b60      	cmp	r3, #96	; 0x60
 8004b00:	d82e      	bhi.n	8004b60 <HAL_CAN_IRQHandler+0x334>
 8004b02:	2b50      	cmp	r3, #80	; 0x50
 8004b04:	d022      	beq.n	8004b4c <HAL_CAN_IRQHandler+0x320>
 8004b06:	2b50      	cmp	r3, #80	; 0x50
 8004b08:	d82a      	bhi.n	8004b60 <HAL_CAN_IRQHandler+0x334>
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d019      	beq.n	8004b42 <HAL_CAN_IRQHandler+0x316>
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d826      	bhi.n	8004b60 <HAL_CAN_IRQHandler+0x334>
 8004b12:	2b30      	cmp	r3, #48	; 0x30
 8004b14:	d010      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x30c>
 8004b16:	2b30      	cmp	r3, #48	; 0x30
 8004b18:	d822      	bhi.n	8004b60 <HAL_CAN_IRQHandler+0x334>
 8004b1a:	2b10      	cmp	r3, #16
 8004b1c:	d002      	beq.n	8004b24 <HAL_CAN_IRQHandler+0x2f8>
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d005      	beq.n	8004b2e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004b22:	e01d      	b.n	8004b60 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f043 0308 	orr.w	r3, r3, #8
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b2c:	e019      	b.n	8004b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	f043 0310 	orr.w	r3, r3, #16
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b36:	e014      	b.n	8004b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	f043 0320 	orr.w	r3, r3, #32
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b40:	e00f      	b.n	8004b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b4a:	e00a      	b.n	8004b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b54:	e005      	b.n	8004b62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b5e:	e000      	b.n	8004b62 <HAL_CAN_IRQHandler+0x336>
            break;
 8004b60:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b70:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2204      	movs	r2, #4
 8004b78:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f872 	bl	8004c76 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004b92:	bf00      	nop
 8004b94:	3728      	adds	r7, #40	; 0x28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <__NVIC_SetPriorityGrouping+0x40>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cba:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <__NVIC_SetPriorityGrouping+0x40>)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	60d3      	str	r3, [r2, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	e000ed00 	.word	0xe000ed00
 8004cd0:	05fa0000 	.word	0x05fa0000

08004cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <__NVIC_GetPriorityGrouping+0x18>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	f003 0307 	and.w	r3, r3, #7
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	e000ed00 	.word	0xe000ed00

08004cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	db0b      	blt.n	8004d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	f003 021f 	and.w	r2, r3, #31
 8004d08:	4907      	ldr	r1, [pc, #28]	; (8004d28 <__NVIC_EnableIRQ+0x38>)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2001      	movs	r0, #1
 8004d12:	fa00 f202 	lsl.w	r2, r0, r2
 8004d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	e000e100 	.word	0xe000e100

08004d2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	db12      	blt.n	8004d64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	f003 021f 	and.w	r2, r3, #31
 8004d44:	490a      	ldr	r1, [pc, #40]	; (8004d70 <__NVIC_DisableIRQ+0x44>)
 8004d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d52:	3320      	adds	r3, #32
 8004d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004d58:	f3bf 8f4f 	dsb	sy
}
 8004d5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d5e:	f3bf 8f6f 	isb	sy
}
 8004d62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	e000e100 	.word	0xe000e100

08004d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	6039      	str	r1, [r7, #0]
 8004d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	db0a      	blt.n	8004d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	490c      	ldr	r1, [pc, #48]	; (8004dc0 <__NVIC_SetPriority+0x4c>)
 8004d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d92:	0112      	lsls	r2, r2, #4
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	440b      	add	r3, r1
 8004d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d9c:	e00a      	b.n	8004db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	4908      	ldr	r1, [pc, #32]	; (8004dc4 <__NVIC_SetPriority+0x50>)
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	3b04      	subs	r3, #4
 8004dac:	0112      	lsls	r2, r2, #4
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	440b      	add	r3, r1
 8004db2:	761a      	strb	r2, [r3, #24]
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	e000e100 	.word	0xe000e100
 8004dc4:	e000ed00 	.word	0xe000ed00

08004dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	; 0x24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f1c3 0307 	rsb	r3, r3, #7
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	bf28      	it	cs
 8004de6:	2304      	movcs	r3, #4
 8004de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3304      	adds	r3, #4
 8004dee:	2b06      	cmp	r3, #6
 8004df0:	d902      	bls.n	8004df8 <NVIC_EncodePriority+0x30>
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3b03      	subs	r3, #3
 8004df6:	e000      	b.n	8004dfa <NVIC_EncodePriority+0x32>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43da      	mvns	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e10:	f04f 31ff 	mov.w	r1, #4294967295
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	43d9      	mvns	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e20:	4313      	orrs	r3, r2
         );
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3724      	adds	r7, #36	; 0x24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ff28 	bl	8004c8c <__NVIC_SetPriorityGrouping>
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e56:	f7ff ff3d 	bl	8004cd4 <__NVIC_GetPriorityGrouping>
 8004e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	6978      	ldr	r0, [r7, #20]
 8004e62:	f7ff ffb1 	bl	8004dc8 <NVIC_EncodePriority>
 8004e66:	4602      	mov	r2, r0
 8004e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff ff80 	bl	8004d74 <__NVIC_SetPriority>
}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff ff30 	bl	8004cf0 <__NVIC_EnableIRQ>
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff ff40 	bl	8004d2c <__NVIC_DisableIRQ>
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e054      	b.n	8004f70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7f5b      	ldrb	r3, [r3, #29]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d105      	bne.n	8004edc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fd fe58 	bl	8002b8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	791b      	ldrb	r3, [r3, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10c      	bne.n	8004f04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <HAL_CRC_Init+0xc4>)
 8004ef0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0218 	bic.w	r2, r2, #24
 8004f00:	609a      	str	r2, [r3, #8]
 8004f02:	e00c      	b.n	8004f1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6899      	ldr	r1, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f834 	bl	8004f7c <HAL_CRCEx_Polynomial_Set>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e028      	b.n	8004f70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	795b      	ldrb	r3, [r3, #5]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2e:	611a      	str	r2, [r3, #16]
 8004f30:	e004      	b.n	8004f3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6912      	ldr	r2, [r2, #16]
 8004f3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	04c11db7 	.word	0x04c11db7

08004f7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004f8c:	231f      	movs	r3, #31
 8004f8e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f90:	bf00      	nop
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1e5a      	subs	r2, r3, #1
 8004f96:	613a      	str	r2, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <HAL_CRCEx_Polynomial_Set+0x34>
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b18      	cmp	r3, #24
 8004fb4:	d846      	bhi.n	8005044 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <HAL_CRCEx_Polynomial_Set+0x40>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	0800504b 	.word	0x0800504b
 8004fc0:	08005045 	.word	0x08005045
 8004fc4:	08005045 	.word	0x08005045
 8004fc8:	08005045 	.word	0x08005045
 8004fcc:	08005045 	.word	0x08005045
 8004fd0:	08005045 	.word	0x08005045
 8004fd4:	08005045 	.word	0x08005045
 8004fd8:	08005045 	.word	0x08005045
 8004fdc:	08005039 	.word	0x08005039
 8004fe0:	08005045 	.word	0x08005045
 8004fe4:	08005045 	.word	0x08005045
 8004fe8:	08005045 	.word	0x08005045
 8004fec:	08005045 	.word	0x08005045
 8004ff0:	08005045 	.word	0x08005045
 8004ff4:	08005045 	.word	0x08005045
 8004ff8:	08005045 	.word	0x08005045
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	08005045 	.word	0x08005045
 8005004:	08005045 	.word	0x08005045
 8005008:	08005045 	.word	0x08005045
 800500c:	08005045 	.word	0x08005045
 8005010:	08005045 	.word	0x08005045
 8005014:	08005045 	.word	0x08005045
 8005018:	08005045 	.word	0x08005045
 800501c:	08005021 	.word	0x08005021
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b06      	cmp	r3, #6
 8005024:	d913      	bls.n	800504e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800502a:	e010      	b.n	800504e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b07      	cmp	r3, #7
 8005030:	d90f      	bls.n	8005052 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005036:	e00c      	b.n	8005052 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b0f      	cmp	r3, #15
 800503c:	d90b      	bls.n	8005056 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005042:	e008      	b.n	8005056 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	75fb      	strb	r3, [r7, #23]
      break;
 8005048:	e006      	b.n	8005058 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800504a:	bf00      	nop
 800504c:	e004      	b.n	8005058 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800504e:	bf00      	nop
 8005050:	e002      	b.n	8005058 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005056:	bf00      	nop
  }
  if (status == HAL_OK)
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 0118 	bic.w	r1, r3, #24
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
}
 800507c:	4618      	mov	r0, r3
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e069      	b.n	800516e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fd fd90 	bl	8002bcc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6819      	ldr	r1, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <HAL_DCMI_Init+0xf0>)
 80050ce:	400b      	ands	r3, r1
 80050d0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80050e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80050f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80050fe:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800510a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005116:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b10      	cmp	r3, #16
 8005126:	d112      	bne.n	800514e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7f1b      	ldrb	r3, [r3, #28]
 800512c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	7f5b      	ldrb	r3, [r3, #29]
 8005132:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005134:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	7f9b      	ldrb	r3, [r3, #30]
 800513a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800513c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	7fdb      	ldrb	r3, [r3, #31]
 8005144:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800514a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800514c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 021e 	orr.w	r2, r2, #30
 800515c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	ffe0f007 	.word	0xffe0f007

0800517c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005192:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_DMA_Start_IT+0x26>
 800519e:	2302      	movs	r3, #2
 80051a0:	e048      	b.n	8005234 <HAL_DMA_Start_IT+0xb8>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d137      	bne.n	8005226 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68b9      	ldr	r1, [r7, #8]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f842 	bl	8005254 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d4:	223f      	movs	r2, #63	; 0x3f
 80051d6:	409a      	lsls	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0216 	orr.w	r2, r2, #22
 80051ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051fa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0208 	orr.w	r2, r2, #8
 8005212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e005      	b.n	8005232 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800522e:	2302      	movs	r3, #2
 8005230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005232:	7dfb      	ldrb	r3, [r7, #23]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005270:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d108      	bne.n	8005294 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005292:	e007      	b.n	80052a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e039      	b.n	8005336 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fd fd36 	bl	8002d48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	f023 0107 	bic.w	r1, r3, #7
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_DMA2D_Init+0x90>)
 8005318:	4013      	ands	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68d1      	ldr	r1, [r2, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	430b      	orrs	r3, r1
 8005324:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	ffffc000 	.word	0xffffc000

08005344 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e05f      	b.n	8005416 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8005356:	4b32      	ldr	r3, [pc, #200]	; (8005420 <HAL_DMA2D_DeInit+0xdc>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d02e      	beq.n	80053c0 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b01      	cmp	r3, #1
 800536e:	d107      	bne.n	8005380 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f8c1 	bl	80054f8 <HAL_DMA2D_Abort>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d021      	beq.n	80053c0 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e04a      	b.n	8005416 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b20      	cmp	r3, #32
 800538c:	d108      	bne.n	80053a0 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800538e:	2100      	movs	r1, #0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8f7 	bl	8005584 <HAL_DMA2D_CLUTLoading_Abort>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d011      	beq.n	80053c0 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e03a      	b.n	8005416 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d108      	bne.n	80053c0 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80053ae:	2101      	movs	r1, #1
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f8e7 	bl	8005584 <HAL_DMA2D_CLUTLoading_Abort>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e02a      	b.n	8005416 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	223f      	movs	r2, #63	; 0x3f
 80053ce:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2200      	movs	r2, #0
 80053d6:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2200      	movs	r2, #0
 80053de:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2200      	movs	r2, #0
 80053e6:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2200      	movs	r2, #0
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2200      	movs	r2, #0
 80053f6:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fd fccb 	bl	8002d94 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40023800 	.word	0x40023800

08005424 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_DMA2D_Start_IT+0x1c>
 800543c:	2302      	movs	r3, #2
 800543e:	e020      	b.n	8005482 <HAL_DMA2D_Start_IT+0x5e>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fa84 	bl	8005968 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 800546e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b086      	sub	sp, #24
 800548e:	af02      	add	r7, sp, #8
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
 8005496:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_DMA2D_BlendingStart_IT+0x1c>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e024      	b.n	80054f0 <HAL_DMA2D_BlendingStart_IT+0x66>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fa4d 	bl	8005968 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80054dc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 0205 	bic.w	r2, r3, #5
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0204 	orr.w	r2, r2, #4
 8005512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005514:	f7fe fb7a 	bl	8003c0c <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800551a:	e017      	b.n	800554c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800551c:	f7fe fb76 	bl	8003c0c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800552a:	d90f      	bls.n	800554c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2203      	movs	r2, #3
 800553c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e017      	b.n	800557c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e0      	bne.n	800551c <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8005568:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3324      	adds	r3, #36	; 0x24
 8005594:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0204 	orr.w	r2, r2, #4
 80055a4:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d103      	bne.n	80055b4 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	331c      	adds	r3, #28
 80055b2:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80055b4:	f7fe fb2a 	bl	8003c0c <HAL_GetTick>
 80055b8:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80055ba:	e017      	b.n	80055ec <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80055bc:	f7fe fb26 	bl	8003c0c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ca:	d90f      	bls.n	80055ec <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2203      	movs	r2, #3
 80055dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e016      	b.n	800561a <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e1      	bne.n	80055bc <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8005606:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d026      	beq.n	8005692 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564a:	2b00      	cmp	r3, #0
 800564c:	d021      	beq.n	8005692 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800565c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	f043 0201 	orr.w	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2201      	movs	r2, #1
 8005670:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2204      	movs	r2, #4
 8005676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d026      	beq.n	80056ea <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d021      	beq.n	80056ea <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056b4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2220      	movs	r2, #32
 80056bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c2:	f043 0202 	orr.w	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2204      	movs	r2, #4
 80056ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d026      	beq.n	8005742 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d021      	beq.n	8005742 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800570c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2208      	movs	r2, #8
 8005714:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	f043 0204 	orr.w	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2204      	movs	r2, #4
 8005726:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d013      	beq.n	8005774 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00e      	beq.n	8005774 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005764:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2204      	movs	r2, #4
 800576c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f853 	bl	800581a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d024      	beq.n	80057c8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01f      	beq.n	80057c8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2202      	movs	r2, #2
 800579e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01f      	beq.n	8005812 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01a      	beq.n	8005812 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057ea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2210      	movs	r2, #16
 80057f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f80e 	bl	800582e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_DMA2D_ConfigLayer+0x20>
 8005860:	2302      	movs	r3, #2
 8005862:	e079      	b.n	8005958 <HAL_DMA2D_ConfigLayer+0x114>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	3318      	adds	r3, #24
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800588e:	4b35      	ldr	r3, [pc, #212]	; (8005964 <HAL_DMA2D_ConfigLayer+0x120>)
 8005890:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b0a      	cmp	r3, #10
 8005898:	d003      	beq.n	80058a2 <HAL_DMA2D_ConfigLayer+0x5e>
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d107      	bne.n	80058b2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e005      	b.n	80058be <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	061b      	lsls	r3, r3, #24
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d120      	bne.n	8005906 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	ea02 0103 	and.w	r1, r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	430a      	orrs	r2, r1
 80058da:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b0a      	cmp	r3, #10
 80058ec:	d003      	beq.n	80058f6 <HAL_DMA2D_ConfigLayer+0xb2>
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b09      	cmp	r3, #9
 80058f4:	d127      	bne.n	8005946 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
 8005904:	e01f      	b.n	8005946 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	43db      	mvns	r3, r3
 8005910:	ea02 0103 	and.w	r1, r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	430a      	orrs	r2, r1
 800591c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b0a      	cmp	r3, #10
 800592e:	d003      	beq.n	8005938 <HAL_DMA2D_ConfigLayer+0xf4>
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b09      	cmp	r3, #9
 8005936:	d106      	bne.n	8005946 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005944:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	ff03000f 	.word	0xff03000f

08005968 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005968:	b480      	push	{r7}
 800596a:	b08b      	sub	sp, #44	; 0x2c
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	041a      	lsls	r2, r3, #16
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	431a      	orrs	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059a0:	d174      	bne.n	8005a8c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059a8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059b0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059b8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d108      	bne.n	80059da <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
 80059d8:	e053      	b.n	8005a82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d106      	bne.n	80059f0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
 80059ee:	e048      	b.n	8005a82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d111      	bne.n	8005a1c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	0cdb      	lsrs	r3, r3, #19
 80059fc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	0a9b      	lsrs	r3, r3, #10
 8005a02:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	08db      	lsrs	r3, r3, #3
 8005a08:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	02db      	lsls	r3, r3, #11
 8005a12:	4313      	orrs	r3, r2
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	e032      	b.n	8005a82 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d117      	bne.n	8005a54 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	0fdb      	lsrs	r3, r3, #31
 8005a28:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	0cdb      	lsrs	r3, r3, #19
 8005a2e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	0adb      	lsrs	r3, r3, #11
 8005a34:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	08db      	lsrs	r3, r3, #3
 8005a3a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	029b      	lsls	r3, r3, #10
 8005a44:	431a      	orrs	r2, r3
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	03db      	lsls	r3, r3, #15
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
 8005a52:	e016      	b.n	8005a82 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	0f1b      	lsrs	r3, r3, #28
 8005a58:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	0d1b      	lsrs	r3, r3, #20
 8005a5e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	0b1b      	lsrs	r3, r3, #12
 8005a64:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	011a      	lsls	r2, r3, #4
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	431a      	orrs	r2, r3
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	031b      	lsls	r3, r3, #12
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005a8a:	e003      	b.n	8005a94 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	60da      	str	r2, [r3, #12]
}
 8005a94:	bf00      	nop
 8005a96:	372c      	adds	r7, #44	; 0x2c
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b089      	sub	sp, #36	; 0x24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	e175      	b.n	8005dac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	f040 8164 	bne.w	8005da6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d00b      	beq.n	8005afe <HAL_GPIO_Init+0x5e>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d007      	beq.n	8005afe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005af2:	2b11      	cmp	r3, #17
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b12      	cmp	r3, #18
 8005afc:	d130      	bne.n	8005b60 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	2203      	movs	r2, #3
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b34:	2201      	movs	r2, #1
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 0201 	and.w	r2, r3, #1
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4013      	ands	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	fa02 f303 	lsl.w	r3, r2, r3
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d003      	beq.n	8005ba0 <HAL_GPIO_Init+0x100>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b12      	cmp	r3, #18
 8005b9e:	d123      	bne.n	8005be8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	08da      	lsrs	r2, r3, #3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3208      	adds	r2, #8
 8005ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	220f      	movs	r2, #15
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	08da      	lsrs	r2, r3, #3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3208      	adds	r2, #8
 8005be2:	69b9      	ldr	r1, [r7, #24]
 8005be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f003 0203 	and.w	r2, r3, #3
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80be 	beq.w	8005da6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c2a:	4b66      	ldr	r3, [pc, #408]	; (8005dc4 <HAL_GPIO_Init+0x324>)
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	4a65      	ldr	r2, [pc, #404]	; (8005dc4 <HAL_GPIO_Init+0x324>)
 8005c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c34:	6453      	str	r3, [r2, #68]	; 0x44
 8005c36:	4b63      	ldr	r3, [pc, #396]	; (8005dc4 <HAL_GPIO_Init+0x324>)
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c42:	4a61      	ldr	r2, [pc, #388]	; (8005dc8 <HAL_GPIO_Init+0x328>)
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	089b      	lsrs	r3, r3, #2
 8005c48:	3302      	adds	r3, #2
 8005c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	220f      	movs	r2, #15
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4013      	ands	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a58      	ldr	r2, [pc, #352]	; (8005dcc <HAL_GPIO_Init+0x32c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d037      	beq.n	8005cde <HAL_GPIO_Init+0x23e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a57      	ldr	r2, [pc, #348]	; (8005dd0 <HAL_GPIO_Init+0x330>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d031      	beq.n	8005cda <HAL_GPIO_Init+0x23a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a56      	ldr	r2, [pc, #344]	; (8005dd4 <HAL_GPIO_Init+0x334>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02b      	beq.n	8005cd6 <HAL_GPIO_Init+0x236>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a55      	ldr	r2, [pc, #340]	; (8005dd8 <HAL_GPIO_Init+0x338>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d025      	beq.n	8005cd2 <HAL_GPIO_Init+0x232>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a54      	ldr	r2, [pc, #336]	; (8005ddc <HAL_GPIO_Init+0x33c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01f      	beq.n	8005cce <HAL_GPIO_Init+0x22e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a53      	ldr	r2, [pc, #332]	; (8005de0 <HAL_GPIO_Init+0x340>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d019      	beq.n	8005cca <HAL_GPIO_Init+0x22a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a52      	ldr	r2, [pc, #328]	; (8005de4 <HAL_GPIO_Init+0x344>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <HAL_GPIO_Init+0x226>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a51      	ldr	r2, [pc, #324]	; (8005de8 <HAL_GPIO_Init+0x348>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00d      	beq.n	8005cc2 <HAL_GPIO_Init+0x222>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a50      	ldr	r2, [pc, #320]	; (8005dec <HAL_GPIO_Init+0x34c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d007      	beq.n	8005cbe <HAL_GPIO_Init+0x21e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a4f      	ldr	r2, [pc, #316]	; (8005df0 <HAL_GPIO_Init+0x350>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d101      	bne.n	8005cba <HAL_GPIO_Init+0x21a>
 8005cb6:	2309      	movs	r3, #9
 8005cb8:	e012      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cba:	230a      	movs	r3, #10
 8005cbc:	e010      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	e00e      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cc2:	2307      	movs	r3, #7
 8005cc4:	e00c      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cc6:	2306      	movs	r3, #6
 8005cc8:	e00a      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cca:	2305      	movs	r3, #5
 8005ccc:	e008      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cce:	2304      	movs	r3, #4
 8005cd0:	e006      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e004      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e002      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <HAL_GPIO_Init+0x240>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	f002 0203 	and.w	r2, r2, #3
 8005ce6:	0092      	lsls	r2, r2, #2
 8005ce8:	4093      	lsls	r3, r2
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005cf0:	4935      	ldr	r1, [pc, #212]	; (8005dc8 <HAL_GPIO_Init+0x328>)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	089b      	lsrs	r3, r3, #2
 8005cf6:	3302      	adds	r3, #2
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cfe:	4b3d      	ldr	r3, [pc, #244]	; (8005df4 <HAL_GPIO_Init+0x354>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d22:	4a34      	ldr	r2, [pc, #208]	; (8005df4 <HAL_GPIO_Init+0x354>)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005d28:	4b32      	ldr	r3, [pc, #200]	; (8005df4 <HAL_GPIO_Init+0x354>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d4c:	4a29      	ldr	r2, [pc, #164]	; (8005df4 <HAL_GPIO_Init+0x354>)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d52:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <HAL_GPIO_Init+0x354>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d76:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <HAL_GPIO_Init+0x354>)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d7c:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <HAL_GPIO_Init+0x354>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005da0:	4a14      	ldr	r2, [pc, #80]	; (8005df4 <HAL_GPIO_Init+0x354>)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	3301      	adds	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	2b0f      	cmp	r3, #15
 8005db0:	f67f ae86 	bls.w	8005ac0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	3724      	adds	r7, #36	; 0x24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	40013800 	.word	0x40013800
 8005dcc:	40020000 	.word	0x40020000
 8005dd0:	40020400 	.word	0x40020400
 8005dd4:	40020800 	.word	0x40020800
 8005dd8:	40020c00 	.word	0x40020c00
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40021400 	.word	0x40021400
 8005de4:	40021800 	.word	0x40021800
 8005de8:	40021c00 	.word	0x40021c00
 8005dec:	40022000 	.word	0x40022000
 8005df0:	40022400 	.word	0x40022400
 8005df4:	40013c00 	.word	0x40013c00

08005df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	887b      	ldrh	r3, [r7, #2]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e10:	2301      	movs	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
 8005e14:	e001      	b.n	8005e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	807b      	strh	r3, [r7, #2]
 8005e34:	4613      	mov	r3, r2
 8005e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e38:	787b      	ldrb	r3, [r7, #1]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e3e:	887a      	ldrh	r2, [r7, #2]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e44:	e003      	b.n	8005e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e46:	887b      	ldrh	r3, [r7, #2]
 8005e48:	041a      	lsls	r2, r3, #16
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	619a      	str	r2, [r3, #24]
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0bf      	b.n	8005fee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fc ffa0 	bl	8002dc8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005e9e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6999      	ldr	r1, [r3, #24]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005eb4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6899      	ldr	r1, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b4a      	ldr	r3, [pc, #296]	; (8005ff8 <HAL_LTDC_Init+0x19c>)
 8005ed0:	400b      	ands	r3, r1
 8005ed2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	041b      	lsls	r3, r3, #16
 8005eda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6899      	ldr	r1, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68d9      	ldr	r1, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b3e      	ldr	r3, [pc, #248]	; (8005ff8 <HAL_LTDC_Init+0x19c>)
 8005efe:	400b      	ands	r3, r1
 8005f00:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68d9      	ldr	r1, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6919      	ldr	r1, [r3, #16]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b33      	ldr	r3, [pc, #204]	; (8005ff8 <HAL_LTDC_Init+0x19c>)
 8005f2c:	400b      	ands	r3, r1
 8005f2e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6919      	ldr	r1, [r3, #16]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6959      	ldr	r1, [r3, #20]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4b27      	ldr	r3, [pc, #156]	; (8005ff8 <HAL_LTDC_Init+0x19c>)
 8005f5a:	400b      	ands	r3, r1
 8005f5c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	041b      	lsls	r3, r3, #16
 8005f64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6959      	ldr	r1, [r3, #20]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0206 	orr.w	r2, r2, #6
 8005fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	f000f800 	.word	0xf000f800

08005ffc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d023      	beq.n	8006066 <HAL_LTDC_IRQHandler+0x6a>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01e      	beq.n	8006066 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0204 	bic.w	r2, r2, #4
 8006036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2204      	movs	r2, #4
 800603e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006046:	f043 0201 	orr.w	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2204      	movs	r2, #4
 8006054:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f86f 	bl	8006144 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d023      	beq.n	80060b8 <HAL_LTDC_IRQHandler+0xbc>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01e      	beq.n	80060b8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0202 	bic.w	r2, r2, #2
 8006088:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2202      	movs	r2, #2
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006098:	f043 0202 	orr.w	r2, r3, #2
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2204      	movs	r2, #4
 80060a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f846 	bl	8006144 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01b      	beq.n	80060fa <HAL_LTDC_IRQHandler+0xfe>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d016      	beq.n	80060fa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2201      	movs	r2, #1
 80060e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f00f fb1b 	bl	8015730 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01b      	beq.n	800613c <HAL_LTDC_IRQHandler+0x140>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d016      	beq.n	800613c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0208 	bic.w	r2, r2, #8
 800611c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2208      	movs	r2, #8
 8006124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f80e 	bl	8006158 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800616c:	b5b0      	push	{r4, r5, r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_LTDC_ConfigLayer+0x1a>
 8006182:	2302      	movs	r3, #2
 8006184:	e02c      	b.n	80061e0 <HAL_LTDC_ConfigLayer+0x74>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2202      	movs	r2, #2
 8006192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2134      	movs	r1, #52	; 0x34
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	4413      	add	r3, r2
 80061a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f849 	bl	8006258 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2201      	movs	r2, #1
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bdb0      	pop	{r4, r5, r7, pc}

080061e8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_LTDC_ProgramLineEvent+0x18>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e023      	b.n	8006248 <HAL_LTDC_ProgramLineEvent+0x60>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006220:	4a0c      	ldr	r2, [pc, #48]	; (8006254 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40016800 	.word	0x40016800

08006258 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	; 0x24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	0c1b      	lsrs	r3, r3, #16
 8006270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006274:	4413      	add	r3, r2
 8006276:	041b      	lsls	r3, r3, #16
 8006278:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	01db      	lsls	r3, r3, #7
 8006284:	4413      	add	r3, r2
 8006286:	3384      	adds	r3, #132	; 0x84
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	4611      	mov	r1, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	01d2      	lsls	r2, r2, #7
 8006294:	440a      	add	r2, r1
 8006296:	3284      	adds	r2, #132	; 0x84
 8006298:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800629c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	0c1b      	lsrs	r3, r3, #16
 80062aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ae:	4413      	add	r3, r2
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4619      	mov	r1, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	01db      	lsls	r3, r3, #7
 80062bc:	440b      	add	r3, r1
 80062be:	3384      	adds	r3, #132	; 0x84
 80062c0:	4619      	mov	r1, r3
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062d6:	4413      	add	r3, r2
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	01db      	lsls	r3, r3, #7
 80062e6:	4413      	add	r3, r2
 80062e8:	3384      	adds	r3, #132	; 0x84
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	4611      	mov	r1, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	01d2      	lsls	r2, r2, #7
 80062f6:	440a      	add	r2, r1
 80062f8:	3284      	adds	r2, #132	; 0x84
 80062fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800630e:	4413      	add	r3, r2
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4619      	mov	r1, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	01db      	lsls	r3, r3, #7
 800631c:	440b      	add	r3, r1
 800631e:	3384      	adds	r3, #132	; 0x84
 8006320:	4619      	mov	r1, r3
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4313      	orrs	r3, r2
 8006326:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	01db      	lsls	r3, r3, #7
 8006332:	4413      	add	r3, r2
 8006334:	3384      	adds	r3, #132	; 0x84
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	6812      	ldr	r2, [r2, #0]
 800633c:	4611      	mov	r1, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	01d2      	lsls	r2, r2, #7
 8006342:	440a      	add	r2, r1
 8006344:	3284      	adds	r2, #132	; 0x84
 8006346:	f023 0307 	bic.w	r3, r3, #7
 800634a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	01db      	lsls	r3, r3, #7
 8006356:	4413      	add	r3, r2
 8006358:	3384      	adds	r3, #132	; 0x84
 800635a:	461a      	mov	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006368:	021b      	lsls	r3, r3, #8
 800636a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	061b      	lsls	r3, r3, #24
 800637c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	01db      	lsls	r3, r3, #7
 8006388:	4413      	add	r3, r2
 800638a:	3384      	adds	r3, #132	; 0x84
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	01db      	lsls	r3, r3, #7
 8006398:	4413      	add	r3, r2
 800639a:	3384      	adds	r3, #132	; 0x84
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063a8:	461a      	mov	r2, r3
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4619      	mov	r1, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	01db      	lsls	r3, r3, #7
 80063bc:	440b      	add	r3, r1
 80063be:	3384      	adds	r3, #132	; 0x84
 80063c0:	4619      	mov	r1, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	01db      	lsls	r3, r3, #7
 80063d2:	4413      	add	r3, r2
 80063d4:	3384      	adds	r3, #132	; 0x84
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	4611      	mov	r1, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	01d2      	lsls	r2, r2, #7
 80063e2:	440a      	add	r2, r1
 80063e4:	3284      	adds	r2, #132	; 0x84
 80063e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	01db      	lsls	r3, r3, #7
 80063f6:	4413      	add	r3, r2
 80063f8:	3384      	adds	r3, #132	; 0x84
 80063fa:	461a      	mov	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	01db      	lsls	r3, r3, #7
 800640c:	4413      	add	r3, r2
 800640e:	3384      	adds	r3, #132	; 0x84
 8006410:	69da      	ldr	r2, [r3, #28]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4619      	mov	r1, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	01db      	lsls	r3, r3, #7
 800641c:	440b      	add	r3, r1
 800641e:	3384      	adds	r3, #132	; 0x84
 8006420:	4619      	mov	r1, r3
 8006422:	4b58      	ldr	r3, [pc, #352]	; (8006584 <LTDC_SetConfig+0x32c>)
 8006424:	4013      	ands	r3, r2
 8006426:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	69da      	ldr	r2, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	68f9      	ldr	r1, [r7, #12]
 8006432:	6809      	ldr	r1, [r1, #0]
 8006434:	4608      	mov	r0, r1
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	01c9      	lsls	r1, r1, #7
 800643a:	4401      	add	r1, r0
 800643c:	3184      	adds	r1, #132	; 0x84
 800643e:	4313      	orrs	r3, r2
 8006440:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	01db      	lsls	r3, r3, #7
 800644c:	4413      	add	r3, r2
 800644e:	3384      	adds	r3, #132	; 0x84
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	01db      	lsls	r3, r3, #7
 800645c:	4413      	add	r3, r2
 800645e:	3384      	adds	r3, #132	; 0x84
 8006460:	461a      	mov	r2, r3
 8006462:	2300      	movs	r3, #0
 8006464:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	01db      	lsls	r3, r3, #7
 8006470:	4413      	add	r3, r2
 8006472:	3384      	adds	r3, #132	; 0x84
 8006474:	461a      	mov	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d102      	bne.n	800648a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006484:	2304      	movs	r3, #4
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e01b      	b.n	80064c2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d102      	bne.n	8006498 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006492:	2303      	movs	r3, #3
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e014      	b.n	80064c2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b04      	cmp	r3, #4
 800649e:	d00b      	beq.n	80064b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d007      	beq.n	80064b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d003      	beq.n	80064b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064b4:	2b07      	cmp	r3, #7
 80064b6:	d102      	bne.n	80064be <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80064b8:	2302      	movs	r3, #2
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	e001      	b.n	80064c2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80064be:	2301      	movs	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	01db      	lsls	r3, r3, #7
 80064cc:	4413      	add	r3, r2
 80064ce:	3384      	adds	r3, #132	; 0x84
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	4611      	mov	r1, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	01d2      	lsls	r2, r2, #7
 80064dc:	440a      	add	r2, r1
 80064de:	3284      	adds	r2, #132	; 0x84
 80064e0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80064e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	fb02 f303 	mul.w	r3, r2, r3
 80064f0:	041a      	lsls	r2, r3, #16
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6859      	ldr	r1, [r3, #4]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	1acb      	subs	r3, r1, r3
 80064fc:	69f9      	ldr	r1, [r7, #28]
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	3303      	adds	r3, #3
 8006504:	68f9      	ldr	r1, [r7, #12]
 8006506:	6809      	ldr	r1, [r1, #0]
 8006508:	4608      	mov	r0, r1
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	01c9      	lsls	r1, r1, #7
 800650e:	4401      	add	r1, r0
 8006510:	3184      	adds	r1, #132	; 0x84
 8006512:	4313      	orrs	r3, r2
 8006514:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	01db      	lsls	r3, r3, #7
 8006520:	4413      	add	r3, r2
 8006522:	3384      	adds	r3, #132	; 0x84
 8006524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4619      	mov	r1, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	01db      	lsls	r3, r3, #7
 8006530:	440b      	add	r3, r1
 8006532:	3384      	adds	r3, #132	; 0x84
 8006534:	4619      	mov	r1, r3
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <LTDC_SetConfig+0x330>)
 8006538:	4013      	ands	r3, r2
 800653a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	01db      	lsls	r3, r3, #7
 8006546:	4413      	add	r3, r2
 8006548:	3384      	adds	r3, #132	; 0x84
 800654a:	461a      	mov	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	01db      	lsls	r3, r3, #7
 800655c:	4413      	add	r3, r2
 800655e:	3384      	adds	r3, #132	; 0x84
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	4611      	mov	r1, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	01d2      	lsls	r2, r2, #7
 800656c:	440a      	add	r2, r1
 800656e:	3284      	adds	r2, #132	; 0x84
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6013      	str	r3, [r2, #0]
}
 8006576:	bf00      	nop
 8006578:	3724      	adds	r7, #36	; 0x24
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	fffff8f8 	.word	0xfffff8f8
 8006588:	fffff800 	.word	0xfffff800

0800658c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659a:	6013      	str	r3, [r2, #0]
}
 800659c:	bf00      	nop
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40007000 	.word	0x40007000

080065ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065b6:	4b23      	ldr	r3, [pc, #140]	; (8006644 <HAL_PWREx_EnableOverDrive+0x98>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	4a22      	ldr	r2, [pc, #136]	; (8006644 <HAL_PWREx_EnableOverDrive+0x98>)
 80065bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c0:	6413      	str	r3, [r2, #64]	; 0x40
 80065c2:	4b20      	ldr	r3, [pc, #128]	; (8006644 <HAL_PWREx_EnableOverDrive+0x98>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065ce:	4b1e      	ldr	r3, [pc, #120]	; (8006648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065da:	f7fd fb17 	bl	8003c0c <HAL_GetTick>
 80065de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065e0:	e009      	b.n	80065f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065e2:	f7fd fb13 	bl	8003c0c <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065f0:	d901      	bls.n	80065f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e022      	b.n	800663c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006602:	d1ee      	bne.n	80065e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006604:	4b10      	ldr	r3, [pc, #64]	; (8006648 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a0f      	ldr	r2, [pc, #60]	; (8006648 <HAL_PWREx_EnableOverDrive+0x9c>)
 800660a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006610:	f7fd fafc 	bl	8003c0c <HAL_GetTick>
 8006614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006616:	e009      	b.n	800662c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006618:	f7fd faf8 	bl	8003c0c <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006626:	d901      	bls.n	800662c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e007      	b.n	800663c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <HAL_PWREx_EnableOverDrive+0x9c>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006638:	d1ee      	bne.n	8006618 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	40007000 	.word	0x40007000

0800664c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af02      	add	r7, sp, #8
 8006652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006654:	f7fd fada 	bl	8003c0c <HAL_GetTick>
 8006658:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e067      	b.n	8006734 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10b      	bne.n	8006688 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fc fc6d 	bl	8002f58 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800667e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f85e 	bl	8006744 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	3b01      	subs	r3, #1
 8006698:	021a      	lsls	r2, r3, #8
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	2120      	movs	r1, #32
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f856 	bl	8006760 <QSPI_WaitFlagStateUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80066b8:	7afb      	ldrb	r3, [r7, #11]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d135      	bne.n	800672a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b1d      	ldr	r3, [pc, #116]	; (800673c <HAL_QSPI_Init+0xf0>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6852      	ldr	r2, [r2, #4]
 80066cc:	0611      	lsls	r1, r2, #24
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68d2      	ldr	r2, [r2, #12]
 80066d2:	4311      	orrs	r1, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	69d2      	ldr	r2, [r2, #28]
 80066d8:	4311      	orrs	r1, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6a12      	ldr	r2, [r2, #32]
 80066de:	4311      	orrs	r1, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	4b14      	ldr	r3, [pc, #80]	; (8006740 <HAL_QSPI_Init+0xf4>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6912      	ldr	r2, [r2, #16]
 80066f6:	0411      	lsls	r1, r2, #16
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6952      	ldr	r2, [r2, #20]
 80066fc:	4311      	orrs	r1, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6992      	ldr	r2, [r2, #24]
 8006702:	4311      	orrs	r1, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	430b      	orrs	r3, r1
 800670a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006732:	7afb      	ldrb	r3, [r7, #11]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	00ffff2f 	.word	0x00ffff2f
 8006740:	ffe0f8fe 	.word	0xffe0f8fe

08006744 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	4613      	mov	r3, r2
 800676e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006770:	e01a      	b.n	80067a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d016      	beq.n	80067a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800677a:	f7fd fa47 	bl	8003c0c <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	429a      	cmp	r2, r3
 8006788:	d302      	bcc.n	8006790 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2204      	movs	r2, #4
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679c:	f043 0201 	orr.w	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e00e      	b.n	80067c6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4013      	ands	r3, r2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bf14      	ite	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	2300      	moveq	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d1d6      	bne.n	8006772 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80067d8:	2300      	movs	r3, #0
 80067da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e291      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 8087 	beq.w	8006902 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067f4:	4b96      	ldr	r3, [pc, #600]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 030c 	and.w	r3, r3, #12
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d00c      	beq.n	800681a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006800:	4b93      	ldr	r3, [pc, #588]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 030c 	and.w	r3, r3, #12
 8006808:	2b08      	cmp	r3, #8
 800680a:	d112      	bne.n	8006832 <HAL_RCC_OscConfig+0x62>
 800680c:	4b90      	ldr	r3, [pc, #576]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006818:	d10b      	bne.n	8006832 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681a:	4b8d      	ldr	r3, [pc, #564]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d06c      	beq.n	8006900 <HAL_RCC_OscConfig+0x130>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d168      	bne.n	8006900 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e26b      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683a:	d106      	bne.n	800684a <HAL_RCC_OscConfig+0x7a>
 800683c:	4b84      	ldr	r3, [pc, #528]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a83      	ldr	r2, [pc, #524]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	e02e      	b.n	80068a8 <HAL_RCC_OscConfig+0xd8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10c      	bne.n	800686c <HAL_RCC_OscConfig+0x9c>
 8006852:	4b7f      	ldr	r3, [pc, #508]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a7e      	ldr	r2, [pc, #504]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	4b7c      	ldr	r3, [pc, #496]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a7b      	ldr	r2, [pc, #492]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e01d      	b.n	80068a8 <HAL_RCC_OscConfig+0xd8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0xc0>
 8006876:	4b76      	ldr	r3, [pc, #472]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a75      	ldr	r2, [pc, #468]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800687c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	4b73      	ldr	r3, [pc, #460]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a72      	ldr	r2, [pc, #456]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e00b      	b.n	80068a8 <HAL_RCC_OscConfig+0xd8>
 8006890:	4b6f      	ldr	r3, [pc, #444]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a6e      	ldr	r2, [pc, #440]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	4b6c      	ldr	r3, [pc, #432]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a6b      	ldr	r2, [pc, #428]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80068a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d013      	beq.n	80068d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b0:	f7fd f9ac 	bl	8003c0c <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b8:	f7fd f9a8 	bl	8003c0c <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	; 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e21f      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ca:	4b61      	ldr	r3, [pc, #388]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0xe8>
 80068d6:	e014      	b.n	8006902 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fd f998 	bl	8003c0c <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068e0:	f7fd f994 	bl	8003c0c <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b64      	cmp	r3, #100	; 0x64
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e20b      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f2:	4b57      	ldr	r3, [pc, #348]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x110>
 80068fe:	e000      	b.n	8006902 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d069      	beq.n	80069e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800690e:	4b50      	ldr	r3, [pc, #320]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691a:	4b4d      	ldr	r3, [pc, #308]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b08      	cmp	r3, #8
 8006924:	d11c      	bne.n	8006960 <HAL_RCC_OscConfig+0x190>
 8006926:	4b4a      	ldr	r3, [pc, #296]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d116      	bne.n	8006960 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006932:	4b47      	ldr	r3, [pc, #284]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_RCC_OscConfig+0x17a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d001      	beq.n	800694a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e1df      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800694a:	4b41      	ldr	r3, [pc, #260]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	493d      	ldr	r1, [pc, #244]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800695a:	4313      	orrs	r3, r2
 800695c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800695e:	e040      	b.n	80069e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d023      	beq.n	80069b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006968:	4b39      	ldr	r3, [pc, #228]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a38      	ldr	r2, [pc, #224]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006974:	f7fd f94a 	bl	8003c0c <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800697c:	f7fd f946 	bl	8003c0c <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e1bd      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698e:	4b30      	ldr	r3, [pc, #192]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f0      	beq.n	800697c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699a:	4b2d      	ldr	r3, [pc, #180]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4929      	ldr	r1, [pc, #164]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	600b      	str	r3, [r1, #0]
 80069ae:	e018      	b.n	80069e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069b0:	4b27      	ldr	r3, [pc, #156]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a26      	ldr	r2, [pc, #152]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fd f926 	bl	8003c0c <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c4:	f7fd f922 	bl	8003c0c <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e199      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d6:	4b1e      	ldr	r3, [pc, #120]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d038      	beq.n	8006a60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d019      	beq.n	8006a2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069f6:	4b16      	ldr	r3, [pc, #88]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80069f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069fa:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 80069fc:	f043 0301 	orr.w	r3, r3, #1
 8006a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a02:	f7fd f903 	bl	8003c0c <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a0a:	f7fd f8ff 	bl	8003c0c <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e176      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0f0      	beq.n	8006a0a <HAL_RCC_OscConfig+0x23a>
 8006a28:	e01a      	b.n	8006a60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a2e:	4a08      	ldr	r2, [pc, #32]	; (8006a50 <HAL_RCC_OscConfig+0x280>)
 8006a30:	f023 0301 	bic.w	r3, r3, #1
 8006a34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a36:	f7fd f8e9 	bl	8003c0c <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a3c:	e00a      	b.n	8006a54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a3e:	f7fd f8e5 	bl	8003c0c <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d903      	bls.n	8006a54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e15c      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
 8006a50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a54:	4b91      	ldr	r3, [pc, #580]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1ee      	bne.n	8006a3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 80a4 	beq.w	8006bb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a6e:	4b8b      	ldr	r3, [pc, #556]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10d      	bne.n	8006a96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a7a:	4b88      	ldr	r3, [pc, #544]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	4a87      	ldr	r2, [pc, #540]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6413      	str	r3, [r2, #64]	; 0x40
 8006a86:	4b85      	ldr	r3, [pc, #532]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8e:	60bb      	str	r3, [r7, #8]
 8006a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a92:	2301      	movs	r3, #1
 8006a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a96:	4b82      	ldr	r3, [pc, #520]	; (8006ca0 <HAL_RCC_OscConfig+0x4d0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d118      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006aa2:	4b7f      	ldr	r3, [pc, #508]	; (8006ca0 <HAL_RCC_OscConfig+0x4d0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a7e      	ldr	r2, [pc, #504]	; (8006ca0 <HAL_RCC_OscConfig+0x4d0>)
 8006aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aae:	f7fd f8ad 	bl	8003c0c <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab6:	f7fd f8a9 	bl	8003c0c <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b64      	cmp	r3, #100	; 0x64
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e120      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac8:	4b75      	ldr	r3, [pc, #468]	; (8006ca0 <HAL_RCC_OscConfig+0x4d0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0f0      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d106      	bne.n	8006aea <HAL_RCC_OscConfig+0x31a>
 8006adc:	4b6f      	ldr	r3, [pc, #444]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae0:	4a6e      	ldr	r2, [pc, #440]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae8:	e02d      	b.n	8006b46 <HAL_RCC_OscConfig+0x376>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x33c>
 8006af2:	4b6a      	ldr	r3, [pc, #424]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af6:	4a69      	ldr	r2, [pc, #420]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	6713      	str	r3, [r2, #112]	; 0x70
 8006afe:	4b67      	ldr	r3, [pc, #412]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	4a66      	ldr	r2, [pc, #408]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b04:	f023 0304 	bic.w	r3, r3, #4
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0a:	e01c      	b.n	8006b46 <HAL_RCC_OscConfig+0x376>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b05      	cmp	r3, #5
 8006b12:	d10c      	bne.n	8006b2e <HAL_RCC_OscConfig+0x35e>
 8006b14:	4b61      	ldr	r3, [pc, #388]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b18:	4a60      	ldr	r2, [pc, #384]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b1a:	f043 0304 	orr.w	r3, r3, #4
 8006b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b20:	4b5e      	ldr	r3, [pc, #376]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b24:	4a5d      	ldr	r2, [pc, #372]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2c:	e00b      	b.n	8006b46 <HAL_RCC_OscConfig+0x376>
 8006b2e:	4b5b      	ldr	r3, [pc, #364]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	4a5a      	ldr	r2, [pc, #360]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	6713      	str	r3, [r2, #112]	; 0x70
 8006b3a:	4b58      	ldr	r3, [pc, #352]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	4a57      	ldr	r2, [pc, #348]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b40:	f023 0304 	bic.w	r3, r3, #4
 8006b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d015      	beq.n	8006b7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4e:	f7fd f85d 	bl	8003c0c <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b54:	e00a      	b.n	8006b6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b56:	f7fd f859 	bl	8003c0c <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e0ce      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b6c:	4b4b      	ldr	r3, [pc, #300]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0ee      	beq.n	8006b56 <HAL_RCC_OscConfig+0x386>
 8006b78:	e014      	b.n	8006ba4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7a:	f7fd f847 	bl	8003c0c <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b80:	e00a      	b.n	8006b98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b82:	f7fd f843 	bl	8003c0c <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e0b8      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b98:	4b40      	ldr	r3, [pc, #256]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1ee      	bne.n	8006b82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d105      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006baa:	4b3c      	ldr	r3, [pc, #240]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	4a3b      	ldr	r2, [pc, #236]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80a4 	beq.w	8006d08 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bc0:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 030c 	and.w	r3, r3, #12
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d06b      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d149      	bne.n	8006c68 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd4:	4b31      	ldr	r3, [pc, #196]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a30      	ldr	r2, [pc, #192]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be0:	f7fd f814 	bl	8003c0c <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be8:	f7fd f810 	bl	8003c0c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e087      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bfa:	4b28      	ldr	r3, [pc, #160]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69da      	ldr	r2, [r3, #28]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	019b      	lsls	r3, r3, #6
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	041b      	lsls	r3, r3, #16
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	4a1b      	ldr	r2, [pc, #108]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c32:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c34:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a18      	ldr	r2, [pc, #96]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fc ffe4 	bl	8003c0c <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c48:	f7fc ffe0 	bl	8003c0c <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e057      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c5a:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCC_OscConfig+0x478>
 8006c66:	e04f      	b.n	8006d08 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a0b      	ldr	r2, [pc, #44]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c74:	f7fc ffca 	bl	8003c0c <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c7c:	f7fc ffc6 	bl	8003c0c <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e03d      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c8e:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <HAL_RCC_OscConfig+0x4cc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f0      	bne.n	8006c7c <HAL_RCC_OscConfig+0x4ac>
 8006c9a:	e035      	b.n	8006d08 <HAL_RCC_OscConfig+0x538>
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ca4:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <HAL_RCC_OscConfig+0x544>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d028      	beq.n	8006d04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d121      	bne.n	8006d04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d11a      	bne.n	8006d04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d111      	bne.n	8006d04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	3b01      	subs	r3, #1
 8006cee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d107      	bne.n	8006d04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40023800 	.word	0x40023800

08006d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0d0      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d30:	4b6a      	ldr	r3, [pc, #424]	; (8006edc <HAL_RCC_ClockConfig+0x1c4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d910      	bls.n	8006d60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3e:	4b67      	ldr	r3, [pc, #412]	; (8006edc <HAL_RCC_ClockConfig+0x1c4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f023 020f 	bic.w	r2, r3, #15
 8006d46:	4965      	ldr	r1, [pc, #404]	; (8006edc <HAL_RCC_ClockConfig+0x1c4>)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4e:	4b63      	ldr	r3, [pc, #396]	; (8006edc <HAL_RCC_ClockConfig+0x1c4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d001      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e0b8      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d020      	beq.n	8006dae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d78:	4b59      	ldr	r3, [pc, #356]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	4a58      	ldr	r2, [pc, #352]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d90:	4b53      	ldr	r3, [pc, #332]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	4a52      	ldr	r2, [pc, #328]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d9c:	4b50      	ldr	r3, [pc, #320]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	494d      	ldr	r1, [pc, #308]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d040      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d107      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dc2:	4b47      	ldr	r3, [pc, #284]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d115      	bne.n	8006dfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e07f      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d107      	bne.n	8006dea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dda:	4b41      	ldr	r3, [pc, #260]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e073      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dea:	4b3d      	ldr	r3, [pc, #244]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e06b      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dfa:	4b39      	ldr	r3, [pc, #228]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f023 0203 	bic.w	r2, r3, #3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4936      	ldr	r1, [pc, #216]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0c:	f7fc fefe 	bl	8003c0c <HAL_GetTick>
 8006e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e12:	e00a      	b.n	8006e2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e14:	f7fc fefa 	bl	8003c0c <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e053      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e2a:	4b2d      	ldr	r3, [pc, #180]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 020c 	and.w	r2, r3, #12
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d1eb      	bne.n	8006e14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e3c:	4b27      	ldr	r3, [pc, #156]	; (8006edc <HAL_RCC_ClockConfig+0x1c4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d210      	bcs.n	8006e6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4a:	4b24      	ldr	r3, [pc, #144]	; (8006edc <HAL_RCC_ClockConfig+0x1c4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f023 020f 	bic.w	r2, r3, #15
 8006e52:	4922      	ldr	r1, [pc, #136]	; (8006edc <HAL_RCC_ClockConfig+0x1c4>)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5a:	4b20      	ldr	r3, [pc, #128]	; (8006edc <HAL_RCC_ClockConfig+0x1c4>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d001      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e032      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	4916      	ldr	r1, [pc, #88]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	490e      	ldr	r1, [pc, #56]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006eaa:	f000 f821 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	490a      	ldr	r1, [pc, #40]	; (8006ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8006ebc:	5ccb      	ldrb	r3, [r1, r3]
 8006ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec2:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8006ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ec6:	4b09      	ldr	r3, [pc, #36]	; (8006eec <HAL_RCC_ClockConfig+0x1d4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fc fce8 	bl	80038a0 <HAL_InitTick>

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40023c00 	.word	0x40023c00
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	08026ed4 	.word	0x08026ed4
 8006ee8:	20000014 	.word	0x20000014
 8006eec:	20000018 	.word	0x20000018

08006ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ef4:	b090      	sub	sp, #64	; 0x40
 8006ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	637b      	str	r3, [r7, #52]	; 0x34
 8006efc:	2300      	movs	r3, #0
 8006efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f00:	2300      	movs	r3, #0
 8006f02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f08:	4b59      	ldr	r3, [pc, #356]	; (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 030c 	and.w	r3, r3, #12
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d00d      	beq.n	8006f30 <HAL_RCC_GetSysClockFreq+0x40>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	f200 80a1 	bhi.w	800705c <HAL_RCC_GetSysClockFreq+0x16c>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_RCC_GetSysClockFreq+0x34>
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d003      	beq.n	8006f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f22:	e09b      	b.n	800705c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f24:	4b53      	ldr	r3, [pc, #332]	; (8007074 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f28:	e09b      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f2a:	4b53      	ldr	r3, [pc, #332]	; (8007078 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f2e:	e098      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f30:	4b4f      	ldr	r3, [pc, #316]	; (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006f3a:	4b4d      	ldr	r3, [pc, #308]	; (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d028      	beq.n	8006f98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f46:	4b4a      	ldr	r3, [pc, #296]	; (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	099b      	lsrs	r3, r3, #6
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	623b      	str	r3, [r7, #32]
 8006f50:	627a      	str	r2, [r7, #36]	; 0x24
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4b47      	ldr	r3, [pc, #284]	; (8007078 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f5c:	fb03 f201 	mul.w	r2, r3, r1
 8006f60:	2300      	movs	r3, #0
 8006f62:	fb00 f303 	mul.w	r3, r0, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	4a43      	ldr	r2, [pc, #268]	; (8007078 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f6a:	fba0 1202 	umull	r1, r2, r0, r2
 8006f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f70:	460a      	mov	r2, r1
 8006f72:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f76:	4413      	add	r3, r2
 8006f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	61fa      	str	r2, [r7, #28]
 8006f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f8a:	f7f9 fd77 	bl	8000a7c <__aeabi_uldivmod>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4613      	mov	r3, r2
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f96:	e053      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f98:	4b35      	ldr	r3, [pc, #212]	; (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	099b      	lsrs	r3, r3, #6
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	617a      	str	r2, [r7, #20]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006faa:	f04f 0b00 	mov.w	fp, #0
 8006fae:	4652      	mov	r2, sl
 8006fb0:	465b      	mov	r3, fp
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f04f 0100 	mov.w	r1, #0
 8006fba:	0159      	lsls	r1, r3, #5
 8006fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fc0:	0150      	lsls	r0, r2, #5
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	ebb2 080a 	subs.w	r8, r2, sl
 8006fca:	eb63 090b 	sbc.w	r9, r3, fp
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006fda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006fde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006fe2:	ebb2 0408 	subs.w	r4, r2, r8
 8006fe6:	eb63 0509 	sbc.w	r5, r3, r9
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	00eb      	lsls	r3, r5, #3
 8006ff4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ff8:	00e2      	lsls	r2, r4, #3
 8006ffa:	4614      	mov	r4, r2
 8006ffc:	461d      	mov	r5, r3
 8006ffe:	eb14 030a 	adds.w	r3, r4, sl
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	eb45 030b 	adc.w	r3, r5, fp
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007016:	4629      	mov	r1, r5
 8007018:	028b      	lsls	r3, r1, #10
 800701a:	4621      	mov	r1, r4
 800701c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007020:	4621      	mov	r1, r4
 8007022:	028a      	lsls	r2, r1, #10
 8007024:	4610      	mov	r0, r2
 8007026:	4619      	mov	r1, r3
 8007028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702a:	2200      	movs	r2, #0
 800702c:	60bb      	str	r3, [r7, #8]
 800702e:	60fa      	str	r2, [r7, #12]
 8007030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007034:	f7f9 fd22 	bl	8000a7c <__aeabi_uldivmod>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4613      	mov	r3, r2
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	3301      	adds	r3, #1
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800705a:	e002      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <HAL_RCC_GetSysClockFreq+0x184>)
 800705e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007064:	4618      	mov	r0, r3
 8007066:	3740      	adds	r7, #64	; 0x40
 8007068:	46bd      	mov	sp, r7
 800706a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800706e:	bf00      	nop
 8007070:	40023800 	.word	0x40023800
 8007074:	00f42400 	.word	0x00f42400
 8007078:	017d7840 	.word	0x017d7840

0800707c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007080:	4b03      	ldr	r3, [pc, #12]	; (8007090 <HAL_RCC_GetHCLKFreq+0x14>)
 8007082:	681b      	ldr	r3, [r3, #0]
}
 8007084:	4618      	mov	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000014 	.word	0x20000014

08007094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007098:	f7ff fff0 	bl	800707c <HAL_RCC_GetHCLKFreq>
 800709c:	4602      	mov	r2, r0
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	0a9b      	lsrs	r3, r3, #10
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	4903      	ldr	r1, [pc, #12]	; (80070b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070aa:	5ccb      	ldrb	r3, [r1, r3]
 80070ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40023800 	.word	0x40023800
 80070b8:	08026ee4 	.word	0x08026ee4

080070bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070c0:	f7ff ffdc 	bl	800707c <HAL_RCC_GetHCLKFreq>
 80070c4:	4602      	mov	r2, r0
 80070c6:	4b05      	ldr	r3, [pc, #20]	; (80070dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	0b5b      	lsrs	r3, r3, #13
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	4903      	ldr	r1, [pc, #12]	; (80070e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070d2:	5ccb      	ldrb	r3, [r1, r3]
 80070d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d8:	4618      	mov	r0, r3
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40023800 	.word	0x40023800
 80070e0:	08026ee4 	.word	0x08026ee4

080070e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	220f      	movs	r2, #15
 80070f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070f4:	4b12      	ldr	r3, [pc, #72]	; (8007140 <HAL_RCC_GetClockConfig+0x5c>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0203 	and.w	r2, r3, #3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007100:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <HAL_RCC_GetClockConfig+0x5c>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800710c:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <HAL_RCC_GetClockConfig+0x5c>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007118:	4b09      	ldr	r3, [pc, #36]	; (8007140 <HAL_RCC_GetClockConfig+0x5c>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <HAL_RCC_GetClockConfig+0x60>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 020f 	and.w	r2, r3, #15
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	601a      	str	r2, [r3, #0]
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40023800 	.word	0x40023800
 8007144:	40023c00 	.word	0x40023c00

08007148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d012      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007170:	4b69      	ldr	r3, [pc, #420]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4a68      	ldr	r2, [pc, #416]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007176:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800717a:	6093      	str	r3, [r2, #8]
 800717c:	4b66      	ldr	r3, [pc, #408]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007184:	4964      	ldr	r1, [pc, #400]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007186:	4313      	orrs	r3, r2
 8007188:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007192:	2301      	movs	r3, #1
 8007194:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d017      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071a2:	4b5d      	ldr	r3, [pc, #372]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b0:	4959      	ldr	r1, [pc, #356]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c0:	d101      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80071ce:	2301      	movs	r3, #1
 80071d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d017      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071de:	4b4e      	ldr	r3, [pc, #312]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	494a      	ldr	r1, [pc, #296]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071fc:	d101      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80071fe:	2301      	movs	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800720a:	2301      	movs	r3, #1
 800720c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 808b 	beq.w	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800722c:	4b3a      	ldr	r3, [pc, #232]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	4a39      	ldr	r2, [pc, #228]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007236:	6413      	str	r3, [r2, #64]	; 0x40
 8007238:	4b37      	ldr	r3, [pc, #220]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007244:	4b35      	ldr	r3, [pc, #212]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a34      	ldr	r2, [pc, #208]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800724a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007250:	f7fc fcdc 	bl	8003c0c <HAL_GetTick>
 8007254:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007256:	e008      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007258:	f7fc fcd8 	bl	8003c0c <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b64      	cmp	r3, #100	; 0x64
 8007264:	d901      	bls.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e357      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800726a:	4b2c      	ldr	r3, [pc, #176]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0f0      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007276:	4b28      	ldr	r3, [pc, #160]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d035      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	429a      	cmp	r2, r3
 8007292:	d02e      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007294:	4b20      	ldr	r3, [pc, #128]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800729c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800729e:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	4a1d      	ldr	r2, [pc, #116]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80072b6:	4a18      	ldr	r2, [pc, #96]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072bc:	4b16      	ldr	r3, [pc, #88]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d114      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c8:	f7fc fca0 	bl	8003c0c <HAL_GetTick>
 80072cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ce:	e00a      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072d0:	f7fc fc9c 	bl	8003c0c <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	f241 3288 	movw	r2, #5000	; 0x1388
 80072de:	4293      	cmp	r3, r2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e319      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e6:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0ee      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fe:	d111      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800730c:	4b04      	ldr	r3, [pc, #16]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800730e:	400b      	ands	r3, r1
 8007310:	4901      	ldr	r1, [pc, #4]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007312:	4313      	orrs	r3, r2
 8007314:	608b      	str	r3, [r1, #8]
 8007316:	e00b      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007318:	40023800 	.word	0x40023800
 800731c:	40007000 	.word	0x40007000
 8007320:	0ffffcff 	.word	0x0ffffcff
 8007324:	4baa      	ldr	r3, [pc, #680]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	4aa9      	ldr	r2, [pc, #676]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800732a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800732e:	6093      	str	r3, [r2, #8]
 8007330:	4ba7      	ldr	r3, [pc, #668]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800733c:	49a4      	ldr	r1, [pc, #656]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800733e:	4313      	orrs	r3, r2
 8007340:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0310 	and.w	r3, r3, #16
 800734a:	2b00      	cmp	r3, #0
 800734c:	d010      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800734e:	4ba0      	ldr	r3, [pc, #640]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007354:	4a9e      	ldr	r2, [pc, #632]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800735a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800735e:	4b9c      	ldr	r3, [pc, #624]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007360:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	4999      	ldr	r1, [pc, #612]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800737c:	4b94      	ldr	r3, [pc, #592]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800738a:	4991      	ldr	r1, [pc, #580]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800738c:	4313      	orrs	r3, r2
 800738e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800739e:	4b8c      	ldr	r3, [pc, #560]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073ac:	4988      	ldr	r1, [pc, #544]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073c0:	4b83      	ldr	r3, [pc, #524]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ce:	4980      	ldr	r1, [pc, #512]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073e2:	4b7b      	ldr	r3, [pc, #492]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f0:	4977      	ldr	r1, [pc, #476]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007404:	4b72      	ldr	r3, [pc, #456]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740a:	f023 0203 	bic.w	r2, r3, #3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	496f      	ldr	r1, [pc, #444]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007426:	4b6a      	ldr	r3, [pc, #424]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742c:	f023 020c 	bic.w	r2, r3, #12
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007434:	4966      	ldr	r1, [pc, #408]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007448:	4b61      	ldr	r3, [pc, #388]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007456:	495e      	ldr	r1, [pc, #376]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800746a:	4b59      	ldr	r3, [pc, #356]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007470:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007478:	4955      	ldr	r1, [pc, #340]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800748c:	4b50      	ldr	r3, [pc, #320]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749a:	494d      	ldr	r1, [pc, #308]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800749c:	4313      	orrs	r3, r2
 800749e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80074ae:	4b48      	ldr	r3, [pc, #288]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074bc:	4944      	ldr	r1, [pc, #272]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80074d0:	4b3f      	ldr	r3, [pc, #252]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074de:	493c      	ldr	r1, [pc, #240]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80074f2:	4b37      	ldr	r3, [pc, #220]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007500:	4933      	ldr	r1, [pc, #204]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007502:	4313      	orrs	r3, r2
 8007504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007514:	4b2e      	ldr	r3, [pc, #184]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007522:	492b      	ldr	r1, [pc, #172]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d011      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007536:	4b26      	ldr	r3, [pc, #152]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007544:	4922      	ldr	r1, [pc, #136]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007554:	d101      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007556:	2301      	movs	r3, #1
 8007558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0308 	and.w	r3, r3, #8
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007566:	2301      	movs	r3, #1
 8007568:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007576:	4b16      	ldr	r3, [pc, #88]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007584:	4912      	ldr	r1, [pc, #72]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007586:	4313      	orrs	r3, r2
 8007588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007598:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a8:	4909      	ldr	r1, [pc, #36]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d005      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075be:	f040 80d9 	bne.w	8007774 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075c2:	4b03      	ldr	r3, [pc, #12]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a02      	ldr	r2, [pc, #8]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	e001      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80075d0:	40023800 	.word	0x40023800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d4:	f7fc fb1a 	bl	8003c0c <HAL_GetTick>
 80075d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075da:	e008      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075dc:	f7fc fb16 	bl	8003c0c <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b64      	cmp	r3, #100	; 0x64
 80075e8:	d901      	bls.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e195      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075ee:	4b6d      	ldr	r3, [pc, #436]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1f0      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x494>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d021      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760a:	2b00      	cmp	r3, #0
 800760c:	d11d      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800760e:	4b65      	ldr	r3, [pc, #404]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800761c:	4b61      	ldr	r3, [pc, #388]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800761e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007622:	0e1b      	lsrs	r3, r3, #24
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	019a      	lsls	r2, r3, #6
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	431a      	orrs	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	061b      	lsls	r3, r3, #24
 800763a:	431a      	orrs	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	071b      	lsls	r3, r3, #28
 8007642:	4958      	ldr	r1, [pc, #352]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800765e:	d00a      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x52e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007668:	2b00      	cmp	r3, #0
 800766a:	d02e      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x582>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007674:	d129      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x582>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007676:	4b4b      	ldr	r3, [pc, #300]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800767c:	0c1b      	lsrs	r3, r3, #16
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007684:	4b47      	ldr	r3, [pc, #284]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768a:	0f1b      	lsrs	r3, r3, #28
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	019a      	lsls	r2, r3, #6
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	041b      	lsls	r3, r3, #16
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	061b      	lsls	r3, r3, #24
 80076a4:	431a      	orrs	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	071b      	lsls	r3, r3, #28
 80076aa:	493e      	ldr	r1, [pc, #248]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076b2:	4b3c      	ldr	r3, [pc, #240]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b8:	f023 021f 	bic.w	r2, r3, #31
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	3b01      	subs	r3, #1
 80076c2:	4938      	ldr	r1, [pc, #224]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d01d      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076d6:	4b33      	ldr	r3, [pc, #204]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076dc:	0e1b      	lsrs	r3, r3, #24
 80076de:	f003 030f 	and.w	r3, r3, #15
 80076e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076e4:	4b2f      	ldr	r3, [pc, #188]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ea:	0f1b      	lsrs	r3, r3, #28
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	019a      	lsls	r2, r3, #6
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	431a      	orrs	r2, r3
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	061b      	lsls	r3, r3, #24
 8007704:	431a      	orrs	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	071b      	lsls	r3, r3, #28
 800770a:	4926      	ldr	r1, [pc, #152]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800770c:	4313      	orrs	r3, r2
 800770e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d011      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	019a      	lsls	r2, r3, #6
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	061b      	lsls	r3, r3, #24
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	071b      	lsls	r3, r3, #28
 800773a:	491a      	ldr	r1, [pc, #104]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007742:	4b18      	ldr	r3, [pc, #96]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a17      	ldr	r2, [pc, #92]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007748:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800774c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774e:	f7fc fa5d 	bl	8003c0c <HAL_GetTick>
 8007752:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007754:	e008      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x620>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007756:	f7fc fa59 	bl	8003c0c <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b64      	cmp	r3, #100	; 0x64
 8007762:	d901      	bls.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x620>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e0d8      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007768:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0f0      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2b01      	cmp	r3, #1
 8007778:	f040 80ce 	bne.w	8007918 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007788:	f7fc fa40 	bl	8003c0c <HAL_GetTick>
 800778c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800778e:	e00b      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007790:	f7fc fa3c 	bl	8003c0c <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b64      	cmp	r3, #100	; 0x64
 800779c:	d904      	bls.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e0bb      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80077a2:	bf00      	nop
 80077a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077a8:	4b5e      	ldr	r3, [pc, #376]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077b4:	d0ec      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x648>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d02e      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d12a      	bne.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077de:	4b51      	ldr	r3, [pc, #324]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e4:	0c1b      	lsrs	r3, r3, #16
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077ec:	4b4d      	ldr	r3, [pc, #308]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f2:	0f1b      	lsrs	r3, r3, #28
 80077f4:	f003 0307 	and.w	r3, r3, #7
 80077f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	019a      	lsls	r2, r3, #6
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	061b      	lsls	r3, r3, #24
 800780c:	431a      	orrs	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	071b      	lsls	r3, r3, #28
 8007812:	4944      	ldr	r1, [pc, #272]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007814:	4313      	orrs	r3, r2
 8007816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800781a:	4b42      	ldr	r3, [pc, #264]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800781c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007820:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007828:	3b01      	subs	r3, #1
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	493d      	ldr	r1, [pc, #244]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800782e:	4313      	orrs	r3, r2
 8007830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d022      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007848:	d11d      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800784a:	4b36      	ldr	r3, [pc, #216]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007850:	0e1b      	lsrs	r3, r3, #24
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007858:	4b32      	ldr	r3, [pc, #200]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800785a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785e:	0f1b      	lsrs	r3, r3, #28
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	019a      	lsls	r2, r3, #6
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	431a      	orrs	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	061b      	lsls	r3, r3, #24
 8007878:	431a      	orrs	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	071b      	lsls	r3, r3, #28
 800787e:	4929      	ldr	r1, [pc, #164]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007880:	4313      	orrs	r3, r2
 8007882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d028      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007892:	4b24      	ldr	r3, [pc, #144]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007898:	0e1b      	lsrs	r3, r3, #24
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078a0:	4b20      	ldr	r3, [pc, #128]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a6:	0c1b      	lsrs	r3, r3, #16
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	019a      	lsls	r2, r3, #6
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	041b      	lsls	r3, r3, #16
 80078b8:	431a      	orrs	r2, r3
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	061b      	lsls	r3, r3, #24
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	071b      	lsls	r3, r3, #28
 80078c6:	4917      	ldr	r1, [pc, #92]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078ce:	4b15      	ldr	r3, [pc, #84]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	4911      	ldr	r1, [pc, #68]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078e4:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a0e      	ldr	r2, [pc, #56]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f0:	f7fc f98c 	bl	8003c0c <HAL_GetTick>
 80078f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078f6:	e008      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078f8:	f7fc f988 	bl	8003c0c <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b64      	cmp	r3, #100	; 0x64
 8007904:	d901      	bls.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e007      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800790a:	4b06      	ldr	r3, [pc, #24]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007916:	d1ef      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	40023800 	.word	0x40023800

08007928 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007946:	f040 808d 	bne.w	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800794a:	4b93      	ldr	r3, [pc, #588]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800794c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007950:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007958:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007960:	d07c      	beq.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007968:	d87b      	bhi.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d004      	beq.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007976:	d039      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007978:	e073      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800797a:	4b87      	ldr	r3, [pc, #540]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d108      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007986:	4b84      	ldr	r3, [pc, #528]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800798e:	4a83      	ldr	r2, [pc, #524]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	613b      	str	r3, [r7, #16]
 8007996:	e007      	b.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007998:	4b7f      	ldr	r3, [pc, #508]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079a0:	4a7f      	ldr	r2, [pc, #508]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80079a8:	4b7b      	ldr	r3, [pc, #492]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ae:	0e1b      	lsrs	r3, r3, #24
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80079b6:	4b78      	ldr	r3, [pc, #480]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079bc:	099b      	lsrs	r3, r3, #6
 80079be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	fb03 f202 	mul.w	r2, r3, r2
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ce:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80079d0:	4b71      	ldr	r3, [pc, #452]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	3301      	adds	r3, #1
 80079de:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e8:	617b      	str	r3, [r7, #20]
        break;
 80079ea:	e03b      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80079ec:	4b6a      	ldr	r3, [pc, #424]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d108      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80079f8:	4b67      	ldr	r3, [pc, #412]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a00:	4a66      	ldr	r2, [pc, #408]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	e007      	b.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a0a:	4b63      	ldr	r3, [pc, #396]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a12:	4a63      	ldr	r2, [pc, #396]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a18:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007a1a:	4b5f      	ldr	r3, [pc, #380]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a20:	0e1b      	lsrs	r3, r3, #24
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007a28:	4b5b      	ldr	r3, [pc, #364]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a2e:	099b      	lsrs	r3, r3, #6
 8007a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	fb03 f202 	mul.w	r2, r3, r2
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a40:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007a42:	4b55      	ldr	r3, [pc, #340]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a58:	617b      	str	r3, [r7, #20]
        break;
 8007a5a:	e003      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a5c:	4b51      	ldr	r3, [pc, #324]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007a5e:	617b      	str	r3, [r7, #20]
        break;
 8007a60:	e000      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007a62:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a6a:	f040 808d 	bne.w	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007a6e:	4b4a      	ldr	r3, [pc, #296]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a74:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007a7c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a84:	d07c      	beq.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a8c:	d87b      	bhi.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d004      	beq.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a9a:	d039      	beq.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007a9c:	e073      	b.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d108      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007aaa:	4b3b      	ldr	r3, [pc, #236]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ab2:	4a3a      	ldr	r2, [pc, #232]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	e007      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007abc:	4b36      	ldr	r3, [pc, #216]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ac4:	4a36      	ldr	r2, [pc, #216]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007acc:	4b32      	ldr	r3, [pc, #200]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad2:	0e1b      	lsrs	r3, r3, #24
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007ada:	4b2f      	ldr	r3, [pc, #188]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae0:	099b      	lsrs	r3, r3, #6
 8007ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	fb03 f202 	mul.w	r2, r3, r2
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007af4:	4b28      	ldr	r3, [pc, #160]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afa:	0a1b      	lsrs	r3, r3, #8
 8007afc:	f003 031f 	and.w	r3, r3, #31
 8007b00:	3301      	adds	r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0c:	617b      	str	r3, [r7, #20]
        break;
 8007b0e:	e03b      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b10:	4b21      	ldr	r3, [pc, #132]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d108      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b1c:	4b1e      	ldr	r3, [pc, #120]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b24:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	e007      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b36:	4a1a      	ldr	r2, [pc, #104]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007b3e:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b44:	0e1b      	lsrs	r3, r3, #24
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007b4c:	4b12      	ldr	r3, [pc, #72]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b52:	099b      	lsrs	r3, r3, #6
 8007b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	fb03 f202 	mul.w	r2, r3, r2
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b64:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007b66:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	3301      	adds	r3, #1
 8007b72:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]
        break;
 8007b7e:	e003      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b80:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007b82:	617b      	str	r3, [r7, #20]
        break;
 8007b84:	e000      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007b86:	bf00      	nop
      }
    }
  }

  return frequency;
 8007b88:	697b      	ldr	r3, [r7, #20]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	371c      	adds	r7, #28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	00f42400 	.word	0x00f42400
 8007ba0:	017d7840 	.word	0x017d7840
 8007ba4:	00bb8000 	.word	0x00bb8000

08007ba8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e06b      	b.n	8007c92 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	7f5b      	ldrb	r3, [r3, #29]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fb fa54 	bl	8003078 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	22ca      	movs	r2, #202	; 0xca
 8007bdc:	625a      	str	r2, [r3, #36]	; 0x24
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2253      	movs	r2, #83	; 0x53
 8007be4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fb00 	bl	80081ec <RTC_EnterInitMode>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	22ff      	movs	r2, #255	; 0xff
 8007bf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e046      	b.n	8007c92 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6899      	ldr	r1, [r3, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b23      	ldr	r3, [pc, #140]	; (8007c9c <HAL_RTC_Init+0xf4>)
 8007c10:	400b      	ands	r3, r1
 8007c12:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6899      	ldr	r1, [r3, #8]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	68d2      	ldr	r2, [r2, #12]
 8007c3a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6919      	ldr	r1, [r3, #16]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	041a      	lsls	r2, r3, #16
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c5e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0208 	bic.w	r2, r2, #8
 8007c6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	699a      	ldr	r2, [r3, #24]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	22ff      	movs	r2, #255	; 0xff
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007c90:	2300      	movs	r3, #0
  }
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	ff8fffbf 	.word	0xff8fffbf

08007ca0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ca0:	b590      	push	{r4, r7, lr}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	7f1b      	ldrb	r3, [r3, #28]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d101      	bne.n	8007cbc <HAL_RTC_SetTime+0x1c>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e0a8      	b.n	8007e0e <HAL_RTC_SetTime+0x16e>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d126      	bne.n	8007d1c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 faac 	bl	8008244 <RTC_ByteToBcd2>
 8007cec:	4603      	mov	r3, r0
 8007cee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 faa5 	bl	8008244 <RTC_ByteToBcd2>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007cfe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	789b      	ldrb	r3, [r3, #2]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fa9d 	bl	8008244 <RTC_ByteToBcd2>
 8007d0a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007d0c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	7b1b      	ldrb	r3, [r3, #12]
 8007d14:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	e018      	b.n	8007d4e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d102      	bne.n	8007d30 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	785b      	ldrb	r3, [r3, #1]
 8007d3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007d3c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007d42:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	7b1b      	ldrb	r3, [r3, #12]
 8007d48:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	22ca      	movs	r2, #202	; 0xca
 8007d54:	625a      	str	r2, [r3, #36]	; 0x24
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2253      	movs	r2, #83	; 0x53
 8007d5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fa44 	bl	80081ec <RTC_EnterInitMode>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00b      	beq.n	8007d82 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	22ff      	movs	r2, #255	; 0xff
 8007d70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2204      	movs	r2, #4
 8007d76:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e045      	b.n	8007e0e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	6979      	ldr	r1, [r7, #20]
 8007d88:	4b23      	ldr	r3, [pc, #140]	; (8007e18 <HAL_RTC_SetTime+0x178>)
 8007d8a:	400b      	ands	r3, r1
 8007d8c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6899      	ldr	r1, [r3, #8]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	691a      	ldr	r2, [r3, #16]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dc4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d111      	bne.n	8007df8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 f9e1 	bl	800819c <HAL_RTC_WaitForSynchro>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	22ff      	movs	r2, #255	; 0xff
 8007de6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2204      	movs	r2, #4
 8007dec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e00a      	b.n	8007e0e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	22ff      	movs	r2, #255	; 0xff
 8007dfe:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2201      	movs	r2, #1
 8007e04:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
  }
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd90      	pop	{r4, r7, pc}
 8007e16:	bf00      	nop
 8007e18:	007f7f7f 	.word	0x007f7f7f

08007e1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	7f1b      	ldrb	r3, [r3, #28]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_RTC_SetDate+0x1c>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e092      	b.n	8007f5e <HAL_RTC_SetDate+0x142>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2202      	movs	r2, #2
 8007e42:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10e      	bne.n	8007e68 <HAL_RTC_SetDate+0x4c>
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	785b      	ldrb	r3, [r3, #1]
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d008      	beq.n	8007e68 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	f023 0310 	bic.w	r3, r3, #16
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	330a      	adds	r3, #10
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d11c      	bne.n	8007ea8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	78db      	ldrb	r3, [r3, #3]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f9e6 	bl	8008244 <RTC_ByteToBcd2>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 f9df 	bl	8008244 <RTC_ByteToBcd2>
 8007e86:	4603      	mov	r3, r0
 8007e88:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007e8a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	789b      	ldrb	r3, [r3, #2]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 f9d7 	bl	8008244 <RTC_ByteToBcd2>
 8007e96:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007e98:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	e00e      	b.n	8007ec6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	78db      	ldrb	r3, [r3, #3]
 8007eac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007eb4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007eba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	22ca      	movs	r2, #202	; 0xca
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2253      	movs	r2, #83	; 0x53
 8007ed4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f988 	bl	80081ec <RTC_EnterInitMode>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00b      	beq.n	8007efa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	22ff      	movs	r2, #255	; 0xff
 8007ee8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2204      	movs	r2, #4
 8007eee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e031      	b.n	8007f5e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	4b19      	ldr	r3, [pc, #100]	; (8007f68 <HAL_RTC_SetDate+0x14c>)
 8007f02:	400b      	ands	r3, r1
 8007f04:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f14:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d111      	bne.n	8007f48 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 f939 	bl	800819c <HAL_RTC_WaitForSynchro>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	22ff      	movs	r2, #255	; 0xff
 8007f36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e00a      	b.n	8007f5e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	22ff      	movs	r2, #255	; 0xff
 8007f4e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2201      	movs	r2, #1
 8007f54:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
  }
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd90      	pop	{r4, r7, pc}
 8007f66:	bf00      	nop
 8007f68:	00ffff3f 	.word	0x00ffff3f

08007f6c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007f6c:	b590      	push	{r4, r7, lr}
 8007f6e:	b089      	sub	sp, #36	; 0x24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	7f1b      	ldrb	r3, [r3, #28]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d101      	bne.n	8007f90 <HAL_RTC_SetAlarm+0x24>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	e101      	b.n	8008194 <HAL_RTC_SetAlarm+0x228>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2201      	movs	r2, #1
 8007f94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d137      	bne.n	8008012 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 f942 	bl	8008244 <RTC_ByteToBcd2>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	785b      	ldrb	r3, [r3, #1]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f93b 	bl	8008244 <RTC_ByteToBcd2>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007fd2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	789b      	ldrb	r3, [r3, #2]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 f933 	bl	8008244 <RTC_ByteToBcd2>
 8007fde:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007fe0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	7b1b      	ldrb	r3, [r3, #12]
 8007fe8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007fea:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 f925 	bl	8008244 <RTC_ByteToBcd2>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ffe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008006:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800800c:	4313      	orrs	r3, r2
 800800e:	61fb      	str	r3, [r7, #28]
 8008010:	e023      	b.n	800805a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801c:	2b00      	cmp	r3, #0
 800801e:	d102      	bne.n	8008026 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	785b      	ldrb	r3, [r3, #1]
 8008030:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008032:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008038:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	7b1b      	ldrb	r3, [r3, #12]
 800803e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008040:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008048:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800804a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008050:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008056:	4313      	orrs	r3, r2
 8008058:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	4313      	orrs	r3, r2
 8008064:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	22ca      	movs	r2, #202	; 0xca
 800806c:	625a      	str	r2, [r3, #36]	; 0x24
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2253      	movs	r2, #83	; 0x53
 8008074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800807e:	d13f      	bne.n	8008100 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800808e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800809e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080a0:	f7fb fdb4 	bl	8003c0c <HAL_GetTick>
 80080a4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80080a6:	e013      	b.n	80080d0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80080a8:	f7fb fdb0 	bl	8003c0c <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080b6:	d90b      	bls.n	80080d0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	22ff      	movs	r2, #255	; 0xff
 80080be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2203      	movs	r2, #3
 80080c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e061      	b.n	8008194 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0e4      	beq.n	80080a8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080fc:	609a      	str	r2, [r3, #8]
 80080fe:	e03e      	b.n	800817e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689a      	ldr	r2, [r3, #8]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800810e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800811e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008120:	f7fb fd74 	bl	8003c0c <HAL_GetTick>
 8008124:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008126:	e013      	b.n	8008150 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008128:	f7fb fd70 	bl	8003c0c <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008136:	d90b      	bls.n	8008150 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	22ff      	movs	r2, #255	; 0xff
 800813e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2203      	movs	r2, #3
 8008144:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e021      	b.n	8008194 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0e4      	beq.n	8008128 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800817c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	22ff      	movs	r2, #255	; 0xff
 8008184:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3724      	adds	r7, #36	; 0x24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd90      	pop	{r4, r7, pc}

0800819c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68da      	ldr	r2, [r3, #12]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80081b6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80081b8:	f7fb fd28 	bl	8003c0c <HAL_GetTick>
 80081bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80081be:	e009      	b.n	80081d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80081c0:	f7fb fd24 	bl	8003c0c <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081ce:	d901      	bls.n	80081d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e007      	b.n	80081e4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0ee      	beq.n	80081c0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008202:	2b00      	cmp	r3, #0
 8008204:	d119      	bne.n	800823a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f04f 32ff 	mov.w	r2, #4294967295
 800820e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008210:	f7fb fcfc 	bl	8003c0c <HAL_GetTick>
 8008214:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008216:	e009      	b.n	800822c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008218:	f7fb fcf8 	bl	8003c0c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008226:	d901      	bls.n	800822c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e007      	b.n	800823c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0ee      	beq.n	8008218 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008252:	e005      	b.n	8008260 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	3301      	adds	r3, #1
 8008258:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	3b0a      	subs	r3, #10
 800825e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	2b09      	cmp	r3, #9
 8008264:	d8f6      	bhi.n	8008254 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	b2da      	uxtb	r2, r3
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	4313      	orrs	r3, r2
 8008272:	b2db      	uxtb	r3, r3
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	7f1b      	ldrb	r3, [r3, #28]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008298:	2302      	movs	r3, #2
 800829a:	e03e      	b.n	800831a <HAL_RTCEx_SetTimeStamp+0x9a>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2202      	movs	r2, #2
 80082a6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	4b1e      	ldr	r3, [pc, #120]	; (8008328 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	22ca      	movs	r2, #202	; 0xca
 80082c2:	625a      	str	r2, [r3, #36]	; 0x24
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2253      	movs	r2, #83	; 0x53
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0206 	bic.w	r2, r2, #6
 80082da:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008302:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	22ff      	movs	r2, #255	; 0xff
 800830a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	fffff7f7 	.word	0xfffff7f7

0800832c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800833c:	2300      	movs	r3, #0
 800833e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e14d      	b.n	80085e6 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d106      	bne.n	8008364 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7fb fa34 	bl	80037cc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f953 	bl	8008618 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d00c      	beq.n	8008394 <HAL_SAI_Init+0x68>
 800837a:	2b02      	cmp	r3, #2
 800837c:	d80d      	bhi.n	800839a <HAL_SAI_Init+0x6e>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_SAI_Init+0x5c>
 8008382:	2b01      	cmp	r3, #1
 8008384:	d003      	beq.n	800838e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008386:	e008      	b.n	800839a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	61fb      	str	r3, [r7, #28]
      break;
 800838c:	e006      	b.n	800839c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800838e:	2310      	movs	r3, #16
 8008390:	61fb      	str	r3, [r7, #28]
      break;
 8008392:	e003      	b.n	800839c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008394:	2320      	movs	r3, #32
 8008396:	61fb      	str	r3, [r7, #28]
      break;
 8008398:	e000      	b.n	800839c <HAL_SAI_Init+0x70>
    break;
 800839a:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d81e      	bhi.n	80083e2 <HAL_SAI_Init+0xb6>
 80083a4:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <HAL_SAI_Init+0x80>)
 80083a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083aa:	bf00      	nop
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083c3 	.word	0x080083c3
 80083b4:	080083cb 	.word	0x080083cb
 80083b8:	080083d3 	.word	0x080083d3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]
      }
      break;
 80083c0:	e010      	b.n	80083e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80083c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c6:	617b      	str	r3, [r7, #20]
      }
      break;
 80083c8:	e00c      	b.n	80083e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80083ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083ce:	617b      	str	r3, [r7, #20]
      }
      break;
 80083d0:	e008      	b.n	80083e4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80083d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083d6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	f043 0301 	orr.w	r3, r3, #1
 80083de:	61fb      	str	r3, [r7, #28]
      }
      break;
 80083e0:	e000      	b.n	80083e4 <HAL_SAI_Init+0xb8>
  default:
    break;
 80083e2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a81      	ldr	r2, [pc, #516]	; (80085f0 <HAL_SAI_Init+0x2c4>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d004      	beq.n	80083f8 <HAL_SAI_Init+0xcc>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a80      	ldr	r2, [pc, #512]	; (80085f4 <HAL_SAI_Init+0x2c8>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d103      	bne.n	8008400 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80083f8:	4a7f      	ldr	r2, [pc, #508]	; (80085f8 <HAL_SAI_Init+0x2cc>)
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e002      	b.n	8008406 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008400:	4a7e      	ldr	r2, [pc, #504]	; (80085fc <HAL_SAI_Init+0x2d0>)
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d043      	beq.n	8008496 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a76      	ldr	r2, [pc, #472]	; (80085f0 <HAL_SAI_Init+0x2c4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d004      	beq.n	8008426 <HAL_SAI_Init+0xfa>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a74      	ldr	r2, [pc, #464]	; (80085f4 <HAL_SAI_Init+0x2c8>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d104      	bne.n	8008430 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008426:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800842a:	f7ff fa7d 	bl	8007928 <HAL_RCCEx_GetPeriphCLKFreq>
 800842e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a72      	ldr	r2, [pc, #456]	; (8008600 <HAL_SAI_Init+0x2d4>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d004      	beq.n	8008444 <HAL_SAI_Init+0x118>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a71      	ldr	r2, [pc, #452]	; (8008604 <HAL_SAI_Init+0x2d8>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d104      	bne.n	800844e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008444:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008448:	f7ff fa6e 	bl	8007928 <HAL_RCCEx_GetPeriphCLKFreq>
 800844c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	461a      	mov	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	025b      	lsls	r3, r3, #9
 8008460:	fbb2 f3f3 	udiv	r3, r2, r3
 8008464:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4a67      	ldr	r2, [pc, #412]	; (8008608 <HAL_SAI_Init+0x2dc>)
 800846a:	fba2 2303 	umull	r2, r3, r2, r3
 800846e:	08da      	lsrs	r2, r3, #3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008474:	68f9      	ldr	r1, [r7, #12]
 8008476:	4b64      	ldr	r3, [pc, #400]	; (8008608 <HAL_SAI_Init+0x2dc>)
 8008478:	fba3 2301 	umull	r2, r3, r3, r1
 800847c:	08da      	lsrs	r2, r3, #3
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	1aca      	subs	r2, r1, r3
 8008488:	2a08      	cmp	r2, #8
 800848a:	d904      	bls.n	8008496 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_SAI_Init+0x17a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d109      	bne.n	80084ba <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d101      	bne.n	80084b2 <HAL_SAI_Init+0x186>
 80084ae:	2300      	movs	r3, #0
 80084b0:	e001      	b.n	80084b6 <HAL_SAI_Init+0x18a>
 80084b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084b6:	61bb      	str	r3, [r7, #24]
 80084b8:	e008      	b.n	80084cc <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d102      	bne.n	80084c8 <HAL_SAI_Init+0x19c>
 80084c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084c6:	e000      	b.n	80084ca <HAL_SAI_Init+0x19e>
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6819      	ldr	r1, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	4b4d      	ldr	r3, [pc, #308]	; (800860c <HAL_SAI_Init+0x2e0>)
 80084d8:	400b      	ands	r3, r1
 80084da:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6819      	ldr	r1, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80084f0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f6:	431a      	orrs	r2, r3
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008504:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008510:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	051b      	lsls	r3, r3, #20
 8008518:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6859      	ldr	r1, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	4b38      	ldr	r3, [pc, #224]	; (8008610 <HAL_SAI_Init+0x2e4>)
 800852e:	400b      	ands	r3, r1
 8008530:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6859      	ldr	r1, [r3, #4]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699a      	ldr	r2, [r3, #24]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	431a      	orrs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	431a      	orrs	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6899      	ldr	r1, [r3, #8]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4b2e      	ldr	r3, [pc, #184]	; (8008614 <HAL_SAI_Init+0x2e8>)
 800855c:	400b      	ands	r3, r1
 800855e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6899      	ldr	r1, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008570:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008576:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800857c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008582:	3b01      	subs	r3, #1
 8008584:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008586:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68d9      	ldr	r1, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800859e:	400b      	ands	r3, r1
 80085a0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68d9      	ldr	r1, [r3, #12]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	431a      	orrs	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085be:	3b01      	subs	r3, #1
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	40015804 	.word	0x40015804
 80085f4:	40015824 	.word	0x40015824
 80085f8:	40015800 	.word	0x40015800
 80085fc:	40015c00 	.word	0x40015c00
 8008600:	40015c04 	.word	0x40015c04
 8008604:	40015c24 	.word	0x40015c24
 8008608:	cccccccd 	.word	0xcccccccd
 800860c:	ff05c010 	.word	0xff05c010
 8008610:	ffff1ff0 	.word	0xffff1ff0
 8008614:	fff88000 	.word	0xfff88000

08008618 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008618:	b490      	push	{r4, r7}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008620:	4b16      	ldr	r3, [pc, #88]	; (800867c <SAI_Disable+0x64>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a16      	ldr	r2, [pc, #88]	; (8008680 <SAI_Disable+0x68>)
 8008626:	fba2 2303 	umull	r2, r3, r2, r3
 800862a:	0b1b      	lsrs	r3, r3, #12
 800862c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008640:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008642:	4623      	mov	r3, r4
 8008644:	1e5c      	subs	r4, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008650:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	73fb      	strb	r3, [r7, #15]
      break;
 800865e:	e006      	b.n	800866e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e9      	bne.n	8008642 <SAI_Disable+0x2a>

  return status;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bc90      	pop	{r4, r7}
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	20000014 	.word	0x20000014
 8008680:	95cbec1b 	.word	0x95cbec1b

08008684 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e022      	b.n	80086dc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d105      	bne.n	80086ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fa fcff 	bl	80030ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2203      	movs	r2, #3
 80086b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f814 	bl	80086e4 <HAL_SD_InitCard>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e00a      	b.n	80086dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80086e4:	b5b0      	push	{r4, r5, r7, lr}
 80086e6:	b08e      	sub	sp, #56	; 0x38
 80086e8:	af04      	add	r7, sp, #16
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008700:	2376      	movs	r3, #118	; 0x76
 8008702:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681d      	ldr	r5, [r3, #0]
 8008708:	466c      	mov	r4, sp
 800870a:	f107 0314 	add.w	r3, r7, #20
 800870e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008716:	f107 0308 	add.w	r3, r7, #8
 800871a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800871c:	4628      	mov	r0, r5
 800871e:	f002 ff61 	bl	800b5e4 <SDMMC_Init>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e03b      	b.n	80087ac <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008742:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4618      	mov	r0, r3
 800874a:	f002 ff84 	bl	800b656 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800875c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fde6 	bl	8009330 <SD_PowerON>
 8008764:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e013      	b.n	80087ac <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fd05 	bl	8009194 <SD_InitCard>
 800878a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00b      	beq.n	80087aa <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3728      	adds	r7, #40	; 0x28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bdb0      	pop	{r4, r5, r7, pc}

080087b4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08c      	sub	sp, #48	; 0x30
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d107      	bne.n	80087dc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e0cc      	b.n	8008976 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	f040 80c5 	bne.w	8008974 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	441a      	add	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d907      	bls.n	800880e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e0b3      	b.n	8008976 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2203      	movs	r2, #3
 8008812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2200      	movs	r2, #0
 800881c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800882c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	4a53      	ldr	r2, [pc, #332]	; (8008980 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008834:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	4a52      	ldr	r2, [pc, #328]	; (8008984 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800883c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	2200      	movs	r2, #0
 8008844:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3380      	adds	r3, #128	; 0x80
 8008850:	4619      	mov	r1, r3
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	025b      	lsls	r3, r3, #9
 8008858:	089b      	lsrs	r3, r3, #2
 800885a:	f7fc fc8f 	bl	800517c <HAL_DMA_Start_IT>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d017      	beq.n	8008894 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008872:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a43      	ldr	r2, [pc, #268]	; (8008988 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800887a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e070      	b.n	8008976 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0208 	orr.w	r2, r2, #8
 80088a2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d002      	beq.n	80088b2 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	025b      	lsls	r3, r3, #9
 80088b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088ba:	4618      	mov	r0, r3
 80088bc:	f002 ff5e 	bl	800b77c <SDMMC_CmdBlockLength>
 80088c0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00f      	beq.n	80088e8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a2e      	ldr	r2, [pc, #184]	; (8008988 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80088ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	431a      	orrs	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e046      	b.n	8008976 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088e8:	f04f 33ff 	mov.w	r3, #4294967295
 80088ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	025b      	lsls	r3, r3, #9
 80088f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80088f4:	2390      	movs	r3, #144	; 0x90
 80088f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80088f8:	2302      	movs	r3, #2
 80088fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008900:	2301      	movs	r3, #1
 8008902:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f107 0210 	add.w	r2, r7, #16
 800890c:	4611      	mov	r1, r2
 800890e:	4618      	mov	r0, r3
 8008910:	f002 ff08 	bl	800b724 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d90a      	bls.n	8008930 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2282      	movs	r2, #130	; 0x82
 800891e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008926:	4618      	mov	r0, r3
 8008928:	f002 ff6c 	bl	800b804 <SDMMC_CmdReadMultiBlock>
 800892c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800892e:	e009      	b.n	8008944 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2281      	movs	r2, #129	; 0x81
 8008934:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800893c:	4618      	mov	r0, r3
 800893e:	f002 ff3f 	bl	800b7c0 <SDMMC_CmdReadSingleBlock>
 8008942:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	2b00      	cmp	r3, #0
 8008948:	d012      	beq.n	8008970 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a0e      	ldr	r2, [pc, #56]	; (8008988 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008950:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	431a      	orrs	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e002      	b.n	8008976 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	e000      	b.n	8008976 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008974:	2302      	movs	r3, #2
  }
}
 8008976:	4618      	mov	r0, r3
 8008978:	3730      	adds	r7, #48	; 0x30
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	0800907f 	.word	0x0800907f
 8008984:	080090f1 	.word	0x080090f1
 8008988:	004005ff 	.word	0x004005ff

0800898c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08c      	sub	sp, #48	; 0x30
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d107      	bne.n	80089b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0cf      	b.n	8008b54 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	f040 80c8 	bne.w	8008b52 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80089c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	441a      	add	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d907      	bls.n	80089e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e0b6      	b.n	8008b54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2203      	movs	r2, #3
 80089ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f042 021a 	orr.w	r2, r2, #26
 8008a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0a:	4a54      	ldr	r2, [pc, #336]	; (8008b5c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a12:	4a53      	ldr	r2, [pc, #332]	; (8008b60 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008a14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d002      	beq.n	8008a2c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	025b      	lsls	r3, r3, #9
 8008a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a34:	4618      	mov	r0, r3
 8008a36:	f002 fea1 	bl	800b77c <SDMMC_CmdBlockLength>
 8008a3a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00f      	beq.n	8008a62 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a47      	ldr	r2, [pc, #284]	; (8008b64 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	431a      	orrs	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e078      	b.n	8008b54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d90a      	bls.n	8008a7e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	22a0      	movs	r2, #160	; 0xa0
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a74:	4618      	mov	r0, r3
 8008a76:	f002 ff09 	bl	800b88c <SDMMC_CmdWriteMultiBlock>
 8008a7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a7c:	e009      	b.n	8008a92 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2290      	movs	r2, #144	; 0x90
 8008a82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f002 fedc 	bl	800b848 <SDMMC_CmdWriteSingleBlock>
 8008a90:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d012      	beq.n	8008abe <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a31      	ldr	r2, [pc, #196]	; (8008b64 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e04a      	b.n	8008b54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f042 0208 	orr.w	r2, r2, #8
 8008acc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ad2:	68b9      	ldr	r1, [r7, #8]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3380      	adds	r3, #128	; 0x80
 8008ada:	461a      	mov	r2, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	025b      	lsls	r3, r3, #9
 8008ae0:	089b      	lsrs	r3, r3, #2
 8008ae2:	f7fc fb4b 	bl	800517c <HAL_DMA_Start_IT>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01a      	beq.n	8008b22 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 021a 	bic.w	r2, r2, #26
 8008afa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a18      	ldr	r2, [pc, #96]	; (8008b64 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008b02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e018      	b.n	8008b54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b22:	f04f 33ff 	mov.w	r3, #4294967295
 8008b26:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	025b      	lsls	r3, r3, #9
 8008b2c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b2e:	2390      	movs	r3, #144	; 0x90
 8008b30:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008b32:	2300      	movs	r3, #0
 8008b34:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f107 0210 	add.w	r2, r7, #16
 8008b46:	4611      	mov	r1, r2
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fdeb 	bl	800b724 <SDMMC_ConfigData>

      return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e000      	b.n	8008b54 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008b52:	2302      	movs	r3, #2
  }
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3730      	adds	r7, #48	; 0x30
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	08009055 	.word	0x08009055
 8008b60:	080090f1 	.word	0x080090f1
 8008b64:	004005ff 	.word	0x004005ff

08008b68 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b8a:	0f9b      	lsrs	r3, r3, #30
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b96:	0e9b      	lsrs	r3, r3, #26
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba8:	0e1b      	lsrs	r3, r3, #24
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bba:	0c1b      	lsrs	r3, r3, #16
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bdc:	0d1b      	lsrs	r3, r3, #20
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008be8:	0c1b      	lsrs	r3, r3, #16
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bfa:	0bdb      	lsrs	r3, r3, #15
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c0c:	0b9b      	lsrs	r3, r3, #14
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c1e:	0b5b      	lsrs	r3, r3, #13
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c30:	0b1b      	lsrs	r3, r3, #12
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2200      	movs	r2, #0
 8008c42:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d163      	bne.n	8008d14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c50:	009a      	lsls	r2, r3, #2
 8008c52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c56:	4013      	ands	r3, r2
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c5c:	0f92      	lsrs	r2, r2, #30
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c68:	0edb      	lsrs	r3, r3, #27
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	f003 0307 	and.w	r3, r3, #7
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c7a:	0e1b      	lsrs	r3, r3, #24
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c8c:	0d5b      	lsrs	r3, r3, #21
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	f003 0307 	and.w	r3, r3, #7
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c9e:	0c9b      	lsrs	r3, r3, #18
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb0:	0bdb      	lsrs	r3, r3, #15
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	f003 0307 	and.w	r3, r3, #7
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	7e1b      	ldrb	r3, [r3, #24]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008cde:	fb03 f202 	mul.w	r2, r3, r2
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	7a1b      	ldrb	r3, [r3, #8]
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 030f 	and.w	r3, r3, #15
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	409a      	lsls	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008d00:	0a52      	lsrs	r2, r2, #9
 8008d02:	fb03 f202 	mul.w	r2, r3, r2
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d10:	661a      	str	r2, [r3, #96]	; 0x60
 8008d12:	e031      	b.n	8008d78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d11d      	bne.n	8008d58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d20:	041b      	lsls	r3, r3, #16
 8008d22:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d2a:	0c1b      	lsrs	r3, r3, #16
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	3301      	adds	r3, #1
 8008d38:	029a      	lsls	r2, r3, #10
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d4c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	661a      	str	r2, [r3, #96]	; 0x60
 8008d56:	e00f      	b.n	8008d78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a58      	ldr	r2, [pc, #352]	; (8008ec0 <HAL_SD_GetCardCSD+0x344>)
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e09d      	b.n	8008eb4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d7c:	0b9b      	lsrs	r3, r3, #14
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d8e:	09db      	lsrs	r3, r3, #7
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db0:	0fdb      	lsrs	r3, r3, #31
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbc:	0f5b      	lsrs	r3, r3, #29
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dce:	0e9b      	lsrs	r3, r3, #26
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	f003 0307 	and.w	r3, r3, #7
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de0:	0d9b      	lsrs	r3, r3, #22
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df2:	0d5b      	lsrs	r3, r3, #21
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e22:	0bdb      	lsrs	r3, r3, #15
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e36:	0b9b      	lsrs	r3, r3, #14
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4a:	0b5b      	lsrs	r3, r3, #13
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5e:	0b1b      	lsrs	r3, r3, #12
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e72:	0a9b      	lsrs	r3, r3, #10
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e86:	0a1b      	lsrs	r3, r3, #8
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9a:	085b      	lsrs	r3, r3, #1
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	004005ff 	.word	0x004005ff

08008ec4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008f1c:	b5b0      	push	{r4, r5, r7, lr}
 8008f1e:	b08e      	sub	sp, #56	; 0x38
 8008f20:	af04      	add	r7, sp, #16
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2203      	movs	r2, #3
 8008f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d02e      	beq.n	8008f94 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f3c:	d106      	bne.n	8008f4c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f42:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	639a      	str	r2, [r3, #56]	; 0x38
 8008f4a:	e029      	b.n	8008fa0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f52:	d10a      	bne.n	8008f6a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 faa1 	bl	800949c <SD_WideBus_Enable>
 8008f5a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38
 8008f68:	e01a      	b.n	8008fa0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10a      	bne.n	8008f86 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fade 	bl	8009532 <SD_WideBus_Disable>
 8008f76:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38
 8008f84:	e00c      	b.n	8008fa0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
 8008f92:	e005      	b.n	8008fa0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d009      	beq.n	8008fbc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a18      	ldr	r2, [pc, #96]	; (8009010 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e024      	b.n	8009006 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681d      	ldr	r5, [r3, #0]
 8008fe2:	466c      	mov	r4, sp
 8008fe4:	f107 0318 	add.w	r3, r7, #24
 8008fe8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ff0:	f107 030c 	add.w	r3, r7, #12
 8008ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f002 faf4 	bl	800b5e4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3728      	adds	r7, #40	; 0x28
 800900a:	46bd      	mov	sp, r7
 800900c:	bdb0      	pop	{r4, r5, r7, pc}
 800900e:	bf00      	nop
 8009010:	004005ff 	.word	0x004005ff

08009014 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009020:	f107 030c 	add.w	r3, r7, #12
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fa10 	bl	800944c <SD_SendStatus>
 800902c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	431a      	orrs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	0a5b      	lsrs	r3, r3, #9
 8009044:	f003 030f 	and.w	r3, r3, #15
 8009048:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800904a:	693b      	ldr	r3, [r7, #16]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009060:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009070:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009072:	bf00      	nop
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	2b82      	cmp	r3, #130	; 0x82
 8009092:	d111      	bne.n	80090b8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f002 fc19 	bl	800b8d0 <SDMMC_CmdStopTransfer>
 800909e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d008      	beq.n	80090b8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	431a      	orrs	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff fd58 	bl	8008b68 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 0208 	bic.w	r2, r2, #8
 80090c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80090d0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f003 f85f 	bl	800c1a4 <HAL_SD_RxCpltCallback>
#endif
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fc f89c 	bl	800523c <HAL_DMA_GetError>
 8009104:	4603      	mov	r3, r0
 8009106:	2b02      	cmp	r3, #2
 8009108:	d03e      	beq.n	8009188 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009110:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009118:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d002      	beq.n	8009126 <SD_DMAError+0x36>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d12d      	bne.n	8009182 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a19      	ldr	r2, [pc, #100]	; (8009190 <SD_DMAError+0xa0>)
 800912c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800913c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800914a:	6978      	ldr	r0, [r7, #20]
 800914c:	f7ff ff62 	bl	8009014 <HAL_SD_GetCardState>
 8009150:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b06      	cmp	r3, #6
 8009156:	d002      	beq.n	800915e <SD_DMAError+0x6e>
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b05      	cmp	r3, #5
 800915c:	d10a      	bne.n	8009174 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f002 fbb4 	bl	800b8d0 <SDMMC_CmdStopTransfer>
 8009168:	4602      	mov	r2, r0
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916e:	431a      	orrs	r2, r3
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2200      	movs	r2, #0
 8009180:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009182:	6978      	ldr	r0, [r7, #20]
 8009184:	f7ff fcf0 	bl	8008b68 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009188:	bf00      	nop
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	004005ff 	.word	0x004005ff

08009194 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009194:	b5b0      	push	{r4, r5, r7, lr}
 8009196:	b094      	sub	sp, #80	; 0x50
 8009198:	af04      	add	r7, sp, #16
 800919a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800919c:	2301      	movs	r3, #1
 800919e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f002 fa65 	bl	800b674 <SDMMC_GetPowerState>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80091b4:	e0b8      	b.n	8009328 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d02f      	beq.n	800921e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f002 fc8f 	bl	800bae6 <SDMMC_CmdSendCID>
 80091c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80091d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d2:	e0a9      	b.n	8009328 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2100      	movs	r1, #0
 80091da:	4618      	mov	r0, r3
 80091dc:	f002 fa8f 	bl	800b6fe <SDMMC_GetResponse>
 80091e0:	4602      	mov	r2, r0
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2104      	movs	r1, #4
 80091ec:	4618      	mov	r0, r3
 80091ee:	f002 fa86 	bl	800b6fe <SDMMC_GetResponse>
 80091f2:	4602      	mov	r2, r0
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2108      	movs	r1, #8
 80091fe:	4618      	mov	r0, r3
 8009200:	f002 fa7d 	bl	800b6fe <SDMMC_GetResponse>
 8009204:	4602      	mov	r2, r0
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	210c      	movs	r1, #12
 8009210:	4618      	mov	r0, r3
 8009212:	f002 fa74 	bl	800b6fe <SDMMC_GetResponse>
 8009216:	4602      	mov	r2, r0
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009222:	2b03      	cmp	r3, #3
 8009224:	d00d      	beq.n	8009242 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f107 020e 	add.w	r2, r7, #14
 800922e:	4611      	mov	r1, r2
 8009230:	4618      	mov	r0, r3
 8009232:	f002 fc95 	bl	800bb60 <SDMMC_CmdSetRelAdd>
 8009236:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <SD_InitCard+0xae>
    {
      return errorstate;
 800923e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009240:	e072      	b.n	8009328 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009246:	2b03      	cmp	r3, #3
 8009248:	d036      	beq.n	80092b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800924a:	89fb      	ldrh	r3, [r7, #14]
 800924c:	461a      	mov	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800925a:	041b      	lsls	r3, r3, #16
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	f002 fc5f 	bl	800bb22 <SDMMC_CmdSendCSD>
 8009264:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <SD_InitCard+0xdc>
    {
      return errorstate;
 800926c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926e:	e05b      	b.n	8009328 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2100      	movs	r1, #0
 8009276:	4618      	mov	r0, r3
 8009278:	f002 fa41 	bl	800b6fe <SDMMC_GetResponse>
 800927c:	4602      	mov	r2, r0
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2104      	movs	r1, #4
 8009288:	4618      	mov	r0, r3
 800928a:	f002 fa38 	bl	800b6fe <SDMMC_GetResponse>
 800928e:	4602      	mov	r2, r0
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2108      	movs	r1, #8
 800929a:	4618      	mov	r0, r3
 800929c:	f002 fa2f 	bl	800b6fe <SDMMC_GetResponse>
 80092a0:	4602      	mov	r2, r0
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	210c      	movs	r1, #12
 80092ac:	4618      	mov	r0, r3
 80092ae:	f002 fa26 	bl	800b6fe <SDMMC_GetResponse>
 80092b2:	4602      	mov	r2, r0
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2104      	movs	r1, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f002 fa1d 	bl	800b6fe <SDMMC_GetResponse>
 80092c4:	4603      	mov	r3, r0
 80092c6:	0d1a      	lsrs	r2, r3, #20
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80092cc:	f107 0310 	add.w	r3, r7, #16
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7ff fc52 	bl	8008b7c <HAL_SD_GetCardCSD>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80092e2:	e021      	b.n	8009328 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6819      	ldr	r1, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ec:	041b      	lsls	r3, r3, #16
 80092ee:	2200      	movs	r2, #0
 80092f0:	461c      	mov	r4, r3
 80092f2:	4615      	mov	r5, r2
 80092f4:	4622      	mov	r2, r4
 80092f6:	462b      	mov	r3, r5
 80092f8:	4608      	mov	r0, r1
 80092fa:	f002 fb0b 	bl	800b914 <SDMMC_CmdSelDesel>
 80092fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <SD_InitCard+0x176>
  {
    return errorstate;
 8009306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009308:	e00e      	b.n	8009328 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681d      	ldr	r5, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	466c      	mov	r4, sp
 8009312:	f103 0210 	add.w	r2, r3, #16
 8009316:	ca07      	ldmia	r2, {r0, r1, r2}
 8009318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800931c:	3304      	adds	r3, #4
 800931e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009320:	4628      	mov	r0, r5
 8009322:	f002 f95f 	bl	800b5e4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3740      	adds	r7, #64	; 0x40
 800932c:	46bd      	mov	sp, r7
 800932e:	bdb0      	pop	{r4, r5, r7, pc}

08009330 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	2300      	movs	r3, #0
 8009342:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f002 fb06 	bl	800b95a <SDMMC_CmdGoIdleState>
 800934e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	e072      	b.n	8009440 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4618      	mov	r0, r3
 8009360:	f002 fb19 	bl	800b996 <SDMMC_CmdOperCond>
 8009364:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00d      	beq.n	8009388 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4618      	mov	r0, r3
 8009378:	f002 faef 	bl	800b95a <SDMMC_CmdGoIdleState>
 800937c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	e05b      	b.n	8009440 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009392:	2b01      	cmp	r3, #1
 8009394:	d137      	bne.n	8009406 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2100      	movs	r1, #0
 800939c:	4618      	mov	r0, r3
 800939e:	f002 fb19 	bl	800b9d4 <SDMMC_CmdAppCommand>
 80093a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d02d      	beq.n	8009406 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093ae:	e047      	b.n	8009440 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2100      	movs	r1, #0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f002 fb0c 	bl	800b9d4 <SDMMC_CmdAppCommand>
 80093bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	e03b      	b.n	8009440 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	491e      	ldr	r1, [pc, #120]	; (8009448 <SD_PowerON+0x118>)
 80093ce:	4618      	mov	r0, r3
 80093d0:	f002 fb22 	bl	800ba18 <SDMMC_CmdAppOperCommand>
 80093d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093e0:	e02e      	b.n	8009440 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2100      	movs	r1, #0
 80093e8:	4618      	mov	r0, r3
 80093ea:	f002 f988 	bl	800b6fe <SDMMC_GetResponse>
 80093ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	0fdb      	lsrs	r3, r3, #31
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d101      	bne.n	80093fc <SD_PowerON+0xcc>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e000      	b.n	80093fe <SD_PowerON+0xce>
 80093fc:	2300      	movs	r3, #0
 80093fe:	613b      	str	r3, [r7, #16]

    count++;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	3301      	adds	r3, #1
 8009404:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800940c:	4293      	cmp	r3, r2
 800940e:	d802      	bhi.n	8009416 <SD_PowerON+0xe6>
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0cc      	beq.n	80093b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800941c:	4293      	cmp	r3, r2
 800941e:	d902      	bls.n	8009426 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009424:	e00c      	b.n	8009440 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	645a      	str	r2, [r3, #68]	; 0x44
 8009436:	e002      	b.n	800943e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	c1100000 	.word	0xc1100000

0800944c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d102      	bne.n	8009462 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800945c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009460:	e018      	b.n	8009494 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800946a:	041b      	lsls	r3, r3, #16
 800946c:	4619      	mov	r1, r3
 800946e:	4610      	mov	r0, r2
 8009470:	f002 fb97 	bl	800bba2 <SDMMC_CmdSendStatus>
 8009474:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <SD_SendStatus+0x34>
  {
    return errorstate;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	e009      	b.n	8009494 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2100      	movs	r1, #0
 8009486:	4618      	mov	r0, r3
 8009488:	f002 f939 	bl	800b6fe <SDMMC_GetResponse>
 800948c:	4602      	mov	r2, r0
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80094a4:	2300      	movs	r3, #0
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	2300      	movs	r3, #0
 80094aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2100      	movs	r1, #0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f002 f923 	bl	800b6fe <SDMMC_GetResponse>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094c2:	d102      	bne.n	80094ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80094c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094c8:	e02f      	b.n	800952a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80094ca:	f107 030c 	add.w	r3, r7, #12
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f879 	bl	80095c8 <SD_FindSCR>
 80094d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	e023      	b.n	800952a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01c      	beq.n	8009526 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f4:	041b      	lsls	r3, r3, #16
 80094f6:	4619      	mov	r1, r3
 80094f8:	4610      	mov	r0, r2
 80094fa:	f002 fa6b 	bl	800b9d4 <SDMMC_CmdAppCommand>
 80094fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	e00f      	b.n	800952a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2102      	movs	r1, #2
 8009510:	4618      	mov	r0, r3
 8009512:	f002 faa5 	bl	800ba60 <SDMMC_CmdBusWidth>
 8009516:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	e003      	b.n	800952a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009522:	2300      	movs	r3, #0
 8009524:	e001      	b.n	800952a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009526:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b086      	sub	sp, #24
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800953a:	2300      	movs	r3, #0
 800953c:	60fb      	str	r3, [r7, #12]
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2100      	movs	r1, #0
 8009548:	4618      	mov	r0, r3
 800954a:	f002 f8d8 	bl	800b6fe <SDMMC_GetResponse>
 800954e:	4603      	mov	r3, r0
 8009550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009558:	d102      	bne.n	8009560 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800955a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800955e:	e02f      	b.n	80095c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009560:	f107 030c 	add.w	r3, r7, #12
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f82e 	bl	80095c8 <SD_FindSCR>
 800956c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	e023      	b.n	80095c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01c      	beq.n	80095bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958a:	041b      	lsls	r3, r3, #16
 800958c:	4619      	mov	r1, r3
 800958e:	4610      	mov	r0, r2
 8009590:	f002 fa20 	bl	800b9d4 <SDMMC_CmdAppCommand>
 8009594:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	e00f      	b.n	80095c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2100      	movs	r1, #0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f002 fa5a 	bl	800ba60 <SDMMC_CmdBusWidth>
 80095ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	e003      	b.n	80095c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095b8:	2300      	movs	r3, #0
 80095ba:	e001      	b.n	80095c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80095c8:	b590      	push	{r4, r7, lr}
 80095ca:	b08f      	sub	sp, #60	; 0x3c
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095d2:	f7fa fb1b 	bl	8003c0c <HAL_GetTick>
 80095d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80095dc:	2300      	movs	r3, #0
 80095de:	60bb      	str	r3, [r7, #8]
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2108      	movs	r1, #8
 80095ee:	4618      	mov	r0, r3
 80095f0:	f002 f8c4 	bl	800b77c <SDMMC_CmdBlockLength>
 80095f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <SD_FindSCR+0x38>
  {
    return errorstate;
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	e0a9      	b.n	8009754 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009608:	041b      	lsls	r3, r3, #16
 800960a:	4619      	mov	r1, r3
 800960c:	4610      	mov	r0, r2
 800960e:	f002 f9e1 	bl	800b9d4 <SDMMC_CmdAppCommand>
 8009612:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <SD_FindSCR+0x56>
  {
    return errorstate;
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	e09a      	b.n	8009754 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800961e:	f04f 33ff 	mov.w	r3, #4294967295
 8009622:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009624:	2308      	movs	r3, #8
 8009626:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009628:	2330      	movs	r3, #48	; 0x30
 800962a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800962c:	2302      	movs	r3, #2
 800962e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009630:	2300      	movs	r3, #0
 8009632:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009634:	2301      	movs	r3, #1
 8009636:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f107 0210 	add.w	r2, r7, #16
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f002 f86e 	bl	800b724 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4618      	mov	r0, r3
 800964e:	f002 fa29 	bl	800baa4 <SDMMC_CmdSendSCR>
 8009652:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	2b00      	cmp	r3, #0
 8009658:	d022      	beq.n	80096a0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	e07a      	b.n	8009754 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00e      	beq.n	800968a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6819      	ldr	r1, [r3, #0]
 8009670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	f107 0208 	add.w	r2, r7, #8
 8009678:	18d4      	adds	r4, r2, r3
 800967a:	4608      	mov	r0, r1
 800967c:	f001 ffde 	bl	800b63c <SDMMC_ReadFIFO>
 8009680:	4603      	mov	r3, r0
 8009682:	6023      	str	r3, [r4, #0]
      index++;
 8009684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009686:	3301      	adds	r3, #1
 8009688:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800968a:	f7fa fabf 	bl	8003c0c <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009698:	d102      	bne.n	80096a0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800969a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800969e:	e059      	b.n	8009754 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096a6:	f240 432a 	movw	r3, #1066	; 0x42a
 80096aa:	4013      	ands	r3, r2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d0d6      	beq.n	800965e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b6:	f003 0308 	and.w	r3, r3, #8
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d005      	beq.n	80096ca <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2208      	movs	r2, #8
 80096c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80096c6:	2308      	movs	r3, #8
 80096c8:	e044      	b.n	8009754 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2202      	movs	r2, #2
 80096de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80096e0:	2302      	movs	r3, #2
 80096e2:	e037      	b.n	8009754 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ea:	f003 0320 	and.w	r3, r3, #32
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2220      	movs	r2, #32
 80096f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80096fa:	2320      	movs	r3, #32
 80096fc:	e02a      	b.n	8009754 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f240 523a 	movw	r2, #1338	; 0x53a
 8009706:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	061a      	lsls	r2, r3, #24
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	021b      	lsls	r3, r3, #8
 8009710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009714:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	0a1b      	lsrs	r3, r3, #8
 800971a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800971e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	0e1b      	lsrs	r3, r3, #24
 8009724:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	601a      	str	r2, [r3, #0]
    scr++;
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	3304      	adds	r3, #4
 800972e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	061a      	lsls	r2, r3, #24
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800973c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	0a1b      	lsrs	r3, r3, #8
 8009742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009746:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	0e1b      	lsrs	r3, r3, #24
 800974c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	373c      	adds	r7, #60	; 0x3c
 8009758:	46bd      	mov	sp, r7
 800975a:	bd90      	pop	{r4, r7, pc}

0800975c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e025      	b.n	80097bc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d106      	bne.n	800978a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7fa f817 	bl	80037b8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2202      	movs	r2, #2
 800978e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3304      	adds	r3, #4
 800979a:	4619      	mov	r1, r3
 800979c:	4610      	mov	r0, r2
 800979e:	f001 fdfb 	bl	800b398 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6818      	ldr	r0, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	461a      	mov	r2, r3
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	f001 fe65 	bl	800b47c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d101      	bne.n	80097e0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80097dc:	2302      	movs	r3, #2
 80097de:	e018      	b.n	8009812 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	68b9      	ldr	r1, [r7, #8]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f001 fec3 	bl	800b57c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d104      	bne.n	8009808 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2205      	movs	r2, #5
 8009802:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009806:	e003      	b.n	8009810 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b02      	cmp	r3, #2
 800982e:	d101      	bne.n	8009834 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009830:	2302      	movs	r3, #2
 8009832:	e00e      	b.n	8009852 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	4618      	mov	r0, r3
 8009844:	f001 febb 	bl	800b5be <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e04c      	b.n	8009908 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7f9 fc74 	bl	8003170 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0203 	bic.w	r2, r2, #3
 800989e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4b19      	ldr	r3, [pc, #100]	; (8009910 <HAL_SPDIFRX_Init+0xb4>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80098b8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80098be:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80098c4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80098ca:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80098d0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80098d6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80098dc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80098e2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80098e8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	fff88407 	.word	0xfff88407

08009914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e084      	b.n	8009a30 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b00      	cmp	r3, #0
 8009936:	d106      	bne.n	8009946 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7f9 fc57 	bl	80031f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2202      	movs	r2, #2
 800994a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800995c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009966:	d902      	bls.n	800996e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009968:	2300      	movs	r3, #0
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	e002      	b.n	8009974 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800996e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009972:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800997c:	d007      	beq.n	800998e <HAL_SPI_Init+0x7a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009986:	d002      	beq.n	800998e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10b      	bne.n	80099ae <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800999e:	d903      	bls.n	80099a8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2202      	movs	r2, #2
 80099a4:	631a      	str	r2, [r3, #48]	; 0x30
 80099a6:	e002      	b.n	80099ae <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	431a      	orrs	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099cc:	431a      	orrs	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	431a      	orrs	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a1b      	ldr	r3, [r3, #32]
 80099d8:	ea42 0103 	orr.w	r1, r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	0c1b      	lsrs	r3, r3, #16
 80099ee:	f003 0204 	and.w	r2, r3, #4
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	ea42 0103 	orr.w	r1, r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	430a      	orrs	r2, r1
 8009a0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	69da      	ldr	r2, [r3, #28]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e01d      	b.n	8009a86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d106      	bne.n	8009a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7f9 fc2a 	bl	80032b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4619      	mov	r1, r3
 8009a76:	4610      	mov	r0, r2
 8009a78:	f000 fb84 	bl	800a184 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f042 0201 	orr.w	r2, r2, #1
 8009aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	4b0c      	ldr	r3, [pc, #48]	; (8009ae0 <HAL_TIM_Base_Start_IT+0x50>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b06      	cmp	r3, #6
 8009ab8:	d00b      	beq.n	8009ad2 <HAL_TIM_Base_Start_IT+0x42>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ac0:	d007      	beq.n	8009ad2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0201 	orr.w	r2, r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	00010007 	.word	0x00010007

08009ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e01d      	b.n	8009b32 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d106      	bne.n	8009b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7f9 fc42 	bl	8003394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	4619      	mov	r1, r3
 8009b22:	4610      	mov	r0, r2
 8009b24:	f000 fb2e 	bl	800a184 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	f003 0302 	and.w	r3, r3, #2
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d122      	bne.n	8009b96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d11b      	bne.n	8009b96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f06f 0202 	mvn.w	r2, #2
 8009b66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	f003 0303 	and.w	r3, r3, #3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fae3 	bl	800a148 <HAL_TIM_IC_CaptureCallback>
 8009b82:	e005      	b.n	8009b90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fad5 	bl	800a134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fae6 	bl	800a15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	d122      	bne.n	8009bea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f003 0304 	and.w	r3, r3, #4
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d11b      	bne.n	8009bea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f06f 0204 	mvn.w	r2, #4
 8009bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fab9 	bl	800a148 <HAL_TIM_IC_CaptureCallback>
 8009bd6:	e005      	b.n	8009be4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 faab 	bl	800a134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fabc 	bl	800a15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f003 0308 	and.w	r3, r3, #8
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d122      	bne.n	8009c3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f003 0308 	and.w	r3, r3, #8
 8009c02:	2b08      	cmp	r3, #8
 8009c04:	d11b      	bne.n	8009c3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f06f 0208 	mvn.w	r2, #8
 8009c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2204      	movs	r2, #4
 8009c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	69db      	ldr	r3, [r3, #28]
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fa8f 	bl	800a148 <HAL_TIM_IC_CaptureCallback>
 8009c2a:	e005      	b.n	8009c38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fa81 	bl	800a134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fa92 	bl	800a15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f003 0310 	and.w	r3, r3, #16
 8009c48:	2b10      	cmp	r3, #16
 8009c4a:	d122      	bne.n	8009c92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f003 0310 	and.w	r3, r3, #16
 8009c56:	2b10      	cmp	r3, #16
 8009c58:	d11b      	bne.n	8009c92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f06f 0210 	mvn.w	r2, #16
 8009c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2208      	movs	r2, #8
 8009c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fa65 	bl	800a148 <HAL_TIM_IC_CaptureCallback>
 8009c7e:	e005      	b.n	8009c8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa57 	bl	800a134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fa68 	bl	800a15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	f003 0301 	and.w	r3, r3, #1
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d10e      	bne.n	8009cbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d107      	bne.n	8009cbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f06f 0201 	mvn.w	r2, #1
 8009cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7f8 fe7f 	bl	80029bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc8:	2b80      	cmp	r3, #128	; 0x80
 8009cca:	d10e      	bne.n	8009cea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd6:	2b80      	cmp	r3, #128	; 0x80
 8009cd8:	d107      	bne.n	8009cea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fefb 	bl	800aae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cf8:	d10e      	bne.n	8009d18 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d04:	2b80      	cmp	r3, #128	; 0x80
 8009d06:	d107      	bne.n	8009d18 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 feee 	bl	800aaf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d22:	2b40      	cmp	r3, #64	; 0x40
 8009d24:	d10e      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d30:	2b40      	cmp	r3, #64	; 0x40
 8009d32:	d107      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fa16 	bl	800a170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0320 	and.w	r3, r3, #32
 8009d4e:	2b20      	cmp	r3, #32
 8009d50:	d10e      	bne.n	8009d70 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f003 0320 	and.w	r3, r3, #32
 8009d5c:	2b20      	cmp	r3, #32
 8009d5e:	d107      	bne.n	8009d70 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f06f 0220 	mvn.w	r2, #32
 8009d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 feae 	bl	800aacc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d70:	bf00      	nop
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d101      	bne.n	8009d92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	e105      	b.n	8009f9e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b14      	cmp	r3, #20
 8009da6:	f200 80f0 	bhi.w	8009f8a <HAL_TIM_PWM_ConfigChannel+0x212>
 8009daa:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009e05 	.word	0x08009e05
 8009db4:	08009f8b 	.word	0x08009f8b
 8009db8:	08009f8b 	.word	0x08009f8b
 8009dbc:	08009f8b 	.word	0x08009f8b
 8009dc0:	08009e45 	.word	0x08009e45
 8009dc4:	08009f8b 	.word	0x08009f8b
 8009dc8:	08009f8b 	.word	0x08009f8b
 8009dcc:	08009f8b 	.word	0x08009f8b
 8009dd0:	08009e87 	.word	0x08009e87
 8009dd4:	08009f8b 	.word	0x08009f8b
 8009dd8:	08009f8b 	.word	0x08009f8b
 8009ddc:	08009f8b 	.word	0x08009f8b
 8009de0:	08009ec7 	.word	0x08009ec7
 8009de4:	08009f8b 	.word	0x08009f8b
 8009de8:	08009f8b 	.word	0x08009f8b
 8009dec:	08009f8b 	.word	0x08009f8b
 8009df0:	08009f09 	.word	0x08009f09
 8009df4:	08009f8b 	.word	0x08009f8b
 8009df8:	08009f8b 	.word	0x08009f8b
 8009dfc:	08009f8b 	.word	0x08009f8b
 8009e00:	08009f49 	.word	0x08009f49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fa5a 	bl	800a2c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	699a      	ldr	r2, [r3, #24]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f042 0208 	orr.w	r2, r2, #8
 8009e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	699a      	ldr	r2, [r3, #24]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0204 	bic.w	r2, r2, #4
 8009e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6999      	ldr	r1, [r3, #24]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	691a      	ldr	r2, [r3, #16]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	619a      	str	r2, [r3, #24]
      break;
 8009e42:	e0a3      	b.n	8009f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68b9      	ldr	r1, [r7, #8]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 faac 	bl	800a3a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	699a      	ldr	r2, [r3, #24]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	699a      	ldr	r2, [r3, #24]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6999      	ldr	r1, [r3, #24]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	021a      	lsls	r2, r3, #8
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	430a      	orrs	r2, r1
 8009e82:	619a      	str	r2, [r3, #24]
      break;
 8009e84:	e082      	b.n	8009f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68b9      	ldr	r1, [r7, #8]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 fb03 	bl	800a498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69da      	ldr	r2, [r3, #28]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f042 0208 	orr.w	r2, r2, #8
 8009ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	69da      	ldr	r2, [r3, #28]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f022 0204 	bic.w	r2, r2, #4
 8009eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	69d9      	ldr	r1, [r3, #28]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	691a      	ldr	r2, [r3, #16]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	61da      	str	r2, [r3, #28]
      break;
 8009ec4:	e062      	b.n	8009f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68b9      	ldr	r1, [r7, #8]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 fb59 	bl	800a584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	69da      	ldr	r2, [r3, #28]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69da      	ldr	r2, [r3, #28]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	69d9      	ldr	r1, [r3, #28]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	021a      	lsls	r2, r3, #8
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	61da      	str	r2, [r3, #28]
      break;
 8009f06:	e041      	b.n	8009f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68b9      	ldr	r1, [r7, #8]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 fb90 	bl	800a634 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f042 0208 	orr.w	r2, r2, #8
 8009f22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0204 	bic.w	r2, r2, #4
 8009f32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	691a      	ldr	r2, [r3, #16]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f46:	e021      	b.n	8009f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68b9      	ldr	r1, [r7, #8]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 fbc2 	bl	800a6d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	021a      	lsls	r2, r3, #8
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	430a      	orrs	r2, r1
 8009f86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f88:	e000      	b.n	8009f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009f8a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop

08009fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_TIM_ConfigClockSource+0x18>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e0b3      	b.n	800a128 <HAL_TIM_ConfigClockSource+0x180>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	4b55      	ldr	r3, [pc, #340]	; (800a130 <HAL_TIM_ConfigClockSource+0x188>)
 8009fdc:	4013      	ands	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fe6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ff8:	d03e      	beq.n	800a078 <HAL_TIM_ConfigClockSource+0xd0>
 8009ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ffe:	f200 8087 	bhi.w	800a110 <HAL_TIM_ConfigClockSource+0x168>
 800a002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a006:	f000 8085 	beq.w	800a114 <HAL_TIM_ConfigClockSource+0x16c>
 800a00a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a00e:	d87f      	bhi.n	800a110 <HAL_TIM_ConfigClockSource+0x168>
 800a010:	2b70      	cmp	r3, #112	; 0x70
 800a012:	d01a      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0xa2>
 800a014:	2b70      	cmp	r3, #112	; 0x70
 800a016:	d87b      	bhi.n	800a110 <HAL_TIM_ConfigClockSource+0x168>
 800a018:	2b60      	cmp	r3, #96	; 0x60
 800a01a:	d050      	beq.n	800a0be <HAL_TIM_ConfigClockSource+0x116>
 800a01c:	2b60      	cmp	r3, #96	; 0x60
 800a01e:	d877      	bhi.n	800a110 <HAL_TIM_ConfigClockSource+0x168>
 800a020:	2b50      	cmp	r3, #80	; 0x50
 800a022:	d03c      	beq.n	800a09e <HAL_TIM_ConfigClockSource+0xf6>
 800a024:	2b50      	cmp	r3, #80	; 0x50
 800a026:	d873      	bhi.n	800a110 <HAL_TIM_ConfigClockSource+0x168>
 800a028:	2b40      	cmp	r3, #64	; 0x40
 800a02a:	d058      	beq.n	800a0de <HAL_TIM_ConfigClockSource+0x136>
 800a02c:	2b40      	cmp	r3, #64	; 0x40
 800a02e:	d86f      	bhi.n	800a110 <HAL_TIM_ConfigClockSource+0x168>
 800a030:	2b30      	cmp	r3, #48	; 0x30
 800a032:	d064      	beq.n	800a0fe <HAL_TIM_ConfigClockSource+0x156>
 800a034:	2b30      	cmp	r3, #48	; 0x30
 800a036:	d86b      	bhi.n	800a110 <HAL_TIM_ConfigClockSource+0x168>
 800a038:	2b20      	cmp	r3, #32
 800a03a:	d060      	beq.n	800a0fe <HAL_TIM_ConfigClockSource+0x156>
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	d867      	bhi.n	800a110 <HAL_TIM_ConfigClockSource+0x168>
 800a040:	2b00      	cmp	r3, #0
 800a042:	d05c      	beq.n	800a0fe <HAL_TIM_ConfigClockSource+0x156>
 800a044:	2b10      	cmp	r3, #16
 800a046:	d05a      	beq.n	800a0fe <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a048:	e062      	b.n	800a110 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6818      	ldr	r0, [r3, #0]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	6899      	ldr	r1, [r3, #8]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	f000 fc0b 	bl	800a874 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a06c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	609a      	str	r2, [r3, #8]
      break;
 800a076:	e04e      	b.n	800a116 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	6899      	ldr	r1, [r3, #8]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f000 fbf4 	bl	800a874 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a09a:	609a      	str	r2, [r3, #8]
      break;
 800a09c:	e03b      	b.n	800a116 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	6859      	ldr	r1, [r3, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	f000 fb68 	bl	800a780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2150      	movs	r1, #80	; 0x50
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 fbc1 	bl	800a83e <TIM_ITRx_SetConfig>
      break;
 800a0bc:	e02b      	b.n	800a116 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	6859      	ldr	r1, [r3, #4]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f000 fb87 	bl	800a7de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2160      	movs	r1, #96	; 0x60
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 fbb1 	bl	800a83e <TIM_ITRx_SetConfig>
      break;
 800a0dc:	e01b      	b.n	800a116 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	6859      	ldr	r1, [r3, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f000 fb48 	bl	800a780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2140      	movs	r1, #64	; 0x40
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 fba1 	bl	800a83e <TIM_ITRx_SetConfig>
      break;
 800a0fc:	e00b      	b.n	800a116 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4619      	mov	r1, r3
 800a108:	4610      	mov	r0, r2
 800a10a:	f000 fb98 	bl	800a83e <TIM_ITRx_SetConfig>
      break;
 800a10e:	e002      	b.n	800a116 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a110:	bf00      	nop
 800a112:	e000      	b.n	800a116 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a114:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	fffeff88 	.word	0xfffeff88

0800a134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a40      	ldr	r2, [pc, #256]	; (800a298 <TIM_Base_SetConfig+0x114>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d013      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a2:	d00f      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a3d      	ldr	r2, [pc, #244]	; (800a29c <TIM_Base_SetConfig+0x118>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d00b      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a3c      	ldr	r2, [pc, #240]	; (800a2a0 <TIM_Base_SetConfig+0x11c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d007      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a3b      	ldr	r2, [pc, #236]	; (800a2a4 <TIM_Base_SetConfig+0x120>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d003      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a3a      	ldr	r2, [pc, #232]	; (800a2a8 <TIM_Base_SetConfig+0x124>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d108      	bne.n	800a1d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a2f      	ldr	r2, [pc, #188]	; (800a298 <TIM_Base_SetConfig+0x114>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d02b      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e4:	d027      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a2c      	ldr	r2, [pc, #176]	; (800a29c <TIM_Base_SetConfig+0x118>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d023      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a2b      	ldr	r2, [pc, #172]	; (800a2a0 <TIM_Base_SetConfig+0x11c>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d01f      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a2a      	ldr	r2, [pc, #168]	; (800a2a4 <TIM_Base_SetConfig+0x120>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01b      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a29      	ldr	r2, [pc, #164]	; (800a2a8 <TIM_Base_SetConfig+0x124>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d017      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a28      	ldr	r2, [pc, #160]	; (800a2ac <TIM_Base_SetConfig+0x128>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d013      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a27      	ldr	r2, [pc, #156]	; (800a2b0 <TIM_Base_SetConfig+0x12c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00f      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a26      	ldr	r2, [pc, #152]	; (800a2b4 <TIM_Base_SetConfig+0x130>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d00b      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a25      	ldr	r2, [pc, #148]	; (800a2b8 <TIM_Base_SetConfig+0x134>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d007      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a24      	ldr	r2, [pc, #144]	; (800a2bc <TIM_Base_SetConfig+0x138>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d003      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a23      	ldr	r2, [pc, #140]	; (800a2c0 <TIM_Base_SetConfig+0x13c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d108      	bne.n	800a248 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a23c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	4313      	orrs	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a0a      	ldr	r2, [pc, #40]	; (800a298 <TIM_Base_SetConfig+0x114>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d003      	beq.n	800a27c <TIM_Base_SetConfig+0xf8>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a0c      	ldr	r2, [pc, #48]	; (800a2a8 <TIM_Base_SetConfig+0x124>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d103      	bne.n	800a284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	691a      	ldr	r2, [r3, #16]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	615a      	str	r2, [r3, #20]
}
 800a28a:	bf00      	nop
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	40010000 	.word	0x40010000
 800a29c:	40000400 	.word	0x40000400
 800a2a0:	40000800 	.word	0x40000800
 800a2a4:	40000c00 	.word	0x40000c00
 800a2a8:	40010400 	.word	0x40010400
 800a2ac:	40014000 	.word	0x40014000
 800a2b0:	40014400 	.word	0x40014400
 800a2b4:	40014800 	.word	0x40014800
 800a2b8:	40001800 	.word	0x40001800
 800a2bc:	40001c00 	.word	0x40001c00
 800a2c0:	40002000 	.word	0x40002000

0800a2c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	f023 0201 	bic.w	r2, r3, #1
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4b2b      	ldr	r3, [pc, #172]	; (800a39c <TIM_OC1_SetConfig+0xd8>)
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f023 0303 	bic.w	r3, r3, #3
 800a2fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	4313      	orrs	r3, r2
 800a304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f023 0302 	bic.w	r3, r3, #2
 800a30c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	4313      	orrs	r3, r2
 800a316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a21      	ldr	r2, [pc, #132]	; (800a3a0 <TIM_OC1_SetConfig+0xdc>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d003      	beq.n	800a328 <TIM_OC1_SetConfig+0x64>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a20      	ldr	r2, [pc, #128]	; (800a3a4 <TIM_OC1_SetConfig+0xe0>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d10c      	bne.n	800a342 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f023 0308 	bic.w	r3, r3, #8
 800a32e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	4313      	orrs	r3, r2
 800a338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f023 0304 	bic.w	r3, r3, #4
 800a340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a16      	ldr	r2, [pc, #88]	; (800a3a0 <TIM_OC1_SetConfig+0xdc>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d003      	beq.n	800a352 <TIM_OC1_SetConfig+0x8e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a15      	ldr	r2, [pc, #84]	; (800a3a4 <TIM_OC1_SetConfig+0xe0>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d111      	bne.n	800a376 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	4313      	orrs	r3, r2
 800a36a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	4313      	orrs	r3, r2
 800a374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	621a      	str	r2, [r3, #32]
}
 800a390:	bf00      	nop
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	fffeff8f 	.word	0xfffeff8f
 800a3a0:	40010000 	.word	0x40010000
 800a3a4:	40010400 	.word	0x40010400

0800a3a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	f023 0210 	bic.w	r2, r3, #16
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	4b2e      	ldr	r3, [pc, #184]	; (800a48c <TIM_OC2_SetConfig+0xe4>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	021b      	lsls	r3, r3, #8
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f023 0320 	bic.w	r3, r3, #32
 800a3f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	011b      	lsls	r3, r3, #4
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a23      	ldr	r2, [pc, #140]	; (800a490 <TIM_OC2_SetConfig+0xe8>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d003      	beq.n	800a410 <TIM_OC2_SetConfig+0x68>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a22      	ldr	r2, [pc, #136]	; (800a494 <TIM_OC2_SetConfig+0xec>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d10d      	bne.n	800a42c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	011b      	lsls	r3, r3, #4
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4313      	orrs	r3, r2
 800a422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a42a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a18      	ldr	r2, [pc, #96]	; (800a490 <TIM_OC2_SetConfig+0xe8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d003      	beq.n	800a43c <TIM_OC2_SetConfig+0x94>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a17      	ldr	r2, [pc, #92]	; (800a494 <TIM_OC2_SetConfig+0xec>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d113      	bne.n	800a464 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a44a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	4313      	orrs	r3, r2
 800a456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	4313      	orrs	r3, r2
 800a462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	621a      	str	r2, [r3, #32]
}
 800a47e:	bf00      	nop
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	feff8fff 	.word	0xfeff8fff
 800a490:	40010000 	.word	0x40010000
 800a494:	40010400 	.word	0x40010400

0800a498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	4b2d      	ldr	r3, [pc, #180]	; (800a578 <TIM_OC3_SetConfig+0xe0>)
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f023 0303 	bic.w	r3, r3, #3
 800a4ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	021b      	lsls	r3, r3, #8
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a22      	ldr	r2, [pc, #136]	; (800a57c <TIM_OC3_SetConfig+0xe4>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d003      	beq.n	800a4fe <TIM_OC3_SetConfig+0x66>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a21      	ldr	r2, [pc, #132]	; (800a580 <TIM_OC3_SetConfig+0xe8>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d10d      	bne.n	800a51a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	021b      	lsls	r3, r3, #8
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4313      	orrs	r3, r2
 800a510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a17      	ldr	r2, [pc, #92]	; (800a57c <TIM_OC3_SetConfig+0xe4>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d003      	beq.n	800a52a <TIM_OC3_SetConfig+0x92>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a16      	ldr	r2, [pc, #88]	; (800a580 <TIM_OC3_SetConfig+0xe8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d113      	bne.n	800a552 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	011b      	lsls	r3, r3, #4
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	4313      	orrs	r3, r2
 800a544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	011b      	lsls	r3, r3, #4
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	4313      	orrs	r3, r2
 800a550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	621a      	str	r2, [r3, #32]
}
 800a56c:	bf00      	nop
 800a56e:	371c      	adds	r7, #28
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	fffeff8f 	.word	0xfffeff8f
 800a57c:	40010000 	.word	0x40010000
 800a580:	40010400 	.word	0x40010400

0800a584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	4b1e      	ldr	r3, [pc, #120]	; (800a628 <TIM_OC4_SetConfig+0xa4>)
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	031b      	lsls	r3, r3, #12
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a13      	ldr	r2, [pc, #76]	; (800a62c <TIM_OC4_SetConfig+0xa8>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d003      	beq.n	800a5ec <TIM_OC4_SetConfig+0x68>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a12      	ldr	r2, [pc, #72]	; (800a630 <TIM_OC4_SetConfig+0xac>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d109      	bne.n	800a600 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	019b      	lsls	r3, r3, #6
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	621a      	str	r2, [r3, #32]
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	feff8fff 	.word	0xfeff8fff
 800a62c:	40010000 	.word	0x40010000
 800a630:	40010400 	.word	0x40010400

0800a634 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	4b1b      	ldr	r3, [pc, #108]	; (800a6cc <TIM_OC5_SetConfig+0x98>)
 800a660:	4013      	ands	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a674:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	041b      	lsls	r3, r3, #16
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	4313      	orrs	r3, r2
 800a680:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a12      	ldr	r2, [pc, #72]	; (800a6d0 <TIM_OC5_SetConfig+0x9c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d003      	beq.n	800a692 <TIM_OC5_SetConfig+0x5e>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a11      	ldr	r2, [pc, #68]	; (800a6d4 <TIM_OC5_SetConfig+0xa0>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d109      	bne.n	800a6a6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a698:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	021b      	lsls	r3, r3, #8
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	621a      	str	r2, [r3, #32]
}
 800a6c0:	bf00      	nop
 800a6c2:	371c      	adds	r7, #28
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	fffeff8f 	.word	0xfffeff8f
 800a6d0:	40010000 	.word	0x40010000
 800a6d4:	40010400 	.word	0x40010400

0800a6d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4b1c      	ldr	r3, [pc, #112]	; (800a774 <TIM_OC6_SetConfig+0x9c>)
 800a704:	4013      	ands	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	4313      	orrs	r3, r2
 800a712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a71a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	051b      	lsls	r3, r3, #20
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	4313      	orrs	r3, r2
 800a726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a13      	ldr	r2, [pc, #76]	; (800a778 <TIM_OC6_SetConfig+0xa0>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d003      	beq.n	800a738 <TIM_OC6_SetConfig+0x60>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a12      	ldr	r2, [pc, #72]	; (800a77c <TIM_OC6_SetConfig+0xa4>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d109      	bne.n	800a74c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a73e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	029b      	lsls	r3, r3, #10
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	4313      	orrs	r3, r2
 800a74a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	621a      	str	r2, [r3, #32]
}
 800a766:	bf00      	nop
 800a768:	371c      	adds	r7, #28
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	feff8fff 	.word	0xfeff8fff
 800a778:	40010000 	.word	0x40010000
 800a77c:	40010400 	.word	0x40010400

0800a780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	f023 0201 	bic.w	r2, r3, #1
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	011b      	lsls	r3, r3, #4
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f023 030a 	bic.w	r3, r3, #10
 800a7bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	621a      	str	r2, [r3, #32]
}
 800a7d2:	bf00      	nop
 800a7d4:	371c      	adds	r7, #28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b087      	sub	sp, #28
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	f023 0210 	bic.w	r2, r3, #16
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	031b      	lsls	r3, r3, #12
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4313      	orrs	r3, r2
 800a812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a81a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	4313      	orrs	r3, r2
 800a824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	621a      	str	r2, [r3, #32]
}
 800a832:	bf00      	nop
 800a834:	371c      	adds	r7, #28
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	f043 0307 	orr.w	r3, r3, #7
 800a860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	609a      	str	r2, [r3, #8]
}
 800a868:	bf00      	nop
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a874:	b480      	push	{r7}
 800a876:	b087      	sub	sp, #28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a88e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	021a      	lsls	r2, r3, #8
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	431a      	orrs	r2, r3
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	609a      	str	r2, [r3, #8]
}
 800a8a8:	bf00      	nop
 800a8aa:	371c      	adds	r7, #28
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d101      	bne.n	800a8cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e06d      	b.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a30      	ldr	r2, [pc, #192]	; (800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d004      	beq.n	800a900 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a2f      	ldr	r2, [pc, #188]	; (800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d108      	bne.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a906:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4313      	orrs	r3, r2
 800a910:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a918:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a20      	ldr	r2, [pc, #128]	; (800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d022      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a93e:	d01d      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a1d      	ldr	r2, [pc, #116]	; (800a9bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d018      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a1c      	ldr	r2, [pc, #112]	; (800a9c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d013      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a1a      	ldr	r2, [pc, #104]	; (800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d00e      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a15      	ldr	r2, [pc, #84]	; (800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d009      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a16      	ldr	r2, [pc, #88]	; (800a9c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d004      	beq.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a15      	ldr	r2, [pc, #84]	; (800a9cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d10c      	bne.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a982:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	40010000 	.word	0x40010000
 800a9b8:	40010400 	.word	0x40010400
 800a9bc:	40000400 	.word	0x40000400
 800a9c0:	40000800 	.word	0x40000800
 800a9c4:	40000c00 	.word	0x40000c00
 800a9c8:	40014000 	.word	0x40014000
 800a9cc:	40001800 	.word	0x40001800

0800a9d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d101      	bne.n	800a9ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e065      	b.n	800aab8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	041b      	lsls	r3, r3, #16
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a16      	ldr	r2, [pc, #88]	; (800aac4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d004      	beq.n	800aa7a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a14      	ldr	r2, [pc, #80]	; (800aac8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d115      	bne.n	800aaa6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	051b      	lsls	r3, r3, #20
 800aa86:	4313      	orrs	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	40010000 	.word	0x40010000
 800aac8:	40010400 	.word	0x40010400

0800aacc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d101      	bne.n	800ab1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e040      	b.n	800ab9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7f8 fd20 	bl	8003570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2224      	movs	r2, #36	; 0x24
 800ab34:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f022 0201 	bic.w	r2, r2, #1
 800ab44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f82c 	bl	800aba4 <UART_SetConfig>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d101      	bne.n	800ab56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e022      	b.n	800ab9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d002      	beq.n	800ab64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 face 	bl	800b100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f042 0201 	orr.w	r2, r2, #1
 800ab92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fb55 	bl	800b244 <UART_CheckIdleState>
 800ab9a:	4603      	mov	r3, r0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b088      	sub	sp, #32
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800abac:	2300      	movs	r3, #0
 800abae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689a      	ldr	r2, [r3, #8]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	431a      	orrs	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	431a      	orrs	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	4313      	orrs	r3, r2
 800abca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	4ba6      	ldr	r3, [pc, #664]	; (800ae6c <UART_SetConfig+0x2c8>)
 800abd4:	4013      	ands	r3, r2
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6812      	ldr	r2, [r2, #0]
 800abda:	6939      	ldr	r1, [r7, #16]
 800abdc:	430b      	orrs	r3, r1
 800abde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68da      	ldr	r2, [r3, #12]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a94      	ldr	r2, [pc, #592]	; (800ae70 <UART_SetConfig+0x2cc>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d120      	bne.n	800ac66 <UART_SetConfig+0xc2>
 800ac24:	4b93      	ldr	r3, [pc, #588]	; (800ae74 <UART_SetConfig+0x2d0>)
 800ac26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac2a:	f003 0303 	and.w	r3, r3, #3
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d816      	bhi.n	800ac60 <UART_SetConfig+0xbc>
 800ac32:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <UART_SetConfig+0x94>)
 800ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac38:	0800ac49 	.word	0x0800ac49
 800ac3c:	0800ac55 	.word	0x0800ac55
 800ac40:	0800ac4f 	.word	0x0800ac4f
 800ac44:	0800ac5b 	.word	0x0800ac5b
 800ac48:	2301      	movs	r3, #1
 800ac4a:	77fb      	strb	r3, [r7, #31]
 800ac4c:	e150      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	77fb      	strb	r3, [r7, #31]
 800ac52:	e14d      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ac54:	2304      	movs	r3, #4
 800ac56:	77fb      	strb	r3, [r7, #31]
 800ac58:	e14a      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ac5a:	2308      	movs	r3, #8
 800ac5c:	77fb      	strb	r3, [r7, #31]
 800ac5e:	e147      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ac60:	2310      	movs	r3, #16
 800ac62:	77fb      	strb	r3, [r7, #31]
 800ac64:	e144      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a83      	ldr	r2, [pc, #524]	; (800ae78 <UART_SetConfig+0x2d4>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d132      	bne.n	800acd6 <UART_SetConfig+0x132>
 800ac70:	4b80      	ldr	r3, [pc, #512]	; (800ae74 <UART_SetConfig+0x2d0>)
 800ac72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac76:	f003 030c 	and.w	r3, r3, #12
 800ac7a:	2b0c      	cmp	r3, #12
 800ac7c:	d828      	bhi.n	800acd0 <UART_SetConfig+0x12c>
 800ac7e:	a201      	add	r2, pc, #4	; (adr r2, 800ac84 <UART_SetConfig+0xe0>)
 800ac80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac84:	0800acb9 	.word	0x0800acb9
 800ac88:	0800acd1 	.word	0x0800acd1
 800ac8c:	0800acd1 	.word	0x0800acd1
 800ac90:	0800acd1 	.word	0x0800acd1
 800ac94:	0800acc5 	.word	0x0800acc5
 800ac98:	0800acd1 	.word	0x0800acd1
 800ac9c:	0800acd1 	.word	0x0800acd1
 800aca0:	0800acd1 	.word	0x0800acd1
 800aca4:	0800acbf 	.word	0x0800acbf
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd1 	.word	0x0800acd1
 800acb0:	0800acd1 	.word	0x0800acd1
 800acb4:	0800accb 	.word	0x0800accb
 800acb8:	2300      	movs	r3, #0
 800acba:	77fb      	strb	r3, [r7, #31]
 800acbc:	e118      	b.n	800aef0 <UART_SetConfig+0x34c>
 800acbe:	2302      	movs	r3, #2
 800acc0:	77fb      	strb	r3, [r7, #31]
 800acc2:	e115      	b.n	800aef0 <UART_SetConfig+0x34c>
 800acc4:	2304      	movs	r3, #4
 800acc6:	77fb      	strb	r3, [r7, #31]
 800acc8:	e112      	b.n	800aef0 <UART_SetConfig+0x34c>
 800acca:	2308      	movs	r3, #8
 800accc:	77fb      	strb	r3, [r7, #31]
 800acce:	e10f      	b.n	800aef0 <UART_SetConfig+0x34c>
 800acd0:	2310      	movs	r3, #16
 800acd2:	77fb      	strb	r3, [r7, #31]
 800acd4:	e10c      	b.n	800aef0 <UART_SetConfig+0x34c>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a68      	ldr	r2, [pc, #416]	; (800ae7c <UART_SetConfig+0x2d8>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d120      	bne.n	800ad22 <UART_SetConfig+0x17e>
 800ace0:	4b64      	ldr	r3, [pc, #400]	; (800ae74 <UART_SetConfig+0x2d0>)
 800ace2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ace6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800acea:	2b30      	cmp	r3, #48	; 0x30
 800acec:	d013      	beq.n	800ad16 <UART_SetConfig+0x172>
 800acee:	2b30      	cmp	r3, #48	; 0x30
 800acf0:	d814      	bhi.n	800ad1c <UART_SetConfig+0x178>
 800acf2:	2b20      	cmp	r3, #32
 800acf4:	d009      	beq.n	800ad0a <UART_SetConfig+0x166>
 800acf6:	2b20      	cmp	r3, #32
 800acf8:	d810      	bhi.n	800ad1c <UART_SetConfig+0x178>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <UART_SetConfig+0x160>
 800acfe:	2b10      	cmp	r3, #16
 800ad00:	d006      	beq.n	800ad10 <UART_SetConfig+0x16c>
 800ad02:	e00b      	b.n	800ad1c <UART_SetConfig+0x178>
 800ad04:	2300      	movs	r3, #0
 800ad06:	77fb      	strb	r3, [r7, #31]
 800ad08:	e0f2      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	77fb      	strb	r3, [r7, #31]
 800ad0e:	e0ef      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad10:	2304      	movs	r3, #4
 800ad12:	77fb      	strb	r3, [r7, #31]
 800ad14:	e0ec      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad16:	2308      	movs	r3, #8
 800ad18:	77fb      	strb	r3, [r7, #31]
 800ad1a:	e0e9      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad1c:	2310      	movs	r3, #16
 800ad1e:	77fb      	strb	r3, [r7, #31]
 800ad20:	e0e6      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a56      	ldr	r2, [pc, #344]	; (800ae80 <UART_SetConfig+0x2dc>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d120      	bne.n	800ad6e <UART_SetConfig+0x1ca>
 800ad2c:	4b51      	ldr	r3, [pc, #324]	; (800ae74 <UART_SetConfig+0x2d0>)
 800ad2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad36:	2bc0      	cmp	r3, #192	; 0xc0
 800ad38:	d013      	beq.n	800ad62 <UART_SetConfig+0x1be>
 800ad3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ad3c:	d814      	bhi.n	800ad68 <UART_SetConfig+0x1c4>
 800ad3e:	2b80      	cmp	r3, #128	; 0x80
 800ad40:	d009      	beq.n	800ad56 <UART_SetConfig+0x1b2>
 800ad42:	2b80      	cmp	r3, #128	; 0x80
 800ad44:	d810      	bhi.n	800ad68 <UART_SetConfig+0x1c4>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d002      	beq.n	800ad50 <UART_SetConfig+0x1ac>
 800ad4a:	2b40      	cmp	r3, #64	; 0x40
 800ad4c:	d006      	beq.n	800ad5c <UART_SetConfig+0x1b8>
 800ad4e:	e00b      	b.n	800ad68 <UART_SetConfig+0x1c4>
 800ad50:	2300      	movs	r3, #0
 800ad52:	77fb      	strb	r3, [r7, #31]
 800ad54:	e0cc      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad56:	2302      	movs	r3, #2
 800ad58:	77fb      	strb	r3, [r7, #31]
 800ad5a:	e0c9      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad5c:	2304      	movs	r3, #4
 800ad5e:	77fb      	strb	r3, [r7, #31]
 800ad60:	e0c6      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad62:	2308      	movs	r3, #8
 800ad64:	77fb      	strb	r3, [r7, #31]
 800ad66:	e0c3      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad68:	2310      	movs	r3, #16
 800ad6a:	77fb      	strb	r3, [r7, #31]
 800ad6c:	e0c0      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a44      	ldr	r2, [pc, #272]	; (800ae84 <UART_SetConfig+0x2e0>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d125      	bne.n	800adc4 <UART_SetConfig+0x220>
 800ad78:	4b3e      	ldr	r3, [pc, #248]	; (800ae74 <UART_SetConfig+0x2d0>)
 800ad7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad86:	d017      	beq.n	800adb8 <UART_SetConfig+0x214>
 800ad88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad8c:	d817      	bhi.n	800adbe <UART_SetConfig+0x21a>
 800ad8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad92:	d00b      	beq.n	800adac <UART_SetConfig+0x208>
 800ad94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad98:	d811      	bhi.n	800adbe <UART_SetConfig+0x21a>
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <UART_SetConfig+0x202>
 800ad9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada2:	d006      	beq.n	800adb2 <UART_SetConfig+0x20e>
 800ada4:	e00b      	b.n	800adbe <UART_SetConfig+0x21a>
 800ada6:	2300      	movs	r3, #0
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e0a1      	b.n	800aef0 <UART_SetConfig+0x34c>
 800adac:	2302      	movs	r3, #2
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	e09e      	b.n	800aef0 <UART_SetConfig+0x34c>
 800adb2:	2304      	movs	r3, #4
 800adb4:	77fb      	strb	r3, [r7, #31]
 800adb6:	e09b      	b.n	800aef0 <UART_SetConfig+0x34c>
 800adb8:	2308      	movs	r3, #8
 800adba:	77fb      	strb	r3, [r7, #31]
 800adbc:	e098      	b.n	800aef0 <UART_SetConfig+0x34c>
 800adbe:	2310      	movs	r3, #16
 800adc0:	77fb      	strb	r3, [r7, #31]
 800adc2:	e095      	b.n	800aef0 <UART_SetConfig+0x34c>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a2f      	ldr	r2, [pc, #188]	; (800ae88 <UART_SetConfig+0x2e4>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d125      	bne.n	800ae1a <UART_SetConfig+0x276>
 800adce:	4b29      	ldr	r3, [pc, #164]	; (800ae74 <UART_SetConfig+0x2d0>)
 800add0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800add8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800addc:	d017      	beq.n	800ae0e <UART_SetConfig+0x26a>
 800adde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ade2:	d817      	bhi.n	800ae14 <UART_SetConfig+0x270>
 800ade4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ade8:	d00b      	beq.n	800ae02 <UART_SetConfig+0x25e>
 800adea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adee:	d811      	bhi.n	800ae14 <UART_SetConfig+0x270>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <UART_SetConfig+0x258>
 800adf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adf8:	d006      	beq.n	800ae08 <UART_SetConfig+0x264>
 800adfa:	e00b      	b.n	800ae14 <UART_SetConfig+0x270>
 800adfc:	2301      	movs	r3, #1
 800adfe:	77fb      	strb	r3, [r7, #31]
 800ae00:	e076      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae02:	2302      	movs	r3, #2
 800ae04:	77fb      	strb	r3, [r7, #31]
 800ae06:	e073      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae08:	2304      	movs	r3, #4
 800ae0a:	77fb      	strb	r3, [r7, #31]
 800ae0c:	e070      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae0e:	2308      	movs	r3, #8
 800ae10:	77fb      	strb	r3, [r7, #31]
 800ae12:	e06d      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae14:	2310      	movs	r3, #16
 800ae16:	77fb      	strb	r3, [r7, #31]
 800ae18:	e06a      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a1b      	ldr	r2, [pc, #108]	; (800ae8c <UART_SetConfig+0x2e8>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d138      	bne.n	800ae96 <UART_SetConfig+0x2f2>
 800ae24:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <UART_SetConfig+0x2d0>)
 800ae26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ae2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae32:	d017      	beq.n	800ae64 <UART_SetConfig+0x2c0>
 800ae34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae38:	d82a      	bhi.n	800ae90 <UART_SetConfig+0x2ec>
 800ae3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae3e:	d00b      	beq.n	800ae58 <UART_SetConfig+0x2b4>
 800ae40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae44:	d824      	bhi.n	800ae90 <UART_SetConfig+0x2ec>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <UART_SetConfig+0x2ae>
 800ae4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae4e:	d006      	beq.n	800ae5e <UART_SetConfig+0x2ba>
 800ae50:	e01e      	b.n	800ae90 <UART_SetConfig+0x2ec>
 800ae52:	2300      	movs	r3, #0
 800ae54:	77fb      	strb	r3, [r7, #31]
 800ae56:	e04b      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae58:	2302      	movs	r3, #2
 800ae5a:	77fb      	strb	r3, [r7, #31]
 800ae5c:	e048      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae5e:	2304      	movs	r3, #4
 800ae60:	77fb      	strb	r3, [r7, #31]
 800ae62:	e045      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae64:	2308      	movs	r3, #8
 800ae66:	77fb      	strb	r3, [r7, #31]
 800ae68:	e042      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae6a:	bf00      	nop
 800ae6c:	efff69f3 	.word	0xefff69f3
 800ae70:	40011000 	.word	0x40011000
 800ae74:	40023800 	.word	0x40023800
 800ae78:	40004400 	.word	0x40004400
 800ae7c:	40004800 	.word	0x40004800
 800ae80:	40004c00 	.word	0x40004c00
 800ae84:	40005000 	.word	0x40005000
 800ae88:	40011400 	.word	0x40011400
 800ae8c:	40007800 	.word	0x40007800
 800ae90:	2310      	movs	r3, #16
 800ae92:	77fb      	strb	r3, [r7, #31]
 800ae94:	e02c      	b.n	800aef0 <UART_SetConfig+0x34c>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a95      	ldr	r2, [pc, #596]	; (800b0f0 <UART_SetConfig+0x54c>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d125      	bne.n	800aeec <UART_SetConfig+0x348>
 800aea0:	4b94      	ldr	r3, [pc, #592]	; (800b0f4 <UART_SetConfig+0x550>)
 800aea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aeaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aeae:	d017      	beq.n	800aee0 <UART_SetConfig+0x33c>
 800aeb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aeb4:	d817      	bhi.n	800aee6 <UART_SetConfig+0x342>
 800aeb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeba:	d00b      	beq.n	800aed4 <UART_SetConfig+0x330>
 800aebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aec0:	d811      	bhi.n	800aee6 <UART_SetConfig+0x342>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <UART_SetConfig+0x32a>
 800aec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeca:	d006      	beq.n	800aeda <UART_SetConfig+0x336>
 800aecc:	e00b      	b.n	800aee6 <UART_SetConfig+0x342>
 800aece:	2300      	movs	r3, #0
 800aed0:	77fb      	strb	r3, [r7, #31]
 800aed2:	e00d      	b.n	800aef0 <UART_SetConfig+0x34c>
 800aed4:	2302      	movs	r3, #2
 800aed6:	77fb      	strb	r3, [r7, #31]
 800aed8:	e00a      	b.n	800aef0 <UART_SetConfig+0x34c>
 800aeda:	2304      	movs	r3, #4
 800aedc:	77fb      	strb	r3, [r7, #31]
 800aede:	e007      	b.n	800aef0 <UART_SetConfig+0x34c>
 800aee0:	2308      	movs	r3, #8
 800aee2:	77fb      	strb	r3, [r7, #31]
 800aee4:	e004      	b.n	800aef0 <UART_SetConfig+0x34c>
 800aee6:	2310      	movs	r3, #16
 800aee8:	77fb      	strb	r3, [r7, #31]
 800aeea:	e001      	b.n	800aef0 <UART_SetConfig+0x34c>
 800aeec:	2310      	movs	r3, #16
 800aeee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	69db      	ldr	r3, [r3, #28]
 800aef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aef8:	f040 8080 	bne.w	800affc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800aefc:	7ffb      	ldrb	r3, [r7, #31]
 800aefe:	2b08      	cmp	r3, #8
 800af00:	d85c      	bhi.n	800afbc <UART_SetConfig+0x418>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <UART_SetConfig+0x364>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af4d 	.word	0x0800af4d
 800af10:	0800af6d 	.word	0x0800af6d
 800af14:	0800afbd 	.word	0x0800afbd
 800af18:	0800af85 	.word	0x0800af85
 800af1c:	0800afbd 	.word	0x0800afbd
 800af20:	0800afbd 	.word	0x0800afbd
 800af24:	0800afbd 	.word	0x0800afbd
 800af28:	0800afa5 	.word	0x0800afa5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af2c:	f7fc f8b2 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 800af30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	005a      	lsls	r2, r3, #1
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	085b      	lsrs	r3, r3, #1
 800af3c:	441a      	add	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	fbb2 f3f3 	udiv	r3, r2, r3
 800af46:	b29b      	uxth	r3, r3
 800af48:	61bb      	str	r3, [r7, #24]
        break;
 800af4a:	e03a      	b.n	800afc2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af4c:	f7fc f8b6 	bl	80070bc <HAL_RCC_GetPCLK2Freq>
 800af50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	005a      	lsls	r2, r3, #1
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	085b      	lsrs	r3, r3, #1
 800af5c:	441a      	add	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	fbb2 f3f3 	udiv	r3, r2, r3
 800af66:	b29b      	uxth	r3, r3
 800af68:	61bb      	str	r3, [r7, #24]
        break;
 800af6a:	e02a      	b.n	800afc2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	085a      	lsrs	r2, r3, #1
 800af72:	4b61      	ldr	r3, [pc, #388]	; (800b0f8 <UART_SetConfig+0x554>)
 800af74:	4413      	add	r3, r2
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	6852      	ldr	r2, [r2, #4]
 800af7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800af7e:	b29b      	uxth	r3, r3
 800af80:	61bb      	str	r3, [r7, #24]
        break;
 800af82:	e01e      	b.n	800afc2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af84:	f7fb ffb4 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 800af88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	005a      	lsls	r2, r3, #1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	085b      	lsrs	r3, r3, #1
 800af94:	441a      	add	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	61bb      	str	r3, [r7, #24]
        break;
 800afa2:	e00e      	b.n	800afc2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	085b      	lsrs	r3, r3, #1
 800afaa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	61bb      	str	r3, [r7, #24]
        break;
 800afba:	e002      	b.n	800afc2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	75fb      	strb	r3, [r7, #23]
        break;
 800afc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	2b0f      	cmp	r3, #15
 800afc6:	d916      	bls.n	800aff6 <UART_SetConfig+0x452>
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afce:	d212      	bcs.n	800aff6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	f023 030f 	bic.w	r3, r3, #15
 800afd8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	085b      	lsrs	r3, r3, #1
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f003 0307 	and.w	r3, r3, #7
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	897b      	ldrh	r3, [r7, #10]
 800afe8:	4313      	orrs	r3, r2
 800afea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	897a      	ldrh	r2, [r7, #10]
 800aff2:	60da      	str	r2, [r3, #12]
 800aff4:	e070      	b.n	800b0d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	75fb      	strb	r3, [r7, #23]
 800affa:	e06d      	b.n	800b0d8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800affc:	7ffb      	ldrb	r3, [r7, #31]
 800affe:	2b08      	cmp	r3, #8
 800b000:	d859      	bhi.n	800b0b6 <UART_SetConfig+0x512>
 800b002:	a201      	add	r2, pc, #4	; (adr r2, 800b008 <UART_SetConfig+0x464>)
 800b004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b008:	0800b02d 	.word	0x0800b02d
 800b00c:	0800b04b 	.word	0x0800b04b
 800b010:	0800b069 	.word	0x0800b069
 800b014:	0800b0b7 	.word	0x0800b0b7
 800b018:	0800b081 	.word	0x0800b081
 800b01c:	0800b0b7 	.word	0x0800b0b7
 800b020:	0800b0b7 	.word	0x0800b0b7
 800b024:	0800b0b7 	.word	0x0800b0b7
 800b028:	0800b09f 	.word	0x0800b09f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b02c:	f7fc f832 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 800b030:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	085a      	lsrs	r2, r3, #1
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	441a      	add	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	fbb2 f3f3 	udiv	r3, r2, r3
 800b044:	b29b      	uxth	r3, r3
 800b046:	61bb      	str	r3, [r7, #24]
        break;
 800b048:	e038      	b.n	800b0bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b04a:	f7fc f837 	bl	80070bc <HAL_RCC_GetPCLK2Freq>
 800b04e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	085a      	lsrs	r2, r3, #1
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	441a      	add	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b062:	b29b      	uxth	r3, r3
 800b064:	61bb      	str	r3, [r7, #24]
        break;
 800b066:	e029      	b.n	800b0bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	085a      	lsrs	r2, r3, #1
 800b06e:	4b23      	ldr	r3, [pc, #140]	; (800b0fc <UART_SetConfig+0x558>)
 800b070:	4413      	add	r3, r2
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	6852      	ldr	r2, [r2, #4]
 800b076:	fbb3 f3f2 	udiv	r3, r3, r2
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	61bb      	str	r3, [r7, #24]
        break;
 800b07e:	e01d      	b.n	800b0bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b080:	f7fb ff36 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 800b084:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	085a      	lsrs	r2, r3, #1
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	441a      	add	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	fbb2 f3f3 	udiv	r3, r2, r3
 800b098:	b29b      	uxth	r3, r3
 800b09a:	61bb      	str	r3, [r7, #24]
        break;
 800b09c:	e00e      	b.n	800b0bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	085b      	lsrs	r3, r3, #1
 800b0a4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	61bb      	str	r3, [r7, #24]
        break;
 800b0b4:	e002      	b.n	800b0bc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	75fb      	strb	r3, [r7, #23]
        break;
 800b0ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	2b0f      	cmp	r3, #15
 800b0c0:	d908      	bls.n	800b0d4 <UART_SetConfig+0x530>
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c8:	d204      	bcs.n	800b0d4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	60da      	str	r2, [r3, #12]
 800b0d2:	e001      	b.n	800b0d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3720      	adds	r7, #32
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	40007c00 	.word	0x40007c00
 800b0f4:	40023800 	.word	0x40023800
 800b0f8:	01e84800 	.word	0x01e84800
 800b0fc:	00f42400 	.word	0x00f42400

0800b100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00a      	beq.n	800b12a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	f003 0302 	and.w	r3, r3, #2
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00a      	beq.n	800b14c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b150:	f003 0304 	and.w	r3, r3, #4
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00a      	beq.n	800b16e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	430a      	orrs	r2, r1
 800b16c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	f003 0308 	and.w	r3, r3, #8
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	f003 0310 	and.w	r3, r3, #16
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00a      	beq.n	800b1b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	f003 0320 	and.w	r3, r3, #32
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00a      	beq.n	800b1d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d01a      	beq.n	800b216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1fe:	d10a      	bne.n	800b216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	430a      	orrs	r2, r1
 800b214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00a      	beq.n	800b238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	430a      	orrs	r2, r1
 800b236:	605a      	str	r2, [r3, #4]
  }
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af02      	add	r7, sp, #8
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b252:	f7f8 fcdb 	bl	8003c0c <HAL_GetTick>
 800b256:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0308 	and.w	r3, r3, #8
 800b262:	2b08      	cmp	r3, #8
 800b264:	d10e      	bne.n	800b284 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b266:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f814 	bl	800b2a2 <UART_WaitOnFlagUntilTimeout>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e00a      	b.n	800b29a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2220      	movs	r2, #32
 800b288:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2220      	movs	r2, #32
 800b28e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	603b      	str	r3, [r7, #0]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2b2:	e05d      	b.n	800b370 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ba:	d059      	beq.n	800b370 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2bc:	f7f8 fca6 	bl	8003c0c <HAL_GetTick>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d302      	bcc.n	800b2d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d11b      	bne.n	800b30a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b2e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 0201 	bic.w	r2, r2, #1
 800b2f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2220      	movs	r2, #32
 800b2f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b306:	2303      	movs	r3, #3
 800b308:	e042      	b.n	800b390 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	2b00      	cmp	r3, #0
 800b316:	d02b      	beq.n	800b370 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	69db      	ldr	r3, [r3, #28]
 800b31e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b326:	d123      	bne.n	800b370 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b330:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b340:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689a      	ldr	r2, [r3, #8]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 0201 	bic.w	r2, r2, #1
 800b350:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2220      	movs	r2, #32
 800b356:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2220      	movs	r2, #32
 800b35c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2220      	movs	r2, #32
 800b362:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b36c:	2303      	movs	r3, #3
 800b36e:	e00f      	b.n	800b390 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	69da      	ldr	r2, [r3, #28]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	4013      	ands	r3, r2
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	bf0c      	ite	eq
 800b380:	2301      	moveq	r3, #1
 800b382:	2300      	movne	r3, #0
 800b384:	b2db      	uxtb	r3, r3
 800b386:	461a      	mov	r2, r3
 800b388:	79fb      	ldrb	r3, [r7, #7]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d092      	beq.n	800b2b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d027      	beq.n	800b402 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	4b2f      	ldr	r3, [pc, #188]	; (800b478 <FMC_SDRAM_Init+0xe0>)
 800b3bc:	4013      	ands	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3c8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b3ce:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b3d4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b3da:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b3e0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b3e6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b3ec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b3f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	e032      	b.n	800b468 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b40e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b418:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b41e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4313      	orrs	r3, r2
 800b424:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	4b12      	ldr	r3, [pc, #72]	; (800b478 <FMC_SDRAM_Init+0xe0>)
 800b430:	4013      	ands	r3, r2
 800b432:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b43c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b442:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b448:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b44e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b454:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	4313      	orrs	r3, r2
 800b45a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3714      	adds	r7, #20
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	ffff8000 	.word	0xffff8000

0800b47c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b087      	sub	sp, #28
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d02e      	beq.n	800b4f4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4a2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4b2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4bc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4c6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4d0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	695b      	ldr	r3, [r3, #20]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b4da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	609a      	str	r2, [r3, #8]
 800b4f2:	e039      	b.n	800b568 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	4b1e      	ldr	r3, [pc, #120]	; (800b578 <FMC_SDRAM_Timing_Init+0xfc>)
 800b4fe:	4013      	ands	r3, r2
 800b500:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	3b01      	subs	r3, #1
 800b508:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	3b01      	subs	r3, #1
 800b510:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b512:	4313      	orrs	r3, r2
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	4313      	orrs	r3, r2
 800b518:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b526:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	3b01      	subs	r3, #1
 800b534:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b536:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b540:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	3b01      	subs	r3, #1
 800b548:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b54a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	3b01      	subs	r3, #1
 800b552:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b554:	4313      	orrs	r3, r2
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	4313      	orrs	r3, r2
 800b55a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	ff0f0fff 	.word	0xff0f0fff

0800b57c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b087      	sub	sp, #28
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b588:	2300      	movs	r3, #0
 800b58a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b594:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b59e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	695a      	ldr	r2, [r3, #20]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b5e4:	b084      	sub	sp, #16
 800b5e6:	b480      	push	{r7}
 800b5e8:	b085      	sub	sp, #20
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	f107 001c 	add.w	r0, r7, #28
 800b5f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b5fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b5fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b602:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b604:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b606:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b60a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b60e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	4313      	orrs	r3, r2
 800b614:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	4b07      	ldr	r3, [pc, #28]	; (800b638 <SDMMC_Init+0x54>)
 800b61c:	4013      	ands	r3, r2
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	431a      	orrs	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	b004      	add	sp, #16
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	ffff8100 	.word	0xffff8100

0800b63c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b656:	b580      	push	{r7, lr}
 800b658:	b082      	sub	sp, #8
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2203      	movs	r2, #3
 800b662:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b664:	2002      	movs	r0, #2
 800b666:	f7f8 fadd 	bl	8003c24 <HAL_Delay>
  
  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 0303 	and.w	r3, r3, #3
}
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b6b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b6ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68da      	ldr	r2, [r3, #12]
 800b6c6:	4b06      	ldr	r3, [pc, #24]	; (800b6e0 <SDMMC_SendCommand+0x50>)
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	fffff000 	.word	0xfffff000

0800b6e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	b2db      	uxtb	r3, r3
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b085      	sub	sp, #20
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3314      	adds	r3, #20
 800b70c:	461a      	mov	r2, r3
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	4413      	add	r3, r2
 800b712:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
}  
 800b718:	4618      	mov	r0, r3
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b74a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b750:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b756:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b762:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	431a      	orrs	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b76e:	2300      	movs	r3, #0

}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b088      	sub	sp, #32
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b78a:	2310      	movs	r3, #16
 800b78c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b78e:	2340      	movs	r3, #64	; 0x40
 800b790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b79a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b79c:	f107 0308 	add.w	r3, r7, #8
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff ff74 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b7a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ac:	2110      	movs	r1, #16
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fa42 	bl	800bc38 <SDMMC_GetCmdResp1>
 800b7b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7b6:	69fb      	ldr	r3, [r7, #28]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b7ce:	2311      	movs	r3, #17
 800b7d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7d2:	2340      	movs	r3, #64	; 0x40
 800b7d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7e0:	f107 0308 	add.w	r3, r7, #8
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7ff ff52 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b7ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7f0:	2111      	movs	r1, #17
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fa20 	bl	800bc38 <SDMMC_GetCmdResp1>
 800b7f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7fa:	69fb      	ldr	r3, [r7, #28]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3720      	adds	r7, #32
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b812:	2312      	movs	r3, #18
 800b814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b816:	2340      	movs	r3, #64	; 0x40
 800b818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b81a:	2300      	movs	r3, #0
 800b81c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b81e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b824:	f107 0308 	add.w	r3, r7, #8
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7ff ff30 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b830:	f241 3288 	movw	r2, #5000	; 0x1388
 800b834:	2112      	movs	r1, #18
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f9fe 	bl	800bc38 <SDMMC_GetCmdResp1>
 800b83c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b83e:	69fb      	ldr	r3, [r7, #28]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3720      	adds	r7, #32
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b088      	sub	sp, #32
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b856:	2318      	movs	r3, #24
 800b858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b85a:	2340      	movs	r3, #64	; 0x40
 800b85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b85e:	2300      	movs	r3, #0
 800b860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b868:	f107 0308 	add.w	r3, r7, #8
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff ff0e 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b874:	f241 3288 	movw	r2, #5000	; 0x1388
 800b878:	2118      	movs	r1, #24
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f9dc 	bl	800bc38 <SDMMC_GetCmdResp1>
 800b880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b882:	69fb      	ldr	r3, [r7, #28]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b89a:	2319      	movs	r3, #25
 800b89c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b89e:	2340      	movs	r3, #64	; 0x40
 800b8a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ac:	f107 0308 	add.w	r3, r7, #8
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff feec 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b8b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8bc:	2119      	movs	r1, #25
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f9ba 	bl	800bc38 <SDMMC_GetCmdResp1>
 800b8c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8c6:	69fb      	ldr	r3, [r7, #28]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3720      	adds	r7, #32
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b8dc:	230c      	movs	r3, #12
 800b8de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8e0:	2340      	movs	r3, #64	; 0x40
 800b8e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8ee:	f107 0308 	add.w	r3, r7, #8
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff fecb 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b8fa:	4a05      	ldr	r2, [pc, #20]	; (800b910 <SDMMC_CmdStopTransfer+0x40>)
 800b8fc:	210c      	movs	r1, #12
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f99a 	bl	800bc38 <SDMMC_GetCmdResp1>
 800b904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b906:	69fb      	ldr	r3, [r7, #28]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3720      	adds	r7, #32
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	05f5e100 	.word	0x05f5e100

0800b914 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08a      	sub	sp, #40	; 0x28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b924:	2307      	movs	r3, #7
 800b926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b928:	2340      	movs	r3, #64	; 0x40
 800b92a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b92c:	2300      	movs	r3, #0
 800b92e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b934:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b936:	f107 0310 	add.w	r3, r7, #16
 800b93a:	4619      	mov	r1, r3
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7ff fea7 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b942:	f241 3288 	movw	r2, #5000	; 0x1388
 800b946:	2107      	movs	r1, #7
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f000 f975 	bl	800bc38 <SDMMC_GetCmdResp1>
 800b94e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b952:	4618      	mov	r0, r3
 800b954:	3728      	adds	r7, #40	; 0x28
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b088      	sub	sp, #32
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b962:	2300      	movs	r3, #0
 800b964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b966:	2300      	movs	r3, #0
 800b968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b96a:	2300      	movs	r3, #0
 800b96c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b96e:	2300      	movs	r3, #0
 800b970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b978:	f107 0308 	add.w	r3, r7, #8
 800b97c:	4619      	mov	r1, r3
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7ff fe86 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f92f 	bl	800bbe8 <SDMMC_GetCmdError>
 800b98a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b98c:	69fb      	ldr	r3, [r7, #28]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3720      	adds	r7, #32
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b088      	sub	sp, #32
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b99e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b9a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b9a4:	2308      	movs	r3, #8
 800b9a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9a8:	2340      	movs	r3, #64	; 0x40
 800b9aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9b6:	f107 0308 	add.w	r3, r7, #8
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff fe67 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fb18 	bl	800bff8 <SDMMC_GetCmdResp7>
 800b9c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9ca:	69fb      	ldr	r3, [r7, #28]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3720      	adds	r7, #32
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b9e2:	2337      	movs	r3, #55	; 0x37
 800b9e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9e6:	2340      	movs	r3, #64	; 0x40
 800b9e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9f4:	f107 0308 	add.w	r3, r7, #8
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff fe48 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ba00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba04:	2137      	movs	r1, #55	; 0x37
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f916 	bl	800bc38 <SDMMC_GetCmdResp1>
 800ba0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba0e:	69fb      	ldr	r3, [r7, #28]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3720      	adds	r7, #32
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	4b0d      	ldr	r3, [pc, #52]	; (800ba5c <SDMMC_CmdAppOperCommand+0x44>)
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ba2a:	2329      	movs	r3, #41	; 0x29
 800ba2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba2e:	2340      	movs	r3, #64	; 0x40
 800ba30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba32:	2300      	movs	r3, #0
 800ba34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba3c:	f107 0308 	add.w	r3, r7, #8
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff fe24 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fa27 	bl	800be9c <SDMMC_GetCmdResp3>
 800ba4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba50:	69fb      	ldr	r3, [r7, #28]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3720      	adds	r7, #32
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	80100000 	.word	0x80100000

0800ba60 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b088      	sub	sp, #32
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ba6e:	2306      	movs	r3, #6
 800ba70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba72:	2340      	movs	r3, #64	; 0x40
 800ba74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba76:	2300      	movs	r3, #0
 800ba78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba80:	f107 0308 	add.w	r3, r7, #8
 800ba84:	4619      	mov	r1, r3
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7ff fe02 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ba8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba90:	2106      	movs	r1, #6
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f8d0 	bl	800bc38 <SDMMC_GetCmdResp1>
 800ba98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba9a:	69fb      	ldr	r3, [r7, #28]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3720      	adds	r7, #32
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800baac:	2300      	movs	r3, #0
 800baae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bab0:	2333      	movs	r3, #51	; 0x33
 800bab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bab4:	2340      	movs	r3, #64	; 0x40
 800bab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bab8:	2300      	movs	r3, #0
 800baba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800babc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bac2:	f107 0308 	add.w	r3, r7, #8
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7ff fde1 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bace:	f241 3288 	movw	r2, #5000	; 0x1388
 800bad2:	2133      	movs	r1, #51	; 0x33
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f8af 	bl	800bc38 <SDMMC_GetCmdResp1>
 800bada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800badc:	69fb      	ldr	r3, [r7, #28]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3720      	adds	r7, #32
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b088      	sub	sp, #32
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800baee:	2300      	movs	r3, #0
 800baf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800baf2:	2302      	movs	r3, #2
 800baf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800baf6:	23c0      	movs	r3, #192	; 0xc0
 800baf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bafa:	2300      	movs	r3, #0
 800bafc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bafe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb04:	f107 0308 	add.w	r3, r7, #8
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7ff fdc0 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f97d 	bl	800be10 <SDMMC_GetCmdResp2>
 800bb16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb18:	69fb      	ldr	r3, [r7, #28]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3720      	adds	r7, #32
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b088      	sub	sp, #32
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bb30:	2309      	movs	r3, #9
 800bb32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bb34:	23c0      	movs	r3, #192	; 0xc0
 800bb36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb42:	f107 0308 	add.w	r3, r7, #8
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff fda1 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f95e 	bl	800be10 <SDMMC_GetCmdResp2>
 800bb54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb56:	69fb      	ldr	r3, [r7, #28]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3720      	adds	r7, #32
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb72:	2340      	movs	r3, #64	; 0x40
 800bb74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb80:	f107 0308 	add.w	r3, r7, #8
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff fd82 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	2103      	movs	r1, #3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f9bd 	bl	800bf10 <SDMMC_GetCmdResp6>
 800bb96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb98:	69fb      	ldr	r3, [r7, #28]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b088      	sub	sp, #32
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bbb0:	230d      	movs	r3, #13
 800bbb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbb4:	2340      	movs	r3, #64	; 0x40
 800bbb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbc2:	f107 0308 	add.w	r3, r7, #8
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7ff fd61 	bl	800b690 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bbce:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd2:	210d      	movs	r1, #13
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f82f 	bl	800bc38 <SDMMC_GetCmdResp1>
 800bbda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbdc:	69fb      	ldr	r3, [r7, #28]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3720      	adds	r7, #32
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
	...

0800bbe8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bbe8:	b490      	push	{r4, r7}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbf0:	4b0f      	ldr	r3, [pc, #60]	; (800bc30 <SDMMC_GetCmdError+0x48>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a0f      	ldr	r2, [pc, #60]	; (800bc34 <SDMMC_GetCmdError+0x4c>)
 800bbf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbfa:	0a5b      	lsrs	r3, r3, #9
 800bbfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc00:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc04:	4623      	mov	r3, r4
 800bc06:	1e5c      	subs	r4, r3, #1
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d102      	bne.n	800bc12 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc10:	e009      	b.n	800bc26 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d0f2      	beq.n	800bc04 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	22c5      	movs	r2, #197	; 0xc5
 800bc22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bc90      	pop	{r4, r7}
 800bc2e:	4770      	bx	lr
 800bc30:	20000014 	.word	0x20000014
 800bc34:	10624dd3 	.word	0x10624dd3

0800bc38 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	460b      	mov	r3, r1
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bc46:	4b6f      	ldr	r3, [pc, #444]	; (800be04 <SDMMC_GetCmdResp1+0x1cc>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a6f      	ldr	r2, [pc, #444]	; (800be08 <SDMMC_GetCmdResp1+0x1d0>)
 800bc4c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc50:	0a5b      	lsrs	r3, r3, #9
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc58:	4623      	mov	r3, r4
 800bc5a:	1e5c      	subs	r4, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d102      	bne.n	800bc66 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc64:	e0c9      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0f0      	beq.n	800bc58 <SDMMC_GetCmdResp1+0x20>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1eb      	bne.n	800bc58 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc84:	f003 0304 	and.w	r3, r3, #4
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d004      	beq.n	800bc96 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2204      	movs	r2, #4
 800bc90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc92:	2304      	movs	r3, #4
 800bc94:	e0b1      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d004      	beq.n	800bcac <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2201      	movs	r2, #1
 800bca6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e0a6      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	22c5      	movs	r2, #197	; 0xc5
 800bcb0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7ff fd16 	bl	800b6e4 <SDMMC_GetCommandResponse>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	461a      	mov	r2, r3
 800bcbc:	7afb      	ldrb	r3, [r7, #11]
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d001      	beq.n	800bcc6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e099      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f7ff fd18 	bl	800b6fe <SDMMC_GetResponse>
 800bcce:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	4b4e      	ldr	r3, [pc, #312]	; (800be0c <SDMMC_GetCmdResp1+0x1d4>)
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e08d      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	da02      	bge.n	800bcea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bce8:	e087      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bcf4:	2340      	movs	r3, #64	; 0x40
 800bcf6:	e080      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bd02:	2380      	movs	r3, #128	; 0x80
 800bd04:	e079      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bd10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd14:	e071      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bd20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd24:	e069      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bd30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd34:	e061      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bd40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd44:	e059      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd54:	e051      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d002      	beq.n	800bd66 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd64:	e049      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bd70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bd74:	e041      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d002      	beq.n	800bd86 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bd80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd84:	e039      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d002      	beq.n	800bd96 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bd90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bd94:	e031      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d002      	beq.n	800bda6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bda0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bda4:	e029      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d002      	beq.n	800bdb6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bdb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bdb4:	e021      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d002      	beq.n	800bdc6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bdc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bdc4:	e019      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bdd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bdd4:	e011      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bde0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bde4:	e009      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f003 0308 	and.w	r3, r3, #8
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d002      	beq.n	800bdf6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bdf0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bdf4:	e001      	b.n	800bdfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bdf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	371c      	adds	r7, #28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd90      	pop	{r4, r7, pc}
 800be02:	bf00      	nop
 800be04:	20000014 	.word	0x20000014
 800be08:	10624dd3 	.word	0x10624dd3
 800be0c:	fdffe008 	.word	0xfdffe008

0800be10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800be10:	b490      	push	{r4, r7}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be18:	4b1e      	ldr	r3, [pc, #120]	; (800be94 <SDMMC_GetCmdResp2+0x84>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a1e      	ldr	r2, [pc, #120]	; (800be98 <SDMMC_GetCmdResp2+0x88>)
 800be1e:	fba2 2303 	umull	r2, r3, r2, r3
 800be22:	0a5b      	lsrs	r3, r3, #9
 800be24:	f241 3288 	movw	r2, #5000	; 0x1388
 800be28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be2c:	4623      	mov	r3, r4
 800be2e:	1e5c      	subs	r4, r3, #1
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be38:	e026      	b.n	800be88 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be3e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0f0      	beq.n	800be2c <SDMMC_GetCmdResp2+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1eb      	bne.n	800be2c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d004      	beq.n	800be6a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2204      	movs	r2, #4
 800be64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be66:	2304      	movs	r3, #4
 800be68:	e00e      	b.n	800be88 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	d004      	beq.n	800be80 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be7c:	2301      	movs	r3, #1
 800be7e:	e003      	b.n	800be88 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	22c5      	movs	r2, #197	; 0xc5
 800be84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bc90      	pop	{r4, r7}
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	20000014 	.word	0x20000014
 800be98:	10624dd3 	.word	0x10624dd3

0800be9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800be9c:	b490      	push	{r4, r7}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bea4:	4b18      	ldr	r3, [pc, #96]	; (800bf08 <SDMMC_GetCmdResp3+0x6c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a18      	ldr	r2, [pc, #96]	; (800bf0c <SDMMC_GetCmdResp3+0x70>)
 800beaa:	fba2 2303 	umull	r2, r3, r2, r3
 800beae:	0a5b      	lsrs	r3, r3, #9
 800beb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800beb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800beb8:	4623      	mov	r3, r4
 800beba:	1e5c      	subs	r4, r3, #1
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d102      	bne.n	800bec6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bec0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bec4:	e01b      	b.n	800befe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0f0      	beq.n	800beb8 <SDMMC_GetCmdResp3+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1eb      	bne.n	800beb8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee4:	f003 0304 	and.w	r3, r3, #4
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d004      	beq.n	800bef6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2204      	movs	r2, #4
 800bef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bef2:	2304      	movs	r3, #4
 800bef4:	e003      	b.n	800befe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	22c5      	movs	r2, #197	; 0xc5
 800befa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bc90      	pop	{r4, r7}
 800bf06:	4770      	bx	lr
 800bf08:	20000014 	.word	0x20000014
 800bf0c:	10624dd3 	.word	0x10624dd3

0800bf10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bf10:	b590      	push	{r4, r7, lr}
 800bf12:	b087      	sub	sp, #28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf1e:	4b34      	ldr	r3, [pc, #208]	; (800bff0 <SDMMC_GetCmdResp6+0xe0>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a34      	ldr	r2, [pc, #208]	; (800bff4 <SDMMC_GetCmdResp6+0xe4>)
 800bf24:	fba2 2303 	umull	r2, r3, r2, r3
 800bf28:	0a5b      	lsrs	r3, r3, #9
 800bf2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf2e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf32:	4623      	mov	r3, r4
 800bf34:	1e5c      	subs	r4, r3, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d102      	bne.n	800bf40 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf3e:	e052      	b.n	800bfe6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf44:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d0f0      	beq.n	800bf32 <SDMMC_GetCmdResp6+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1eb      	bne.n	800bf32 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf5e:	f003 0304 	and.w	r3, r3, #4
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d004      	beq.n	800bf70 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2204      	movs	r2, #4
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf6c:	2304      	movs	r3, #4
 800bf6e:	e03a      	b.n	800bfe6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e02f      	b.n	800bfe6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f7ff fbac 	bl	800b6e4 <SDMMC_GetCommandResponse>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	461a      	mov	r2, r3
 800bf90:	7afb      	ldrb	r3, [r7, #11]
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d001      	beq.n	800bf9a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e025      	b.n	800bfe6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	22c5      	movs	r2, #197	; 0xc5
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff fbab 	bl	800b6fe <SDMMC_GetResponse>
 800bfa8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d106      	bne.n	800bfc2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	0c1b      	lsrs	r3, r3, #16
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	e011      	b.n	800bfe6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bfcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfd0:	e009      	b.n	800bfe6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bfdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfe0:	e001      	b.n	800bfe6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bfe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	371c      	adds	r7, #28
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd90      	pop	{r4, r7, pc}
 800bfee:	bf00      	nop
 800bff0:	20000014 	.word	0x20000014
 800bff4:	10624dd3 	.word	0x10624dd3

0800bff8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bff8:	b490      	push	{r4, r7}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c000:	4b21      	ldr	r3, [pc, #132]	; (800c088 <SDMMC_GetCmdResp7+0x90>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a21      	ldr	r2, [pc, #132]	; (800c08c <SDMMC_GetCmdResp7+0x94>)
 800c006:	fba2 2303 	umull	r2, r3, r2, r3
 800c00a:	0a5b      	lsrs	r3, r3, #9
 800c00c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c010:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c014:	4623      	mov	r3, r4
 800c016:	1e5c      	subs	r4, r3, #1
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d102      	bne.n	800c022 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c01c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c020:	e02c      	b.n	800c07c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c026:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d0f0      	beq.n	800c014 <SDMMC_GetCmdResp7+0x1c>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1eb      	bne.n	800c014 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c040:	f003 0304 	and.w	r3, r3, #4
 800c044:	2b00      	cmp	r3, #0
 800c046:	d004      	beq.n	800c052 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2204      	movs	r2, #4
 800c04c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c04e:	2304      	movs	r3, #4
 800c050:	e014      	b.n	800c07c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c056:	f003 0301 	and.w	r3, r3, #1
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d004      	beq.n	800c068 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2201      	movs	r2, #1
 800c062:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c064:	2301      	movs	r3, #1
 800c066:	e009      	b.n	800c07c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2240      	movs	r2, #64	; 0x40
 800c078:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c07a:	2300      	movs	r3, #0
  
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bc90      	pop	{r4, r7}
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	20000014 	.word	0x20000014
 800c08c:	10624dd3 	.word	0x10624dd3

0800c090 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c094:	4904      	ldr	r1, [pc, #16]	; (800c0a8 <MX_FATFS_Init+0x18>)
 800c096:	4805      	ldr	r0, [pc, #20]	; (800c0ac <MX_FATFS_Init+0x1c>)
 800c098:	f000 fa96 	bl	800c5c8 <FATFS_LinkDriver>
 800c09c:	4603      	mov	r3, r0
 800c09e:	461a      	mov	r2, r3
 800c0a0:	4b03      	ldr	r3, [pc, #12]	; (800c0b0 <MX_FATFS_Init+0x20>)
 800c0a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c0a4:	bf00      	nop
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	20000b78 	.word	0x20000b78
 800c0ac:	08026eec 	.word	0x08026eec
 800c0b0:	20000b74 	.word	0x20000b74

0800c0b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c0be:	f000 f87b 	bl	800c1b8 <BSP_SD_IsDetected>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d001      	beq.n	800c0cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	e012      	b.n	800c0f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c0cc:	480b      	ldr	r0, [pc, #44]	; (800c0fc <BSP_SD_Init+0x48>)
 800c0ce:	f7fc fad9 	bl	8008684 <HAL_SD_Init>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c0d6:	79fb      	ldrb	r3, [r7, #7]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d109      	bne.n	800c0f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c0dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c0e0:	4806      	ldr	r0, [pc, #24]	; (800c0fc <BSP_SD_Init+0x48>)
 800c0e2:	f7fc ff1b 	bl	8008f1c <HAL_SD_ConfigWideBusOperation>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c0f0:	79fb      	ldrb	r3, [r7, #7]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	200006e4 	.word	0x200006e4

0800c100 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c10c:	2300      	movs	r3, #0
 800c10e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	68f9      	ldr	r1, [r7, #12]
 800c116:	4806      	ldr	r0, [pc, #24]	; (800c130 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c118:	f7fc fb4c 	bl	80087b4 <HAL_SD_ReadBlocks_DMA>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c126:	7dfb      	ldrb	r3, [r7, #23]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3718      	adds	r7, #24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	200006e4 	.word	0x200006e4

0800c134 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	68f9      	ldr	r1, [r7, #12]
 800c14a:	4806      	ldr	r0, [pc, #24]	; (800c164 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c14c:	f7fc fc1e 	bl	800898c <HAL_SD_WriteBlocks_DMA>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3718      	adds	r7, #24
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	200006e4 	.word	0x200006e4

0800c168 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c16c:	4805      	ldr	r0, [pc, #20]	; (800c184 <BSP_SD_GetCardState+0x1c>)
 800c16e:	f7fc ff51 	bl	8009014 <HAL_SD_GetCardState>
 800c172:	4603      	mov	r3, r0
 800c174:	2b04      	cmp	r3, #4
 800c176:	bf14      	ite	ne
 800c178:	2301      	movne	r3, #1
 800c17a:	2300      	moveq	r3, #0
 800c17c:	b2db      	uxtb	r3, r3
}
 800c17e:	4618      	mov	r0, r3
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	200006e4 	.word	0x200006e4

0800c188 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	4803      	ldr	r0, [pc, #12]	; (800c1a0 <BSP_SD_GetCardInfo+0x18>)
 800c194:	f7fc fe96 	bl	8008ec4 <HAL_SD_GetCardInfo>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	200006e4 	.word	0x200006e4

0800c1a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c1ac:	f000 f9b2 	bl	800c514 <BSP_SD_ReadCpltCallback>
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c1c2:	f000 f80b 	bl	800c1dc <BSP_PlatformIsDetected>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c1d0:	79fb      	ldrb	r3, [r7, #7]
 800c1d2:	b2db      	uxtb	r3, r3
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c1e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c1ea:	4806      	ldr	r0, [pc, #24]	; (800c204 <BSP_PlatformIsDetected+0x28>)
 800c1ec:	f7f9 fe04 	bl	8005df8 <HAL_GPIO_ReadPin>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c1fa:	79fb      	ldrb	r3, [r7, #7]
}  
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	40020800 	.word	0x40020800

0800c208 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c210:	f000 fa26 	bl	800c660 <osKernelSysTick>
 800c214:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c216:	e006      	b.n	800c226 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c218:	f7ff ffa6 	bl	800c168 <BSP_SD_GetCardState>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c222:	2300      	movs	r3, #0
 800c224:	e009      	b.n	800c23a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c226:	f000 fa1b 	bl	800c660 <osKernelSysTick>
 800c22a:	4602      	mov	r2, r0
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	429a      	cmp	r2, r3
 800c234:	d8f0      	bhi.n	800c218 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
	...

0800c244 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c24e:	4b0b      	ldr	r3, [pc, #44]	; (800c27c <SD_CheckStatus+0x38>)
 800c250:	2201      	movs	r2, #1
 800c252:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c254:	f7ff ff88 	bl	800c168 <BSP_SD_GetCardState>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d107      	bne.n	800c26e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c25e:	4b07      	ldr	r3, [pc, #28]	; (800c27c <SD_CheckStatus+0x38>)
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	b2db      	uxtb	r3, r3
 800c264:	f023 0301 	bic.w	r3, r3, #1
 800c268:	b2da      	uxtb	r2, r3
 800c26a:	4b04      	ldr	r3, [pc, #16]	; (800c27c <SD_CheckStatus+0x38>)
 800c26c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c26e:	4b03      	ldr	r3, [pc, #12]	; (800c27c <SD_CheckStatus+0x38>)
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	b2db      	uxtb	r3, r3
}
 800c274:	4618      	mov	r0, r3
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	2000001d 	.word	0x2000001d

0800c280 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c280:	b590      	push	{r4, r7, lr}
 800c282:	b087      	sub	sp, #28
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c28a:	4b20      	ldr	r3, [pc, #128]	; (800c30c <SD_initialize+0x8c>)
 800c28c:	2201      	movs	r2, #1
 800c28e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c290:	f000 f9da 	bl	800c648 <osKernelRunning>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d030      	beq.n	800c2fc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c29a:	f7ff ff0b 	bl	800c0b4 <BSP_SD_Init>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d107      	bne.n	800c2b4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c2a4:	79fb      	ldrb	r3, [r7, #7]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7ff ffcc 	bl	800c244 <SD_CheckStatus>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	4b16      	ldr	r3, [pc, #88]	; (800c30c <SD_initialize+0x8c>)
 800c2b2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c2b4:	4b15      	ldr	r3, [pc, #84]	; (800c30c <SD_initialize+0x8c>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d01e      	beq.n	800c2fc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c2be:	4b14      	ldr	r3, [pc, #80]	; (800c310 <SD_initialize+0x90>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10e      	bne.n	800c2e4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c2c6:	4b13      	ldr	r3, [pc, #76]	; (800c314 <SD_initialize+0x94>)
 800c2c8:	f107 0408 	add.w	r4, r7, #8
 800c2cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c2ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c2d2:	f107 0308 	add.w	r3, r7, #8
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 fa31 	bl	800c740 <osMessageCreate>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	4a0b      	ldr	r2, [pc, #44]	; (800c310 <SD_initialize+0x90>)
 800c2e2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c2e4:	4b0a      	ldr	r3, [pc, #40]	; (800c310 <SD_initialize+0x90>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d107      	bne.n	800c2fc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c2ec:	4b07      	ldr	r3, [pc, #28]	; (800c30c <SD_initialize+0x8c>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	f043 0301 	orr.w	r3, r3, #1
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	4b04      	ldr	r3, [pc, #16]	; (800c30c <SD_initialize+0x8c>)
 800c2fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c2fc:	4b03      	ldr	r3, [pc, #12]	; (800c30c <SD_initialize+0x8c>)
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	b2db      	uxtb	r3, r3
}
 800c302:	4618      	mov	r0, r3
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	bd90      	pop	{r4, r7, pc}
 800c30a:	bf00      	nop
 800c30c:	2000001d 	.word	0x2000001d
 800c310:	20000b7c 	.word	0x20000b7c
 800c314:	080264b4 	.word	0x080264b4

0800c318 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	4603      	mov	r3, r0
 800c320:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c322:	79fb      	ldrb	r3, [r7, #7]
 800c324:	4618      	mov	r0, r3
 800c326:	f7ff ff8d 	bl	800c244 <SD_CheckStatus>
 800c32a:	4603      	mov	r3, r0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b08a      	sub	sp, #40	; 0x28
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60b9      	str	r1, [r7, #8]
 800c33c:	607a      	str	r2, [r7, #4]
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	4603      	mov	r3, r0
 800c342:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c34a:	f247 5030 	movw	r0, #30000	; 0x7530
 800c34e:	f7ff ff5b 	bl	800c208 <SD_CheckStatusWithTimeout>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	da02      	bge.n	800c35e <SD_read+0x2a>
  {
    return res;
 800c358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c35c:	e032      	b.n	800c3c4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	6879      	ldr	r1, [r7, #4]
 800c362:	68b8      	ldr	r0, [r7, #8]
 800c364:	f7ff fecc 	bl	800c100 <BSP_SD_ReadBlocks_DMA>
 800c368:	4603      	mov	r3, r0
 800c36a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c36e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c372:	2b00      	cmp	r3, #0
 800c374:	d124      	bne.n	800c3c0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c376:	4b15      	ldr	r3, [pc, #84]	; (800c3cc <SD_read+0x98>)
 800c378:	6819      	ldr	r1, [r3, #0]
 800c37a:	f107 0314 	add.w	r3, r7, #20
 800c37e:	f247 5230 	movw	r2, #30000	; 0x7530
 800c382:	4618      	mov	r0, r3
 800c384:	f000 fa44 	bl	800c810 <osMessageGet>

    if (event.status == osEventMessage)
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	2b10      	cmp	r3, #16
 800c38c:	d118      	bne.n	800c3c0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d115      	bne.n	800c3c0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c394:	f000 f964 	bl	800c660 <osKernelSysTick>
 800c398:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c39a:	e008      	b.n	800c3ae <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c39c:	f7ff fee4 	bl	800c168 <BSP_SD_GetCardState>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d103      	bne.n	800c3ae <SD_read+0x7a>
              {
                res = RES_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c3ac:	e008      	b.n	800c3c0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c3ae:	f000 f957 	bl	800c660 <osKernelSysTick>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	f247 522f 	movw	r2, #29999	; 0x752f
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d9ed      	bls.n	800c39c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3728      	adds	r7, #40	; 0x28
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	20000b7c 	.word	0x20000b7c

0800c3d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08a      	sub	sp, #40	; 0x28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60b9      	str	r1, [r7, #8]
 800c3d8:	607a      	str	r2, [r7, #4]
 800c3da:	603b      	str	r3, [r7, #0]
 800c3dc:	4603      	mov	r3, r0
 800c3de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c3e6:	f247 5030 	movw	r0, #30000	; 0x7530
 800c3ea:	f7ff ff0d 	bl	800c208 <SD_CheckStatusWithTimeout>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	da02      	bge.n	800c3fa <SD_write+0x2a>
  {
    return res;
 800c3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3f8:	e02e      	b.n	800c458 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	6879      	ldr	r1, [r7, #4]
 800c3fe:	68b8      	ldr	r0, [r7, #8]
 800c400:	f7ff fe98 	bl	800c134 <BSP_SD_WriteBlocks_DMA>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d124      	bne.n	800c454 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c40a:	4b15      	ldr	r3, [pc, #84]	; (800c460 <SD_write+0x90>)
 800c40c:	6819      	ldr	r1, [r3, #0]
 800c40e:	f107 0314 	add.w	r3, r7, #20
 800c412:	f247 5230 	movw	r2, #30000	; 0x7530
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f9fa 	bl	800c810 <osMessageGet>

    if (event.status == osEventMessage)
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2b10      	cmp	r3, #16
 800c420:	d118      	bne.n	800c454 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	2b02      	cmp	r3, #2
 800c426:	d115      	bne.n	800c454 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c428:	f000 f91a 	bl	800c660 <osKernelSysTick>
 800c42c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c42e:	e008      	b.n	800c442 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c430:	f7ff fe9a 	bl	800c168 <BSP_SD_GetCardState>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d103      	bne.n	800c442 <SD_write+0x72>
          {
            res = RES_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c440:	e008      	b.n	800c454 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c442:	f000 f90d 	bl	800c660 <osKernelSysTick>
 800c446:	4602      	mov	r2, r0
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c450:	4293      	cmp	r3, r2
 800c452:	d9ed      	bls.n	800c430 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3728      	adds	r7, #40	; 0x28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	20000b7c 	.word	0x20000b7c

0800c464 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08c      	sub	sp, #48	; 0x30
 800c468:	af00      	add	r7, sp, #0
 800c46a:	4603      	mov	r3, r0
 800c46c:	603a      	str	r2, [r7, #0]
 800c46e:	71fb      	strb	r3, [r7, #7]
 800c470:	460b      	mov	r3, r1
 800c472:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c47a:	4b25      	ldr	r3, [pc, #148]	; (800c510 <SD_ioctl+0xac>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	f003 0301 	and.w	r3, r3, #1
 800c484:	2b00      	cmp	r3, #0
 800c486:	d001      	beq.n	800c48c <SD_ioctl+0x28>
 800c488:	2303      	movs	r3, #3
 800c48a:	e03c      	b.n	800c506 <SD_ioctl+0xa2>

  switch (cmd)
 800c48c:	79bb      	ldrb	r3, [r7, #6]
 800c48e:	2b03      	cmp	r3, #3
 800c490:	d834      	bhi.n	800c4fc <SD_ioctl+0x98>
 800c492:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <SD_ioctl+0x34>)
 800c494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c498:	0800c4a9 	.word	0x0800c4a9
 800c49c:	0800c4b1 	.word	0x0800c4b1
 800c4a0:	0800c4c9 	.word	0x0800c4c9
 800c4a4:	0800c4e3 	.word	0x0800c4e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c4ae:	e028      	b.n	800c502 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c4b0:	f107 030c 	add.w	r3, r7, #12
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7ff fe67 	bl	800c188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c4c6:	e01c      	b.n	800c502 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c4c8:	f107 030c 	add.w	r3, r7, #12
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7ff fe5b 	bl	800c188 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c4e0:	e00f      	b.n	800c502 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c4e2:	f107 030c 	add.w	r3, r7, #12
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7ff fe4e 	bl	800c188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ee:	0a5a      	lsrs	r2, r3, #9
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c4fa:	e002      	b.n	800c502 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c4fc:	2304      	movs	r3, #4
 800c4fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c506:	4618      	mov	r0, r3
 800c508:	3730      	adds	r7, #48	; 0x30
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	2000001d 	.word	0x2000001d

0800c514 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c518:	4b04      	ldr	r3, [pc, #16]	; (800c52c <BSP_SD_ReadCpltCallback+0x18>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2200      	movs	r2, #0
 800c51e:	2101      	movs	r1, #1
 800c520:	4618      	mov	r0, r3
 800c522:	f000 f935 	bl	800c790 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c526:	bf00      	nop
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20000b7c 	.word	0x20000b7c

0800c530 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	4613      	mov	r3, r2
 800c53c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c53e:	2301      	movs	r3, #1
 800c540:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c546:	4b1f      	ldr	r3, [pc, #124]	; (800c5c4 <FATFS_LinkDriverEx+0x94>)
 800c548:	7a5b      	ldrb	r3, [r3, #9]
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d131      	bne.n	800c5b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c550:	4b1c      	ldr	r3, [pc, #112]	; (800c5c4 <FATFS_LinkDriverEx+0x94>)
 800c552:	7a5b      	ldrb	r3, [r3, #9]
 800c554:	b2db      	uxtb	r3, r3
 800c556:	461a      	mov	r2, r3
 800c558:	4b1a      	ldr	r3, [pc, #104]	; (800c5c4 <FATFS_LinkDriverEx+0x94>)
 800c55a:	2100      	movs	r1, #0
 800c55c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c55e:	4b19      	ldr	r3, [pc, #100]	; (800c5c4 <FATFS_LinkDriverEx+0x94>)
 800c560:	7a5b      	ldrb	r3, [r3, #9]
 800c562:	b2db      	uxtb	r3, r3
 800c564:	4a17      	ldr	r2, [pc, #92]	; (800c5c4 <FATFS_LinkDriverEx+0x94>)
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4413      	add	r3, r2
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c56e:	4b15      	ldr	r3, [pc, #84]	; (800c5c4 <FATFS_LinkDriverEx+0x94>)
 800c570:	7a5b      	ldrb	r3, [r3, #9]
 800c572:	b2db      	uxtb	r3, r3
 800c574:	461a      	mov	r2, r3
 800c576:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <FATFS_LinkDriverEx+0x94>)
 800c578:	4413      	add	r3, r2
 800c57a:	79fa      	ldrb	r2, [r7, #7]
 800c57c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c57e:	4b11      	ldr	r3, [pc, #68]	; (800c5c4 <FATFS_LinkDriverEx+0x94>)
 800c580:	7a5b      	ldrb	r3, [r3, #9]
 800c582:	b2db      	uxtb	r3, r3
 800c584:	1c5a      	adds	r2, r3, #1
 800c586:	b2d1      	uxtb	r1, r2
 800c588:	4a0e      	ldr	r2, [pc, #56]	; (800c5c4 <FATFS_LinkDriverEx+0x94>)
 800c58a:	7251      	strb	r1, [r2, #9]
 800c58c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c58e:	7dbb      	ldrb	r3, [r7, #22]
 800c590:	3330      	adds	r3, #48	; 0x30
 800c592:	b2da      	uxtb	r2, r3
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	3301      	adds	r3, #1
 800c59c:	223a      	movs	r2, #58	; 0x3a
 800c59e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	3302      	adds	r3, #2
 800c5a4:	222f      	movs	r2, #47	; 0x2f
 800c5a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	3303      	adds	r3, #3
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	371c      	adds	r7, #28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	20000b80 	.word	0x20000b80

0800c5c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	6839      	ldr	r1, [r7, #0]
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff ffaa 	bl	800c530 <FATFS_LinkDriverEx>
 800c5dc:	4603      	mov	r3, r0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3708      	adds	r7, #8
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}

0800c5e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b085      	sub	sp, #20
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c5f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5f8:	2b84      	cmp	r3, #132	; 0x84
 800c5fa:	d005      	beq.n	800c608 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c5fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	4413      	add	r3, r2
 800c604:	3303      	adds	r3, #3
 800c606:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c608:	68fb      	ldr	r3, [r7, #12]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c616:	b480      	push	{r7}
 800c618:	b083      	sub	sp, #12
 800c61a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c61c:	f3ef 8305 	mrs	r3, IPSR
 800c620:	607b      	str	r3, [r7, #4]
  return(result);
 800c622:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c624:	2b00      	cmp	r3, #0
 800c626:	bf14      	ite	ne
 800c628:	2301      	movne	r3, #1
 800c62a:	2300      	moveq	r3, #0
 800c62c:	b2db      	uxtb	r3, r3
}
 800c62e:	4618      	mov	r0, r3
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c63e:	f001 fb1d 	bl	800dc7c <vTaskStartScheduler>
  
  return osOK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	bd80      	pop	{r7, pc}

0800c648 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c64c:	f001 ff70 	bl	800e530 <xTaskGetSchedulerState>
 800c650:	4603      	mov	r3, r0
 800c652:	2b01      	cmp	r3, #1
 800c654:	d101      	bne.n	800c65a <osKernelRunning+0x12>
    return 0;
 800c656:	2300      	movs	r3, #0
 800c658:	e000      	b.n	800c65c <osKernelRunning+0x14>
  else
    return 1;
 800c65a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c664:	f7ff ffd7 	bl	800c616 <inHandlerMode>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c66e:	f001 fc25 	bl	800debc <xTaskGetTickCountFromISR>
 800c672:	4603      	mov	r3, r0
 800c674:	e002      	b.n	800c67c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c676:	f001 fc11 	bl	800de9c <xTaskGetTickCount>
 800c67a:	4603      	mov	r3, r0
  }
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c682:	b089      	sub	sp, #36	; 0x24
 800c684:	af04      	add	r7, sp, #16
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d020      	beq.n	800c6d4 <osThreadCreate+0x54>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d01c      	beq.n	800c6d4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685c      	ldr	r4, [r3, #4]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	691e      	ldr	r6, [r3, #16]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff ff9a 	bl	800c5e6 <makeFreeRtosPriority>
 800c6b2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6bc:	9202      	str	r2, [sp, #8]
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	9100      	str	r1, [sp, #0]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	4632      	mov	r2, r6
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f001 f8fb 	bl	800d8c4 <xTaskCreateStatic>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	60fb      	str	r3, [r7, #12]
 800c6d2:	e01c      	b.n	800c70e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	685c      	ldr	r4, [r3, #4]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6e0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7ff ff7c 	bl	800c5e6 <makeFreeRtosPriority>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	f107 030c 	add.w	r3, r7, #12
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	9200      	str	r2, [sp, #0]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	4632      	mov	r2, r6
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	4620      	mov	r0, r4
 800c700:	f001 f943 	bl	800d98a <xTaskCreate>
 800c704:	4603      	mov	r3, r0
 800c706:	2b01      	cmp	r3, #1
 800c708:	d001      	beq.n	800c70e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c70a:	2300      	movs	r3, #0
 800c70c:	e000      	b.n	800c710 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c70e:	68fb      	ldr	r3, [r7, #12]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c718 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d001      	beq.n	800c72e <osDelay+0x16>
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	e000      	b.n	800c730 <osDelay+0x18>
 800c72e:	2301      	movs	r3, #1
 800c730:	4618      	mov	r0, r3
 800c732:	f001 fa6d 	bl	800dc10 <vTaskDelay>
  
  return osOK;
 800c736:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c740:	b590      	push	{r4, r7, lr}
 800c742:	b085      	sub	sp, #20
 800c744:	af02      	add	r7, sp, #8
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d011      	beq.n	800c776 <osMessageCreate+0x36>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00d      	beq.n	800c776 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6859      	ldr	r1, [r3, #4]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	689a      	ldr	r2, [r3, #8]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	2400      	movs	r4, #0
 800c76c:	9400      	str	r4, [sp, #0]
 800c76e:	f000 f9e1 	bl	800cb34 <xQueueGenericCreateStatic>
 800c772:	4603      	mov	r3, r0
 800c774:	e008      	b.n	800c788 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6818      	ldr	r0, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	4619      	mov	r1, r3
 800c782:	f000 fa59 	bl	800cc38 <xQueueGenericCreate>
 800c786:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c788:	4618      	mov	r0, r3
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd90      	pop	{r4, r7, pc}

0800c790 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c79c:	2300      	movs	r3, #0
 800c79e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d101      	bne.n	800c7ae <osMessagePut+0x1e>
    ticks = 1;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c7ae:	f7ff ff32 	bl	800c616 <inHandlerMode>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d018      	beq.n	800c7ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c7b8:	f107 0210 	add.w	r2, r7, #16
 800c7bc:	f107 0108 	add.w	r1, r7, #8
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f000 fba0 	bl	800cf08 <xQueueGenericSendFromISR>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d001      	beq.n	800c7d2 <osMessagePut+0x42>
      return osErrorOS;
 800c7ce:	23ff      	movs	r3, #255	; 0xff
 800c7d0:	e018      	b.n	800c804 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d014      	beq.n	800c802 <osMessagePut+0x72>
 800c7d8:	4b0c      	ldr	r3, [pc, #48]	; (800c80c <osMessagePut+0x7c>)
 800c7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	e00b      	b.n	800c802 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c7ea:	f107 0108 	add.w	r1, r7, #8
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f000 fa82 	bl	800ccfc <xQueueGenericSend>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d001      	beq.n	800c802 <osMessagePut+0x72>
      return osErrorOS;
 800c7fe:	23ff      	movs	r3, #255	; 0xff
 800c800:	e000      	b.n	800c804 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3718      	adds	r7, #24
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	e000ed04 	.word	0xe000ed04

0800c810 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c810:	b590      	push	{r4, r7, lr}
 800c812:	b08b      	sub	sp, #44	; 0x2c
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10a      	bne.n	800c840 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c82a:	2380      	movs	r3, #128	; 0x80
 800c82c:	617b      	str	r3, [r7, #20]
    return event;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	461c      	mov	r4, r3
 800c832:	f107 0314 	add.w	r3, r7, #20
 800c836:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c83a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c83e:	e054      	b.n	800c8ea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c840:	2300      	movs	r3, #0
 800c842:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84e:	d103      	bne.n	800c858 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c850:	f04f 33ff 	mov.w	r3, #4294967295
 800c854:	627b      	str	r3, [r7, #36]	; 0x24
 800c856:	e009      	b.n	800c86c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d006      	beq.n	800c86c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	2b00      	cmp	r3, #0
 800c866:	d101      	bne.n	800c86c <osMessageGet+0x5c>
      ticks = 1;
 800c868:	2301      	movs	r3, #1
 800c86a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c86c:	f7ff fed3 	bl	800c616 <inHandlerMode>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d01c      	beq.n	800c8b0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c876:	f107 0220 	add.w	r2, r7, #32
 800c87a:	f107 0314 	add.w	r3, r7, #20
 800c87e:	3304      	adds	r3, #4
 800c880:	4619      	mov	r1, r3
 800c882:	68b8      	ldr	r0, [r7, #8]
 800c884:	f000 fe70 	bl	800d568 <xQueueReceiveFromISR>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d102      	bne.n	800c894 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c88e:	2310      	movs	r3, #16
 800c890:	617b      	str	r3, [r7, #20]
 800c892:	e001      	b.n	800c898 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c894:	2300      	movs	r3, #0
 800c896:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c898:	6a3b      	ldr	r3, [r7, #32]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d01d      	beq.n	800c8da <osMessageGet+0xca>
 800c89e:	4b15      	ldr	r3, [pc, #84]	; (800c8f4 <osMessageGet+0xe4>)
 800c8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a4:	601a      	str	r2, [r3, #0]
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	e014      	b.n	800c8da <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c8b0:	f107 0314 	add.w	r3, r7, #20
 800c8b4:	3304      	adds	r3, #4
 800c8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	68b8      	ldr	r0, [r7, #8]
 800c8bc:	f000 fc5a 	bl	800d174 <xQueueReceive>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d102      	bne.n	800c8cc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c8c6:	2310      	movs	r3, #16
 800c8c8:	617b      	str	r3, [r7, #20]
 800c8ca:	e006      	b.n	800c8da <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d101      	bne.n	800c8d6 <osMessageGet+0xc6>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	e000      	b.n	800c8d8 <osMessageGet+0xc8>
 800c8d6:	2340      	movs	r3, #64	; 0x40
 800c8d8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	461c      	mov	r4, r3
 800c8de:	f107 0314 	add.w	r3, r7, #20
 800c8e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	372c      	adds	r7, #44	; 0x2c
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd90      	pop	{r4, r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	e000ed04 	.word	0xe000ed04

0800c8f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f103 0208 	add.w	r2, r3, #8
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f04f 32ff 	mov.w	r2, #4294967295
 800c910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f103 0208 	add.w	r2, r3, #8
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f103 0208 	add.w	r2, r3, #8
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c946:	bf00      	nop
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c952:	b480      	push	{r7}
 800c954:	b085      	sub	sp, #20
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	689a      	ldr	r2, [r3, #8]
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	683a      	ldr	r2, [r7, #0]
 800c976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	601a      	str	r2, [r3, #0]
}
 800c98e:	bf00      	nop
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c99a:	b480      	push	{r7}
 800c99c:	b085      	sub	sp, #20
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b0:	d103      	bne.n	800c9ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	60fb      	str	r3, [r7, #12]
 800c9b8:	e00c      	b.n	800c9d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	3308      	adds	r3, #8
 800c9be:	60fb      	str	r3, [r7, #12]
 800c9c0:	e002      	b.n	800c9c8 <vListInsert+0x2e>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	60fb      	str	r3, [r7, #12]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d2f6      	bcs.n	800c9c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	685a      	ldr	r2, [r3, #4]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	683a      	ldr	r2, [r7, #0]
 800c9e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	601a      	str	r2, [r3, #0]
}
 800ca00:	bf00      	nop
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	6892      	ldr	r2, [r2, #8]
 800ca22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	6852      	ldr	r2, [r2, #4]
 800ca2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d103      	bne.n	800ca40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	689a      	ldr	r2, [r3, #8]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	1e5a      	subs	r2, r3, #1
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3714      	adds	r7, #20
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10c      	bne.n	800ca8e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ca74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca78:	b672      	cpsid	i
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	b662      	cpsie	i
 800ca88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ca8a:	bf00      	nop
 800ca8c:	e7fe      	b.n	800ca8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ca8e:	f002 f89d 	bl	800ebcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca9a:	68f9      	ldr	r1, [r7, #12]
 800ca9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca9e:	fb01 f303 	mul.w	r3, r1, r3
 800caa2:	441a      	add	r2, r3
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cabe:	3b01      	subs	r3, #1
 800cac0:	68f9      	ldr	r1, [r7, #12]
 800cac2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cac4:	fb01 f303 	mul.w	r3, r1, r3
 800cac8:	441a      	add	r2, r3
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	22ff      	movs	r2, #255	; 0xff
 800cad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	22ff      	movs	r2, #255	; 0xff
 800cada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d114      	bne.n	800cb0e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d01a      	beq.n	800cb22 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3310      	adds	r3, #16
 800caf0:	4618      	mov	r0, r3
 800caf2:	f001 fb57 	bl	800e1a4 <xTaskRemoveFromEventList>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d012      	beq.n	800cb22 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cafc:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <xQueueGenericReset+0xd0>)
 800cafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb02:	601a      	str	r2, [r3, #0]
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	f3bf 8f6f 	isb	sy
 800cb0c:	e009      	b.n	800cb22 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3310      	adds	r3, #16
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff fef0 	bl	800c8f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3324      	adds	r3, #36	; 0x24
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7ff feeb 	bl	800c8f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cb22:	f002 f887 	bl	800ec34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cb26:	2301      	movs	r3, #1
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	e000ed04 	.word	0xe000ed04

0800cb34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08e      	sub	sp, #56	; 0x38
 800cb38:	af02      	add	r7, sp, #8
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10c      	bne.n	800cb62 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4c:	b672      	cpsid	i
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	b662      	cpsie	i
 800cb5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb5e:	bf00      	nop
 800cb60:	e7fe      	b.n	800cb60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10c      	bne.n	800cb82 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6c:	b672      	cpsid	i
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	b662      	cpsie	i
 800cb7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb7e:	bf00      	nop
 800cb80:	e7fe      	b.n	800cb80 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <xQueueGenericCreateStatic+0x5a>
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <xQueueGenericCreateStatic+0x5e>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e000      	b.n	800cb94 <xQueueGenericCreateStatic+0x60>
 800cb92:	2300      	movs	r3, #0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10c      	bne.n	800cbb2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	b672      	cpsid	i
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	b662      	cpsie	i
 800cbac:	623b      	str	r3, [r7, #32]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d102      	bne.n	800cbbe <xQueueGenericCreateStatic+0x8a>
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d101      	bne.n	800cbc2 <xQueueGenericCreateStatic+0x8e>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e000      	b.n	800cbc4 <xQueueGenericCreateStatic+0x90>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10c      	bne.n	800cbe2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbcc:	b672      	cpsid	i
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	b662      	cpsie	i
 800cbdc:	61fb      	str	r3, [r7, #28]
}
 800cbde:	bf00      	nop
 800cbe0:	e7fe      	b.n	800cbe0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cbe2:	2348      	movs	r3, #72	; 0x48
 800cbe4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	2b48      	cmp	r3, #72	; 0x48
 800cbea:	d00c      	beq.n	800cc06 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800cbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf0:	b672      	cpsid	i
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	b662      	cpsie	i
 800cc00:	61bb      	str	r3, [r7, #24]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00d      	beq.n	800cc2e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc14:	2201      	movs	r2, #1
 800cc16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	4613      	mov	r3, r2
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	68b9      	ldr	r1, [r7, #8]
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f000 f847 	bl	800ccbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3730      	adds	r7, #48	; 0x30
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08a      	sub	sp, #40	; 0x28
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	4613      	mov	r3, r2
 800cc44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10c      	bne.n	800cc66 <xQueueGenericCreate+0x2e>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	b672      	cpsid	i
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	b662      	cpsie	i
 800cc60:	613b      	str	r3, [r7, #16]
}
 800cc62:	bf00      	nop
 800cc64:	e7fe      	b.n	800cc64 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d102      	bne.n	800cc72 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	61fb      	str	r3, [r7, #28]
 800cc70:	e004      	b.n	800cc7c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	fb02 f303 	mul.w	r3, r2, r3
 800cc7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	3348      	adds	r3, #72	; 0x48
 800cc80:	4618      	mov	r0, r3
 800cc82:	f002 f8cf 	bl	800ee24 <pvPortMalloc>
 800cc86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d011      	beq.n	800ccb2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	3348      	adds	r3, #72	; 0x48
 800cc96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cca0:	79fa      	ldrb	r2, [r7, #7]
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	4613      	mov	r3, r2
 800cca8:	697a      	ldr	r2, [r7, #20]
 800ccaa:	68b9      	ldr	r1, [r7, #8]
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f000 f805 	bl	800ccbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccb2:	69bb      	ldr	r3, [r7, #24]
	}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3720      	adds	r7, #32
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d103      	bne.n	800ccd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	69ba      	ldr	r2, [r7, #24]
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	e002      	b.n	800ccde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ccea:	2101      	movs	r1, #1
 800ccec:	69b8      	ldr	r0, [r7, #24]
 800ccee:	f7ff feb7 	bl	800ca60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ccf2:	bf00      	nop
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
	...

0800ccfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08e      	sub	sp, #56	; 0x38
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10c      	bne.n	800cd32 <xQueueGenericSend+0x36>
	__asm volatile
 800cd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1c:	b672      	cpsid	i
 800cd1e:	f383 8811 	msr	BASEPRI, r3
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	b662      	cpsie	i
 800cd2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd2e:	bf00      	nop
 800cd30:	e7fe      	b.n	800cd30 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d103      	bne.n	800cd40 <xQueueGenericSend+0x44>
 800cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d101      	bne.n	800cd44 <xQueueGenericSend+0x48>
 800cd40:	2301      	movs	r3, #1
 800cd42:	e000      	b.n	800cd46 <xQueueGenericSend+0x4a>
 800cd44:	2300      	movs	r3, #0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10c      	bne.n	800cd64 <xQueueGenericSend+0x68>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	b672      	cpsid	i
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	b662      	cpsie	i
 800cd5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd60:	bf00      	nop
 800cd62:	e7fe      	b.n	800cd62 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d103      	bne.n	800cd72 <xQueueGenericSend+0x76>
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d101      	bne.n	800cd76 <xQueueGenericSend+0x7a>
 800cd72:	2301      	movs	r3, #1
 800cd74:	e000      	b.n	800cd78 <xQueueGenericSend+0x7c>
 800cd76:	2300      	movs	r3, #0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10c      	bne.n	800cd96 <xQueueGenericSend+0x9a>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	b672      	cpsid	i
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	b662      	cpsie	i
 800cd90:	623b      	str	r3, [r7, #32]
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd96:	f001 fbcb 	bl	800e530 <xTaskGetSchedulerState>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d102      	bne.n	800cda6 <xQueueGenericSend+0xaa>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <xQueueGenericSend+0xae>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e000      	b.n	800cdac <xQueueGenericSend+0xb0>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10c      	bne.n	800cdca <xQueueGenericSend+0xce>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	b672      	cpsid	i
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	b662      	cpsie	i
 800cdc4:	61fb      	str	r3, [r7, #28]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdca:	f001 feff 	bl	800ebcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d302      	bcc.n	800cde0 <xQueueGenericSend+0xe4>
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d129      	bne.n	800ce34 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	68b9      	ldr	r1, [r7, #8]
 800cde4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cde6:	f000 fc5d 	bl	800d6a4 <prvCopyDataToQueue>
 800cdea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d010      	beq.n	800ce16 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	3324      	adds	r3, #36	; 0x24
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f001 f9d3 	bl	800e1a4 <xTaskRemoveFromEventList>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d013      	beq.n	800ce2c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce04:	4b3f      	ldr	r3, [pc, #252]	; (800cf04 <xQueueGenericSend+0x208>)
 800ce06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	f3bf 8f6f 	isb	sy
 800ce14:	e00a      	b.n	800ce2c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d007      	beq.n	800ce2c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce1c:	4b39      	ldr	r3, [pc, #228]	; (800cf04 <xQueueGenericSend+0x208>)
 800ce1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce2c:	f001 ff02 	bl	800ec34 <vPortExitCritical>
				return pdPASS;
 800ce30:	2301      	movs	r3, #1
 800ce32:	e063      	b.n	800cefc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d103      	bne.n	800ce42 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce3a:	f001 fefb 	bl	800ec34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e05c      	b.n	800cefc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d106      	bne.n	800ce56 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce48:	f107 0314 	add.w	r3, r7, #20
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f001 fa0d 	bl	800e26c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce52:	2301      	movs	r3, #1
 800ce54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce56:	f001 feed 	bl	800ec34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce5a:	f000 ff73 	bl	800dd44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce5e:	f001 feb5 	bl	800ebcc <vPortEnterCritical>
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce68:	b25b      	sxtb	r3, r3
 800ce6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce6e:	d103      	bne.n	800ce78 <xQueueGenericSend+0x17c>
 800ce70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce72:	2200      	movs	r2, #0
 800ce74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce7e:	b25b      	sxtb	r3, r3
 800ce80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce84:	d103      	bne.n	800ce8e <xQueueGenericSend+0x192>
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce8e:	f001 fed1 	bl	800ec34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce92:	1d3a      	adds	r2, r7, #4
 800ce94:	f107 0314 	add.w	r3, r7, #20
 800ce98:	4611      	mov	r1, r2
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f001 f9fc 	bl	800e298 <xTaskCheckForTimeOut>
 800cea0:	4603      	mov	r3, r0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d124      	bne.n	800cef0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cea8:	f000 fcf4 	bl	800d894 <prvIsQueueFull>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d018      	beq.n	800cee4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	3310      	adds	r3, #16
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f001 f94c 	bl	800e158 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cec2:	f000 fc7f 	bl	800d7c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cec6:	f000 ff4b 	bl	800dd60 <xTaskResumeAll>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f47f af7c 	bne.w	800cdca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ced2:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <xQueueGenericSend+0x208>)
 800ced4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	e772      	b.n	800cdca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cee6:	f000 fc6d 	bl	800d7c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ceea:	f000 ff39 	bl	800dd60 <xTaskResumeAll>
 800ceee:	e76c      	b.n	800cdca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cef2:	f000 fc67 	bl	800d7c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cef6:	f000 ff33 	bl	800dd60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cefa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3738      	adds	r7, #56	; 0x38
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	e000ed04 	.word	0xe000ed04

0800cf08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08e      	sub	sp, #56	; 0x38
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
 800cf14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10c      	bne.n	800cf3a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	b672      	cpsid	i
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	b662      	cpsie	i
 800cf34:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf36:	bf00      	nop
 800cf38:	e7fe      	b.n	800cf38 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d103      	bne.n	800cf48 <xQueueGenericSendFromISR+0x40>
 800cf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d101      	bne.n	800cf4c <xQueueGenericSendFromISR+0x44>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e000      	b.n	800cf4e <xQueueGenericSendFromISR+0x46>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10c      	bne.n	800cf6c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf56:	b672      	cpsid	i
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	b662      	cpsie	i
 800cf66:	623b      	str	r3, [r7, #32]
}
 800cf68:	bf00      	nop
 800cf6a:	e7fe      	b.n	800cf6a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d103      	bne.n	800cf7a <xQueueGenericSendFromISR+0x72>
 800cf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d101      	bne.n	800cf7e <xQueueGenericSendFromISR+0x76>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e000      	b.n	800cf80 <xQueueGenericSendFromISR+0x78>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10c      	bne.n	800cf9e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800cf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf88:	b672      	cpsid	i
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	b662      	cpsie	i
 800cf98:	61fb      	str	r3, [r7, #28]
}
 800cf9a:	bf00      	nop
 800cf9c:	e7fe      	b.n	800cf9c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf9e:	f001 fefd 	bl	800ed9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cfa2:	f3ef 8211 	mrs	r2, BASEPRI
 800cfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfaa:	b672      	cpsid	i
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	b662      	cpsie	i
 800cfba:	61ba      	str	r2, [r7, #24]
 800cfbc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfbe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d302      	bcc.n	800cfd4 <xQueueGenericSendFromISR+0xcc>
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d12c      	bne.n	800d02e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfde:	683a      	ldr	r2, [r7, #0]
 800cfe0:	68b9      	ldr	r1, [r7, #8]
 800cfe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfe4:	f000 fb5e 	bl	800d6a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfe8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff0:	d112      	bne.n	800d018 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d016      	beq.n	800d028 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffc:	3324      	adds	r3, #36	; 0x24
 800cffe:	4618      	mov	r0, r3
 800d000:	f001 f8d0 	bl	800e1a4 <xTaskRemoveFromEventList>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00e      	beq.n	800d028 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00b      	beq.n	800d028 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	601a      	str	r2, [r3, #0]
 800d016:	e007      	b.n	800d028 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d018:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d01c:	3301      	adds	r3, #1
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	b25a      	sxtb	r2, r3
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d028:	2301      	movs	r3, #1
 800d02a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d02c:	e001      	b.n	800d032 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	637b      	str	r3, [r7, #52]	; 0x34
 800d032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d034:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d03c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d040:	4618      	mov	r0, r3
 800d042:	3738      	adds	r7, #56	; 0x38
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08e      	sub	sp, #56	; 0x38
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10c      	bne.n	800d076 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d060:	b672      	cpsid	i
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	b662      	cpsie	i
 800d070:	623b      	str	r3, [r7, #32]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00c      	beq.n	800d098 <xQueueGiveFromISR+0x50>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d082:	b672      	cpsid	i
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	b662      	cpsie	i
 800d092:	61fb      	str	r3, [r7, #28]
}
 800d094:	bf00      	nop
 800d096:	e7fe      	b.n	800d096 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d103      	bne.n	800d0a8 <xQueueGiveFromISR+0x60>
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <xQueueGiveFromISR+0x64>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e000      	b.n	800d0ae <xQueueGiveFromISR+0x66>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10c      	bne.n	800d0cc <xQueueGiveFromISR+0x84>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	b672      	cpsid	i
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	b662      	cpsie	i
 800d0c6:	61bb      	str	r3, [r7, #24]
}
 800d0c8:	bf00      	nop
 800d0ca:	e7fe      	b.n	800d0ca <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0cc:	f001 fe66 	bl	800ed9c <vPortValidateInterruptPriority>
	__asm volatile
 800d0d0:	f3ef 8211 	mrs	r2, BASEPRI
 800d0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d8:	b672      	cpsid	i
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	b662      	cpsie	i
 800d0e8:	617a      	str	r2, [r7, #20]
 800d0ea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d0ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d22b      	bcs.n	800d158 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	1c5a      	adds	r2, r3, #1
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d112:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d11a:	d112      	bne.n	800d142 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	2b00      	cmp	r3, #0
 800d122:	d016      	beq.n	800d152 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d126:	3324      	adds	r3, #36	; 0x24
 800d128:	4618      	mov	r0, r3
 800d12a:	f001 f83b 	bl	800e1a4 <xTaskRemoveFromEventList>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00e      	beq.n	800d152 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00b      	beq.n	800d152 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	2201      	movs	r2, #1
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	e007      	b.n	800d152 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d146:	3301      	adds	r3, #1
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	b25a      	sxtb	r2, r3
 800d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d152:	2301      	movs	r3, #1
 800d154:	637b      	str	r3, [r7, #52]	; 0x34
 800d156:	e001      	b.n	800d15c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d158:	2300      	movs	r3, #0
 800d15a:	637b      	str	r3, [r7, #52]	; 0x34
 800d15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f383 8811 	msr	BASEPRI, r3
}
 800d166:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3738      	adds	r7, #56	; 0x38
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
	...

0800d174 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08c      	sub	sp, #48	; 0x30
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d180:	2300      	movs	r3, #0
 800d182:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10c      	bne.n	800d1a8 <xQueueReceive+0x34>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	b672      	cpsid	i
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	b662      	cpsie	i
 800d1a2:	623b      	str	r3, [r7, #32]
}
 800d1a4:	bf00      	nop
 800d1a6:	e7fe      	b.n	800d1a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d103      	bne.n	800d1b6 <xQueueReceive+0x42>
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d101      	bne.n	800d1ba <xQueueReceive+0x46>
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e000      	b.n	800d1bc <xQueueReceive+0x48>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10c      	bne.n	800d1da <xQueueReceive+0x66>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	b672      	cpsid	i
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	b662      	cpsie	i
 800d1d4:	61fb      	str	r3, [r7, #28]
}
 800d1d6:	bf00      	nop
 800d1d8:	e7fe      	b.n	800d1d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1da:	f001 f9a9 	bl	800e530 <xTaskGetSchedulerState>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d102      	bne.n	800d1ea <xQueueReceive+0x76>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <xQueueReceive+0x7a>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e000      	b.n	800d1f0 <xQueueReceive+0x7c>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10c      	bne.n	800d20e <xQueueReceive+0x9a>
	__asm volatile
 800d1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f8:	b672      	cpsid	i
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	b662      	cpsie	i
 800d208:	61bb      	str	r3, [r7, #24]
}
 800d20a:	bf00      	nop
 800d20c:	e7fe      	b.n	800d20c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d20e:	f001 fcdd 	bl	800ebcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d216:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d01f      	beq.n	800d25e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d21e:	68b9      	ldr	r1, [r7, #8]
 800d220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d222:	f000 faa9 	bl	800d778 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d228:	1e5a      	subs	r2, r3, #1
 800d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00f      	beq.n	800d256 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d238:	3310      	adds	r3, #16
 800d23a:	4618      	mov	r0, r3
 800d23c:	f000 ffb2 	bl	800e1a4 <xTaskRemoveFromEventList>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d007      	beq.n	800d256 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d246:	4b3d      	ldr	r3, [pc, #244]	; (800d33c <xQueueReceive+0x1c8>)
 800d248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d256:	f001 fced 	bl	800ec34 <vPortExitCritical>
				return pdPASS;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e069      	b.n	800d332 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d103      	bne.n	800d26c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d264:	f001 fce6 	bl	800ec34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d268:	2300      	movs	r3, #0
 800d26a:	e062      	b.n	800d332 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d106      	bne.n	800d280 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d272:	f107 0310 	add.w	r3, r7, #16
 800d276:	4618      	mov	r0, r3
 800d278:	f000 fff8 	bl	800e26c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d27c:	2301      	movs	r3, #1
 800d27e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d280:	f001 fcd8 	bl	800ec34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d284:	f000 fd5e 	bl	800dd44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d288:	f001 fca0 	bl	800ebcc <vPortEnterCritical>
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d292:	b25b      	sxtb	r3, r3
 800d294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d298:	d103      	bne.n	800d2a2 <xQueueReceive+0x12e>
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2a8:	b25b      	sxtb	r3, r3
 800d2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ae:	d103      	bne.n	800d2b8 <xQueueReceive+0x144>
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2b8:	f001 fcbc 	bl	800ec34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2bc:	1d3a      	adds	r2, r7, #4
 800d2be:	f107 0310 	add.w	r3, r7, #16
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 ffe7 	bl	800e298 <xTaskCheckForTimeOut>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d123      	bne.n	800d318 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2d2:	f000 fac9 	bl	800d868 <prvIsQueueEmpty>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d017      	beq.n	800d30c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	3324      	adds	r3, #36	; 0x24
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 ff37 	bl	800e158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ec:	f000 fa6a 	bl	800d7c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2f0:	f000 fd36 	bl	800dd60 <xTaskResumeAll>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d189      	bne.n	800d20e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d2fa:	4b10      	ldr	r3, [pc, #64]	; (800d33c <xQueueReceive+0x1c8>)
 800d2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d300:	601a      	str	r2, [r3, #0]
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	e780      	b.n	800d20e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d30e:	f000 fa59 	bl	800d7c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d312:	f000 fd25 	bl	800dd60 <xTaskResumeAll>
 800d316:	e77a      	b.n	800d20e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d31a:	f000 fa53 	bl	800d7c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d31e:	f000 fd1f 	bl	800dd60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d324:	f000 faa0 	bl	800d868 <prvIsQueueEmpty>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f43f af6f 	beq.w	800d20e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d332:	4618      	mov	r0, r3
 800d334:	3730      	adds	r7, #48	; 0x30
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	e000ed04 	.word	0xe000ed04

0800d340 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08e      	sub	sp, #56	; 0x38
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d34a:	2300      	movs	r3, #0
 800d34c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d352:	2300      	movs	r3, #0
 800d354:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d10c      	bne.n	800d376 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d360:	b672      	cpsid	i
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	b662      	cpsie	i
 800d370:	623b      	str	r3, [r7, #32]
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00c      	beq.n	800d398 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	b672      	cpsid	i
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	b662      	cpsie	i
 800d392:	61fb      	str	r3, [r7, #28]
}
 800d394:	bf00      	nop
 800d396:	e7fe      	b.n	800d396 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d398:	f001 f8ca 	bl	800e530 <xTaskGetSchedulerState>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d102      	bne.n	800d3a8 <xQueueSemaphoreTake+0x68>
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d101      	bne.n	800d3ac <xQueueSemaphoreTake+0x6c>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e000      	b.n	800d3ae <xQueueSemaphoreTake+0x6e>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10c      	bne.n	800d3cc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	b672      	cpsid	i
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	b662      	cpsie	i
 800d3c6:	61bb      	str	r3, [r7, #24]
}
 800d3c8:	bf00      	nop
 800d3ca:	e7fe      	b.n	800d3ca <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3cc:	f001 fbfe 	bl	800ebcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d024      	beq.n	800d426 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	1e5a      	subs	r2, r3, #1
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d104      	bne.n	800d3f6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d3ec:	f001 fa66 	bl	800e8bc <pvTaskIncrementMutexHeldCount>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d00f      	beq.n	800d41e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d400:	3310      	adds	r3, #16
 800d402:	4618      	mov	r0, r3
 800d404:	f000 fece 	bl	800e1a4 <xTaskRemoveFromEventList>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d007      	beq.n	800d41e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d40e:	4b55      	ldr	r3, [pc, #340]	; (800d564 <xQueueSemaphoreTake+0x224>)
 800d410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d41e:	f001 fc09 	bl	800ec34 <vPortExitCritical>
				return pdPASS;
 800d422:	2301      	movs	r3, #1
 800d424:	e099      	b.n	800d55a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d113      	bne.n	800d454 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00c      	beq.n	800d44c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	b672      	cpsid	i
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	b662      	cpsie	i
 800d446:	617b      	str	r3, [r7, #20]
}
 800d448:	bf00      	nop
 800d44a:	e7fe      	b.n	800d44a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d44c:	f001 fbf2 	bl	800ec34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d450:	2300      	movs	r3, #0
 800d452:	e082      	b.n	800d55a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d456:	2b00      	cmp	r3, #0
 800d458:	d106      	bne.n	800d468 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d45a:	f107 030c 	add.w	r3, r7, #12
 800d45e:	4618      	mov	r0, r3
 800d460:	f000 ff04 	bl	800e26c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d464:	2301      	movs	r3, #1
 800d466:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d468:	f001 fbe4 	bl	800ec34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d46c:	f000 fc6a 	bl	800dd44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d470:	f001 fbac 	bl	800ebcc <vPortEnterCritical>
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d47a:	b25b      	sxtb	r3, r3
 800d47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d480:	d103      	bne.n	800d48a <xQueueSemaphoreTake+0x14a>
 800d482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d484:	2200      	movs	r2, #0
 800d486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d490:	b25b      	sxtb	r3, r3
 800d492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d496:	d103      	bne.n	800d4a0 <xQueueSemaphoreTake+0x160>
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	2200      	movs	r2, #0
 800d49c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4a0:	f001 fbc8 	bl	800ec34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4a4:	463a      	mov	r2, r7
 800d4a6:	f107 030c 	add.w	r3, r7, #12
 800d4aa:	4611      	mov	r1, r2
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 fef3 	bl	800e298 <xTaskCheckForTimeOut>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d132      	bne.n	800d51e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4ba:	f000 f9d5 	bl	800d868 <prvIsQueueEmpty>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d026      	beq.n	800d512 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d109      	bne.n	800d4e0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d4cc:	f001 fb7e 	bl	800ebcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f001 f849 	bl	800e56c <xTaskPriorityInherit>
 800d4da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d4dc:	f001 fbaa 	bl	800ec34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	3324      	adds	r3, #36	; 0x24
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 fe35 	bl	800e158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4f0:	f000 f968 	bl	800d7c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4f4:	f000 fc34 	bl	800dd60 <xTaskResumeAll>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f47f af66 	bne.w	800d3cc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d500:	4b18      	ldr	r3, [pc, #96]	; (800d564 <xQueueSemaphoreTake+0x224>)
 800d502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d506:	601a      	str	r2, [r3, #0]
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	e75c      	b.n	800d3cc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d514:	f000 f956 	bl	800d7c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d518:	f000 fc22 	bl	800dd60 <xTaskResumeAll>
 800d51c:	e756      	b.n	800d3cc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d51e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d520:	f000 f950 	bl	800d7c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d524:	f000 fc1c 	bl	800dd60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d52a:	f000 f99d 	bl	800d868 <prvIsQueueEmpty>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	f43f af4b 	beq.w	800d3cc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00d      	beq.n	800d558 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d53c:	f001 fb46 	bl	800ebcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d542:	f000 f897 	bl	800d674 <prvGetDisinheritPriorityAfterTimeout>
 800d546:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d54e:	4618      	mov	r0, r3
 800d550:	f001 f916 	bl	800e780 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d554:	f001 fb6e 	bl	800ec34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d558:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3738      	adds	r7, #56	; 0x38
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	e000ed04 	.word	0xe000ed04

0800d568 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08e      	sub	sp, #56	; 0x38
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10c      	bne.n	800d598 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d582:	b672      	cpsid	i
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	b662      	cpsie	i
 800d592:	623b      	str	r3, [r7, #32]
}
 800d594:	bf00      	nop
 800d596:	e7fe      	b.n	800d596 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d103      	bne.n	800d5a6 <xQueueReceiveFromISR+0x3e>
 800d59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d101      	bne.n	800d5aa <xQueueReceiveFromISR+0x42>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e000      	b.n	800d5ac <xQueueReceiveFromISR+0x44>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10c      	bne.n	800d5ca <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b4:	b672      	cpsid	i
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	b662      	cpsie	i
 800d5c4:	61fb      	str	r3, [r7, #28]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5ca:	f001 fbe7 	bl	800ed9c <vPortValidateInterruptPriority>
	__asm volatile
 800d5ce:	f3ef 8211 	mrs	r2, BASEPRI
 800d5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d6:	b672      	cpsid	i
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	b662      	cpsie	i
 800d5e6:	61ba      	str	r2, [r7, #24]
 800d5e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d5ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d02f      	beq.n	800d65a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d604:	68b9      	ldr	r1, [r7, #8]
 800d606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d608:	f000 f8b6 	bl	800d778 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60e:	1e5a      	subs	r2, r3, #1
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d614:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61c:	d112      	bne.n	800d644 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d016      	beq.n	800d654 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d628:	3310      	adds	r3, #16
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 fdba 	bl	800e1a4 <xTaskRemoveFromEventList>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00e      	beq.n	800d654 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00b      	beq.n	800d654 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2201      	movs	r2, #1
 800d640:	601a      	str	r2, [r3, #0]
 800d642:	e007      	b.n	800d654 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d648:	3301      	adds	r3, #1
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	b25a      	sxtb	r2, r3
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d654:	2301      	movs	r3, #1
 800d656:	637b      	str	r3, [r7, #52]	; 0x34
 800d658:	e001      	b.n	800d65e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	637b      	str	r3, [r7, #52]	; 0x34
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	f383 8811 	msr	BASEPRI, r3
}
 800d668:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3738      	adds	r7, #56	; 0x38
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d680:	2b00      	cmp	r3, #0
 800d682:	d006      	beq.n	800d692 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f1c3 0307 	rsb	r3, r3, #7
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	e001      	b.n	800d696 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d692:	2300      	movs	r3, #0
 800d694:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d696:	68fb      	ldr	r3, [r7, #12]
	}
 800d698:	4618      	mov	r0, r3
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d10d      	bne.n	800d6de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d14d      	bne.n	800d766 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 ffcc 	bl	800e66c <xTaskPriorityDisinherit>
 800d6d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	609a      	str	r2, [r3, #8]
 800d6dc:	e043      	b.n	800d766 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d119      	bne.n	800d718 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6858      	ldr	r0, [r3, #4]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	68b9      	ldr	r1, [r7, #8]
 800d6f0:	f018 f946 	bl	8025980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	685a      	ldr	r2, [r3, #4]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6fc:	441a      	add	r2, r3
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	685a      	ldr	r2, [r3, #4]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d32b      	bcc.n	800d766 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	605a      	str	r2, [r3, #4]
 800d716:	e026      	b.n	800d766 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	68d8      	ldr	r0, [r3, #12]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d720:	461a      	mov	r2, r3
 800d722:	68b9      	ldr	r1, [r7, #8]
 800d724:	f018 f92c 	bl	8025980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	68da      	ldr	r2, [r3, #12]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d730:	425b      	negs	r3, r3
 800d732:	441a      	add	r2, r3
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	68da      	ldr	r2, [r3, #12]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	429a      	cmp	r2, r3
 800d742:	d207      	bcs.n	800d754 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	689a      	ldr	r2, [r3, #8]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74c:	425b      	negs	r3, r3
 800d74e:	441a      	add	r2, r3
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b02      	cmp	r3, #2
 800d758:	d105      	bne.n	800d766 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	3b01      	subs	r3, #1
 800d764:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d76e:	697b      	ldr	r3, [r7, #20]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3718      	adds	r7, #24
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d786:	2b00      	cmp	r3, #0
 800d788:	d018      	beq.n	800d7bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68da      	ldr	r2, [r3, #12]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d792:	441a      	add	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68da      	ldr	r2, [r3, #12]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d303      	bcc.n	800d7ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	68d9      	ldr	r1, [r3, #12]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	6838      	ldr	r0, [r7, #0]
 800d7b8:	f018 f8e2 	bl	8025980 <memcpy>
	}
}
 800d7bc:	bf00      	nop
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d7cc:	f001 f9fe 	bl	800ebcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7d8:	e011      	b.n	800d7fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d012      	beq.n	800d808 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	3324      	adds	r3, #36	; 0x24
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f000 fcdc 	bl	800e1a4 <xTaskRemoveFromEventList>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d001      	beq.n	800d7f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d7f2:	f000 fdb7 	bl	800e364 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d802:	2b00      	cmp	r3, #0
 800d804:	dce9      	bgt.n	800d7da <prvUnlockQueue+0x16>
 800d806:	e000      	b.n	800d80a <prvUnlockQueue+0x46>
					break;
 800d808:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	22ff      	movs	r2, #255	; 0xff
 800d80e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d812:	f001 fa0f 	bl	800ec34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d816:	f001 f9d9 	bl	800ebcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d820:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d822:	e011      	b.n	800d848 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d012      	beq.n	800d852 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	3310      	adds	r3, #16
 800d830:	4618      	mov	r0, r3
 800d832:	f000 fcb7 	bl	800e1a4 <xTaskRemoveFromEventList>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d83c:	f000 fd92 	bl	800e364 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d840:	7bbb      	ldrb	r3, [r7, #14]
 800d842:	3b01      	subs	r3, #1
 800d844:	b2db      	uxtb	r3, r3
 800d846:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	dce9      	bgt.n	800d824 <prvUnlockQueue+0x60>
 800d850:	e000      	b.n	800d854 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d852:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	22ff      	movs	r2, #255	; 0xff
 800d858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d85c:	f001 f9ea 	bl	800ec34 <vPortExitCritical>
}
 800d860:	bf00      	nop
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d870:	f001 f9ac 	bl	800ebcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d102      	bne.n	800d882 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d87c:	2301      	movs	r3, #1
 800d87e:	60fb      	str	r3, [r7, #12]
 800d880:	e001      	b.n	800d886 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d882:	2300      	movs	r3, #0
 800d884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d886:	f001 f9d5 	bl	800ec34 <vPortExitCritical>

	return xReturn;
 800d88a:	68fb      	ldr	r3, [r7, #12]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d89c:	f001 f996 	bl	800ebcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d102      	bne.n	800d8b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	e001      	b.n	800d8b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8b6:	f001 f9bd 	bl	800ec34 <vPortExitCritical>

	return xReturn;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b08e      	sub	sp, #56	; 0x38
 800d8c8:	af04      	add	r7, sp, #16
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
 800d8d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10c      	bne.n	800d8f2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800d8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8dc:	b672      	cpsid	i
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	b662      	cpsie	i
 800d8ec:	623b      	str	r3, [r7, #32]
}
 800d8ee:	bf00      	nop
 800d8f0:	e7fe      	b.n	800d8f0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10c      	bne.n	800d912 <xTaskCreateStatic+0x4e>
	__asm volatile
 800d8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fc:	b672      	cpsid	i
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	b662      	cpsie	i
 800d90c:	61fb      	str	r3, [r7, #28]
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d912:	2358      	movs	r3, #88	; 0x58
 800d914:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	2b58      	cmp	r3, #88	; 0x58
 800d91a:	d00c      	beq.n	800d936 <xTaskCreateStatic+0x72>
	__asm volatile
 800d91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d920:	b672      	cpsid	i
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	b662      	cpsie	i
 800d930:	61bb      	str	r3, [r7, #24]
}
 800d932:	bf00      	nop
 800d934:	e7fe      	b.n	800d934 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d936:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d01e      	beq.n	800d97c <xTaskCreateStatic+0xb8>
 800d93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d940:	2b00      	cmp	r3, #0
 800d942:	d01b      	beq.n	800d97c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d946:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d94c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d950:	2202      	movs	r2, #2
 800d952:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d956:	2300      	movs	r3, #0
 800d958:	9303      	str	r3, [sp, #12]
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95c:	9302      	str	r3, [sp, #8]
 800d95e:	f107 0314 	add.w	r3, r7, #20
 800d962:	9301      	str	r3, [sp, #4]
 800d964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	68b9      	ldr	r1, [r7, #8]
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f000 f850 	bl	800da14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d976:	f000 f8e1 	bl	800db3c <prvAddNewTaskToReadyList>
 800d97a:	e001      	b.n	800d980 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d97c:	2300      	movs	r3, #0
 800d97e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d980:	697b      	ldr	r3, [r7, #20]
	}
 800d982:	4618      	mov	r0, r3
 800d984:	3728      	adds	r7, #40	; 0x28
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b08c      	sub	sp, #48	; 0x30
 800d98e:	af04      	add	r7, sp, #16
 800d990:	60f8      	str	r0, [r7, #12]
 800d992:	60b9      	str	r1, [r7, #8]
 800d994:	603b      	str	r3, [r7, #0]
 800d996:	4613      	mov	r3, r2
 800d998:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d99a:	88fb      	ldrh	r3, [r7, #6]
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f001 fa40 	bl	800ee24 <pvPortMalloc>
 800d9a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00e      	beq.n	800d9ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d9ac:	2058      	movs	r0, #88	; 0x58
 800d9ae:	f001 fa39 	bl	800ee24 <pvPortMalloc>
 800d9b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	631a      	str	r2, [r3, #48]	; 0x30
 800d9c0:	e005      	b.n	800d9ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d9c2:	6978      	ldr	r0, [r7, #20]
 800d9c4:	f001 fafe 	bl	800efc4 <vPortFree>
 800d9c8:	e001      	b.n	800d9ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d017      	beq.n	800da04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d9dc:	88fa      	ldrh	r2, [r7, #6]
 800d9de:	2300      	movs	r3, #0
 800d9e0:	9303      	str	r3, [sp, #12]
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	9302      	str	r3, [sp, #8]
 800d9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e8:	9301      	str	r3, [sp, #4]
 800d9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	68b9      	ldr	r1, [r7, #8]
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 f80e 	bl	800da14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9f8:	69f8      	ldr	r0, [r7, #28]
 800d9fa:	f000 f89f 	bl	800db3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d9fe:	2301      	movs	r3, #1
 800da00:	61bb      	str	r3, [r7, #24]
 800da02:	e002      	b.n	800da0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da04:	f04f 33ff 	mov.w	r3, #4294967295
 800da08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da0a:	69bb      	ldr	r3, [r7, #24]
	}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3720      	adds	r7, #32
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
 800da20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	461a      	mov	r2, r3
 800da2c:	21a5      	movs	r1, #165	; 0xa5
 800da2e:	f017 fed8 	bl	80257e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da36:	6879      	ldr	r1, [r7, #4]
 800da38:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800da3c:	440b      	add	r3, r1
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	4413      	add	r3, r2
 800da42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	f023 0307 	bic.w	r3, r3, #7
 800da4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	f003 0307 	and.w	r3, r3, #7
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00c      	beq.n	800da70 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800da56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5a:	b672      	cpsid	i
 800da5c:	f383 8811 	msr	BASEPRI, r3
 800da60:	f3bf 8f6f 	isb	sy
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	b662      	cpsie	i
 800da6a:	617b      	str	r3, [r7, #20]
}
 800da6c:	bf00      	nop
 800da6e:	e7fe      	b.n	800da6e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d01f      	beq.n	800dab6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da76:	2300      	movs	r3, #0
 800da78:	61fb      	str	r3, [r7, #28]
 800da7a:	e012      	b.n	800daa2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	4413      	add	r3, r2
 800da82:	7819      	ldrb	r1, [r3, #0]
 800da84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	4413      	add	r3, r2
 800da8a:	3334      	adds	r3, #52	; 0x34
 800da8c:	460a      	mov	r2, r1
 800da8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	4413      	add	r3, r2
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d006      	beq.n	800daaa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	3301      	adds	r3, #1
 800daa0:	61fb      	str	r3, [r7, #28]
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	2b0f      	cmp	r3, #15
 800daa6:	d9e9      	bls.n	800da7c <prvInitialiseNewTask+0x68>
 800daa8:	e000      	b.n	800daac <prvInitialiseNewTask+0x98>
			{
				break;
 800daaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dab4:	e003      	b.n	800dabe <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab8:	2200      	movs	r2, #0
 800daba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac0:	2b06      	cmp	r3, #6
 800dac2:	d901      	bls.n	800dac8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dac4:	2306      	movs	r3, #6
 800dac6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dacc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dad2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	2200      	movs	r2, #0
 800dad8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	3304      	adds	r3, #4
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe ff2a 	bl	800c938 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae6:	3318      	adds	r3, #24
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe ff25 	bl	800c938 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800daee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf6:	f1c3 0207 	rsb	r2, r3, #7
 800dafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800db04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db06:	2200      	movs	r2, #0
 800db08:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0c:	2200      	movs	r2, #0
 800db0e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db12:	2200      	movs	r2, #0
 800db14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	68f9      	ldr	r1, [r7, #12]
 800db1c:	69b8      	ldr	r0, [r7, #24]
 800db1e:	f000 ff47 	bl	800e9b0 <pxPortInitialiseStack>
 800db22:	4602      	mov	r2, r0
 800db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db34:	bf00      	nop
 800db36:	3720      	adds	r7, #32
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db44:	f001 f842 	bl	800ebcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db48:	4b2a      	ldr	r3, [pc, #168]	; (800dbf4 <prvAddNewTaskToReadyList+0xb8>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	3301      	adds	r3, #1
 800db4e:	4a29      	ldr	r2, [pc, #164]	; (800dbf4 <prvAddNewTaskToReadyList+0xb8>)
 800db50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db52:	4b29      	ldr	r3, [pc, #164]	; (800dbf8 <prvAddNewTaskToReadyList+0xbc>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d109      	bne.n	800db6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db5a:	4a27      	ldr	r2, [pc, #156]	; (800dbf8 <prvAddNewTaskToReadyList+0xbc>)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db60:	4b24      	ldr	r3, [pc, #144]	; (800dbf4 <prvAddNewTaskToReadyList+0xb8>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2b01      	cmp	r3, #1
 800db66:	d110      	bne.n	800db8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db68:	f000 fc22 	bl	800e3b0 <prvInitialiseTaskLists>
 800db6c:	e00d      	b.n	800db8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db6e:	4b23      	ldr	r3, [pc, #140]	; (800dbfc <prvAddNewTaskToReadyList+0xc0>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d109      	bne.n	800db8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db76:	4b20      	ldr	r3, [pc, #128]	; (800dbf8 <prvAddNewTaskToReadyList+0xbc>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db80:	429a      	cmp	r2, r3
 800db82:	d802      	bhi.n	800db8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db84:	4a1c      	ldr	r2, [pc, #112]	; (800dbf8 <prvAddNewTaskToReadyList+0xbc>)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db8a:	4b1d      	ldr	r3, [pc, #116]	; (800dc00 <prvAddNewTaskToReadyList+0xc4>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	3301      	adds	r3, #1
 800db90:	4a1b      	ldr	r2, [pc, #108]	; (800dc00 <prvAddNewTaskToReadyList+0xc4>)
 800db92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	2201      	movs	r2, #1
 800db9a:	409a      	lsls	r2, r3
 800db9c:	4b19      	ldr	r3, [pc, #100]	; (800dc04 <prvAddNewTaskToReadyList+0xc8>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	4a18      	ldr	r2, [pc, #96]	; (800dc04 <prvAddNewTaskToReadyList+0xc8>)
 800dba4:	6013      	str	r3, [r2, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbaa:	4613      	mov	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4413      	add	r3, r2
 800dbb0:	009b      	lsls	r3, r3, #2
 800dbb2:	4a15      	ldr	r2, [pc, #84]	; (800dc08 <prvAddNewTaskToReadyList+0xcc>)
 800dbb4:	441a      	add	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	4619      	mov	r1, r3
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	f7fe fec8 	bl	800c952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dbc2:	f001 f837 	bl	800ec34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dbc6:	4b0d      	ldr	r3, [pc, #52]	; (800dbfc <prvAddNewTaskToReadyList+0xc0>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00e      	beq.n	800dbec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dbce:	4b0a      	ldr	r3, [pc, #40]	; (800dbf8 <prvAddNewTaskToReadyList+0xbc>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d207      	bcs.n	800dbec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dbdc:	4b0b      	ldr	r3, [pc, #44]	; (800dc0c <prvAddNewTaskToReadyList+0xd0>)
 800dbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbe2:	601a      	str	r2, [r3, #0]
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbec:	bf00      	nop
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	20000c8c 	.word	0x20000c8c
 800dbf8:	20000b8c 	.word	0x20000b8c
 800dbfc:	20000c98 	.word	0x20000c98
 800dc00:	20000ca8 	.word	0x20000ca8
 800dc04:	20000c94 	.word	0x20000c94
 800dc08:	20000b90 	.word	0x20000b90
 800dc0c:	e000ed04 	.word	0xe000ed04

0800dc10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d019      	beq.n	800dc56 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc22:	4b14      	ldr	r3, [pc, #80]	; (800dc74 <vTaskDelay+0x64>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00c      	beq.n	800dc44 <vTaskDelay+0x34>
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	b672      	cpsid	i
 800dc30:	f383 8811 	msr	BASEPRI, r3
 800dc34:	f3bf 8f6f 	isb	sy
 800dc38:	f3bf 8f4f 	dsb	sy
 800dc3c:	b662      	cpsie	i
 800dc3e:	60bb      	str	r3, [r7, #8]
}
 800dc40:	bf00      	nop
 800dc42:	e7fe      	b.n	800dc42 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800dc44:	f000 f87e 	bl	800dd44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc48:	2100      	movs	r1, #0
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fe4a 	bl	800e8e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc50:	f000 f886 	bl	800dd60 <xTaskResumeAll>
 800dc54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d107      	bne.n	800dc6c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800dc5c:	4b06      	ldr	r3, [pc, #24]	; (800dc78 <vTaskDelay+0x68>)
 800dc5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc6c:	bf00      	nop
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	20000cb4 	.word	0x20000cb4
 800dc78:	e000ed04 	.word	0xe000ed04

0800dc7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b08a      	sub	sp, #40	; 0x28
 800dc80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc82:	2300      	movs	r3, #0
 800dc84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc86:	2300      	movs	r3, #0
 800dc88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc8a:	463a      	mov	r2, r7
 800dc8c:	1d39      	adds	r1, r7, #4
 800dc8e:	f107 0308 	add.w	r3, r7, #8
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7f3 f88a 	bl	8000dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	9202      	str	r2, [sp, #8]
 800dca0:	9301      	str	r3, [sp, #4]
 800dca2:	2300      	movs	r3, #0
 800dca4:	9300      	str	r3, [sp, #0]
 800dca6:	2300      	movs	r3, #0
 800dca8:	460a      	mov	r2, r1
 800dcaa:	4920      	ldr	r1, [pc, #128]	; (800dd2c <vTaskStartScheduler+0xb0>)
 800dcac:	4820      	ldr	r0, [pc, #128]	; (800dd30 <vTaskStartScheduler+0xb4>)
 800dcae:	f7ff fe09 	bl	800d8c4 <xTaskCreateStatic>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	4a1f      	ldr	r2, [pc, #124]	; (800dd34 <vTaskStartScheduler+0xb8>)
 800dcb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dcb8:	4b1e      	ldr	r3, [pc, #120]	; (800dd34 <vTaskStartScheduler+0xb8>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	617b      	str	r3, [r7, #20]
 800dcc4:	e001      	b.n	800dcca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d118      	bne.n	800dd02 <vTaskStartScheduler+0x86>
	__asm volatile
 800dcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd4:	b672      	cpsid	i
 800dcd6:	f383 8811 	msr	BASEPRI, r3
 800dcda:	f3bf 8f6f 	isb	sy
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	b662      	cpsie	i
 800dce4:	613b      	str	r3, [r7, #16]
}
 800dce6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dce8:	4b13      	ldr	r3, [pc, #76]	; (800dd38 <vTaskStartScheduler+0xbc>)
 800dcea:	f04f 32ff 	mov.w	r2, #4294967295
 800dcee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dcf0:	4b12      	ldr	r3, [pc, #72]	; (800dd3c <vTaskStartScheduler+0xc0>)
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcf6:	4b12      	ldr	r3, [pc, #72]	; (800dd40 <vTaskStartScheduler+0xc4>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dcfc:	f000 fee8 	bl	800ead0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd00:	e010      	b.n	800dd24 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd08:	d10c      	bne.n	800dd24 <vTaskStartScheduler+0xa8>
	__asm volatile
 800dd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0e:	b672      	cpsid	i
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	b662      	cpsie	i
 800dd1e:	60fb      	str	r3, [r7, #12]
}
 800dd20:	bf00      	nop
 800dd22:	e7fe      	b.n	800dd22 <vTaskStartScheduler+0xa6>
}
 800dd24:	bf00      	nop
 800dd26:	3718      	adds	r7, #24
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	080264c4 	.word	0x080264c4
 800dd30:	0800e37d 	.word	0x0800e37d
 800dd34:	20000cb0 	.word	0x20000cb0
 800dd38:	20000cac 	.word	0x20000cac
 800dd3c:	20000c98 	.word	0x20000c98
 800dd40:	20000c90 	.word	0x20000c90

0800dd44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd44:	b480      	push	{r7}
 800dd46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dd48:	4b04      	ldr	r3, [pc, #16]	; (800dd5c <vTaskSuspendAll+0x18>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	4a03      	ldr	r2, [pc, #12]	; (800dd5c <vTaskSuspendAll+0x18>)
 800dd50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dd52:	bf00      	nop
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr
 800dd5c:	20000cb4 	.word	0x20000cb4

0800dd60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd6e:	4b42      	ldr	r3, [pc, #264]	; (800de78 <xTaskResumeAll+0x118>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10c      	bne.n	800dd90 <xTaskResumeAll+0x30>
	__asm volatile
 800dd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7a:	b672      	cpsid	i
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	b662      	cpsie	i
 800dd8a:	603b      	str	r3, [r7, #0]
}
 800dd8c:	bf00      	nop
 800dd8e:	e7fe      	b.n	800dd8e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd90:	f000 ff1c 	bl	800ebcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd94:	4b38      	ldr	r3, [pc, #224]	; (800de78 <xTaskResumeAll+0x118>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	4a37      	ldr	r2, [pc, #220]	; (800de78 <xTaskResumeAll+0x118>)
 800dd9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd9e:	4b36      	ldr	r3, [pc, #216]	; (800de78 <xTaskResumeAll+0x118>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d161      	bne.n	800de6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dda6:	4b35      	ldr	r3, [pc, #212]	; (800de7c <xTaskResumeAll+0x11c>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d05d      	beq.n	800de6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddae:	e02e      	b.n	800de0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddb0:	4b33      	ldr	r3, [pc, #204]	; (800de80 <xTaskResumeAll+0x120>)
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	3318      	adds	r3, #24
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7fe fe25 	bl	800ca0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fe fe20 	bl	800ca0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	409a      	lsls	r2, r3
 800ddd4:	4b2b      	ldr	r3, [pc, #172]	; (800de84 <xTaskResumeAll+0x124>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	4a2a      	ldr	r2, [pc, #168]	; (800de84 <xTaskResumeAll+0x124>)
 800dddc:	6013      	str	r3, [r2, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde2:	4613      	mov	r3, r2
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	4413      	add	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4a27      	ldr	r2, [pc, #156]	; (800de88 <xTaskResumeAll+0x128>)
 800ddec:	441a      	add	r2, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	f7fe fdac 	bl	800c952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfe:	4b23      	ldr	r3, [pc, #140]	; (800de8c <xTaskResumeAll+0x12c>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de04:	429a      	cmp	r2, r3
 800de06:	d302      	bcc.n	800de0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800de08:	4b21      	ldr	r3, [pc, #132]	; (800de90 <xTaskResumeAll+0x130>)
 800de0a:	2201      	movs	r2, #1
 800de0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de0e:	4b1c      	ldr	r3, [pc, #112]	; (800de80 <xTaskResumeAll+0x120>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1cc      	bne.n	800ddb0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d001      	beq.n	800de20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de1c:	f000 fb68 	bl	800e4f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800de20:	4b1c      	ldr	r3, [pc, #112]	; (800de94 <xTaskResumeAll+0x134>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d010      	beq.n	800de4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de2c:	f000 f858 	bl	800dee0 <xTaskIncrementTick>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800de36:	4b16      	ldr	r3, [pc, #88]	; (800de90 <xTaskResumeAll+0x130>)
 800de38:	2201      	movs	r2, #1
 800de3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3b01      	subs	r3, #1
 800de40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1f1      	bne.n	800de2c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800de48:	4b12      	ldr	r3, [pc, #72]	; (800de94 <xTaskResumeAll+0x134>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de4e:	4b10      	ldr	r3, [pc, #64]	; (800de90 <xTaskResumeAll+0x130>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d009      	beq.n	800de6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de56:	2301      	movs	r3, #1
 800de58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de5a:	4b0f      	ldr	r3, [pc, #60]	; (800de98 <xTaskResumeAll+0x138>)
 800de5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de6a:	f000 fee3 	bl	800ec34 <vPortExitCritical>

	return xAlreadyYielded;
 800de6e:	68bb      	ldr	r3, [r7, #8]
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	20000cb4 	.word	0x20000cb4
 800de7c:	20000c8c 	.word	0x20000c8c
 800de80:	20000c4c 	.word	0x20000c4c
 800de84:	20000c94 	.word	0x20000c94
 800de88:	20000b90 	.word	0x20000b90
 800de8c:	20000b8c 	.word	0x20000b8c
 800de90:	20000ca0 	.word	0x20000ca0
 800de94:	20000c9c 	.word	0x20000c9c
 800de98:	e000ed04 	.word	0xe000ed04

0800de9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dea2:	4b05      	ldr	r3, [pc, #20]	; (800deb8 <xTaskGetTickCount+0x1c>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dea8:	687b      	ldr	r3, [r7, #4]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	370c      	adds	r7, #12
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	20000c90 	.word	0x20000c90

0800debc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dec2:	f000 ff6b 	bl	800ed9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dec6:	2300      	movs	r3, #0
 800dec8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800deca:	4b04      	ldr	r3, [pc, #16]	; (800dedc <xTaskGetTickCountFromISR+0x20>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ded0:	683b      	ldr	r3, [r7, #0]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	20000c90 	.word	0x20000c90

0800dee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b086      	sub	sp, #24
 800dee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dee6:	2300      	movs	r3, #0
 800dee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deea:	4b4f      	ldr	r3, [pc, #316]	; (800e028 <xTaskIncrementTick+0x148>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	f040 808a 	bne.w	800e008 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800def4:	4b4d      	ldr	r3, [pc, #308]	; (800e02c <xTaskIncrementTick+0x14c>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	3301      	adds	r3, #1
 800defa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800defc:	4a4b      	ldr	r2, [pc, #300]	; (800e02c <xTaskIncrementTick+0x14c>)
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d122      	bne.n	800df4e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800df08:	4b49      	ldr	r3, [pc, #292]	; (800e030 <xTaskIncrementTick+0x150>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00c      	beq.n	800df2c <xTaskIncrementTick+0x4c>
	__asm volatile
 800df12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df16:	b672      	cpsid	i
 800df18:	f383 8811 	msr	BASEPRI, r3
 800df1c:	f3bf 8f6f 	isb	sy
 800df20:	f3bf 8f4f 	dsb	sy
 800df24:	b662      	cpsie	i
 800df26:	603b      	str	r3, [r7, #0]
}
 800df28:	bf00      	nop
 800df2a:	e7fe      	b.n	800df2a <xTaskIncrementTick+0x4a>
 800df2c:	4b40      	ldr	r3, [pc, #256]	; (800e030 <xTaskIncrementTick+0x150>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	60fb      	str	r3, [r7, #12]
 800df32:	4b40      	ldr	r3, [pc, #256]	; (800e034 <xTaskIncrementTick+0x154>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a3e      	ldr	r2, [pc, #248]	; (800e030 <xTaskIncrementTick+0x150>)
 800df38:	6013      	str	r3, [r2, #0]
 800df3a:	4a3e      	ldr	r2, [pc, #248]	; (800e034 <xTaskIncrementTick+0x154>)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6013      	str	r3, [r2, #0]
 800df40:	4b3d      	ldr	r3, [pc, #244]	; (800e038 <xTaskIncrementTick+0x158>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	4a3c      	ldr	r2, [pc, #240]	; (800e038 <xTaskIncrementTick+0x158>)
 800df48:	6013      	str	r3, [r2, #0]
 800df4a:	f000 fad1 	bl	800e4f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df4e:	4b3b      	ldr	r3, [pc, #236]	; (800e03c <xTaskIncrementTick+0x15c>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	429a      	cmp	r2, r3
 800df56:	d348      	bcc.n	800dfea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df58:	4b35      	ldr	r3, [pc, #212]	; (800e030 <xTaskIncrementTick+0x150>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d104      	bne.n	800df6c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df62:	4b36      	ldr	r3, [pc, #216]	; (800e03c <xTaskIncrementTick+0x15c>)
 800df64:	f04f 32ff 	mov.w	r2, #4294967295
 800df68:	601a      	str	r2, [r3, #0]
					break;
 800df6a:	e03e      	b.n	800dfea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df6c:	4b30      	ldr	r3, [pc, #192]	; (800e030 <xTaskIncrementTick+0x150>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	429a      	cmp	r2, r3
 800df82:	d203      	bcs.n	800df8c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df84:	4a2d      	ldr	r2, [pc, #180]	; (800e03c <xTaskIncrementTick+0x15c>)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df8a:	e02e      	b.n	800dfea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	3304      	adds	r3, #4
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fd3b 	bl	800ca0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d004      	beq.n	800dfa8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	3318      	adds	r3, #24
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe fd32 	bl	800ca0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfac:	2201      	movs	r2, #1
 800dfae:	409a      	lsls	r2, r3
 800dfb0:	4b23      	ldr	r3, [pc, #140]	; (800e040 <xTaskIncrementTick+0x160>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	4a22      	ldr	r2, [pc, #136]	; (800e040 <xTaskIncrementTick+0x160>)
 800dfb8:	6013      	str	r3, [r2, #0]
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	4413      	add	r3, r2
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	4a1f      	ldr	r2, [pc, #124]	; (800e044 <xTaskIncrementTick+0x164>)
 800dfc8:	441a      	add	r2, r3
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	3304      	adds	r3, #4
 800dfce:	4619      	mov	r1, r3
 800dfd0:	4610      	mov	r0, r2
 800dfd2:	f7fe fcbe 	bl	800c952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfda:	4b1b      	ldr	r3, [pc, #108]	; (800e048 <xTaskIncrementTick+0x168>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d3b9      	bcc.n	800df58 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfe8:	e7b6      	b.n	800df58 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfea:	4b17      	ldr	r3, [pc, #92]	; (800e048 <xTaskIncrementTick+0x168>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff0:	4914      	ldr	r1, [pc, #80]	; (800e044 <xTaskIncrementTick+0x164>)
 800dff2:	4613      	mov	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	440b      	add	r3, r1
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d907      	bls.n	800e012 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e002:	2301      	movs	r3, #1
 800e004:	617b      	str	r3, [r7, #20]
 800e006:	e004      	b.n	800e012 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e008:	4b10      	ldr	r3, [pc, #64]	; (800e04c <xTaskIncrementTick+0x16c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3301      	adds	r3, #1
 800e00e:	4a0f      	ldr	r2, [pc, #60]	; (800e04c <xTaskIncrementTick+0x16c>)
 800e010:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e012:	4b0f      	ldr	r3, [pc, #60]	; (800e050 <xTaskIncrementTick+0x170>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e01a:	2301      	movs	r3, #1
 800e01c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e01e:	697b      	ldr	r3, [r7, #20]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3718      	adds	r7, #24
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20000cb4 	.word	0x20000cb4
 800e02c:	20000c90 	.word	0x20000c90
 800e030:	20000c44 	.word	0x20000c44
 800e034:	20000c48 	.word	0x20000c48
 800e038:	20000ca4 	.word	0x20000ca4
 800e03c:	20000cac 	.word	0x20000cac
 800e040:	20000c94 	.word	0x20000c94
 800e044:	20000b90 	.word	0x20000b90
 800e048:	20000b8c 	.word	0x20000b8c
 800e04c:	20000c9c 	.word	0x20000c9c
 800e050:	20000ca0 	.word	0x20000ca0

0800e054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b088      	sub	sp, #32
 800e058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e05a:	4b3a      	ldr	r3, [pc, #232]	; (800e144 <vTaskSwitchContext+0xf0>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d003      	beq.n	800e06a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e062:	4b39      	ldr	r3, [pc, #228]	; (800e148 <vTaskSwitchContext+0xf4>)
 800e064:	2201      	movs	r2, #1
 800e066:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e068:	e068      	b.n	800e13c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800e06a:	4b37      	ldr	r3, [pc, #220]	; (800e148 <vTaskSwitchContext+0xf4>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e070:	4b36      	ldr	r3, [pc, #216]	; (800e14c <vTaskSwitchContext+0xf8>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e076:	61fb      	str	r3, [r7, #28]
 800e078:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e07c:	61bb      	str	r3, [r7, #24]
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	69ba      	ldr	r2, [r7, #24]
 800e084:	429a      	cmp	r2, r3
 800e086:	d111      	bne.n	800e0ac <vTaskSwitchContext+0x58>
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	3304      	adds	r3, #4
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	69ba      	ldr	r2, [r7, #24]
 800e090:	429a      	cmp	r2, r3
 800e092:	d10b      	bne.n	800e0ac <vTaskSwitchContext+0x58>
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	3308      	adds	r3, #8
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	69ba      	ldr	r2, [r7, #24]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d105      	bne.n	800e0ac <vTaskSwitchContext+0x58>
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	330c      	adds	r3, #12
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	69ba      	ldr	r2, [r7, #24]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d008      	beq.n	800e0be <vTaskSwitchContext+0x6a>
 800e0ac:	4b27      	ldr	r3, [pc, #156]	; (800e14c <vTaskSwitchContext+0xf8>)
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	4b26      	ldr	r3, [pc, #152]	; (800e14c <vTaskSwitchContext+0xf8>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	3334      	adds	r3, #52	; 0x34
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	f7f2 fe64 	bl	8000d86 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0be:	4b24      	ldr	r3, [pc, #144]	; (800e150 <vTaskSwitchContext+0xfc>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	fab3 f383 	clz	r3, r3
 800e0ca:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e0cc:	7afb      	ldrb	r3, [r7, #11]
 800e0ce:	f1c3 031f 	rsb	r3, r3, #31
 800e0d2:	617b      	str	r3, [r7, #20]
 800e0d4:	491f      	ldr	r1, [pc, #124]	; (800e154 <vTaskSwitchContext+0x100>)
 800e0d6:	697a      	ldr	r2, [r7, #20]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	440b      	add	r3, r1
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10c      	bne.n	800e102 <vTaskSwitchContext+0xae>
	__asm volatile
 800e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ec:	b672      	cpsid	i
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	b662      	cpsie	i
 800e0fc:	607b      	str	r3, [r7, #4]
}
 800e0fe:	bf00      	nop
 800e100:	e7fe      	b.n	800e100 <vTaskSwitchContext+0xac>
 800e102:	697a      	ldr	r2, [r7, #20]
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4a11      	ldr	r2, [pc, #68]	; (800e154 <vTaskSwitchContext+0x100>)
 800e10e:	4413      	add	r3, r2
 800e110:	613b      	str	r3, [r7, #16]
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	685a      	ldr	r2, [r3, #4]
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	605a      	str	r2, [r3, #4]
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	685a      	ldr	r2, [r3, #4]
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	3308      	adds	r3, #8
 800e124:	429a      	cmp	r2, r3
 800e126:	d104      	bne.n	800e132 <vTaskSwitchContext+0xde>
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	685a      	ldr	r2, [r3, #4]
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	605a      	str	r2, [r3, #4]
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	4a04      	ldr	r2, [pc, #16]	; (800e14c <vTaskSwitchContext+0xf8>)
 800e13a:	6013      	str	r3, [r2, #0]
}
 800e13c:	bf00      	nop
 800e13e:	3720      	adds	r7, #32
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	20000cb4 	.word	0x20000cb4
 800e148:	20000ca0 	.word	0x20000ca0
 800e14c:	20000b8c 	.word	0x20000b8c
 800e150:	20000c94 	.word	0x20000c94
 800e154:	20000b90 	.word	0x20000b90

0800e158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d10c      	bne.n	800e182 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16c:	b672      	cpsid	i
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	b662      	cpsie	i
 800e17c:	60fb      	str	r3, [r7, #12]
}
 800e17e:	bf00      	nop
 800e180:	e7fe      	b.n	800e180 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e182:	4b07      	ldr	r3, [pc, #28]	; (800e1a0 <vTaskPlaceOnEventList+0x48>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	3318      	adds	r3, #24
 800e188:	4619      	mov	r1, r3
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f7fe fc05 	bl	800c99a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e190:	2101      	movs	r1, #1
 800e192:	6838      	ldr	r0, [r7, #0]
 800e194:	f000 fba6 	bl	800e8e4 <prvAddCurrentTaskToDelayedList>
}
 800e198:	bf00      	nop
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	20000b8c 	.word	0x20000b8c

0800e1a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d10c      	bne.n	800e1d4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1be:	b672      	cpsid	i
 800e1c0:	f383 8811 	msr	BASEPRI, r3
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	b662      	cpsie	i
 800e1ce:	60fb      	str	r3, [r7, #12]
}
 800e1d0:	bf00      	nop
 800e1d2:	e7fe      	b.n	800e1d2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	3318      	adds	r3, #24
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fe fc17 	bl	800ca0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1de:	4b1d      	ldr	r3, [pc, #116]	; (800e254 <xTaskRemoveFromEventList+0xb0>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d11c      	bne.n	800e220 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	3304      	adds	r3, #4
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe fc0e 	bl	800ca0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	409a      	lsls	r2, r3
 800e1f8:	4b17      	ldr	r3, [pc, #92]	; (800e258 <xTaskRemoveFromEventList+0xb4>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	4a16      	ldr	r2, [pc, #88]	; (800e258 <xTaskRemoveFromEventList+0xb4>)
 800e200:	6013      	str	r3, [r2, #0]
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e206:	4613      	mov	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4413      	add	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4a13      	ldr	r2, [pc, #76]	; (800e25c <xTaskRemoveFromEventList+0xb8>)
 800e210:	441a      	add	r2, r3
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	3304      	adds	r3, #4
 800e216:	4619      	mov	r1, r3
 800e218:	4610      	mov	r0, r2
 800e21a:	f7fe fb9a 	bl	800c952 <vListInsertEnd>
 800e21e:	e005      	b.n	800e22c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	3318      	adds	r3, #24
 800e224:	4619      	mov	r1, r3
 800e226:	480e      	ldr	r0, [pc, #56]	; (800e260 <xTaskRemoveFromEventList+0xbc>)
 800e228:	f7fe fb93 	bl	800c952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e230:	4b0c      	ldr	r3, [pc, #48]	; (800e264 <xTaskRemoveFromEventList+0xc0>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e236:	429a      	cmp	r2, r3
 800e238:	d905      	bls.n	800e246 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e23a:	2301      	movs	r3, #1
 800e23c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e23e:	4b0a      	ldr	r3, [pc, #40]	; (800e268 <xTaskRemoveFromEventList+0xc4>)
 800e240:	2201      	movs	r2, #1
 800e242:	601a      	str	r2, [r3, #0]
 800e244:	e001      	b.n	800e24a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e246:	2300      	movs	r3, #0
 800e248:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e24a:	697b      	ldr	r3, [r7, #20]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3718      	adds	r7, #24
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	20000cb4 	.word	0x20000cb4
 800e258:	20000c94 	.word	0x20000c94
 800e25c:	20000b90 	.word	0x20000b90
 800e260:	20000c4c 	.word	0x20000c4c
 800e264:	20000b8c 	.word	0x20000b8c
 800e268:	20000ca0 	.word	0x20000ca0

0800e26c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e274:	4b06      	ldr	r3, [pc, #24]	; (800e290 <vTaskInternalSetTimeOutState+0x24>)
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <vTaskInternalSetTimeOutState+0x28>)
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	605a      	str	r2, [r3, #4]
}
 800e284:	bf00      	nop
 800e286:	370c      	adds	r7, #12
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	20000ca4 	.word	0x20000ca4
 800e294:	20000c90 	.word	0x20000c90

0800e298 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b088      	sub	sp, #32
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10c      	bne.n	800e2c2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ac:	b672      	cpsid	i
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	b662      	cpsie	i
 800e2bc:	613b      	str	r3, [r7, #16]
}
 800e2be:	bf00      	nop
 800e2c0:	e7fe      	b.n	800e2c0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10c      	bne.n	800e2e2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	b672      	cpsid	i
 800e2ce:	f383 8811 	msr	BASEPRI, r3
 800e2d2:	f3bf 8f6f 	isb	sy
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	b662      	cpsie	i
 800e2dc:	60fb      	str	r3, [r7, #12]
}
 800e2de:	bf00      	nop
 800e2e0:	e7fe      	b.n	800e2e0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e2e2:	f000 fc73 	bl	800ebcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2e6:	4b1d      	ldr	r3, [pc, #116]	; (800e35c <xTaskCheckForTimeOut+0xc4>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	69ba      	ldr	r2, [r7, #24]
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fe:	d102      	bne.n	800e306 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e300:	2300      	movs	r3, #0
 800e302:	61fb      	str	r3, [r7, #28]
 800e304:	e023      	b.n	800e34e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	4b15      	ldr	r3, [pc, #84]	; (800e360 <xTaskCheckForTimeOut+0xc8>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d007      	beq.n	800e322 <xTaskCheckForTimeOut+0x8a>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	69ba      	ldr	r2, [r7, #24]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d302      	bcc.n	800e322 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e31c:	2301      	movs	r3, #1
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	e015      	b.n	800e34e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d20b      	bcs.n	800e344 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	1ad2      	subs	r2, r2, r3
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f7ff ff97 	bl	800e26c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e33e:	2300      	movs	r3, #0
 800e340:	61fb      	str	r3, [r7, #28]
 800e342:	e004      	b.n	800e34e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	2200      	movs	r2, #0
 800e348:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e34a:	2301      	movs	r3, #1
 800e34c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e34e:	f000 fc71 	bl	800ec34 <vPortExitCritical>

	return xReturn;
 800e352:	69fb      	ldr	r3, [r7, #28]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3720      	adds	r7, #32
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20000c90 	.word	0x20000c90
 800e360:	20000ca4 	.word	0x20000ca4

0800e364 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e364:	b480      	push	{r7}
 800e366:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e368:	4b03      	ldr	r3, [pc, #12]	; (800e378 <vTaskMissedYield+0x14>)
 800e36a:	2201      	movs	r2, #1
 800e36c:	601a      	str	r2, [r3, #0]
}
 800e36e:	bf00      	nop
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr
 800e378:	20000ca0 	.word	0x20000ca0

0800e37c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e384:	f000 f854 	bl	800e430 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e388:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <prvIdleTask+0x2c>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d907      	bls.n	800e3a0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e390:	4b06      	ldr	r3, [pc, #24]	; (800e3ac <prvIdleTask+0x30>)
 800e392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e396:	601a      	str	r2, [r3, #0]
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e3a0:	f7f2 fcea 	bl	8000d78 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e3a4:	e7ee      	b.n	800e384 <prvIdleTask+0x8>
 800e3a6:	bf00      	nop
 800e3a8:	20000b90 	.word	0x20000b90
 800e3ac:	e000ed04 	.word	0xe000ed04

0800e3b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	607b      	str	r3, [r7, #4]
 800e3ba:	e00c      	b.n	800e3d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4a12      	ldr	r2, [pc, #72]	; (800e410 <prvInitialiseTaskLists+0x60>)
 800e3c8:	4413      	add	r3, r2
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe fa94 	bl	800c8f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	607b      	str	r3, [r7, #4]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2b06      	cmp	r3, #6
 800e3da:	d9ef      	bls.n	800e3bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3dc:	480d      	ldr	r0, [pc, #52]	; (800e414 <prvInitialiseTaskLists+0x64>)
 800e3de:	f7fe fa8b 	bl	800c8f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3e2:	480d      	ldr	r0, [pc, #52]	; (800e418 <prvInitialiseTaskLists+0x68>)
 800e3e4:	f7fe fa88 	bl	800c8f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3e8:	480c      	ldr	r0, [pc, #48]	; (800e41c <prvInitialiseTaskLists+0x6c>)
 800e3ea:	f7fe fa85 	bl	800c8f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e3ee:	480c      	ldr	r0, [pc, #48]	; (800e420 <prvInitialiseTaskLists+0x70>)
 800e3f0:	f7fe fa82 	bl	800c8f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3f4:	480b      	ldr	r0, [pc, #44]	; (800e424 <prvInitialiseTaskLists+0x74>)
 800e3f6:	f7fe fa7f 	bl	800c8f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3fa:	4b0b      	ldr	r3, [pc, #44]	; (800e428 <prvInitialiseTaskLists+0x78>)
 800e3fc:	4a05      	ldr	r2, [pc, #20]	; (800e414 <prvInitialiseTaskLists+0x64>)
 800e3fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e400:	4b0a      	ldr	r3, [pc, #40]	; (800e42c <prvInitialiseTaskLists+0x7c>)
 800e402:	4a05      	ldr	r2, [pc, #20]	; (800e418 <prvInitialiseTaskLists+0x68>)
 800e404:	601a      	str	r2, [r3, #0]
}
 800e406:	bf00      	nop
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	20000b90 	.word	0x20000b90
 800e414:	20000c1c 	.word	0x20000c1c
 800e418:	20000c30 	.word	0x20000c30
 800e41c:	20000c4c 	.word	0x20000c4c
 800e420:	20000c60 	.word	0x20000c60
 800e424:	20000c78 	.word	0x20000c78
 800e428:	20000c44 	.word	0x20000c44
 800e42c:	20000c48 	.word	0x20000c48

0800e430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e436:	e019      	b.n	800e46c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e438:	f000 fbc8 	bl	800ebcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e43c:	4b10      	ldr	r3, [pc, #64]	; (800e480 <prvCheckTasksWaitingTermination+0x50>)
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3304      	adds	r3, #4
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fe fadf 	bl	800ca0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e44e:	4b0d      	ldr	r3, [pc, #52]	; (800e484 <prvCheckTasksWaitingTermination+0x54>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	3b01      	subs	r3, #1
 800e454:	4a0b      	ldr	r2, [pc, #44]	; (800e484 <prvCheckTasksWaitingTermination+0x54>)
 800e456:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e458:	4b0b      	ldr	r3, [pc, #44]	; (800e488 <prvCheckTasksWaitingTermination+0x58>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3b01      	subs	r3, #1
 800e45e:	4a0a      	ldr	r2, [pc, #40]	; (800e488 <prvCheckTasksWaitingTermination+0x58>)
 800e460:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e462:	f000 fbe7 	bl	800ec34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f810 	bl	800e48c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e46c:	4b06      	ldr	r3, [pc, #24]	; (800e488 <prvCheckTasksWaitingTermination+0x58>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d1e1      	bne.n	800e438 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e474:	bf00      	nop
 800e476:	bf00      	nop
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	20000c60 	.word	0x20000c60
 800e484:	20000c8c 	.word	0x20000c8c
 800e488:	20000c74 	.word	0x20000c74

0800e48c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d108      	bne.n	800e4b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f000 fd8e 	bl	800efc4 <vPortFree>
				vPortFree( pxTCB );
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 fd8b 	bl	800efc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4ae:	e01a      	b.n	800e4e6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d103      	bne.n	800e4c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 fd82 	bl	800efc4 <vPortFree>
	}
 800e4c0:	e011      	b.n	800e4e6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d00c      	beq.n	800e4e6 <prvDeleteTCB+0x5a>
	__asm volatile
 800e4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d0:	b672      	cpsid	i
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	b662      	cpsie	i
 800e4e0:	60fb      	str	r3, [r7, #12]
}
 800e4e2:	bf00      	nop
 800e4e4:	e7fe      	b.n	800e4e4 <prvDeleteTCB+0x58>
	}
 800e4e6:	bf00      	nop
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
	...

0800e4f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4f6:	4b0c      	ldr	r3, [pc, #48]	; (800e528 <prvResetNextTaskUnblockTime+0x38>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d104      	bne.n	800e50a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e500:	4b0a      	ldr	r3, [pc, #40]	; (800e52c <prvResetNextTaskUnblockTime+0x3c>)
 800e502:	f04f 32ff 	mov.w	r2, #4294967295
 800e506:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e508:	e008      	b.n	800e51c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e50a:	4b07      	ldr	r3, [pc, #28]	; (800e528 <prvResetNextTaskUnblockTime+0x38>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	4a04      	ldr	r2, [pc, #16]	; (800e52c <prvResetNextTaskUnblockTime+0x3c>)
 800e51a:	6013      	str	r3, [r2, #0]
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	20000c44 	.word	0x20000c44
 800e52c:	20000cac 	.word	0x20000cac

0800e530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e536:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <xTaskGetSchedulerState+0x34>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d102      	bne.n	800e544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e53e:	2301      	movs	r3, #1
 800e540:	607b      	str	r3, [r7, #4]
 800e542:	e008      	b.n	800e556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e544:	4b08      	ldr	r3, [pc, #32]	; (800e568 <xTaskGetSchedulerState+0x38>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d102      	bne.n	800e552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e54c:	2302      	movs	r3, #2
 800e54e:	607b      	str	r3, [r7, #4]
 800e550:	e001      	b.n	800e556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e552:	2300      	movs	r3, #0
 800e554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e556:	687b      	ldr	r3, [r7, #4]
	}
 800e558:	4618      	mov	r0, r3
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	20000c98 	.word	0x20000c98
 800e568:	20000cb4 	.word	0x20000cb4

0800e56c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e578:	2300      	movs	r3, #0
 800e57a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d069      	beq.n	800e656 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e586:	4b36      	ldr	r3, [pc, #216]	; (800e660 <xTaskPriorityInherit+0xf4>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d259      	bcs.n	800e644 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	699b      	ldr	r3, [r3, #24]
 800e594:	2b00      	cmp	r3, #0
 800e596:	db06      	blt.n	800e5a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e598:	4b31      	ldr	r3, [pc, #196]	; (800e660 <xTaskPriorityInherit+0xf4>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59e:	f1c3 0207 	rsb	r2, r3, #7
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	6959      	ldr	r1, [r3, #20]
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4a2b      	ldr	r2, [pc, #172]	; (800e664 <xTaskPriorityInherit+0xf8>)
 800e5b8:	4413      	add	r3, r2
 800e5ba:	4299      	cmp	r1, r3
 800e5bc:	d13a      	bne.n	800e634 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fe fa22 	bl	800ca0c <uxListRemove>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d115      	bne.n	800e5fa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d2:	4924      	ldr	r1, [pc, #144]	; (800e664 <xTaskPriorityInherit+0xf8>)
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	4413      	add	r3, r2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	440b      	add	r3, r1
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10a      	bne.n	800e5fa <xTaskPriorityInherit+0x8e>
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ee:	43da      	mvns	r2, r3
 800e5f0:	4b1d      	ldr	r3, [pc, #116]	; (800e668 <xTaskPriorityInherit+0xfc>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4013      	ands	r3, r2
 800e5f6:	4a1c      	ldr	r2, [pc, #112]	; (800e668 <xTaskPriorityInherit+0xfc>)
 800e5f8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5fa:	4b19      	ldr	r3, [pc, #100]	; (800e660 <xTaskPriorityInherit+0xf4>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e608:	2201      	movs	r2, #1
 800e60a:	409a      	lsls	r2, r3
 800e60c:	4b16      	ldr	r3, [pc, #88]	; (800e668 <xTaskPriorityInherit+0xfc>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4313      	orrs	r3, r2
 800e612:	4a15      	ldr	r2, [pc, #84]	; (800e668 <xTaskPriorityInherit+0xfc>)
 800e614:	6013      	str	r3, [r2, #0]
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61a:	4613      	mov	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4413      	add	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4a10      	ldr	r2, [pc, #64]	; (800e664 <xTaskPriorityInherit+0xf8>)
 800e624:	441a      	add	r2, r3
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	3304      	adds	r3, #4
 800e62a:	4619      	mov	r1, r3
 800e62c:	4610      	mov	r0, r2
 800e62e:	f7fe f990 	bl	800c952 <vListInsertEnd>
 800e632:	e004      	b.n	800e63e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e634:	4b0a      	ldr	r3, [pc, #40]	; (800e660 <xTaskPriorityInherit+0xf4>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e63e:	2301      	movs	r3, #1
 800e640:	60fb      	str	r3, [r7, #12]
 800e642:	e008      	b.n	800e656 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e648:	4b05      	ldr	r3, [pc, #20]	; (800e660 <xTaskPriorityInherit+0xf4>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64e:	429a      	cmp	r2, r3
 800e650:	d201      	bcs.n	800e656 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e652:	2301      	movs	r3, #1
 800e654:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e656:	68fb      	ldr	r3, [r7, #12]
	}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	20000b8c 	.word	0x20000b8c
 800e664:	20000b90 	.word	0x20000b90
 800e668:	20000c94 	.word	0x20000c94

0800e66c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e678:	2300      	movs	r3, #0
 800e67a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d072      	beq.n	800e768 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e682:	4b3c      	ldr	r3, [pc, #240]	; (800e774 <xTaskPriorityDisinherit+0x108>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d00c      	beq.n	800e6a6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e690:	b672      	cpsid	i
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	b662      	cpsie	i
 800e6a0:	60fb      	str	r3, [r7, #12]
}
 800e6a2:	bf00      	nop
 800e6a4:	e7fe      	b.n	800e6a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10c      	bne.n	800e6c8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b2:	b672      	cpsid	i
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	b662      	cpsie	i
 800e6c2:	60bb      	str	r3, [r7, #8]
}
 800e6c4:	bf00      	nop
 800e6c6:	e7fe      	b.n	800e6c6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6cc:	1e5a      	subs	r2, r3, #1
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d044      	beq.n	800e768 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d140      	bne.n	800e768 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	3304      	adds	r3, #4
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fe f98e 	bl	800ca0c <uxListRemove>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d115      	bne.n	800e722 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6fa:	491f      	ldr	r1, [pc, #124]	; (800e778 <xTaskPriorityDisinherit+0x10c>)
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	440b      	add	r3, r1
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d10a      	bne.n	800e722 <xTaskPriorityDisinherit+0xb6>
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e710:	2201      	movs	r2, #1
 800e712:	fa02 f303 	lsl.w	r3, r2, r3
 800e716:	43da      	mvns	r2, r3
 800e718:	4b18      	ldr	r3, [pc, #96]	; (800e77c <xTaskPriorityDisinherit+0x110>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4013      	ands	r3, r2
 800e71e:	4a17      	ldr	r2, [pc, #92]	; (800e77c <xTaskPriorityDisinherit+0x110>)
 800e720:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72e:	f1c3 0207 	rsb	r2, r3, #7
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e73a:	2201      	movs	r2, #1
 800e73c:	409a      	lsls	r2, r3
 800e73e:	4b0f      	ldr	r3, [pc, #60]	; (800e77c <xTaskPriorityDisinherit+0x110>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4313      	orrs	r3, r2
 800e744:	4a0d      	ldr	r2, [pc, #52]	; (800e77c <xTaskPriorityDisinherit+0x110>)
 800e746:	6013      	str	r3, [r2, #0]
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e74c:	4613      	mov	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4a08      	ldr	r2, [pc, #32]	; (800e778 <xTaskPriorityDisinherit+0x10c>)
 800e756:	441a      	add	r2, r3
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	3304      	adds	r3, #4
 800e75c:	4619      	mov	r1, r3
 800e75e:	4610      	mov	r0, r2
 800e760:	f7fe f8f7 	bl	800c952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e764:	2301      	movs	r3, #1
 800e766:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e768:	697b      	ldr	r3, [r7, #20]
	}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3718      	adds	r7, #24
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	20000b8c 	.word	0x20000b8c
 800e778:	20000b90 	.word	0x20000b90
 800e77c:	20000c94 	.word	0x20000c94

0800e780 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e780:	b580      	push	{r7, lr}
 800e782:	b088      	sub	sp, #32
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e78e:	2301      	movs	r3, #1
 800e790:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	f000 8087 	beq.w	800e8a8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d10c      	bne.n	800e7bc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a6:	b672      	cpsid	i
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	b662      	cpsie	i
 800e7b6:	60fb      	str	r3, [r7, #12]
}
 800e7b8:	bf00      	nop
 800e7ba:	e7fe      	b.n	800e7ba <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7c0:	683a      	ldr	r2, [r7, #0]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d902      	bls.n	800e7cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	61fb      	str	r3, [r7, #28]
 800e7ca:	e002      	b.n	800e7d2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d6:	69fa      	ldr	r2, [r7, #28]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d065      	beq.n	800e8a8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7e0:	697a      	ldr	r2, [r7, #20]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d160      	bne.n	800e8a8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e7e6:	4b32      	ldr	r3, [pc, #200]	; (800e8b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	69ba      	ldr	r2, [r7, #24]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d10c      	bne.n	800e80a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f4:	b672      	cpsid	i
 800e7f6:	f383 8811 	msr	BASEPRI, r3
 800e7fa:	f3bf 8f6f 	isb	sy
 800e7fe:	f3bf 8f4f 	dsb	sy
 800e802:	b662      	cpsie	i
 800e804:	60bb      	str	r3, [r7, #8]
}
 800e806:	bf00      	nop
 800e808:	e7fe      	b.n	800e808 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	69fa      	ldr	r2, [r7, #28]
 800e814:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	699b      	ldr	r3, [r3, #24]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	db04      	blt.n	800e828 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	f1c3 0207 	rsb	r2, r3, #7
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	6959      	ldr	r1, [r3, #20]
 800e82c:	693a      	ldr	r2, [r7, #16]
 800e82e:	4613      	mov	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4413      	add	r3, r2
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	4a1f      	ldr	r2, [pc, #124]	; (800e8b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e838:	4413      	add	r3, r2
 800e83a:	4299      	cmp	r1, r3
 800e83c:	d134      	bne.n	800e8a8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	3304      	adds	r3, #4
 800e842:	4618      	mov	r0, r3
 800e844:	f7fe f8e2 	bl	800ca0c <uxListRemove>
 800e848:	4603      	mov	r3, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d115      	bne.n	800e87a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e852:	4918      	ldr	r1, [pc, #96]	; (800e8b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e854:	4613      	mov	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	440b      	add	r3, r1
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10a      	bne.n	800e87a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e868:	2201      	movs	r2, #1
 800e86a:	fa02 f303 	lsl.w	r3, r2, r3
 800e86e:	43da      	mvns	r2, r3
 800e870:	4b11      	ldr	r3, [pc, #68]	; (800e8b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4013      	ands	r3, r2
 800e876:	4a10      	ldr	r2, [pc, #64]	; (800e8b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e878:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e87e:	2201      	movs	r2, #1
 800e880:	409a      	lsls	r2, r3
 800e882:	4b0d      	ldr	r3, [pc, #52]	; (800e8b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4313      	orrs	r3, r2
 800e888:	4a0b      	ldr	r2, [pc, #44]	; (800e8b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e890:	4613      	mov	r3, r2
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	4413      	add	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4a06      	ldr	r2, [pc, #24]	; (800e8b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e89a:	441a      	add	r2, r3
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	3304      	adds	r3, #4
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	4610      	mov	r0, r2
 800e8a4:	f7fe f855 	bl	800c952 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8a8:	bf00      	nop
 800e8aa:	3720      	adds	r7, #32
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	20000b8c 	.word	0x20000b8c
 800e8b4:	20000b90 	.word	0x20000b90
 800e8b8:	20000c94 	.word	0x20000c94

0800e8bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8bc:	b480      	push	{r7}
 800e8be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8c0:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d004      	beq.n	800e8d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8c8:	4b05      	ldr	r3, [pc, #20]	; (800e8e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8ce:	3201      	adds	r2, #1
 800e8d0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e8d2:	4b03      	ldr	r3, [pc, #12]	; (800e8e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
	}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	20000b8c 	.word	0x20000b8c

0800e8e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e8ee:	4b29      	ldr	r3, [pc, #164]	; (800e994 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8f4:	4b28      	ldr	r3, [pc, #160]	; (800e998 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fe f886 	bl	800ca0c <uxListRemove>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d10b      	bne.n	800e91e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e906:	4b24      	ldr	r3, [pc, #144]	; (800e998 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90c:	2201      	movs	r2, #1
 800e90e:	fa02 f303 	lsl.w	r3, r2, r3
 800e912:	43da      	mvns	r2, r3
 800e914:	4b21      	ldr	r3, [pc, #132]	; (800e99c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4013      	ands	r3, r2
 800e91a:	4a20      	ldr	r2, [pc, #128]	; (800e99c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e91c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e924:	d10a      	bne.n	800e93c <prvAddCurrentTaskToDelayedList+0x58>
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d007      	beq.n	800e93c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e92c:	4b1a      	ldr	r3, [pc, #104]	; (800e998 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3304      	adds	r3, #4
 800e932:	4619      	mov	r1, r3
 800e934:	481a      	ldr	r0, [pc, #104]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e936:	f7fe f80c 	bl	800c952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e93a:	e026      	b.n	800e98a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4413      	add	r3, r2
 800e942:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e944:	4b14      	ldr	r3, [pc, #80]	; (800e998 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e94c:	68ba      	ldr	r2, [r7, #8]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	429a      	cmp	r2, r3
 800e952:	d209      	bcs.n	800e968 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e954:	4b13      	ldr	r3, [pc, #76]	; (800e9a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	4b0f      	ldr	r3, [pc, #60]	; (800e998 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	3304      	adds	r3, #4
 800e95e:	4619      	mov	r1, r3
 800e960:	4610      	mov	r0, r2
 800e962:	f7fe f81a 	bl	800c99a <vListInsert>
}
 800e966:	e010      	b.n	800e98a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e968:	4b0f      	ldr	r3, [pc, #60]	; (800e9a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3304      	adds	r3, #4
 800e972:	4619      	mov	r1, r3
 800e974:	4610      	mov	r0, r2
 800e976:	f7fe f810 	bl	800c99a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e97a:	4b0c      	ldr	r3, [pc, #48]	; (800e9ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	429a      	cmp	r2, r3
 800e982:	d202      	bcs.n	800e98a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e984:	4a09      	ldr	r2, [pc, #36]	; (800e9ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	6013      	str	r3, [r2, #0]
}
 800e98a:	bf00      	nop
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	20000c90 	.word	0x20000c90
 800e998:	20000b8c 	.word	0x20000b8c
 800e99c:	20000c94 	.word	0x20000c94
 800e9a0:	20000c78 	.word	0x20000c78
 800e9a4:	20000c48 	.word	0x20000c48
 800e9a8:	20000c44 	.word	0x20000c44
 800e9ac:	20000cac 	.word	0x20000cac

0800e9b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	3b04      	subs	r3, #4
 800e9c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	3b04      	subs	r3, #4
 800e9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	f023 0201 	bic.w	r2, r3, #1
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	3b04      	subs	r3, #4
 800e9de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9e0:	4a0c      	ldr	r2, [pc, #48]	; (800ea14 <pxPortInitialiseStack+0x64>)
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	3b14      	subs	r3, #20
 800e9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3b04      	subs	r3, #4
 800e9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f06f 0202 	mvn.w	r2, #2
 800e9fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	3b20      	subs	r3, #32
 800ea04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea06:	68fb      	ldr	r3, [r7, #12]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	0800ea19 	.word	0x0800ea19

0800ea18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea22:	4b14      	ldr	r3, [pc, #80]	; (800ea74 <prvTaskExitError+0x5c>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea2a:	d00c      	beq.n	800ea46 <prvTaskExitError+0x2e>
	__asm volatile
 800ea2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea30:	b672      	cpsid	i
 800ea32:	f383 8811 	msr	BASEPRI, r3
 800ea36:	f3bf 8f6f 	isb	sy
 800ea3a:	f3bf 8f4f 	dsb	sy
 800ea3e:	b662      	cpsie	i
 800ea40:	60fb      	str	r3, [r7, #12]
}
 800ea42:	bf00      	nop
 800ea44:	e7fe      	b.n	800ea44 <prvTaskExitError+0x2c>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4a:	b672      	cpsid	i
 800ea4c:	f383 8811 	msr	BASEPRI, r3
 800ea50:	f3bf 8f6f 	isb	sy
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	b662      	cpsie	i
 800ea5a:	60bb      	str	r3, [r7, #8]
}
 800ea5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea5e:	bf00      	nop
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d0fc      	beq.n	800ea60 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea66:	bf00      	nop
 800ea68:	bf00      	nop
 800ea6a:	3714      	adds	r7, #20
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr
 800ea74:	20000020 	.word	0x20000020
	...

0800ea80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea80:	4b07      	ldr	r3, [pc, #28]	; (800eaa0 <pxCurrentTCBConst2>)
 800ea82:	6819      	ldr	r1, [r3, #0]
 800ea84:	6808      	ldr	r0, [r1, #0]
 800ea86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8a:	f380 8809 	msr	PSP, r0
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f04f 0000 	mov.w	r0, #0
 800ea96:	f380 8811 	msr	BASEPRI, r0
 800ea9a:	4770      	bx	lr
 800ea9c:	f3af 8000 	nop.w

0800eaa0 <pxCurrentTCBConst2>:
 800eaa0:	20000b8c 	.word	0x20000b8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eaa4:	bf00      	nop
 800eaa6:	bf00      	nop

0800eaa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eaa8:	4808      	ldr	r0, [pc, #32]	; (800eacc <prvPortStartFirstTask+0x24>)
 800eaaa:	6800      	ldr	r0, [r0, #0]
 800eaac:	6800      	ldr	r0, [r0, #0]
 800eaae:	f380 8808 	msr	MSP, r0
 800eab2:	f04f 0000 	mov.w	r0, #0
 800eab6:	f380 8814 	msr	CONTROL, r0
 800eaba:	b662      	cpsie	i
 800eabc:	b661      	cpsie	f
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	f3bf 8f6f 	isb	sy
 800eac6:	df00      	svc	0
 800eac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eaca:	bf00      	nop
 800eacc:	e000ed08 	.word	0xe000ed08

0800ead0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ead6:	4b37      	ldr	r3, [pc, #220]	; (800ebb4 <xPortStartScheduler+0xe4>)
 800ead8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	22ff      	movs	r2, #255	; 0xff
 800eae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eaf0:	78fb      	ldrb	r3, [r7, #3]
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eaf8:	b2da      	uxtb	r2, r3
 800eafa:	4b2f      	ldr	r3, [pc, #188]	; (800ebb8 <xPortStartScheduler+0xe8>)
 800eafc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eafe:	4b2f      	ldr	r3, [pc, #188]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb00:	2207      	movs	r2, #7
 800eb02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb04:	e009      	b.n	800eb1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eb06:	4b2d      	ldr	r3, [pc, #180]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	4a2b      	ldr	r2, [pc, #172]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb10:	78fb      	ldrb	r3, [r7, #3]
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	005b      	lsls	r3, r3, #1
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb1a:	78fb      	ldrb	r3, [r7, #3]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb22:	2b80      	cmp	r3, #128	; 0x80
 800eb24:	d0ef      	beq.n	800eb06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb26:	4b25      	ldr	r3, [pc, #148]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f1c3 0307 	rsb	r3, r3, #7
 800eb2e:	2b04      	cmp	r3, #4
 800eb30:	d00c      	beq.n	800eb4c <xPortStartScheduler+0x7c>
	__asm volatile
 800eb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb36:	b672      	cpsid	i
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	b662      	cpsie	i
 800eb46:	60bb      	str	r3, [r7, #8]
}
 800eb48:	bf00      	nop
 800eb4a:	e7fe      	b.n	800eb4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb4c:	4b1b      	ldr	r3, [pc, #108]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	021b      	lsls	r3, r3, #8
 800eb52:	4a1a      	ldr	r2, [pc, #104]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb56:	4b19      	ldr	r3, [pc, #100]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb5e:	4a17      	ldr	r2, [pc, #92]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	b2da      	uxtb	r2, r3
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb6a:	4b15      	ldr	r3, [pc, #84]	; (800ebc0 <xPortStartScheduler+0xf0>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	4a14      	ldr	r2, [pc, #80]	; (800ebc0 <xPortStartScheduler+0xf0>)
 800eb70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb76:	4b12      	ldr	r3, [pc, #72]	; (800ebc0 <xPortStartScheduler+0xf0>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4a11      	ldr	r2, [pc, #68]	; (800ebc0 <xPortStartScheduler+0xf0>)
 800eb7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb82:	f000 f8dd 	bl	800ed40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb86:	4b0f      	ldr	r3, [pc, #60]	; (800ebc4 <xPortStartScheduler+0xf4>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eb8c:	f000 f8fc 	bl	800ed88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eb90:	4b0d      	ldr	r3, [pc, #52]	; (800ebc8 <xPortStartScheduler+0xf8>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a0c      	ldr	r2, [pc, #48]	; (800ebc8 <xPortStartScheduler+0xf8>)
 800eb96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eb9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eb9c:	f7ff ff84 	bl	800eaa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eba0:	f7ff fa58 	bl	800e054 <vTaskSwitchContext>
	prvTaskExitError();
 800eba4:	f7ff ff38 	bl	800ea18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	e000e400 	.word	0xe000e400
 800ebb8:	20000cb8 	.word	0x20000cb8
 800ebbc:	20000cbc 	.word	0x20000cbc
 800ebc0:	e000ed20 	.word	0xe000ed20
 800ebc4:	20000020 	.word	0x20000020
 800ebc8:	e000ef34 	.word	0xe000ef34

0800ebcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
	__asm volatile
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	b672      	cpsid	i
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	b662      	cpsie	i
 800ebe6:	607b      	str	r3, [r7, #4]
}
 800ebe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ebea:	4b10      	ldr	r3, [pc, #64]	; (800ec2c <vPortEnterCritical+0x60>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	4a0e      	ldr	r2, [pc, #56]	; (800ec2c <vPortEnterCritical+0x60>)
 800ebf2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ebf4:	4b0d      	ldr	r3, [pc, #52]	; (800ec2c <vPortEnterCritical+0x60>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d111      	bne.n	800ec20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ebfc:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <vPortEnterCritical+0x64>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00c      	beq.n	800ec20 <vPortEnterCritical+0x54>
	__asm volatile
 800ec06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0a:	b672      	cpsid	i
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	b662      	cpsie	i
 800ec1a:	603b      	str	r3, [r7, #0]
}
 800ec1c:	bf00      	nop
 800ec1e:	e7fe      	b.n	800ec1e <vPortEnterCritical+0x52>
	}
}
 800ec20:	bf00      	nop
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	20000020 	.word	0x20000020
 800ec30:	e000ed04 	.word	0xe000ed04

0800ec34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec3a:	4b13      	ldr	r3, [pc, #76]	; (800ec88 <vPortExitCritical+0x54>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10c      	bne.n	800ec5c <vPortExitCritical+0x28>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec46:	b672      	cpsid	i
 800ec48:	f383 8811 	msr	BASEPRI, r3
 800ec4c:	f3bf 8f6f 	isb	sy
 800ec50:	f3bf 8f4f 	dsb	sy
 800ec54:	b662      	cpsie	i
 800ec56:	607b      	str	r3, [r7, #4]
}
 800ec58:	bf00      	nop
 800ec5a:	e7fe      	b.n	800ec5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ec5c:	4b0a      	ldr	r3, [pc, #40]	; (800ec88 <vPortExitCritical+0x54>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3b01      	subs	r3, #1
 800ec62:	4a09      	ldr	r2, [pc, #36]	; (800ec88 <vPortExitCritical+0x54>)
 800ec64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec66:	4b08      	ldr	r3, [pc, #32]	; (800ec88 <vPortExitCritical+0x54>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d105      	bne.n	800ec7a <vPortExitCritical+0x46>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	f383 8811 	msr	BASEPRI, r3
}
 800ec78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec7a:	bf00      	nop
 800ec7c:	370c      	adds	r7, #12
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	20000020 	.word	0x20000020
 800ec8c:	00000000 	.word	0x00000000

0800ec90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec90:	f3ef 8009 	mrs	r0, PSP
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	4b15      	ldr	r3, [pc, #84]	; (800ecf0 <pxCurrentTCBConst>)
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	f01e 0f10 	tst.w	lr, #16
 800eca0:	bf08      	it	eq
 800eca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecaa:	6010      	str	r0, [r2, #0]
 800ecac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ecb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ecb4:	b672      	cpsid	i
 800ecb6:	f380 8811 	msr	BASEPRI, r0
 800ecba:	f3bf 8f4f 	dsb	sy
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	b662      	cpsie	i
 800ecc4:	f7ff f9c6 	bl	800e054 <vTaskSwitchContext>
 800ecc8:	f04f 0000 	mov.w	r0, #0
 800eccc:	f380 8811 	msr	BASEPRI, r0
 800ecd0:	bc09      	pop	{r0, r3}
 800ecd2:	6819      	ldr	r1, [r3, #0]
 800ecd4:	6808      	ldr	r0, [r1, #0]
 800ecd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecda:	f01e 0f10 	tst.w	lr, #16
 800ecde:	bf08      	it	eq
 800ece0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ece4:	f380 8809 	msr	PSP, r0
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop

0800ecf0 <pxCurrentTCBConst>:
 800ecf0:	20000b8c 	.word	0x20000b8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ecf4:	bf00      	nop
 800ecf6:	bf00      	nop

0800ecf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
	__asm volatile
 800ecfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed02:	b672      	cpsid	i
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	b662      	cpsie	i
 800ed12:	607b      	str	r3, [r7, #4]
}
 800ed14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed16:	f7ff f8e3 	bl	800dee0 <xTaskIncrementTick>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d003      	beq.n	800ed28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed20:	4b06      	ldr	r3, [pc, #24]	; (800ed3c <SysTick_Handler+0x44>)
 800ed22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed26:	601a      	str	r2, [r3, #0]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	f383 8811 	msr	BASEPRI, r3
}
 800ed32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed34:	bf00      	nop
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	e000ed04 	.word	0xe000ed04

0800ed40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed40:	b480      	push	{r7}
 800ed42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed44:	4b0b      	ldr	r3, [pc, #44]	; (800ed74 <vPortSetupTimerInterrupt+0x34>)
 800ed46:	2200      	movs	r2, #0
 800ed48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed4a:	4b0b      	ldr	r3, [pc, #44]	; (800ed78 <vPortSetupTimerInterrupt+0x38>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed50:	4b0a      	ldr	r3, [pc, #40]	; (800ed7c <vPortSetupTimerInterrupt+0x3c>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a0a      	ldr	r2, [pc, #40]	; (800ed80 <vPortSetupTimerInterrupt+0x40>)
 800ed56:	fba2 2303 	umull	r2, r3, r2, r3
 800ed5a:	099b      	lsrs	r3, r3, #6
 800ed5c:	4a09      	ldr	r2, [pc, #36]	; (800ed84 <vPortSetupTimerInterrupt+0x44>)
 800ed5e:	3b01      	subs	r3, #1
 800ed60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed62:	4b04      	ldr	r3, [pc, #16]	; (800ed74 <vPortSetupTimerInterrupt+0x34>)
 800ed64:	2207      	movs	r2, #7
 800ed66:	601a      	str	r2, [r3, #0]
}
 800ed68:	bf00      	nop
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr
 800ed72:	bf00      	nop
 800ed74:	e000e010 	.word	0xe000e010
 800ed78:	e000e018 	.word	0xe000e018
 800ed7c:	20000014 	.word	0x20000014
 800ed80:	10624dd3 	.word	0x10624dd3
 800ed84:	e000e014 	.word	0xe000e014

0800ed88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ed88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ed98 <vPortEnableVFP+0x10>
 800ed8c:	6801      	ldr	r1, [r0, #0]
 800ed8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ed92:	6001      	str	r1, [r0, #0]
 800ed94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ed96:	bf00      	nop
 800ed98:	e000ed88 	.word	0xe000ed88

0800ed9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eda2:	f3ef 8305 	mrs	r3, IPSR
 800eda6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2b0f      	cmp	r3, #15
 800edac:	d916      	bls.n	800eddc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edae:	4a19      	ldr	r2, [pc, #100]	; (800ee14 <vPortValidateInterruptPriority+0x78>)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4413      	add	r3, r2
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800edb8:	4b17      	ldr	r3, [pc, #92]	; (800ee18 <vPortValidateInterruptPriority+0x7c>)
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	7afa      	ldrb	r2, [r7, #11]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d20c      	bcs.n	800eddc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	b672      	cpsid	i
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	b662      	cpsie	i
 800edd6:	607b      	str	r3, [r7, #4]
}
 800edd8:	bf00      	nop
 800edda:	e7fe      	b.n	800edda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eddc:	4b0f      	ldr	r3, [pc, #60]	; (800ee1c <vPortValidateInterruptPriority+0x80>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ede4:	4b0e      	ldr	r3, [pc, #56]	; (800ee20 <vPortValidateInterruptPriority+0x84>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d90c      	bls.n	800ee06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	b672      	cpsid	i
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	b662      	cpsie	i
 800ee00:	603b      	str	r3, [r7, #0]
}
 800ee02:	bf00      	nop
 800ee04:	e7fe      	b.n	800ee04 <vPortValidateInterruptPriority+0x68>
	}
 800ee06:	bf00      	nop
 800ee08:	3714      	adds	r7, #20
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	e000e3f0 	.word	0xe000e3f0
 800ee18:	20000cb8 	.word	0x20000cb8
 800ee1c:	e000ed0c 	.word	0xe000ed0c
 800ee20:	20000cbc 	.word	0x20000cbc

0800ee24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b08a      	sub	sp, #40	; 0x28
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee30:	f7fe ff88 	bl	800dd44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee34:	4b5e      	ldr	r3, [pc, #376]	; (800efb0 <pvPortMalloc+0x18c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d101      	bne.n	800ee40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee3c:	f000 f920 	bl	800f080 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee40:	4b5c      	ldr	r3, [pc, #368]	; (800efb4 <pvPortMalloc+0x190>)
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4013      	ands	r3, r2
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f040 8092 	bne.w	800ef72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d01f      	beq.n	800ee94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ee54:	2208      	movs	r2, #8
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4413      	add	r3, r2
 800ee5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f003 0307 	and.w	r3, r3, #7
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d016      	beq.n	800ee94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f023 0307 	bic.w	r3, r3, #7
 800ee6c:	3308      	adds	r3, #8
 800ee6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f003 0307 	and.w	r3, r3, #7
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00c      	beq.n	800ee94 <pvPortMalloc+0x70>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	b672      	cpsid	i
 800ee80:	f383 8811 	msr	BASEPRI, r3
 800ee84:	f3bf 8f6f 	isb	sy
 800ee88:	f3bf 8f4f 	dsb	sy
 800ee8c:	b662      	cpsie	i
 800ee8e:	617b      	str	r3, [r7, #20]
}
 800ee90:	bf00      	nop
 800ee92:	e7fe      	b.n	800ee92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d06b      	beq.n	800ef72 <pvPortMalloc+0x14e>
 800ee9a:	4b47      	ldr	r3, [pc, #284]	; (800efb8 <pvPortMalloc+0x194>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d866      	bhi.n	800ef72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eea4:	4b45      	ldr	r3, [pc, #276]	; (800efbc <pvPortMalloc+0x198>)
 800eea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eea8:	4b44      	ldr	r3, [pc, #272]	; (800efbc <pvPortMalloc+0x198>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeae:	e004      	b.n	800eeba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d903      	bls.n	800eecc <pvPortMalloc+0xa8>
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1f1      	bne.n	800eeb0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eecc:	4b38      	ldr	r3, [pc, #224]	; (800efb0 <pvPortMalloc+0x18c>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d04d      	beq.n	800ef72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eed6:	6a3b      	ldr	r3, [r7, #32]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2208      	movs	r2, #8
 800eedc:	4413      	add	r3, r2
 800eede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeea:	685a      	ldr	r2, [r3, #4]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	1ad2      	subs	r2, r2, r3
 800eef0:	2308      	movs	r3, #8
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d921      	bls.n	800ef3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4413      	add	r3, r2
 800eefe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	f003 0307 	and.w	r3, r3, #7
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00c      	beq.n	800ef24 <pvPortMalloc+0x100>
	__asm volatile
 800ef0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0e:	b672      	cpsid	i
 800ef10:	f383 8811 	msr	BASEPRI, r3
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	f3bf 8f4f 	dsb	sy
 800ef1c:	b662      	cpsie	i
 800ef1e:	613b      	str	r3, [r7, #16]
}
 800ef20:	bf00      	nop
 800ef22:	e7fe      	b.n	800ef22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	685a      	ldr	r2, [r3, #4]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	1ad2      	subs	r2, r2, r3
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef36:	69b8      	ldr	r0, [r7, #24]
 800ef38:	f000 f904 	bl	800f144 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef3c:	4b1e      	ldr	r3, [pc, #120]	; (800efb8 <pvPortMalloc+0x194>)
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	1ad3      	subs	r3, r2, r3
 800ef46:	4a1c      	ldr	r2, [pc, #112]	; (800efb8 <pvPortMalloc+0x194>)
 800ef48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef4a:	4b1b      	ldr	r3, [pc, #108]	; (800efb8 <pvPortMalloc+0x194>)
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	4b1c      	ldr	r3, [pc, #112]	; (800efc0 <pvPortMalloc+0x19c>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d203      	bcs.n	800ef5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef56:	4b18      	ldr	r3, [pc, #96]	; (800efb8 <pvPortMalloc+0x194>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a19      	ldr	r2, [pc, #100]	; (800efc0 <pvPortMalloc+0x19c>)
 800ef5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef60:	685a      	ldr	r2, [r3, #4]
 800ef62:	4b14      	ldr	r3, [pc, #80]	; (800efb4 <pvPortMalloc+0x190>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	431a      	orrs	r2, r3
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	2200      	movs	r2, #0
 800ef70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ef72:	f7fe fef5 	bl	800dd60 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d101      	bne.n	800ef80 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ef7c:	f7f1 ff0e 	bl	8000d9c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	f003 0307 	and.w	r3, r3, #7
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00c      	beq.n	800efa4 <pvPortMalloc+0x180>
	__asm volatile
 800ef8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8e:	b672      	cpsid	i
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	b662      	cpsie	i
 800ef9e:	60fb      	str	r3, [r7, #12]
}
 800efa0:	bf00      	nop
 800efa2:	e7fe      	b.n	800efa2 <pvPortMalloc+0x17e>
	return pvReturn;
 800efa4:	69fb      	ldr	r3, [r7, #28]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3728      	adds	r7, #40	; 0x28
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	20008cc8 	.word	0x20008cc8
 800efb4:	20008cd4 	.word	0x20008cd4
 800efb8:	20008ccc 	.word	0x20008ccc
 800efbc:	20008cc0 	.word	0x20008cc0
 800efc0:	20008cd0 	.word	0x20008cd0

0800efc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d04c      	beq.n	800f070 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800efd6:	2308      	movs	r3, #8
 800efd8:	425b      	negs	r3, r3
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	4413      	add	r3, r2
 800efde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	4b23      	ldr	r3, [pc, #140]	; (800f078 <vPortFree+0xb4>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4013      	ands	r3, r2
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d10c      	bne.n	800f00c <vPortFree+0x48>
	__asm volatile
 800eff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff6:	b672      	cpsid	i
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	b662      	cpsie	i
 800f006:	60fb      	str	r3, [r7, #12]
}
 800f008:	bf00      	nop
 800f00a:	e7fe      	b.n	800f00a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00c      	beq.n	800f02e <vPortFree+0x6a>
	__asm volatile
 800f014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f018:	b672      	cpsid	i
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	b662      	cpsie	i
 800f028:	60bb      	str	r3, [r7, #8]
}
 800f02a:	bf00      	nop
 800f02c:	e7fe      	b.n	800f02c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	685a      	ldr	r2, [r3, #4]
 800f032:	4b11      	ldr	r3, [pc, #68]	; (800f078 <vPortFree+0xb4>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4013      	ands	r3, r2
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d019      	beq.n	800f070 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d115      	bne.n	800f070 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	4b0b      	ldr	r3, [pc, #44]	; (800f078 <vPortFree+0xb4>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	43db      	mvns	r3, r3
 800f04e:	401a      	ands	r2, r3
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f054:	f7fe fe76 	bl	800dd44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	685a      	ldr	r2, [r3, #4]
 800f05c:	4b07      	ldr	r3, [pc, #28]	; (800f07c <vPortFree+0xb8>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4413      	add	r3, r2
 800f062:	4a06      	ldr	r2, [pc, #24]	; (800f07c <vPortFree+0xb8>)
 800f064:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f066:	6938      	ldr	r0, [r7, #16]
 800f068:	f000 f86c 	bl	800f144 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f06c:	f7fe fe78 	bl	800dd60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f070:	bf00      	nop
 800f072:	3718      	adds	r7, #24
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	20008cd4 	.word	0x20008cd4
 800f07c:	20008ccc 	.word	0x20008ccc

0800f080 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f08a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f08c:	4b27      	ldr	r3, [pc, #156]	; (800f12c <prvHeapInit+0xac>)
 800f08e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f003 0307 	and.w	r3, r3, #7
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00c      	beq.n	800f0b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	3307      	adds	r3, #7
 800f09e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f023 0307 	bic.w	r3, r3, #7
 800f0a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f0a8:	68ba      	ldr	r2, [r7, #8]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	4a1f      	ldr	r2, [pc, #124]	; (800f12c <prvHeapInit+0xac>)
 800f0b0:	4413      	add	r3, r2
 800f0b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0b8:	4a1d      	ldr	r2, [pc, #116]	; (800f130 <prvHeapInit+0xb0>)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f0be:	4b1c      	ldr	r3, [pc, #112]	; (800f130 <prvHeapInit+0xb0>)
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68ba      	ldr	r2, [r7, #8]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f0cc:	2208      	movs	r2, #8
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	1a9b      	subs	r3, r3, r2
 800f0d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f023 0307 	bic.w	r3, r3, #7
 800f0da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	4a15      	ldr	r2, [pc, #84]	; (800f134 <prvHeapInit+0xb4>)
 800f0e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f0e2:	4b14      	ldr	r3, [pc, #80]	; (800f134 <prvHeapInit+0xb4>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f0ea:	4b12      	ldr	r3, [pc, #72]	; (800f134 <prvHeapInit+0xb4>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	1ad2      	subs	r2, r2, r3
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f100:	4b0c      	ldr	r3, [pc, #48]	; (800f134 <prvHeapInit+0xb4>)
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	4a0a      	ldr	r2, [pc, #40]	; (800f138 <prvHeapInit+0xb8>)
 800f10e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	4a09      	ldr	r2, [pc, #36]	; (800f13c <prvHeapInit+0xbc>)
 800f116:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f118:	4b09      	ldr	r3, [pc, #36]	; (800f140 <prvHeapInit+0xc0>)
 800f11a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f11e:	601a      	str	r2, [r3, #0]
}
 800f120:	bf00      	nop
 800f122:	3714      	adds	r7, #20
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	20000cc0 	.word	0x20000cc0
 800f130:	20008cc0 	.word	0x20008cc0
 800f134:	20008cc8 	.word	0x20008cc8
 800f138:	20008cd0 	.word	0x20008cd0
 800f13c:	20008ccc 	.word	0x20008ccc
 800f140:	20008cd4 	.word	0x20008cd4

0800f144 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f14c:	4b28      	ldr	r3, [pc, #160]	; (800f1f0 <prvInsertBlockIntoFreeList+0xac>)
 800f14e:	60fb      	str	r3, [r7, #12]
 800f150:	e002      	b.n	800f158 <prvInsertBlockIntoFreeList+0x14>
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	60fb      	str	r3, [r7, #12]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d8f7      	bhi.n	800f152 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	4413      	add	r3, r2
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	429a      	cmp	r2, r3
 800f172:	d108      	bne.n	800f186 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	685a      	ldr	r2, [r3, #4]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	441a      	add	r2, r3
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	68ba      	ldr	r2, [r7, #8]
 800f190:	441a      	add	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	429a      	cmp	r2, r3
 800f198:	d118      	bne.n	800f1cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	4b15      	ldr	r3, [pc, #84]	; (800f1f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d00d      	beq.n	800f1c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	685a      	ldr	r2, [r3, #4]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	441a      	add	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	601a      	str	r2, [r3, #0]
 800f1c0:	e008      	b.n	800f1d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f1c2:	4b0c      	ldr	r3, [pc, #48]	; (800f1f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f1c4:	681a      	ldr	r2, [r3, #0]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	e003      	b.n	800f1d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d002      	beq.n	800f1e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1e2:	bf00      	nop
 800f1e4:	3714      	adds	r7, #20
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop
 800f1f0:	20008cc0 	.word	0x20008cc0
 800f1f4:	20008cc8 	.word	0x20008cc8

0800f1f8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800f1fc:	f005 feb2 	bl	8014f64 <touchgfx_init>
}
 800f200:	bf00      	nop
 800f202:	bd80      	pop	{r7, pc}

0800f204 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800f208:	f005 fed6 	bl	8014fb8 <touchgfx_taskEntry>
}
 800f20c:	bf00      	nop
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
    {
 800f218:	4a04      	ldr	r2, [pc, #16]	; (800f22c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	601a      	str	r2, [r3, #0]
    }
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	4618      	mov	r0, r3
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	08026f1c 	.word	0x08026f1c

0800f230 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
    }
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f7ff ffe9 	bl	800f210 <_ZN8touchgfx12FontProviderD1Ev>
 800f23e:	2104      	movs	r1, #4
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f016 f8ad 	bl	80253a0 <_ZdlPvj>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4618      	mov	r0, r3
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f25c:	887b      	ldrh	r3, [r7, #2]
 800f25e:	2b07      	cmp	r3, #7
 800f260:	d83a      	bhi.n	800f2d8 <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800f262:	a201      	add	r2, pc, #4	; (adr r2, 800f268 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800f264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f268:	0800f289 	.word	0x0800f289
 800f26c:	0800f293 	.word	0x0800f293
 800f270:	0800f29d 	.word	0x0800f29d
 800f274:	0800f2a7 	.word	0x0800f2a7
 800f278:	0800f2b1 	.word	0x0800f2b1
 800f27c:	0800f2bb 	.word	0x0800f2bb
 800f280:	0800f2c5 	.word	0x0800f2c5
 800f284:	0800f2cf 	.word	0x0800f2cf
    {
    case Typography::DEFAULT:
        // Asap_Bold_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f288:	f003 fdf0 	bl	8012e6c <_ZN17TypedTextDatabase8getFontsEv>
 800f28c:	4603      	mov	r3, r0
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	e023      	b.n	800f2da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f292:	f003 fdeb 	bl	8012e6c <_ZN17TypedTextDatabase8getFontsEv>
 800f296:	4603      	mov	r3, r0
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	e01e      	b.n	800f2da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f29c:	f003 fde6 	bl	8012e6c <_ZN17TypedTextDatabase8getFontsEv>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	e019      	b.n	800f2da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f2a6:	f003 fde1 	bl	8012e6c <_ZN17TypedTextDatabase8getFontsEv>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	e014      	b.n	800f2da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800f2b0:	f003 fddc 	bl	8012e6c <_ZN17TypedTextDatabase8getFontsEv>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	e00f      	b.n	800f2da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800f2ba:	f003 fdd7 	bl	8012e6c <_ZN17TypedTextDatabase8getFontsEv>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	691b      	ldr	r3, [r3, #16]
 800f2c2:	e00a      	b.n	800f2da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800f2c4:	f003 fdd2 	bl	8012e6c <_ZN17TypedTextDatabase8getFontsEv>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	695b      	ldr	r3, [r3, #20]
 800f2cc:	e005      	b.n	800f2da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800f2ce:	f003 fdcd 	bl	8012e6c <_ZN17TypedTextDatabase8getFontsEv>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	699b      	ldr	r3, [r3, #24]
 800f2d6:	e000      	b.n	800f2da <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800f2d8:	2300      	movs	r3, #0
    }
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop

0800f2e4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	4a05      	ldr	r2, [pc, #20]	; (800f304 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	601a      	str	r2, [r3, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7ff ff8b 	bl	800f210 <_ZN8touchgfx12FontProviderD1Ev>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3708      	adds	r7, #8
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	08026f08 	.word	0x08026f08

0800f308 <_ZN23ApplicationFontProviderD0Ev>:
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7ff ffe7 	bl	800f2e4 <_ZN23ApplicationFontProviderD1Ev>
 800f316:	2104      	movs	r1, #4
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f016 f841 	bl	80253a0 <_ZdlPvj>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	4a04      	ldr	r2, [pc, #16]	; (800f344 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	601a      	str	r2, [r3, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4618      	mov	r0, r3
 800f33a:	370c      	adds	r7, #12
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr
 800f344:	08028f44 	.word	0x08028f44

0800f348 <_ZN8touchgfx4FontD0Ev>:
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7ff ffe9 	bl	800f328 <_ZN8touchgfx4FontD1Ev>
 800f356:	2110      	movs	r1, #16
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f016 f821 	bl	80253a0 <_ZdlPvj>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4618      	mov	r0, r3
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f368:	b590      	push	{r4, r7, lr}
 800f36a:	b087      	sub	sp, #28
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	460b      	mov	r3, r1
 800f372:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800f374:	2300      	movs	r3, #0
 800f376:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f378:	2300      	movs	r3, #0
 800f37a:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	3308      	adds	r3, #8
 800f382:	681c      	ldr	r4, [r3, #0]
 800f384:	f107 030f 	add.w	r3, r7, #15
 800f388:	f107 0210 	add.w	r2, r7, #16
 800f38c:	8879      	ldrh	r1, [r7, #2]
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	47a0      	blx	r4
 800f392:	6178      	str	r0, [r7, #20]
        return glyph;
 800f394:	697b      	ldr	r3, [r7, #20]
    }
 800f396:	4618      	mov	r0, r3
 800f398:	371c      	adds	r7, #28
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd90      	pop	{r4, r7, pc}

0800f39e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f39e:	b480      	push	{r7}
 800f3a0:	b083      	sub	sp, #12
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	895b      	ldrh	r3, [r3, #10]
    }
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	370c      	adds	r7, #12
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr

0800f3b6 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f3b6:	b480      	push	{r7}
 800f3b8:	b083      	sub	sp, #12
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	899b      	ldrh	r3, [r3, #12]
    }
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	370c      	adds	r7, #12
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr

0800f3ce <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800f3ce:	b480      	push	{r7}
 800f3d0:	b083      	sub	sp, #12
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	889b      	ldrh	r3, [r3, #4]
    }
 800f3da:	4618      	mov	r0, r3
 800f3dc:	370c      	adds	r7, #12
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800f3e6:	b480      	push	{r7}
 800f3e8:	b083      	sub	sp, #12
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	889a      	ldrh	r2, [r3, #4]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	799b      	ldrb	r3, [r3, #6]
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	4413      	add	r3, r2
 800f3fa:	b29b      	uxth	r3, r3
    }
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	79db      	ldrb	r3, [r3, #7]
 800f414:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f418:	b2db      	uxtb	r3, r3
    }
 800f41a:	4618      	mov	r0, r3
 800f41c:	370c      	adds	r7, #12
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800f426:	b480      	push	{r7}
 800f428:	b083      	sub	sp, #12
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	79db      	ldrb	r3, [r3, #7]
 800f432:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f436:	b2db      	uxtb	r3, r3
    }
 800f438:	4618      	mov	r0, r3
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	4a05      	ldr	r2, [pc, #20]	; (800f464 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	601a      	str	r2, [r3, #0]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	4618      	mov	r0, r3
 800f456:	f7ff ff67 	bl	800f328 <_ZN8touchgfx4FontD1Ev>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4618      	mov	r0, r3
 800f45e:	3708      	adds	r7, #8
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	08028ffc 	.word	0x08028ffc

0800f468 <_ZN8touchgfx9ConstFontD0Ev>:
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff ffe7 	bl	800f444 <_ZN8touchgfx9ConstFontD1Ev>
 800f476:	2118      	movs	r1, #24
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f015 ff91 	bl	80253a0 <_ZdlPvj>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4618      	mov	r0, r3
 800f482:	3708      	adds	r7, #8
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	4a05      	ldr	r2, [pc, #20]	; (800f4a8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	601a      	str	r2, [r3, #0]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff ffd3 	bl	800f444 <_ZN8touchgfx9ConstFontD1Ev>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	08026f30 	.word	0x08026f30

0800f4ac <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7ff ffe7 	bl	800f488 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4ba:	2124      	movs	r1, #36	; 0x24
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f015 ff6f 	bl	80253a0 <_ZdlPvj>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 f82d 	bl	800f534 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f4da:	4b08      	ldr	r3, [pc, #32]	; (800f4fc <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	4b08      	ldr	r3, [pc, #32]	; (800f500 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f4e0:	6819      	ldr	r1, [r3, #0]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	881b      	ldrh	r3, [r3, #0]
 800f4e6:	005b      	lsls	r3, r3, #1
 800f4e8:	440b      	add	r3, r1
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	4413      	add	r3, r2
 800f4f0:	681b      	ldr	r3, [r3, #0]
    }
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	2000c5fc 	.word	0x2000c5fc
 800f500:	2000c5f4 	.word	0x2000c5f4

0800f504 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f811 	bl	800f534 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f512:	4b07      	ldr	r3, [pc, #28]	; (800f530 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	005b      	lsls	r3, r3, #1
 800f51c:	4413      	add	r3, r2
 800f51e:	785b      	ldrb	r3, [r3, #1]
 800f520:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f524:	b2db      	uxtb	r3, r3
    }
 800f526:	4618      	mov	r0, r3
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	2000c5f4 	.word	0x2000c5f4

0800f534 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f53c:	4b0c      	ldr	r3, [pc, #48]	; (800f570 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d105      	bne.n	800f550 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f544:	4b0b      	ldr	r3, [pc, #44]	; (800f574 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f546:	4a0c      	ldr	r2, [pc, #48]	; (800f578 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f548:	21de      	movs	r1, #222	; 0xde
 800f54a:	480c      	ldr	r0, [pc, #48]	; (800f57c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f54c:	f015 ff56 	bl	80253fc <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	881a      	ldrh	r2, [r3, #0]
 800f554:	4b0a      	ldr	r3, [pc, #40]	; (800f580 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f556:	881b      	ldrh	r3, [r3, #0]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d305      	bcc.n	800f568 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f55c:	4b09      	ldr	r3, [pc, #36]	; (800f584 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f55e:	4a06      	ldr	r2, [pc, #24]	; (800f578 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f560:	21df      	movs	r1, #223	; 0xdf
 800f562:	4806      	ldr	r0, [pc, #24]	; (800f57c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f564:	f015 ff4a 	bl	80253fc <__assert_func>
    }
 800f568:	bf00      	nop
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	2000c5f4 	.word	0x2000c5f4
 800f574:	080264cc 	.word	0x080264cc
 800f578:	08026510 	.word	0x08026510
 800f57c:	08026540 	.word	0x08026540
 800f580:	2000c5f8 	.word	0x2000c5f8
 800f584:	08026584 	.word	0x08026584

0800f588 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	7b5b      	ldrb	r3, [r3, #13]
 800f594:	021b      	lsls	r3, r3, #8
 800f596:	b21b      	sxth	r3, r3
 800f598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f59c:	b21a      	sxth	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	7adb      	ldrb	r3, [r3, #11]
 800f5a2:	b21b      	sxth	r3, r3
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	b21b      	sxth	r3, r3
 800f5a8:	b29b      	uxth	r3, r3
    }
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6a1b      	ldr	r3, [r3, #32]
    }
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	370c      	adds	r7, #12
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr
	...

0800f5d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b08c      	sub	sp, #48	; 0x30
 800f5d4:	af08      	add	r7, sp, #32
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	4611      	mov	r1, r2
 800f5dc:	461a      	mov	r2, r3
 800f5de:	460b      	mov	r3, r1
 800f5e0:	80fb      	strh	r3, [r7, #6]
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	88b9      	ldrh	r1, [r7, #4]
 800f5ea:	88fa      	ldrh	r2, [r7, #6]
 800f5ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f5ee:	9306      	str	r3, [sp, #24]
 800f5f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f5f2:	9305      	str	r3, [sp, #20]
 800f5f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5f8:	9304      	str	r3, [sp, #16]
 800f5fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f5fe:	9303      	str	r3, [sp, #12]
 800f600:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f604:	9302      	str	r3, [sp, #8]
 800f606:	7f3b      	ldrb	r3, [r7, #28]
 800f608:	9301      	str	r3, [sp, #4]
 800f60a:	7e3b      	ldrb	r3, [r7, #24]
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	460b      	mov	r3, r1
 800f610:	68b9      	ldr	r1, [r7, #8]
 800f612:	f00a fbe7 	bl	8019de4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f616:	4a08      	ldr	r2, [pc, #32]	; (800f638 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	601a      	str	r2, [r3, #0]
    glyphData(glyphDataInternalFlash),
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f620:	619a      	str	r2, [r3, #24]
    kerningData(kerningList),
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f626:	61da      	str	r2, [r3, #28]
    gsubTable(gsubData)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f62c:	621a      	str	r2, [r3, #32]
{
}
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	4618      	mov	r0, r3
 800f632:	3710      	adds	r7, #16
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	08026f30 	.word	0x08026f30

0800f63c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f63c:	b480      	push	{r7}
 800f63e:	b085      	sub	sp, #20
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	699b      	ldr	r3, [r3, #24]
 800f64a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	889b      	ldrh	r3, [r3, #4]
 800f650:	0adb      	lsrs	r3, r3, #11
 800f652:	b29b      	uxth	r3, r3
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	68fa      	ldr	r2, [r7, #12]
 800f658:	4413      	add	r3, r2
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4413      	add	r3, r2
}
 800f662:	4618      	mov	r0, r3
 800f664:	3714      	adds	r7, #20
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr

0800f66e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b086      	sub	sp, #24
 800f672:	af00      	add	r7, sp, #0
 800f674:	60f8      	str	r0, [r7, #12]
 800f676:	460b      	mov	r3, r1
 800f678:	607a      	str	r2, [r7, #4]
 800f67a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d003      	beq.n	800f68a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	7b1b      	ldrb	r3, [r3, #12]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d101      	bne.n	800f68e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f68a:	2300      	movs	r3, #0
 800f68c:	e023      	b.n	800f6d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7ff ff7a 	bl	800f588 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800f694:	4603      	mov	r3, r0
 800f696:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f698:	8abb      	ldrh	r3, [r7, #20]
 800f69a:	82fb      	strh	r3, [r7, #22]
 800f69c:	e013      	b.n	800f6c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x58>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	69da      	ldr	r2, [r3, #28]
 800f6a2:	8afb      	ldrh	r3, [r7, #22]
 800f6a4:	009b      	lsls	r3, r3, #2
 800f6a6:	4413      	add	r3, r2
 800f6a8:	881b      	ldrh	r3, [r3, #0]
 800f6aa:	897a      	ldrh	r2, [r7, #10]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d107      	bne.n	800f6c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
        {
            return kerningData[i].distance;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	69da      	ldr	r2, [r3, #28]
 800f6b4:	8afb      	ldrh	r3, [r7, #22]
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	4413      	add	r3, r2
 800f6ba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f6be:	e00a      	b.n	800f6d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800f6c0:	8afb      	ldrh	r3, [r7, #22]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	82fb      	strh	r3, [r7, #22]
 800f6c6:	8afa      	ldrh	r2, [r7, #22]
 800f6c8:	8abb      	ldrh	r3, [r7, #20]
 800f6ca:	6879      	ldr	r1, [r7, #4]
 800f6cc:	7b09      	ldrb	r1, [r1, #12]
 800f6ce:	440b      	add	r3, r1
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	dbe4      	blt.n	800f69e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x30>
        }
    }
    return 0;
 800f6d4:	2300      	movs	r3, #0
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3718      	adds	r7, #24
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
	...

0800f6e0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	4801      	ldr	r0, [pc, #4]	; (800f6ec <__tcf_0+0xc>)
 800f6e6:	f7ff fecf 	bl	800f488 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	20008cd8 	.word	0x20008cd8

0800f6f0 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b08a      	sub	sp, #40	; 0x28
 800f6f4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 800f6f6:	4b1e      	ldr	r3, [pc, #120]	; (800f770 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f3bf 8f5b 	dmb	ish
 800f6fe:	f003 0301 	and.w	r3, r3, #1
 800f702:	2b00      	cmp	r3, #0
 800f704:	bf0c      	ite	eq
 800f706:	2301      	moveq	r3, #1
 800f708:	2300      	movne	r3, #0
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d02a      	beq.n	800f766 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f710:	4817      	ldr	r0, [pc, #92]	; (800f770 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f712:	f015 fe47 	bl	80253a4 <__cxa_guard_acquire>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	bf14      	ite	ne
 800f71c:	2301      	movne	r3, #1
 800f71e:	2300      	moveq	r3, #0
 800f720:	b2db      	uxtb	r3, r3
 800f722:	2b00      	cmp	r3, #0
 800f724:	d01f      	beq.n	800f766 <_Z25getFont_Asap_Bold_10_4bppv+0x76>
 800f726:	2300      	movs	r3, #0
 800f728:	9309      	str	r3, [sp, #36]	; 0x24
 800f72a:	2300      	movs	r3, #0
 800f72c:	9308      	str	r3, [sp, #32]
 800f72e:	233f      	movs	r3, #63	; 0x3f
 800f730:	9307      	str	r3, [sp, #28]
 800f732:	4b10      	ldr	r3, [pc, #64]	; (800f774 <_Z25getFont_Asap_Bold_10_4bppv+0x84>)
 800f734:	9306      	str	r3, [sp, #24]
 800f736:	4b10      	ldr	r3, [pc, #64]	; (800f778 <_Z25getFont_Asap_Bold_10_4bppv+0x88>)
 800f738:	9305      	str	r3, [sp, #20]
 800f73a:	2301      	movs	r3, #1
 800f73c:	9304      	str	r3, [sp, #16]
 800f73e:	2300      	movs	r3, #0
 800f740:	9303      	str	r3, [sp, #12]
 800f742:	2301      	movs	r3, #1
 800f744:	9302      	str	r3, [sp, #8]
 800f746:	2304      	movs	r3, #4
 800f748:	9301      	str	r3, [sp, #4]
 800f74a:	2300      	movs	r3, #0
 800f74c:	9300      	str	r3, [sp, #0]
 800f74e:	230a      	movs	r3, #10
 800f750:	2204      	movs	r2, #4
 800f752:	490a      	ldr	r1, [pc, #40]	; (800f77c <_Z25getFont_Asap_Bold_10_4bppv+0x8c>)
 800f754:	480a      	ldr	r0, [pc, #40]	; (800f780 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
 800f756:	f7ff ff3b 	bl	800f5d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f75a:	480a      	ldr	r0, [pc, #40]	; (800f784 <_Z25getFont_Asap_Bold_10_4bppv+0x94>)
 800f75c:	f015 fe6c 	bl	8025438 <atexit>
 800f760:	4803      	ldr	r0, [pc, #12]	; (800f770 <_Z25getFont_Asap_Bold_10_4bppv+0x80>)
 800f762:	f015 fe2b 	bl	80253bc <__cxa_guard_release>
    return Asap_Bold_10_4bpp;
 800f766:	4b06      	ldr	r3, [pc, #24]	; (800f780 <_Z25getFont_Asap_Bold_10_4bppv+0x90>)
}
 800f768:	4618      	mov	r0, r3
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	20008cfc 	.word	0x20008cfc
 800f774:	0802df24 	.word	0x0802df24
 800f778:	08026f7c 	.word	0x08026f7c
 800f77c:	0802df48 	.word	0x0802df48
 800f780:	20008cd8 	.word	0x20008cd8
 800f784:	0800f6e1 	.word	0x0800f6e1

0800f788 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 13, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	4801      	ldr	r0, [pc, #4]	; (800f794 <__tcf_0+0xc>)
 800f78e:	f7ff fe7b 	bl	800f488 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f792:	bd80      	pop	{r7, pc}
 800f794:	20008d00 	.word	0x20008d00

0800f798 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b08a      	sub	sp, #40	; 0x28
 800f79c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 13, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 800f79e:	4b1e      	ldr	r3, [pc, #120]	; (800f818 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f3bf 8f5b 	dmb	ish
 800f7a6:	f003 0301 	and.w	r3, r3, #1
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	bf0c      	ite	eq
 800f7ae:	2301      	moveq	r3, #1
 800f7b0:	2300      	movne	r3, #0
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d02a      	beq.n	800f80e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800f7b8:	4817      	ldr	r0, [pc, #92]	; (800f818 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f7ba:	f015 fdf3 	bl	80253a4 <__cxa_guard_acquire>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	bf14      	ite	ne
 800f7c4:	2301      	movne	r3, #1
 800f7c6:	2300      	moveq	r3, #0
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d01f      	beq.n	800f80e <_Z25getFont_Asap_Bold_12_4bppv+0x76>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	9308      	str	r3, [sp, #32]
 800f7d6:	233f      	movs	r3, #63	; 0x3f
 800f7d8:	9307      	str	r3, [sp, #28]
 800f7da:	4b10      	ldr	r3, [pc, #64]	; (800f81c <_Z25getFont_Asap_Bold_12_4bppv+0x84>)
 800f7dc:	9306      	str	r3, [sp, #24]
 800f7de:	4b10      	ldr	r3, [pc, #64]	; (800f820 <_Z25getFont_Asap_Bold_12_4bppv+0x88>)
 800f7e0:	9305      	str	r3, [sp, #20]
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	9304      	str	r3, [sp, #16]
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	9303      	str	r3, [sp, #12]
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	9302      	str	r3, [sp, #8]
 800f7ee:	2304      	movs	r3, #4
 800f7f0:	9301      	str	r3, [sp, #4]
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	230c      	movs	r3, #12
 800f7f8:	220d      	movs	r2, #13
 800f7fa:	490a      	ldr	r1, [pc, #40]	; (800f824 <_Z25getFont_Asap_Bold_12_4bppv+0x8c>)
 800f7fc:	480a      	ldr	r0, [pc, #40]	; (800f828 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
 800f7fe:	f7ff fee7 	bl	800f5d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f802:	480a      	ldr	r0, [pc, #40]	; (800f82c <_Z25getFont_Asap_Bold_12_4bppv+0x94>)
 800f804:	f015 fe18 	bl	8025438 <atexit>
 800f808:	4803      	ldr	r0, [pc, #12]	; (800f818 <_Z25getFont_Asap_Bold_12_4bppv+0x80>)
 800f80a:	f015 fdd7 	bl	80253bc <__cxa_guard_release>
    return Asap_Bold_12_4bpp;
 800f80e:	4b06      	ldr	r3, [pc, #24]	; (800f828 <_Z25getFont_Asap_Bold_12_4bppv+0x90>)
}
 800f810:	4618      	mov	r0, r3
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	20008d24 	.word	0x20008d24
 800f81c:	0802df28 	.word	0x0802df28
 800f820:	08026f80 	.word	0x08026f80
 800f824:	0802df80 	.word	0x0802df80
 800f828:	20008d00 	.word	0x20008d00
 800f82c:	0800f789 	.word	0x0800f789

0800f830 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_14_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_14_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_14_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_14_4bpp(glyphs_Asap_Bold_14_4bpp, 27, 14, 0, 4, 1, 0, 1, unicodes_Asap_Bold_14_4bpp, kerning_Asap_Bold_14_4bpp, 0, 0, 0);
 800f830:	b580      	push	{r7, lr}
 800f832:	af00      	add	r7, sp, #0
 800f834:	4801      	ldr	r0, [pc, #4]	; (800f83c <__tcf_0+0xc>)
 800f836:	f7ff fe27 	bl	800f488 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	20008d28 	.word	0x20008d28

0800f840 <_Z25getFont_Asap_Bold_14_4bppv>:
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b08a      	sub	sp, #40	; 0x28
 800f844:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_14_4bpp(glyphs_Asap_Bold_14_4bpp, 27, 14, 0, 4, 1, 0, 1, unicodes_Asap_Bold_14_4bpp, kerning_Asap_Bold_14_4bpp, 0, 0, 0);
 800f846:	4b1e      	ldr	r3, [pc, #120]	; (800f8c0 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f3bf 8f5b 	dmb	ish
 800f84e:	f003 0301 	and.w	r3, r3, #1
 800f852:	2b00      	cmp	r3, #0
 800f854:	bf0c      	ite	eq
 800f856:	2301      	moveq	r3, #1
 800f858:	2300      	movne	r3, #0
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d02a      	beq.n	800f8b6 <_Z25getFont_Asap_Bold_14_4bppv+0x76>
 800f860:	4817      	ldr	r0, [pc, #92]	; (800f8c0 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800f862:	f015 fd9f 	bl	80253a4 <__cxa_guard_acquire>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	bf14      	ite	ne
 800f86c:	2301      	movne	r3, #1
 800f86e:	2300      	moveq	r3, #0
 800f870:	b2db      	uxtb	r3, r3
 800f872:	2b00      	cmp	r3, #0
 800f874:	d01f      	beq.n	800f8b6 <_Z25getFont_Asap_Bold_14_4bppv+0x76>
 800f876:	2300      	movs	r3, #0
 800f878:	9309      	str	r3, [sp, #36]	; 0x24
 800f87a:	2300      	movs	r3, #0
 800f87c:	9308      	str	r3, [sp, #32]
 800f87e:	2300      	movs	r3, #0
 800f880:	9307      	str	r3, [sp, #28]
 800f882:	4b10      	ldr	r3, [pc, #64]	; (800f8c4 <_Z25getFont_Asap_Bold_14_4bppv+0x84>)
 800f884:	9306      	str	r3, [sp, #24]
 800f886:	4b10      	ldr	r3, [pc, #64]	; (800f8c8 <_Z25getFont_Asap_Bold_14_4bppv+0x88>)
 800f888:	9305      	str	r3, [sp, #20]
 800f88a:	2301      	movs	r3, #1
 800f88c:	9304      	str	r3, [sp, #16]
 800f88e:	2300      	movs	r3, #0
 800f890:	9303      	str	r3, [sp, #12]
 800f892:	2301      	movs	r3, #1
 800f894:	9302      	str	r3, [sp, #8]
 800f896:	2304      	movs	r3, #4
 800f898:	9301      	str	r3, [sp, #4]
 800f89a:	2300      	movs	r3, #0
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	230e      	movs	r3, #14
 800f8a0:	221b      	movs	r2, #27
 800f8a2:	490a      	ldr	r1, [pc, #40]	; (800f8cc <_Z25getFont_Asap_Bold_14_4bppv+0x8c>)
 800f8a4:	480a      	ldr	r0, [pc, #40]	; (800f8d0 <_Z25getFont_Asap_Bold_14_4bppv+0x90>)
 800f8a6:	f7ff fe93 	bl	800f5d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f8aa:	480a      	ldr	r0, [pc, #40]	; (800f8d4 <_Z25getFont_Asap_Bold_14_4bppv+0x94>)
 800f8ac:	f015 fdc4 	bl	8025438 <atexit>
 800f8b0:	4803      	ldr	r0, [pc, #12]	; (800f8c0 <_Z25getFont_Asap_Bold_14_4bppv+0x80>)
 800f8b2:	f015 fd83 	bl	80253bc <__cxa_guard_release>
    return Asap_Bold_14_4bpp;
 800f8b6:	4b06      	ldr	r3, [pc, #24]	; (800f8d0 <_Z25getFont_Asap_Bold_14_4bppv+0x90>)
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	20008d4c 	.word	0x20008d4c
 800f8c4:	0802df2c 	.word	0x0802df2c
 800f8c8:	08026f84 	.word	0x08026f84
 800f8cc:	0802e038 	.word	0x0802e038
 800f8d0:	20008d28 	.word	0x20008d28
 800f8d4:	0800f831 	.word	0x0800f831

0800f8d8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	4801      	ldr	r0, [pc, #4]	; (800f8e4 <__tcf_0+0xc>)
 800f8de:	f7ff fdd3 	bl	800f488 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	20008d50 	.word	0x20008d50

0800f8e8 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b08a      	sub	sp, #40	; 0x28
 800f8ec:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 800f8ee:	4b1e      	ldr	r3, [pc, #120]	; (800f968 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f3bf 8f5b 	dmb	ish
 800f8f6:	f003 0301 	and.w	r3, r3, #1
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	bf0c      	ite	eq
 800f8fe:	2301      	moveq	r3, #1
 800f900:	2300      	movne	r3, #0
 800f902:	b2db      	uxtb	r3, r3
 800f904:	2b00      	cmp	r3, #0
 800f906:	d02a      	beq.n	800f95e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800f908:	4817      	ldr	r0, [pc, #92]	; (800f968 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800f90a:	f015 fd4b 	bl	80253a4 <__cxa_guard_acquire>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	bf14      	ite	ne
 800f914:	2301      	movne	r3, #1
 800f916:	2300      	moveq	r3, #0
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d01f      	beq.n	800f95e <_Z25getFont_Asap_Bold_21_4bppv+0x76>
 800f91e:	2300      	movs	r3, #0
 800f920:	9309      	str	r3, [sp, #36]	; 0x24
 800f922:	2300      	movs	r3, #0
 800f924:	9308      	str	r3, [sp, #32]
 800f926:	233f      	movs	r3, #63	; 0x3f
 800f928:	9307      	str	r3, [sp, #28]
 800f92a:	4b10      	ldr	r3, [pc, #64]	; (800f96c <_Z25getFont_Asap_Bold_21_4bppv+0x84>)
 800f92c:	9306      	str	r3, [sp, #24]
 800f92e:	4b10      	ldr	r3, [pc, #64]	; (800f970 <_Z25getFont_Asap_Bold_21_4bppv+0x88>)
 800f930:	9305      	str	r3, [sp, #20]
 800f932:	2301      	movs	r3, #1
 800f934:	9304      	str	r3, [sp, #16]
 800f936:	2300      	movs	r3, #0
 800f938:	9303      	str	r3, [sp, #12]
 800f93a:	2301      	movs	r3, #1
 800f93c:	9302      	str	r3, [sp, #8]
 800f93e:	2304      	movs	r3, #4
 800f940:	9301      	str	r3, [sp, #4]
 800f942:	2300      	movs	r3, #0
 800f944:	9300      	str	r3, [sp, #0]
 800f946:	2315      	movs	r3, #21
 800f948:	220d      	movs	r2, #13
 800f94a:	490a      	ldr	r1, [pc, #40]	; (800f974 <_Z25getFont_Asap_Bold_21_4bppv+0x8c>)
 800f94c:	480a      	ldr	r0, [pc, #40]	; (800f978 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
 800f94e:	f7ff fe3f 	bl	800f5d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f952:	480a      	ldr	r0, [pc, #40]	; (800f97c <_Z25getFont_Asap_Bold_21_4bppv+0x94>)
 800f954:	f015 fd70 	bl	8025438 <atexit>
 800f958:	4803      	ldr	r0, [pc, #12]	; (800f968 <_Z25getFont_Asap_Bold_21_4bppv+0x80>)
 800f95a:	f015 fd2f 	bl	80253bc <__cxa_guard_release>
    return Asap_Bold_21_4bpp;
 800f95e:	4b06      	ldr	r3, [pc, #24]	; (800f978 <_Z25getFont_Asap_Bold_21_4bppv+0x90>)
}
 800f960:	4618      	mov	r0, r3
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	20008d74 	.word	0x20008d74
 800f96c:	0802df38 	.word	0x0802df38
 800f970:	08026f88 	.word	0x08026f88
 800f974:	0802e1b4 	.word	0x0802e1b4
 800f978:	20008d50 	.word	0x20008d50
 800f97c:	0800f8d9 	.word	0x0800f8d9

0800f980 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f980:	b580      	push	{r7, lr}
 800f982:	af00      	add	r7, sp, #0
 800f984:	4801      	ldr	r0, [pc, #4]	; (800f98c <__tcf_0+0xc>)
 800f986:	f7ff fd7f 	bl	800f488 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	20008d78 	.word	0x20008d78

0800f990 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b08a      	sub	sp, #40	; 0x28
 800f994:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 800f996:	4b1e      	ldr	r3, [pc, #120]	; (800fa10 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f3bf 8f5b 	dmb	ish
 800f99e:	f003 0301 	and.w	r3, r3, #1
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	bf0c      	ite	eq
 800f9a6:	2301      	moveq	r3, #1
 800f9a8:	2300      	movne	r3, #0
 800f9aa:	b2db      	uxtb	r3, r3
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d02a      	beq.n	800fa06 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800f9b0:	4817      	ldr	r0, [pc, #92]	; (800fa10 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800f9b2:	f015 fcf7 	bl	80253a4 <__cxa_guard_acquire>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	bf14      	ite	ne
 800f9bc:	2301      	movne	r3, #1
 800f9be:	2300      	moveq	r3, #0
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d01f      	beq.n	800fa06 <_Z25getFont_Asap_Bold_30_4bppv+0x76>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	9308      	str	r3, [sp, #32]
 800f9ce:	233f      	movs	r3, #63	; 0x3f
 800f9d0:	9307      	str	r3, [sp, #28]
 800f9d2:	4b10      	ldr	r3, [pc, #64]	; (800fa14 <_Z25getFont_Asap_Bold_30_4bppv+0x84>)
 800f9d4:	9306      	str	r3, [sp, #24]
 800f9d6:	4b10      	ldr	r3, [pc, #64]	; (800fa18 <_Z25getFont_Asap_Bold_30_4bppv+0x88>)
 800f9d8:	9305      	str	r3, [sp, #20]
 800f9da:	2301      	movs	r3, #1
 800f9dc:	9304      	str	r3, [sp, #16]
 800f9de:	2300      	movs	r3, #0
 800f9e0:	9303      	str	r3, [sp, #12]
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	9302      	str	r3, [sp, #8]
 800f9e6:	2304      	movs	r3, #4
 800f9e8:	9301      	str	r3, [sp, #4]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	231e      	movs	r3, #30
 800f9f0:	220c      	movs	r2, #12
 800f9f2:	490a      	ldr	r1, [pc, #40]	; (800fa1c <_Z25getFont_Asap_Bold_30_4bppv+0x8c>)
 800f9f4:	480a      	ldr	r0, [pc, #40]	; (800fa20 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
 800f9f6:	f7ff fdeb 	bl	800f5d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f9fa:	480a      	ldr	r0, [pc, #40]	; (800fa24 <_Z25getFont_Asap_Bold_30_4bppv+0x94>)
 800f9fc:	f015 fd1c 	bl	8025438 <atexit>
 800fa00:	4803      	ldr	r0, [pc, #12]	; (800fa10 <_Z25getFont_Asap_Bold_30_4bppv+0x80>)
 800fa02:	f015 fcdb 	bl	80253bc <__cxa_guard_release>
    return Asap_Bold_30_4bpp;
 800fa06:	4b06      	ldr	r3, [pc, #24]	; (800fa20 <_Z25getFont_Asap_Bold_30_4bppv+0x90>)
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	20008d9c 	.word	0x20008d9c
 800fa14:	0802df3c 	.word	0x0802df3c
 800fa18:	08026f8c 	.word	0x08026f8c
 800fa1c:	0802e26c 	.word	0x0802e26c
 800fa20:	20008d78 	.word	0x20008d78
 800fa24:	0800f981 	.word	0x0800f981

0800fa28 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	4801      	ldr	r0, [pc, #4]	; (800fa34 <__tcf_0+0xc>)
 800fa2e:	f7ff fd2b 	bl	800f488 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	20008da0 	.word	0x20008da0

0800fa38 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b08a      	sub	sp, #40	; 0x28
 800fa3c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 12, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 800fa3e:	4b1e      	ldr	r3, [pc, #120]	; (800fab8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f3bf 8f5b 	dmb	ish
 800fa46:	f003 0301 	and.w	r3, r3, #1
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	bf0c      	ite	eq
 800fa4e:	2301      	moveq	r3, #1
 800fa50:	2300      	movne	r3, #0
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d02a      	beq.n	800faae <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800fa58:	4817      	ldr	r0, [pc, #92]	; (800fab8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800fa5a:	f015 fca3 	bl	80253a4 <__cxa_guard_acquire>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	bf14      	ite	ne
 800fa64:	2301      	movne	r3, #1
 800fa66:	2300      	moveq	r3, #0
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d01f      	beq.n	800faae <_Z25getFont_Asap_Bold_40_4bppv+0x76>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	9309      	str	r3, [sp, #36]	; 0x24
 800fa72:	2300      	movs	r3, #0
 800fa74:	9308      	str	r3, [sp, #32]
 800fa76:	233f      	movs	r3, #63	; 0x3f
 800fa78:	9307      	str	r3, [sp, #28]
 800fa7a:	4b10      	ldr	r3, [pc, #64]	; (800fabc <_Z25getFont_Asap_Bold_40_4bppv+0x84>)
 800fa7c:	9306      	str	r3, [sp, #24]
 800fa7e:	4b10      	ldr	r3, [pc, #64]	; (800fac0 <_Z25getFont_Asap_Bold_40_4bppv+0x88>)
 800fa80:	9305      	str	r3, [sp, #20]
 800fa82:	2301      	movs	r3, #1
 800fa84:	9304      	str	r3, [sp, #16]
 800fa86:	2300      	movs	r3, #0
 800fa88:	9303      	str	r3, [sp, #12]
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	9302      	str	r3, [sp, #8]
 800fa8e:	2304      	movs	r3, #4
 800fa90:	9301      	str	r3, [sp, #4]
 800fa92:	2300      	movs	r3, #0
 800fa94:	9300      	str	r3, [sp, #0]
 800fa96:	2328      	movs	r3, #40	; 0x28
 800fa98:	220c      	movs	r2, #12
 800fa9a:	490a      	ldr	r1, [pc, #40]	; (800fac4 <_Z25getFont_Asap_Bold_40_4bppv+0x8c>)
 800fa9c:	480a      	ldr	r0, [pc, #40]	; (800fac8 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
 800fa9e:	f7ff fd97 	bl	800f5d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800faa2:	480a      	ldr	r0, [pc, #40]	; (800facc <_Z25getFont_Asap_Bold_40_4bppv+0x94>)
 800faa4:	f015 fcc8 	bl	8025438 <atexit>
 800faa8:	4803      	ldr	r0, [pc, #12]	; (800fab8 <_Z25getFont_Asap_Bold_40_4bppv+0x80>)
 800faaa:	f015 fc87 	bl	80253bc <__cxa_guard_release>
    return Asap_Bold_40_4bpp;
 800faae:	4b06      	ldr	r3, [pc, #24]	; (800fac8 <_Z25getFont_Asap_Bold_40_4bppv+0x90>)
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	20008dc4 	.word	0x20008dc4
 800fabc:	0802df40 	.word	0x0802df40
 800fac0:	08026f90 	.word	0x08026f90
 800fac4:	0802e314 	.word	0x0802e314
 800fac8:	20008da0 	.word	0x20008da0
 800facc:	0800fa29 	.word	0x0800fa29

0800fad0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800fad0:	b580      	push	{r7, lr}
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	4801      	ldr	r0, [pc, #4]	; (800fadc <__tcf_0+0xc>)
 800fad6:	f7ff fcd7 	bl	800f488 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	20008dc8 	.word	0x20008dc8

0800fae0 <_Z25getFont_Asap_Bold_60_4bppv>:
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b08a      	sub	sp, #40	; 0x28
 800fae4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 800fae6:	4b1e      	ldr	r3, [pc, #120]	; (800fb60 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f3bf 8f5b 	dmb	ish
 800faee:	f003 0301 	and.w	r3, r3, #1
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	bf0c      	ite	eq
 800faf6:	2301      	moveq	r3, #1
 800faf8:	2300      	movne	r3, #0
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d02a      	beq.n	800fb56 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800fb00:	4817      	ldr	r0, [pc, #92]	; (800fb60 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fb02:	f015 fc4f 	bl	80253a4 <__cxa_guard_acquire>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	bf14      	ite	ne
 800fb0c:	2301      	movne	r3, #1
 800fb0e:	2300      	moveq	r3, #0
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d01f      	beq.n	800fb56 <_Z25getFont_Asap_Bold_60_4bppv+0x76>
 800fb16:	2300      	movs	r3, #0
 800fb18:	9309      	str	r3, [sp, #36]	; 0x24
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	9308      	str	r3, [sp, #32]
 800fb1e:	233f      	movs	r3, #63	; 0x3f
 800fb20:	9307      	str	r3, [sp, #28]
 800fb22:	4b10      	ldr	r3, [pc, #64]	; (800fb64 <_Z25getFont_Asap_Bold_60_4bppv+0x84>)
 800fb24:	9306      	str	r3, [sp, #24]
 800fb26:	4b10      	ldr	r3, [pc, #64]	; (800fb68 <_Z25getFont_Asap_Bold_60_4bppv+0x88>)
 800fb28:	9305      	str	r3, [sp, #20]
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	9304      	str	r3, [sp, #16]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	9303      	str	r3, [sp, #12]
 800fb32:	2301      	movs	r3, #1
 800fb34:	9302      	str	r3, [sp, #8]
 800fb36:	2304      	movs	r3, #4
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	233c      	movs	r3, #60	; 0x3c
 800fb40:	220d      	movs	r2, #13
 800fb42:	490a      	ldr	r1, [pc, #40]	; (800fb6c <_Z25getFont_Asap_Bold_60_4bppv+0x8c>)
 800fb44:	480a      	ldr	r0, [pc, #40]	; (800fb70 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
 800fb46:	f7ff fd43 	bl	800f5d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fb4a:	480a      	ldr	r0, [pc, #40]	; (800fb74 <_Z25getFont_Asap_Bold_60_4bppv+0x94>)
 800fb4c:	f015 fc74 	bl	8025438 <atexit>
 800fb50:	4803      	ldr	r0, [pc, #12]	; (800fb60 <_Z25getFont_Asap_Bold_60_4bppv+0x80>)
 800fb52:	f015 fc33 	bl	80253bc <__cxa_guard_release>
    return Asap_Bold_60_4bpp;
 800fb56:	4b06      	ldr	r3, [pc, #24]	; (800fb70 <_Z25getFont_Asap_Bold_60_4bppv+0x90>)
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	20008dec 	.word	0x20008dec
 800fb64:	0802df44 	.word	0x0802df44
 800fb68:	08026f94 	.word	0x08026f94
 800fb6c:	0802e3bc 	.word	0x0802e3bc
 800fb70:	20008dc8 	.word	0x20008dc8
 800fb74:	0800fad1 	.word	0x0800fad1

0800fb78 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	4618      	mov	r0, r3
 800fb86:	370c      	adds	r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
    {
    }
 800fb9a:	bf00      	nop
 800fb9c:	370c      	adds	r7, #12
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr

0800fba6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800fba6:	b480      	push	{r7}
 800fba8:	b083      	sub	sp, #12
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
 800fbae:	6039      	str	r1, [r7, #0]
    {
    }
 800fbb0:	bf00      	nop
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr

0800fbbc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
    {
    }
 800fbc6:	bf00      	nop
 800fbc8:	370c      	adds	r7, #12
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr

0800fbd2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800fbd2:	b480      	push	{r7}
 800fbd4:	b083      	sub	sp, #12
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	460b      	mov	r3, r1
 800fbdc:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fbde:	bf00      	nop
 800fbe0:	370c      	adds	r7, #12
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800fbea:	b480      	push	{r7}
 800fbec:	b083      	sub	sp, #12
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
    {
    }
 800fbf2:	bf00      	nop
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800fbfe:	b480      	push	{r7}
 800fc00:	b083      	sub	sp, #12
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
    {
    }
 800fc06:	bf00      	nop
 800fc08:	370c      	adds	r7, #12
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
	...

0800fc14 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
    {
 800fc1c:	4a04      	ldr	r2, [pc, #16]	; (800fc30 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	601a      	str	r2, [r3, #0]
    }
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4618      	mov	r0, r3
 800fc26:	370c      	adds	r7, #12
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr
 800fc30:	08027088 	.word	0x08027088

0800fc34 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
    }
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7ff ffe9 	bl	800fc14 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fc42:	2104      	movs	r1, #4
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f015 fbab 	bl	80253a0 <_ZdlPvj>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800fc5c:	4a07      	ldr	r2, [pc, #28]	; (800fc7c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	601a      	str	r2, [r3, #0]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	605a      	str	r2, [r3, #4]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	721a      	strb	r2, [r3, #8]
    {
    }
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4618      	mov	r0, r3
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr
 800fc7c:	08027068 	.word	0x08027068

0800fc80 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800fc80:	b480      	push	{r7}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
    {
 800fc88:	4a04      	ldr	r2, [pc, #16]	; (800fc9c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	601a      	str	r2, [r3, #0]
    }
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4618      	mov	r0, r3
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	08027068 	.word	0x08027068

0800fca0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
    }
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7ff ffe9 	bl	800fc80 <_ZN8touchgfx10TransitionD1Ev>
 800fcae:	210c      	movs	r1, #12
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f015 fb75 	bl	80253a0 <_ZdlPvj>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	bf00      	nop
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr

0800fce8 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	bf00      	nop
 800fcf2:	370c      	adds	r7, #12
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfa:	4770      	bx	lr

0800fcfc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fcfc:	b480      	push	{r7}
 800fcfe:	b083      	sub	sp, #12
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	683a      	ldr	r2, [r7, #0]
 800fd0a:	605a      	str	r2, [r3, #4]
    }
 800fd0c:	bf00      	nop
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	460b      	mov	r3, r1
 800fd22:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fd24:	bf00      	nop
 800fd26:	370c      	adds	r7, #12
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr

0800fd30 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
    {
 800fd38:	4a04      	ldr	r2, [pc, #16]	; (800fd4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	601a      	str	r2, [r3, #0]
    }
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4618      	mov	r0, r3
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr
 800fd4c:	08027050 	.word	0x08027050

0800fd50 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
    }
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff ffe9 	bl	800fd30 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fd5e:	2104      	movs	r1, #4
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f015 fb1d 	bl	80253a0 <_ZdlPvj>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fd70:	b480      	push	{r7}
 800fd72:	af00      	add	r7, sp, #0
    {
        return instance;
 800fd74:	4b03      	ldr	r3, [pc, #12]	; (800fd84 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fd76:	681b      	ldr	r3, [r3, #0]
    }
 800fd78:	4618      	mov	r0, r3
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	2000c564 	.word	0x2000c564

0800fd88 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fd88:	b480      	push	{r7}
 800fd8a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fd8c:	4b0b      	ldr	r3, [pc, #44]	; (800fdbc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d008      	beq.n	800fdaa <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fd98:	4b08      	ldr	r3, [pc, #32]	; (800fdbc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d003      	beq.n	800fdaa <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fda2:	4b06      	ldr	r3, [pc, #24]	; (800fdbc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fda8:	e002      	b.n	800fdb0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800fdaa:	4b04      	ldr	r3, [pc, #16]	; (800fdbc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	689b      	ldr	r3, [r3, #8]
        }
    }
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	2000c564 	.word	0x2000c564

0800fdc0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	4a05      	ldr	r2, [pc, #20]	; (800fde0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	601a      	str	r2, [r3, #0]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7ff ff1f 	bl	800fc14 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	08028e5c 	.word	0x08028e5c

0800fde4 <_ZN8touchgfx11ApplicationD0Ev>:
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f7ff ffe7 	bl	800fdc0 <_ZN8touchgfx11ApplicationD1Ev>
 800fdf2:	f44f 7198 	mov.w	r1, #304	; 0x130
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f015 fad2 	bl	80253a0 <_ZdlPvj>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
	...

0800fe08 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f009 fb20 	bl	8019458 <_ZN8touchgfx11ApplicationC1Ev>
 800fe18:	4a09      	ldr	r2, [pc, #36]	; (800fe40 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	601a      	str	r2, [r3, #0]
        currentPresenter(0),
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2200      	movs	r2, #0
 800fe22:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        pendingScreenTransitionCallback(0)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4a04      	ldr	r2, [pc, #16]	; (800fe44 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fe32:	6013      	str	r3, [r2, #0]
    }
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4618      	mov	r0, r3
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	08027014 	.word	0x08027014
 800fe44:	2000c5f0 	.word	0x2000c5f0

0800fe48 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	4a05      	ldr	r2, [pc, #20]	; (800fe68 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	601a      	str	r2, [r3, #0]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff ffb1 	bl	800fdc0 <_ZN8touchgfx11ApplicationD1Ev>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4618      	mov	r0, r3
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	08027014 	.word	0x08027014

0800fe6c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7ff ffe7 	bl	800fe48 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fe7a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f015 fa8e 	bl	80253a0 <_ZdlPvj>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b082      	sub	sp, #8
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 f804 	bl	800fea4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fe9c:	bf00      	nop
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00f      	beq.n	800fed6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	330c      	adds	r3, #12
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4610      	mov	r0, r2
 800feca:	4798      	blx	r3
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d001      	beq.n	800fed6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fed2:	2301      	movs	r3, #1
 800fed4:	e000      	b.n	800fed8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fed6:	2300      	movs	r3, #0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00e      	beq.n	800fefa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	3308      	adds	r3, #8
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4610      	mov	r0, r2
 800fef0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800fefa:	bf00      	nop
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b084      	sub	sp, #16
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	60f8      	str	r0, [r7, #12]
 800ff0a:	60b9      	str	r1, [r7, #8]
 800ff0c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800ff0e:	f009 fa81 	bl	8019414 <_ZN8touchgfx11Application11getInstanceEv>
 800ff12:	4603      	mov	r3, r0
 800ff14:	4618      	mov	r0, r3
 800ff16:	f009 fa83 	bl	8019420 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d008      	beq.n	800ff34 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	330c      	adds	r3, #12
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4610      	mov	r0, r2
 800ff32:	4798      	blx	r3
    }
    if (*currentTrans)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d007      	beq.n	800ff4c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4610      	mov	r0, r2
 800ff4a:	4798      	blx	r3
    }
    if (*currentScreen)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d008      	beq.n	800ff66 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	3314      	adds	r3, #20
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4610      	mov	r0, r2
 800ff64:	4798      	blx	r3
    }
    if (*currentPresenter)
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d008      	beq.n	800ff80 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3304      	adds	r3, #4
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4610      	mov	r0, r2
 800ff7e:	4798      	blx	r3
    }
    if (*currentScreen)
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d007      	beq.n	800ff98 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4610      	mov	r0, r2
 800ff96:	4798      	blx	r3
    }
    if (*currentPresenter)
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d008      	beq.n	800ffb2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	3308      	adds	r3, #8
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4610      	mov	r0, r2
 800ffb0:	4798      	blx	r3
    }
}
 800ffb2:	bf00      	nop
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b084      	sub	sp, #16
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	60f8      	str	r0, [r7, #12]
 800ffc2:	60b9      	str	r1, [r7, #8]
 800ffc4:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	330c      	adds	r3, #12
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	4798      	blx	r3
    newPresenter->activate();
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	68b8      	ldr	r0, [r7, #8]
 800ffda:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ffdc:	6879      	ldr	r1, [r7, #4]
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f00a fb28 	bl	801a634 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	3310      	adds	r3, #16
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	4798      	blx	r3

    Application::getInstance()->draw();
 800fff0:	f009 fa10 	bl	8019414 <_ZN8touchgfx11Application11getInstanceEv>
 800fff4:	4603      	mov	r3, r0
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	3228      	adds	r2, #40	; 0x28
 800fffa:	6812      	ldr	r2, [r2, #0]
 800fffc:	4618      	mov	r0, r3
 800fffe:	4790      	blx	r2
}
 8010000:	bf00      	nop
 8010002:	3710      	adds	r7, #16
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	683a      	ldr	r2, [r7, #0]
 8010016:	601a      	str	r2, [r3, #0]
    }
 8010018:	bf00      	nop
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	4a08      	ldr	r2, [pc, #32]	; (8010050 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	601a      	str	r2, [r3, #0]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010038:	4618      	mov	r0, r3
 801003a:	f000 fa4d 	bl	80104d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4618      	mov	r0, r3
 8010042:	f7ff ff01 	bl	800fe48 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	08026fc0 	.word	0x08026fc0

08010054 <_ZN23FrontendApplicationBaseD0Ev>:
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7ff ffe1 	bl	8010024 <_ZN23FrontendApplicationBaseD1Ev>
 8010062:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f015 f99a 	bl	80253a0 <_ZdlPvj>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4618      	mov	r0, r3
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
	...

08010078 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	4618      	mov	r0, r3
 8010084:	f7ff fde6 	bl	800fc54 <_ZN8touchgfx10TransitionC1Ev>
 8010088:	4a03      	ldr	r2, [pc, #12]	; (8010098 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	601a      	str	r2, [r3, #0]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	4618      	mov	r0, r3
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	08026fa0 	.word	0x08026fa0

0801009c <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	4a05      	ldr	r2, [pc, #20]	; (80100bc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	601a      	str	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7ff fde7 	bl	800fc80 <_ZN8touchgfx10TransitionD1Ev>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4618      	mov	r0, r3
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	08026fa0 	.word	0x08026fa0

080100c0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f7ff ffe7 	bl	801009c <_ZN8touchgfx12NoTransitionD1Ev>
 80100ce:	210c      	movs	r1, #12
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f015 f965 	bl	80253a0 <_ZdlPvj>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	4618      	mov	r0, r3
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2201      	movs	r2, #1
 80100ec:	721a      	strb	r2, [r3, #8]
    }
 80100ee:	bf00      	nop
 80100f0:	370c      	adds	r7, #12
 80100f2:	46bd      	mov	sp, r7
 80100f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f8:	4770      	bx	lr

080100fa <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 80100fa:	b480      	push	{r7}
 80100fc:	b083      	sub	sp, #12
 80100fe:	af00      	add	r7, sp, #0
 8010100:	6078      	str	r0, [r7, #4]
 8010102:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	683a      	ldr	r2, [r7, #0]
 8010108:	605a      	str	r2, [r3, #4]
    }
 801010a:	bf00      	nop
 801010c:	370c      	adds	r7, #12
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
	...

08010118 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	4618      	mov	r0, r3
 8010128:	f7ff fe6e 	bl	800fe08 <_ZN8touchgfx14MVPApplicationC1Ev>
 801012c:	4a13      	ldr	r2, [pc, #76]	; (801017c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010138:	4618      	mov	r0, r3
 801013a:	f000 f89f 	bl	801027c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
      model(m)
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	68ba      	ldr	r2, [r7, #8]
 801014a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801014e:	f7ff fe0f 	bl	800fd70 <_ZN8touchgfx3HAL11getInstanceEv>
 8010152:	4603      	mov	r3, r0
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	3208      	adds	r2, #8
 8010158:	6812      	ldr	r2, [r2, #0]
 801015a:	2100      	movs	r1, #0
 801015c:	4618      	mov	r0, r3
 801015e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8010160:	2000      	movs	r0, #0
 8010162:	f002 fe0b 	bl	8012d7c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010166:	f7ff fe0f 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 801016a:	4603      	mov	r3, r0
 801016c:	4618      	mov	r0, r3
 801016e:	f00e fe28 	bl	801edc2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	4618      	mov	r0, r3
 8010176:	3710      	adds	r7, #16
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	08026fc0 	.word	0x08026fc0

08010180 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010180:	b480      	push	{r7}
 8010182:	b083      	sub	sp, #12
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4618      	mov	r0, r3
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	683a      	ldr	r2, [r7, #0]
 80101a6:	4611      	mov	r1, r2
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7ff ffe9 	bl	8010180 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	685a      	ldr	r2, [r3, #4]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	605a      	str	r2, [r3, #4]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	683a      	ldr	r2, [r7, #0]
 80101ba:	3308      	adds	r3, #8
 80101bc:	3208      	adds	r2, #8
 80101be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4618      	mov	r0, r3
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 80101d0:	b590      	push	{r4, r7, lr}
 80101d2:	b089      	sub	sp, #36	; 0x24
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80101de:	4b10      	ldr	r3, [pc, #64]	; (8010220 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 80101e0:	61bb      	str	r3, [r7, #24]
 80101e2:	2300      	movs	r3, #0
 80101e4:	61fb      	str	r3, [r7, #28]
 80101e6:	f107 0008 	add.w	r0, r7, #8
 80101ea:	f107 0318 	add.w	r3, r7, #24
 80101ee:	cb0c      	ldmia	r3, {r2, r3}
 80101f0:	6879      	ldr	r1, [r7, #4]
 80101f2:	f000 f85f 	bl	80102b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80101f6:	f107 0308 	add.w	r3, r7, #8
 80101fa:	4619      	mov	r1, r3
 80101fc:	4620      	mov	r0, r4
 80101fe:	f7ff ffcb 	bl	8010198 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010202:	f107 0308 	add.w	r3, r7, #8
 8010206:	4618      	mov	r0, r3
 8010208:	f000 f966 	bl	80104d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010218:	bf00      	nop
 801021a:	3724      	adds	r7, #36	; 0x24
 801021c:	46bd      	mov	sp, r7
 801021e:	bd90      	pop	{r4, r7, pc}
 8010220:	08010225 	.word	0x08010225

08010224 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af02      	add	r7, sp, #8
 801022a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010238:	461a      	mov	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	4b04      	ldr	r3, [pc, #16]	; (8010254 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8010244:	4804      	ldr	r0, [pc, #16]	; (8010258 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8010246:	f000 f855 	bl	80102f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801024a:	bf00      	nop
 801024c:	3708      	adds	r7, #8
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	2000c5e4 	.word	0x2000c5e4
 8010258:	2000c5e0 	.word	0x2000c5e0

0801025c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801025c:	b480      	push	{r7}
 801025e:	b083      	sub	sp, #12
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	4a04      	ldr	r2, [pc, #16]	; (8010278 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	601a      	str	r2, [r3, #0]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	4618      	mov	r0, r3
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr
 8010278:	08027050 	.word	0x08027050

0801027c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4618      	mov	r0, r3
 8010288:	f7ff ffe8 	bl	801025c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801028c:	4a08      	ldr	r2, [pc, #32]	; (80102b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	601a      	str	r2, [r3, #0]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2200      	movs	r2, #0
 8010296:	605a      	str	r2, [r3, #4]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2200      	movs	r2, #0
 801029c:	609a      	str	r2, [r3, #8]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2200      	movs	r2, #0
 80102a2:	60da      	str	r2, [r3, #12]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	4618      	mov	r0, r3
 80102a8:	3708      	adds	r7, #8
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop
 80102b0:	08026ffc 	.word	0x08026ffc

080102b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b084      	sub	sp, #16
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	60f8      	str	r0, [r7, #12]
 80102bc:	60b9      	str	r1, [r7, #8]
 80102be:	4639      	mov	r1, r7
 80102c0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7ff ffc8 	bl	801025c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80102cc:	4a08      	ldr	r2, [pc, #32]	; (80102f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	68ba      	ldr	r2, [r7, #8]
 80102d6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	3308      	adds	r3, #8
 80102dc:	463a      	mov	r2, r7
 80102de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	4618      	mov	r0, r3
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	08026ffc 	.word	0x08026ffc

080102f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80102f4:	b590      	push	{r4, r7, lr}
 80102f6:	b089      	sub	sp, #36	; 0x24
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	607a      	str	r2, [r7, #4]
 8010300:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	689a      	ldr	r2, [r3, #8]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	689b      	ldr	r3, [r3, #8]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3320      	adds	r3, #32
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4610      	mov	r0, r2
 8010312:	4798      	blx	r3
 8010314:	4603      	mov	r3, r0
 8010316:	f242 72e3 	movw	r2, #10211	; 0x27e3
 801031a:	4293      	cmp	r3, r2
 801031c:	d805      	bhi.n	801032a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801031e:	4b45      	ldr	r3, [pc, #276]	; (8010434 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8010320:	4a45      	ldr	r2, [pc, #276]	; (8010438 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8010322:	21c2      	movs	r1, #194	; 0xc2
 8010324:	4845      	ldr	r0, [pc, #276]	; (801043c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8010326:	f015 f869 	bl	80253fc <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	685a      	ldr	r2, [r3, #4]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	3320      	adds	r3, #32
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4610      	mov	r0, r2
 801033a:	4798      	blx	r3
 801033c:	4603      	mov	r3, r0
 801033e:	2b0f      	cmp	r3, #15
 8010340:	d805      	bhi.n	801034e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8010342:	4b3f      	ldr	r3, [pc, #252]	; (8010440 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8010344:	4a3c      	ldr	r2, [pc, #240]	; (8010438 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8010346:	21c3      	movs	r1, #195	; 0xc3
 8010348:	483c      	ldr	r0, [pc, #240]	; (801043c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801034a:	f015 f857 	bl	80253fc <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	68da      	ldr	r2, [r3, #12]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	3320      	adds	r3, #32
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4610      	mov	r0, r2
 801035e:	4798      	blx	r3
 8010360:	4603      	mov	r3, r0
 8010362:	2b0b      	cmp	r3, #11
 8010364:	d805      	bhi.n	8010372 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8010366:	4b37      	ldr	r3, [pc, #220]	; (8010444 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8010368:	4a33      	ldr	r2, [pc, #204]	; (8010438 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801036a:	21c4      	movs	r1, #196	; 0xc4
 801036c:	4833      	ldr	r0, [pc, #204]	; (801043c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801036e:	f015 f845 	bl	80253fc <__assert_func>

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8010372:	683a      	ldr	r2, [r7, #0]
 8010374:	68b9      	ldr	r1, [r7, #8]
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f7ff fdc3 	bl	800ff02 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	2100      	movs	r1, #0
 8010382:	4618      	mov	r0, r3
 8010384:	f000 f860 	bl	8010448 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010388:	4603      	mov	r3, r0
 801038a:	4619      	mov	r1, r3
 801038c:	200c      	movs	r0, #12
 801038e:	f7ff fbf3 	bl	800fb78 <_ZnwjPv>
 8010392:	4604      	mov	r4, r0
 8010394:	4620      	mov	r0, r4
 8010396:	f7ff fe6f 	bl	8010078 <_ZN8touchgfx12NoTransitionC1Ev>
 801039a:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	2100      	movs	r1, #0
 80103a2:	4618      	mov	r0, r3
 80103a4:	f000 f863 	bl	801046e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80103a8:	4603      	mov	r3, r0
 80103aa:	4619      	mov	r1, r3
 80103ac:	f242 70e4 	movw	r0, #10212	; 0x27e4
 80103b0:	f7ff fbe2 	bl	800fb78 <_ZnwjPv>
 80103b4:	4604      	mov	r4, r0
 80103b6:	4620      	mov	r0, r4
 80103b8:	f002 ff68 	bl	801328c <_ZN8MainViewC1Ev>
 80103bc:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	2100      	movs	r1, #0
 80103c4:	4618      	mov	r0, r3
 80103c6:	f000 f865 	bl	8010494 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80103ca:	4603      	mov	r3, r0
 80103cc:	4619      	mov	r1, r3
 80103ce:	2010      	movs	r0, #16
 80103d0:	f7ff fbd2 	bl	800fb78 <_ZnwjPv>
 80103d4:	4604      	mov	r4, r0
 80103d6:	69b9      	ldr	r1, [r7, #24]
 80103d8:	4620      	mov	r0, r4
 80103da:	f002 fe9d 	bl	8013118 <_ZN13MainPresenterC1ER8MainView>
 80103de:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	69fa      	ldr	r2, [r7, #28]
 80103e4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	697a      	ldr	r2, [r7, #20]
 80103ea:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	69ba      	ldr	r2, [r7, #24]
 80103f0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d002      	beq.n	80103fe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	3304      	adds	r3, #4
 80103fc:	e000      	b.n	8010400 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 80103fe:	2300      	movs	r3, #0
 8010400:	4619      	mov	r1, r3
 8010402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010404:	f7ff fe00 	bl	8010008 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	3304      	adds	r3, #4
 801040c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801040e:	4618      	mov	r0, r3
 8010410:	f7ff fe73 	bl	80100fa <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	6979      	ldr	r1, [r7, #20]
 8010418:	4618      	mov	r0, r3
 801041a:	f000 f84e 	bl	80104ba <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801041e:	69fa      	ldr	r2, [r7, #28]
 8010420:	6979      	ldr	r1, [r7, #20]
 8010422:	69b8      	ldr	r0, [r7, #24]
 8010424:	f7ff fdc9 	bl	800ffba <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8010428:	697b      	ldr	r3, [r7, #20]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3724      	adds	r7, #36	; 0x24
 801042e:	46bd      	mov	sp, r7
 8010430:	bd90      	pop	{r4, r7, pc}
 8010432:	bf00      	nop
 8010434:	080265d8 	.word	0x080265d8
 8010438:	08026668 	.word	0x08026668
 801043c:	08026768 	.word	0x08026768
 8010440:	080267ac 	.word	0x080267ac
 8010444:	08026850 	.word	0x08026850

08010448 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	460b      	mov	r3, r1
 8010452:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	3324      	adds	r3, #36	; 0x24
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	887a      	ldrh	r2, [r7, #2]
 801045e:	4611      	mov	r1, r2
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	4798      	blx	r3
 8010464:	4603      	mov	r3, r0
    }
 8010466:	4618      	mov	r0, r3
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 801046e:	b580      	push	{r7, lr}
 8010470:	b082      	sub	sp, #8
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
 8010476:	460b      	mov	r3, r1
 8010478:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	3324      	adds	r3, #36	; 0x24
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	887a      	ldrh	r2, [r7, #2]
 8010484:	4611      	mov	r1, r2
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	4798      	blx	r3
 801048a:	4603      	mov	r3, r0
    }
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	460b      	mov	r3, r1
 801049e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3324      	adds	r3, #36	; 0x24
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	887a      	ldrh	r2, [r7, #2]
 80104aa:	4611      	mov	r1, r2
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	4798      	blx	r3
 80104b0:	4603      	mov	r3, r0
    }
 80104b2:	4618      	mov	r0, r3
 80104b4:	3708      	adds	r7, #8
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80104ba:	b480      	push	{r7}
 80104bc:	b083      	sub	sp, #12
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
 80104c2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	683a      	ldr	r2, [r7, #0]
 80104c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80104ca:	bf00      	nop
 80104cc:	370c      	adds	r7, #12
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
	...

080104d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	4a05      	ldr	r2, [pc, #20]	; (80104f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7ff fc21 	bl	800fd30 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4618      	mov	r0, r3
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	08026ffc 	.word	0x08026ffc

080104fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7ff ffe7 	bl	80104d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801050a:	2110      	movs	r1, #16
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f014 ff47 	bl	80253a0 <_ZdlPvj>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4618      	mov	r0, r3
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	68d2      	ldr	r2, [r2, #12]
 801052c:	1052      	asrs	r2, r2, #1
 801052e:	1899      	adds	r1, r3, r2
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	f003 0301 	and.w	r3, r3, #1
 8010538:	2b00      	cmp	r3, #0
 801053a:	d102      	bne.n	8010542 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	689b      	ldr	r3, [r3, #8]
 8010540:	e00a      	b.n	8010558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	68d2      	ldr	r2, [r2, #12]
 801054a:	1052      	asrs	r2, r2, #1
 801054c:	4413      	add	r3, r2
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	6892      	ldr	r2, [r2, #8]
 8010554:	4413      	add	r3, r2
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4608      	mov	r0, r1
 801055a:	4798      	blx	r3
    }
 801055c:	bf00      	nop
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010564:	b480      	push	{r7}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d010      	beq.n	8010596 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d107      	bne.n	801058c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	f003 0301 	and.w	r3, r3, #1
 8010584:	2b00      	cmp	r3, #0
 8010586:	d101      	bne.n	801058c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010588:	2301      	movs	r3, #1
 801058a:	e000      	b.n	801058e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 801058c:	2300      	movs	r3, #0
 801058e:	2b01      	cmp	r3, #1
 8010590:	d001      	beq.n	8010596 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010592:	2301      	movs	r3, #1
 8010594:	e000      	b.n	8010598 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8010596:	2300      	movs	r3, #0
    }
 8010598:	4618      	mov	r0, r3
 801059a:	370c      	adds	r7, #12
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr

080105a4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	601a      	str	r2, [r3, #0]
    }
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	4618      	mov	r0, r3
 80105b8:	370c      	adds	r7, #12
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr

080105c2 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 80105c2:	b480      	push	{r7}
 80105c4:	b083      	sub	sp, #12
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2200      	movs	r2, #0
 80105da:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	80da      	strh	r2, [r3, #6]
    }
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	4618      	mov	r0, r3
 80105e6:	370c      	adds	r7, #12
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	4608      	mov	r0, r1
 80105fa:	4611      	mov	r1, r2
 80105fc:	461a      	mov	r2, r3
 80105fe:	4603      	mov	r3, r0
 8010600:	817b      	strh	r3, [r7, #10]
 8010602:	460b      	mov	r3, r1
 8010604:	813b      	strh	r3, [r7, #8]
 8010606:	4613      	mov	r3, r2
 8010608:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	897a      	ldrh	r2, [r7, #10]
 801060e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	893a      	ldrh	r2, [r7, #8]
 8010614:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	88fa      	ldrh	r2, [r7, #6]
 801061a:	809a      	strh	r2, [r3, #4]
        this->height = height;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	8b3a      	ldrh	r2, [r7, #24]
 8010620:	80da      	strh	r2, [r3, #6]
    }
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	4618      	mov	r0, r3
 8010626:	3714      	adds	r7, #20
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr

08010630 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	460b      	mov	r3, r1
 801063a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	887a      	ldrh	r2, [r7, #2]
 8010640:	801a      	strh	r2, [r3, #0]
    {
    }
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4618      	mov	r0, r3
 8010646:	370c      	adds	r7, #12
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af02      	add	r7, sp, #8
 8010656:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 8010658:	4a13      	ldr	r2, [pc, #76]	; (80106a8 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	601a      	str	r2, [r3, #0]
    Drawable() : rect(0, 0, 0, 0),
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	1d18      	adds	r0, r3, #4
 8010662:	2300      	movs	r3, #0
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	2300      	movs	r3, #0
 8010668:	2200      	movs	r2, #0
 801066a:	2100      	movs	r1, #0
 801066c:	f7ff ffc0 	bl	80105f0 <_ZN8touchgfx4RectC1Essss>
        visible(true)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	330c      	adds	r3, #12
 8010674:	4618      	mov	r0, r3
 8010676:	f7ff ffa4 	bl	80105c2 <_ZN8touchgfx4RectC1Ev>
        parent(0),
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2200      	movs	r2, #0
 801067e:	615a      	str	r2, [r3, #20]
        nextSibling(0),
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2200      	movs	r2, #0
 8010684:	619a      	str	r2, [r3, #24]
        nextDrawChainElement(0),
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2200      	movs	r2, #0
 801068a:	61da      	str	r2, [r3, #28]
        touchable(false),
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        visible(true)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2201      	movs	r2, #1
 8010698:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	4618      	mov	r0, r3
 80106a0:	3708      	adds	r7, #8
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	08028f94 	.word	0x08028f94

080106ac <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 80106ac:	b480      	push	{r7}
 80106ae:	b083      	sub	sp, #12
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	4a04      	ldr	r2, [pc, #16]	; (80106c8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	4618      	mov	r0, r3
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr
 80106c8:	08028f94 	.word	0x08028f94

080106cc <_ZN8touchgfx8DrawableD0Ev>:
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7ff ffe9 	bl	80106ac <_ZN8touchgfx8DrawableD1Ev>
 80106da:	2128      	movs	r1, #40	; 0x28
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f014 fe5f 	bl	80253a0 <_ZdlPvj>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4618      	mov	r0, r3
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}

080106ec <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	4608      	mov	r0, r1
 80106f6:	4611      	mov	r1, r2
 80106f8:	461a      	mov	r2, r3
 80106fa:	4603      	mov	r3, r0
 80106fc:	817b      	strh	r3, [r7, #10]
 80106fe:	460b      	mov	r3, r1
 8010700:	813b      	strh	r3, [r7, #8]
 8010702:	4613      	mov	r3, r2
 8010704:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	3334      	adds	r3, #52	; 0x34
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010712:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	4798      	blx	r3
        setWidth(width);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	3338      	adds	r3, #56	; 0x38
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010726:	4611      	mov	r1, r2
 8010728:	68f8      	ldr	r0, [r7, #12]
 801072a:	4798      	blx	r3
        setHeight(height);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	333c      	adds	r3, #60	; 0x3c
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010738:	4611      	mov	r1, r2
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	4798      	blx	r3
    }
 801073e:	bf00      	nop
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8010746:	b480      	push	{r7}
 8010748:	b083      	sub	sp, #12
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
 801074e:	460b      	mov	r3, r1
 8010750:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	887a      	ldrh	r2, [r7, #2]
 8010756:	809a      	strh	r2, [r3, #4]
    }
 8010758:	bf00      	nop
 801075a:	370c      	adds	r7, #12
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	460b      	mov	r3, r1
 801076e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	887a      	ldrh	r2, [r7, #2]
 8010774:	80da      	strh	r2, [r3, #6]
    }
 8010776:	bf00      	nop
 8010778:	370c      	adds	r7, #12
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr

08010782 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8010782:	b580      	push	{r7, lr}
 8010784:	b082      	sub	sp, #8
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	460b      	mov	r3, r1
 801078c:	807b      	strh	r3, [r7, #2]
 801078e:	4613      	mov	r3, r2
 8010790:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	332c      	adds	r3, #44	; 0x2c
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801079e:	4611      	mov	r1, r2
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	4798      	blx	r3
        setY(y);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	3330      	adds	r3, #48	; 0x30
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f9b7 2000 	ldrsh.w	r2, [r7]
 80107b0:	4611      	mov	r1, r2
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	4798      	blx	r3
    }
 80107b6:	bf00      	nop
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80107be:	b480      	push	{r7}
 80107c0:	b083      	sub	sp, #12
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
 80107c6:	460b      	mov	r3, r1
 80107c8:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	887a      	ldrh	r2, [r7, #2]
 80107ce:	811a      	strh	r2, [r3, #8]
    }
 80107d0:	bf00      	nop
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	460b      	mov	r3, r1
 80107e6:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	887a      	ldrh	r2, [r7, #2]
 80107ec:	815a      	strh	r2, [r3, #10]
    }
 80107ee:	bf00      	nop
 80107f0:	370c      	adds	r7, #12
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr

080107fa <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80107fa:	b480      	push	{r7}
 80107fc:	b083      	sub	sp, #12
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	bf00      	nop
 8010804:	370c      	adds	r7, #12
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr

0801080e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 801080e:	b480      	push	{r7}
 8010810:	b083      	sub	sp, #12
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]
 8010816:	6039      	str	r1, [r7, #0]
 8010818:	bf00      	nop
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
 801082e:	bf00      	nop
 8010830:	370c      	adds	r7, #12
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr

0801083a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801083a:	b480      	push	{r7}
 801083c:	b083      	sub	sp, #12
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	6039      	str	r1, [r7, #0]
 8010844:	bf00      	nop
 8010846:	370c      	adds	r7, #12
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr

08010850 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	bf00      	nop
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	460b      	mov	r3, r1
 801086e:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	78fa      	ldrb	r2, [r7, #3]
 8010874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010892:	4618      	mov	r0, r3
 8010894:	370c      	adds	r7, #12
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr

0801089e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 801089e:	b480      	push	{r7}
 80108a0:	b083      	sub	sp, #12
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80108ac:	4618      	mov	r0, r3
 80108ae:	370c      	adds	r7, #12
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr

080108b8 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
 80108c0:	460b      	mov	r3, r1
 80108c2:	807b      	strh	r3, [r7, #2]
 80108c4:	4613      	mov	r3, r2
 80108c6:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	3354      	adds	r3, #84	; 0x54
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	8879      	ldrh	r1, [r7, #2]
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80108d8:	b292      	uxth	r2, r2
 80108da:	1a8a      	subs	r2, r1, r2
 80108dc:	b292      	uxth	r2, r2
 80108de:	b210      	sxth	r0, r2
 80108e0:	8839      	ldrh	r1, [r7, #0]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80108e8:	b292      	uxth	r2, r2
 80108ea:	1a8a      	subs	r2, r1, r2
 80108ec:	b292      	uxth	r2, r2
 80108ee:	b212      	sxth	r2, r2
 80108f0:	4601      	mov	r1, r0
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	4798      	blx	r3
    }
 80108f6:	bf00      	nop
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80108fe:	b480      	push	{r7}
 8010900:	b083      	sub	sp, #12
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801090c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010914:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801091c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 801091e:	bf00      	nop
 8010920:	370c      	adds	r7, #12
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr

0801092a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801092a:	b580      	push	{r7, lr}
 801092c:	b084      	sub	sp, #16
 801092e:	af00      	add	r7, sp, #0
 8010930:	60f8      	str	r0, [r7, #12]
 8010932:	60b9      	str	r1, [r7, #8]
 8010934:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010936:	68f8      	ldr	r0, [r7, #12]
 8010938:	f7ff ffe1 	bl	80108fe <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681a      	ldr	r2, [r3, #0]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	68fa      	ldr	r2, [r7, #12]
 8010948:	601a      	str	r2, [r3, #0]
    }
 801094a:	bf00      	nop
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
	...

08010954 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	4a05      	ldr	r2, [pc, #20]	; (8010974 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	601a      	str	r2, [r3, #0]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	4618      	mov	r0, r3
 8010966:	f7ff fea1 	bl	80106ac <_ZN8touchgfx8DrawableD1Ev>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	4618      	mov	r0, r3
 801096e:	3708      	adds	r7, #8
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	08027d60 	.word	0x08027d60

08010978 <_ZN8touchgfx9ContainerD0Ev>:
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7ff ffe7 	bl	8010954 <_ZN8touchgfx9ContainerD1Ev>
 8010986:	212c      	movs	r1, #44	; 0x2c
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f014 fd09 	bl	80253a0 <_ZdlPvj>
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8010998:	b580      	push	{r7, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	4a06      	ldr	r2, [pc, #24]	; (80109bc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	601a      	str	r2, [r3, #0]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	3304      	adds	r3, #4
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7ff ffd2 	bl	8010954 <_ZN8touchgfx9ContainerD1Ev>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	4618      	mov	r0, r3
 80109b4:	3708      	adds	r7, #8
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	0802908c 	.word	0x0802908c

080109c0 <_ZN8touchgfx6ScreenD0Ev>:
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f7ff ffe5 	bl	8010998 <_ZN8touchgfx6ScreenD1Ev>
 80109ce:	213c      	movs	r1, #60	; 0x3c
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f014 fce5 	bl	80253a0 <_ZdlPvj>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4618      	mov	r0, r3
 80109da:	3708      	adds	r7, #8
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80109e0:	b480      	push	{r7}
 80109e2:	b083      	sub	sp, #12
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	bf00      	nop
 80109ea:	370c      	adds	r7, #12
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr

080109f4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80109f4:	b480      	push	{r7}
 80109f6:	b083      	sub	sp, #12
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	bf00      	nop
 80109fe:	370c      	adds	r7, #12
 8010a00:	46bd      	mov	sp, r7
 8010a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a06:	4770      	bx	lr

08010a08 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8010a08:	b480      	push	{r7}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	bf00      	nop
 8010a12:	370c      	adds	r7, #12
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr

08010a1c <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
    {
    }
 8010a24:	bf00      	nop
 8010a26:	370c      	adds	r7, #12
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	460b      	mov	r3, r1
 8010a3a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010a3c:	bf00      	nop
 8010a3e:	370c      	adds	r7, #12
 8010a40:	46bd      	mov	sp, r7
 8010a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a46:	4770      	bx	lr

08010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	3304      	adds	r3, #4
 8010a56:	6839      	ldr	r1, [r7, #0]
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f005 fb3f 	bl	80160dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010a5e:	bf00      	nop
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
	...

08010a68 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7ff fdec 	bl	8010650 <_ZN8touchgfx8DrawableC1Ev>
 8010a78:	4a03      	ldr	r2, [pc, #12]	; (8010a88 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	601a      	str	r2, [r3, #0]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	4618      	mov	r0, r3
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	08027194 	.word	0x08027194

08010a8c <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	4a05      	ldr	r2, [pc, #20]	; (8010aac <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7ff fe05 	bl	80106ac <_ZN8touchgfx8DrawableD1Ev>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	08027194 	.word	0x08027194

08010ab0 <_ZN8touchgfx6WidgetD0Ev>:
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff ffe7 	bl	8010a8c <_ZN8touchgfx6WidgetD1Ev>
 8010abe:	2128      	movs	r1, #40	; 0x28
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f014 fc6d 	bl	80253a0 <_ZdlPvj>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3708      	adds	r7, #8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b084      	sub	sp, #16
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	607b      	str	r3, [r7, #4]
 8010ada:	460b      	mov	r3, r1
 8010adc:	817b      	strh	r3, [r7, #10]
 8010ade:	4613      	mov	r3, r2
 8010ae0:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff fecd 	bl	8010884 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d008      	beq.n	8010b02 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff fed3 	bl	801089e <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d001      	beq.n	8010b02 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010afe:	2301      	movs	r3, #1
 8010b00:	e000      	b.n	8010b04 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010b02:	2300      	movs	r3, #0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d002      	beq.n	8010b0e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010b08:	68fa      	ldr	r2, [r7, #12]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	601a      	str	r2, [r3, #0]
        }
    }
 8010b0e:	bf00      	nop
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
	...

08010b18 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff ffa0 	bl	8010a68 <_ZN8touchgfx6WidgetC1Ev>
 8010b28:	4a0a      	ldr	r2, [pc, #40]	; (8010b54 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	22ff      	movs	r2, #255	; 0xff
 8010b32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	3328      	adds	r3, #40	; 0x28
 8010b3a:	2100      	movs	r1, #0
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7ff fd31 	bl	80105a4 <_ZN8touchgfx9colortypeC1Em>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2200      	movs	r2, #0
 8010b46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	08028a98 	.word	0x08028a98

08010b58 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	4a05      	ldr	r2, [pc, #20]	; (8010b78 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff ff8f 	bl	8010a8c <_ZN8touchgfx6WidgetD1Ev>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4618      	mov	r0, r3
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	08028a98 	.word	0x08028a98

08010b7c <_ZN8touchgfx3BoxD0Ev>:
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ff ffe7 	bl	8010b58 <_ZN8touchgfx3BoxD1Ev>
 8010b8a:	2130      	movs	r1, #48	; 0x30
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f014 fc07 	bl	80253a0 <_ZdlPvj>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	4618      	mov	r0, r3
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	683a      	ldr	r2, [r7, #0]
 8010baa:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010bac:	bf00      	nop
 8010bae:	370c      	adds	r7, #12
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr

08010bb8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8010bb8:	b480      	push	{r7}
 8010bba:	b083      	sub	sp, #12
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	807b      	strh	r3, [r7, #2]
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	887a      	ldrh	r2, [r7, #2]
 8010bc8:	801a      	strh	r2, [r3, #0]
    }
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
        assertValid();
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7fe fca7 	bl	800f534 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8010be6:	4b06      	ldr	r3, [pc, #24]	; (8010c00 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	881b      	ldrh	r3, [r3, #0]
 8010bee:	4619      	mov	r1, r3
 8010bf0:	4610      	mov	r0, r2
 8010bf2:	f002 f919 	bl	8012e28 <_ZNK8touchgfx5Texts7getTextEt>
 8010bf6:	4603      	mov	r3, r0
    }
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3708      	adds	r7, #8
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	2000c600 	.word	0x2000c600

08010c04 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7ff ff2a 	bl	8010a68 <_ZN8touchgfx6WidgetC1Ev>
 8010c14:	4a13      	ldr	r2, [pc, #76]	; (8010c64 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	3326      	adds	r3, #38	; 0x26
 8010c1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7ff ffc8 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	3328      	adds	r3, #40	; 0x28
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7ff fcb8 	bl	80105a4 <_ZN8touchgfx9colortypeC1Em>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	859a      	strh	r2, [r3, #44]	; 0x2c
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	22ff      	movs	r2, #255	; 0xff
 8010c3e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2200      	movs	r2, #0
 8010c46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2200      	movs	r2, #0
 8010c56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	08028a1c 	.word	0x08028a1c

08010c68 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af02      	add	r7, sp, #8
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8010c72:	2300      	movs	r3, #0
 8010c74:	9300      	str	r3, [sp, #0]
 8010c76:	2300      	movs	r3, #0
 8010c78:	2200      	movs	r2, #0
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f7ff fcb7 	bl	80105f0 <_ZN8touchgfx4RectC1Essss>
    }
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}

08010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8010c8a:	b480      	push	{r7}
 8010c8c:	b083      	sub	sp, #12
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
 8010c92:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	683a      	ldr	r2, [r7, #0]
 8010c98:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010c9a:	bf00      	nop
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8010ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ca8:	b085      	sub	sp, #20
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
 8010cae:	460b      	mov	r3, r1
 8010cb0:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010cb2:	687e      	ldr	r6, [r7, #4]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	3330      	adds	r3, #48	; 0x30
 8010cba:	681c      	ldr	r4, [r3, #0]
 8010cbc:	887d      	ldrh	r5, [r7, #2]
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 f845 	bl	8010d4e <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	81bb      	strh	r3, [r7, #12]
 8010cc8:	f107 030c 	add.w	r3, r7, #12
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fe fbfd 	bl	800f4cc <_ZNK8touchgfx9TypedText7getFontEv>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	322c      	adds	r2, #44	; 0x2c
 8010cd8:	6812      	ldr	r2, [r2, #0]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	4790      	blx	r2
 8010cde:	4603      	mov	r3, r0
 8010ce0:	1aeb      	subs	r3, r5, r3
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	b21b      	sxth	r3, r3
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	4630      	mov	r0, r6
 8010cea:	47a0      	blx	r4
    }
 8010cec:	bf00      	nop
 8010cee:	3714      	adds	r7, #20
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010cf4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	807b      	strh	r3, [r7, #2]
 8010d00:	4613      	mov	r3, r2
 8010d02:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	332c      	adds	r3, #44	; 0x2c
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010d12:	4610      	mov	r0, r2
 8010d14:	4798      	blx	r3
        setBaselineY(baselineY);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	3360      	adds	r3, #96	; 0x60
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010d22:	4611      	mov	r1, r2
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	4798      	blx	r3
    }
 8010d28:	bf00      	nop
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8010d30:	b480      	push	{r7}
 8010d32:	b083      	sub	sp, #12
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	887a      	ldrh	r2, [r7, #2]
 8010d40:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8010d42:	bf00      	nop
 8010d44:	370c      	adds	r7, #12
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr

08010d4e <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8010d4e:	b480      	push	{r7}
 8010d50:	b083      	sub	sp, #12
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	370c      	adds	r7, #12
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
	...

08010d68 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b082      	sub	sp, #8
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	4a05      	ldr	r2, [pc, #20]	; (8010d88 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	601a      	str	r2, [r3, #0]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7ff fe87 	bl	8010a8c <_ZN8touchgfx6WidgetD1Ev>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	4618      	mov	r0, r3
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	08028a1c 	.word	0x08028a1c

08010d8c <_ZN8touchgfx8TextAreaD0Ev>:
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7ff ffe7 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 8010d9a:	2134      	movs	r1, #52	; 0x34
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f014 faff 	bl	80253a0 <_ZdlPvj>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	4618      	mov	r0, r3
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
        : TextArea()
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7ff ff24 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 8010dbc:	4a03      	ldr	r2, [pc, #12]	; (8010dcc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	601a      	str	r2, [r3, #0]
    {
    }
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	08027118 	.word	0x08027118

08010dd0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	4a05      	ldr	r2, [pc, #20]	; (8010df0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	601a      	str	r2, [r3, #0]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7ff ffc1 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	4618      	mov	r0, r3
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	08027118 	.word	0x08027118

08010df4 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7ff ffe7 	bl	8010dd0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8010e02:	2134      	movs	r1, #52	; 0x34
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f014 facb 	bl	80253a0 <_ZdlPvj>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7ff ffc4 	bl	8010dac <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8010e24:	4a05      	ldr	r2, [pc, #20]	; (8010e3c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	601a      	str	r2, [r3, #0]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	4618      	mov	r0, r3
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	08028b84 	.word	0x08028b84

08010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	683a      	ldr	r2, [r7, #0]
 8010e4e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8010e50:	bf00      	nop
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7ff fdfd 	bl	8010a68 <_ZN8touchgfx6WidgetC1Ev>
 8010e6e:	4a0b      	ldr	r2, [pc, #44]	; (8010e9c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	3326      	adds	r3, #38	; 0x26
 8010e78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7ff fbd7 	bl	8010630 <_ZN8touchgfx6BitmapC1Et>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	22ff      	movs	r2, #255	; 0xff
 8010e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8010e8a:	6839      	ldr	r1, [r7, #0]
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f007 fa13 	bl	80182b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4618      	mov	r0, r3
 8010e96:	3708      	adds	r7, #8
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	08028c00 	.word	0x08028c00

08010ea0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	683a      	ldr	r2, [r7, #0]
 8010eae:	601a      	str	r2, [r3, #0]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	370c      	adds	r7, #12
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr

08010ebe <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8010ebe:	b480      	push	{r7}
 8010ec0:	b083      	sub	sp, #12
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
        {
            return v;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
        }
 8010eca:	4618      	mov	r0, r3
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr

08010ed6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8010ed6:	b590      	push	{r4, r7, lr}
 8010ed8:	b083      	sub	sp, #12
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
 8010ede:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	3340      	adds	r3, #64	; 0x40
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7ff ffea 	bl	8010ebe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010eea:	4604      	mov	r4, r0
 8010eec:	463b      	mov	r3, r7
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7ff ffe5 	bl	8010ebe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	429c      	cmp	r4, r3
 8010ef8:	bf0c      	ite	eq
 8010efa:	2301      	moveq	r3, #1
 8010efc:	2300      	movne	r3, #0
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d106      	bne.n	8010f12 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	683a      	ldr	r2, [r7, #0]
 8010f08:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f006 fc4e 	bl	80177ac <_ZN8touchgfx4Line17updateCachedShapeEv>
 8010f10:	e000      	b.n	8010f14 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8010f12:	bf00      	nop
    }
 8010f14:	370c      	adds	r7, #12
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd90      	pop	{r4, r7, pc}
	...

08010f1c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	4a05      	ldr	r2, [pc, #20]	; (8010f3c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f006 fa51 	bl	80173d4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	4618      	mov	r0, r3
 8010f36:	3708      	adds	r7, #8
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	08028570 	.word	0x08028570

08010f40 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f7ff ffe7 	bl	8010f1c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8010f4e:	2114      	movs	r1, #20
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f014 fa25 	bl	80253a0 <_ZdlPvj>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	4a05      	ldr	r2, [pc, #20]	; (8010f80 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	601a      	str	r2, [r3, #0]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ff fd8b 	bl	8010a8c <_ZN8touchgfx6WidgetD1Ev>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3708      	adds	r7, #8
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	08028c00 	.word	0x08028c00

08010f84 <_ZN8touchgfx5ImageD0Ev>:
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7ff ffe7 	bl	8010f60 <_ZN8touchgfx5ImageD1Ev>
 8010f92:	212c      	movs	r1, #44	; 0x2c
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f014 fa03 	bl	80253a0 <_ZdlPvj>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	4a05      	ldr	r2, [pc, #20]	; (8010fc4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	601a      	str	r2, [r3, #0]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7ff fcef 	bl	8010998 <_ZN8touchgfx6ScreenD1Ev>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3708      	adds	r7, #8
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	080270e4 	.word	0x080270e4

08010fc8 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f7ff ffe7 	bl	8010fa4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010fd6:	2140      	movs	r1, #64	; 0x40
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f014 f9e1 	bl	80253a0 <_ZdlPvj>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	4a84      	ldr	r2, [pc, #528]	; (8011204 <_ZN12MainViewBaseD1Ev+0x21c>)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	601a      	str	r2, [r3, #0]
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f001 fe29 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8011008:	4618      	mov	r0, r3
 801100a:	f001 fe23 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8011014:	4618      	mov	r0, r3
 8011016:	f001 fe1d 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8011020:	4618      	mov	r0, r3
 8011022:	f001 fe17 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 801102c:	4618      	mov	r0, r3
 801102e:	f001 fe11 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8011038:	4618      	mov	r0, r3
 801103a:	f001 fe0b 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8011044:	4618      	mov	r0, r3
 8011046:	f001 fe05 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8011050:	4618      	mov	r0, r3
 8011052:	f7ff fe89 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 801105c:	4618      	mov	r0, r3
 801105e:	f001 fdf9 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011068:	4618      	mov	r0, r3
 801106a:	f001 fdf3 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8011074:	4618      	mov	r0, r3
 8011076:	f7ff fe77 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 8011080:	4618      	mov	r0, r3
 8011082:	f001 fde7 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 801108c:	4618      	mov	r0, r3
 801108e:	f004 fd29 	bl	8015ae4 <_ZN8touchgfx13ImageProgressD1Ev>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8011098:	4618      	mov	r0, r3
 801109a:	f001 fddb 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80110a4:	4618      	mov	r0, r3
 80110a6:	f001 fe19 	bl	8012cdc <_ZN8touchgfx13PainterRGB888D1Ev>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80110b0:	4618      	mov	r0, r3
 80110b2:	f001 fdf1 	bl	8012c98 <_ZN8touchgfx4LineD1Ev>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80110bc:	4618      	mov	r0, r3
 80110be:	f001 fe0d 	bl	8012cdc <_ZN8touchgfx13PainterRGB888D1Ev>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80110c8:	4618      	mov	r0, r3
 80110ca:	f001 fde5 	bl	8012c98 <_ZN8touchgfx4LineD1Ev>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80110d4:	4618      	mov	r0, r3
 80110d6:	f004 fc05 	bl	80158e4 <_ZN8touchgfx11BoxProgressD1Ev>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7ff fe41 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110ec:	4618      	mov	r0, r3
 80110ee:	f001 fdb1 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80110f8:	4618      	mov	r0, r3
 80110fa:	f001 fdab 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011104:	4618      	mov	r0, r3
 8011106:	f7ff fe2f 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8011110:	4618      	mov	r0, r3
 8011112:	f7ff fe29 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801111c:	4618      	mov	r0, r3
 801111e:	f001 fd99 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011128:	4618      	mov	r0, r3
 801112a:	f7ff fe1d 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8011134:	4618      	mov	r0, r3
 8011136:	f001 fdd1 	bl	8012cdc <_ZN8touchgfx13PainterRGB888D1Ev>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8011140:	4618      	mov	r0, r3
 8011142:	f001 fda9 	bl	8012c98 <_ZN8touchgfx4LineD1Ev>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801114c:	4618      	mov	r0, r3
 801114e:	f001 fd81 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8011158:	4618      	mov	r0, r3
 801115a:	f001 fd7b 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8011164:	4618      	mov	r0, r3
 8011166:	f001 fd75 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8011170:	4618      	mov	r0, r3
 8011172:	f001 fd6f 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801117c:	4618      	mov	r0, r3
 801117e:	f001 fd69 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8011188:	4618      	mov	r0, r3
 801118a:	f001 fd63 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011194:	4618      	mov	r0, r3
 8011196:	f001 fd5d 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80111a0:	4618      	mov	r0, r3
 80111a2:	f001 fd57 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7ff fed7 	bl	8010f60 <_ZN8touchgfx5ImageD1Ev>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80111b8:	4618      	mov	r0, r3
 80111ba:	f001 fd4b 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80111c4:	4618      	mov	r0, r3
 80111c6:	f001 fd45 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	33d8      	adds	r3, #216	; 0xd8
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7ff fdca 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	33a4      	adds	r3, #164	; 0xa4
 80111d8:	4618      	mov	r0, r3
 80111da:	f7ff fdc5 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	3370      	adds	r3, #112	; 0x70
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ff fdc0 	bl	8010d68 <_ZN8touchgfx8TextAreaD1Ev>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	3340      	adds	r3, #64	; 0x40
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7ff fcb3 	bl	8010b58 <_ZN8touchgfx3BoxD1Ev>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7ff fed5 	bl	8010fa4 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4618      	mov	r0, r3
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	080270b0 	.word	0x080270b0

08011208 <_ZN12MainViewBaseD0Ev>:
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7ff fee9 	bl	8010fe8 <_ZN12MainViewBaseD1Ev>
 8011216:	f242 71e4 	movw	r1, #10212	; 0x27e4
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f014 f8c0 	bl	80253a0 <_ZdlPvj>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	4618      	mov	r0, r3
 8011224:	3708      	adds	r7, #8
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
	...

0801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 801122c:	b590      	push	{r4, r7, lr}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
 8011232:	4603      	mov	r3, r0
 8011234:	71fb      	strb	r3, [r7, #7]
 8011236:	460b      	mov	r3, r1
 8011238:	71bb      	strb	r3, [r7, #6]
 801123a:	4613      	mov	r3, r2
 801123c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 801123e:	f7fe fd97 	bl	800fd70 <_ZN8touchgfx3HAL11getInstanceEv>
 8011242:	4603      	mov	r3, r0
 8011244:	2b00      	cmp	r3, #0
 8011246:	d105      	bne.n	8011254 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8011248:	4b09      	ldr	r3, [pc, #36]	; (8011270 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x44>)
 801124a:	4a0a      	ldr	r2, [pc, #40]	; (8011274 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 801124c:	2138      	movs	r1, #56	; 0x38
 801124e:	480a      	ldr	r0, [pc, #40]	; (8011278 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8011250:	f014 f8d4 	bl	80253fc <__assert_func>
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8011254:	f7fe fd98 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8011258:	6803      	ldr	r3, [r0, #0]
 801125a:	332c      	adds	r3, #44	; 0x2c
 801125c:	681c      	ldr	r4, [r3, #0]
 801125e:	797b      	ldrb	r3, [r7, #5]
 8011260:	79ba      	ldrb	r2, [r7, #6]
 8011262:	79f9      	ldrb	r1, [r7, #7]
 8011264:	47a0      	blx	r4
 8011266:	4603      	mov	r3, r0
    }
 8011268:	4618      	mov	r0, r3
 801126a:	370c      	adds	r7, #12
 801126c:	46bd      	mov	sp, r7
 801126e:	bd90      	pop	{r4, r7, pc}
 8011270:	08026a00 	.word	0x08026a00
 8011274:	08026a44 	.word	0x08026a44
 8011278:	08026aa0 	.word	0x08026aa0

0801127c <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase()
 801127c:	b590      	push	{r4, r7, lr}
 801127e:	b0c3      	sub	sp, #268	; 0x10c
 8011280:	af02      	add	r7, sp, #8
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4618      	mov	r0, r3
 8011288:	f001 fc6a 	bl	8012b60 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 801128c:	4adb      	ldr	r2, [pc, #876]	; (80115fc <_ZN12MainViewBaseC1Ev+0x380>)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	601a      	str	r2, [r3, #0]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	3340      	adds	r3, #64	; 0x40
 8011296:	4618      	mov	r0, r3
 8011298:	f7ff fc3e 	bl	8010b18 <_ZN8touchgfx3BoxC1Ev>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	3370      	adds	r3, #112	; 0x70
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ff fcaf 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	33a4      	adds	r3, #164	; 0xa4
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff fcaa 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	33d8      	adds	r3, #216	; 0xd8
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ff fca5 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ff fda7 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7ff fda1 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 80112d8:	f107 0308 	add.w	r3, r7, #8
 80112dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7ff f9a5 	bl	8010630 <_ZN8touchgfx6BitmapC1Et>
 80112e6:	f107 0308 	add.w	r3, r7, #8
 80112ea:	4619      	mov	r1, r3
 80112ec:	4620      	mov	r0, r4
 80112ee:	f7ff fdb5 	bl	8010e5c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7ff fd8b 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011304:	4618      	mov	r0, r3
 8011306:	f7ff fd85 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8011310:	4618      	mov	r0, r3
 8011312:	f7ff fd7f 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801131c:	4618      	mov	r0, r3
 801131e:	f7ff fd79 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8011328:	4618      	mov	r0, r3
 801132a:	f7ff fd73 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8011334:	4618      	mov	r0, r3
 8011336:	f7ff fd6d 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8011340:	4618      	mov	r0, r3
 8011342:	f7ff fd67 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801134c:	4618      	mov	r0, r3
 801134e:	f7ff fd61 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8011358:	4618      	mov	r0, r3
 801135a:	f006 fa07 	bl	801776c <_ZN8touchgfx4LineC1Ev>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 8011364:	f107 030c 	add.w	r3, r7, #12
 8011368:	2100      	movs	r1, #0
 801136a:	4618      	mov	r0, r3
 801136c:	f7ff f91a 	bl	80105a4 <_ZN8touchgfx9colortypeC1Em>
 8011370:	22ff      	movs	r2, #255	; 0xff
 8011372:	68f9      	ldr	r1, [r7, #12]
 8011374:	4620      	mov	r0, r4
 8011376:	f005 ffeb 	bl	8017350 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff fc3f 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801138c:	4618      	mov	r0, r3
 801138e:	f7ff fd41 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8011398:	4618      	mov	r0, r3
 801139a:	f7ff fc33 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7ff fc2d 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7ff fd2f 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80113bc:	4618      	mov	r0, r3
 80113be:	f7ff fd29 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7ff fc1b 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80113d4:	4618      	mov	r0, r3
 80113d6:	f004 fa99 	bl	801590c <_ZN8touchgfx11BoxProgressC1Ev>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80113e0:	4618      	mov	r0, r3
 80113e2:	f006 f9c3 	bl	801776c <_ZN8touchgfx4LineC1Ev>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 80113ec:	f107 0310 	add.w	r3, r7, #16
 80113f0:	2100      	movs	r1, #0
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7ff f8d6 	bl	80105a4 <_ZN8touchgfx9colortypeC1Em>
 80113f8:	22ff      	movs	r2, #255	; 0xff
 80113fa:	6939      	ldr	r1, [r7, #16]
 80113fc:	4620      	mov	r0, r4
 80113fe:	f005 ffa7 	bl	8017350 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8011408:	4618      	mov	r0, r3
 801140a:	f006 f9af 	bl	801776c <_ZN8touchgfx4LineC1Ev>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 8011414:	f107 0314 	add.w	r3, r7, #20
 8011418:	2100      	movs	r1, #0
 801141a:	4618      	mov	r0, r3
 801141c:	f7ff f8c2 	bl	80105a4 <_ZN8touchgfx9colortypeC1Em>
 8011420:	22ff      	movs	r2, #255	; 0xff
 8011422:	6979      	ldr	r1, [r7, #20]
 8011424:	4620      	mov	r0, r4
 8011426:	f005 ff93 	bl	8017350 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff fcef 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 801143c:	4618      	mov	r0, r3
 801143e:	f004 fb7b 	bl	8015b38 <_ZN8touchgfx13ImageProgressC1Ev>
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 8011448:	4618      	mov	r0, r3
 801144a:	f7ff fce3 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff fbd5 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8011460:	4618      	mov	r0, r3
 8011462:	f7ff fcd7 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 801146c:	4618      	mov	r0, r3
 801146e:	f7ff fcd1 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff fbc3 	bl	8010c04 <_ZN8touchgfx8TextAreaC1Ev>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8011484:	4618      	mov	r0, r3
 8011486:	f7ff fcc5 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8011490:	4618      	mov	r0, r3
 8011492:	f7ff fcbf 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 801149c:	4618      	mov	r0, r3
 801149e:	f7ff fcb9 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7ff fcb3 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7ff fcad 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7ff fca7 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7ff fca1 	bl	8010e14 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f603 33c4 	addw	r3, r3, #3012	; 0xbc4
 80114d8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80114dc:	4618      	mov	r0, r3
 80114de:	f006 ff59 	bl	8018394 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80114e8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80114ec:	9300      	str	r3, [sp, #0]
 80114ee:	f44f 7348 	mov.w	r3, #800	; 0x320
 80114f2:	2200      	movs	r2, #0
 80114f4:	2100      	movs	r1, #0
 80114f6:	f7ff f8f9 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011500:	2200      	movs	r2, #0
 8011502:	2100      	movs	r1, #0
 8011504:	2000      	movs	r0, #0
 8011506:	f7ff fe91 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801150a:	4603      	mov	r3, r0
 801150c:	4619      	mov	r1, r3
 801150e:	4620      	mov	r0, r4
 8011510:	f7ff fb44 	bl	8010b9c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    CltDecsriptor.setXY(218, 220);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	3370      	adds	r3, #112	; 0x70
 8011518:	22dc      	movs	r2, #220	; 0xdc
 801151a:	21da      	movs	r1, #218	; 0xda
 801151c:	4618      	mov	r0, r3
 801151e:	f7ff f930 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011528:	2200      	movs	r2, #0
 801152a:	21dc      	movs	r1, #220	; 0xdc
 801152c:	20ff      	movs	r0, #255	; 0xff
 801152e:	f7ff fe7d 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011532:	4603      	mov	r3, r0
 8011534:	4619      	mov	r1, r3
 8011536:	4620      	mov	r0, r4
 8011538:	f7ff fba7 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	3370      	adds	r3, #112	; 0x70
 8011540:	2100      	movs	r1, #0
 8011542:	4618      	mov	r0, r3
 8011544:	f7ff fbf4 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801154e:	f107 0318 	add.w	r3, r7, #24
 8011552:	2115      	movs	r1, #21
 8011554:	4618      	mov	r0, r3
 8011556:	f7ff fb2f 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801155a:	8b39      	ldrh	r1, [r7, #24]
 801155c:	4620      	mov	r0, r4
 801155e:	f006 fc0b 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(223, 139);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	33a4      	adds	r3, #164	; 0xa4
 8011566:	228b      	movs	r2, #139	; 0x8b
 8011568:	21df      	movs	r1, #223	; 0xdf
 801156a:	4618      	mov	r0, r3
 801156c:	f7ff f909 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011576:	2200      	movs	r2, #0
 8011578:	21dc      	movs	r1, #220	; 0xdc
 801157a:	20ff      	movs	r0, #255	; 0xff
 801157c:	f7ff fe56 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011580:	4603      	mov	r3, r0
 8011582:	4619      	mov	r1, r3
 8011584:	4620      	mov	r0, r4
 8011586:	f7ff fb80 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	33a4      	adds	r3, #164	; 0xa4
 801158e:	2100      	movs	r1, #0
 8011590:	4618      	mov	r0, r3
 8011592:	f7ff fbcd 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801159c:	f107 031c 	add.w	r3, r7, #28
 80115a0:	210f      	movs	r1, #15
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7ff fb08 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80115a8:	8bb9      	ldrh	r1, [r7, #28]
 80115aa:	4620      	mov	r0, r4
 80115ac:	f006 fbe4 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(24, 127);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	33d8      	adds	r3, #216	; 0xd8
 80115b4:	227f      	movs	r2, #127	; 0x7f
 80115b6:	2118      	movs	r1, #24
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7ff f8e2 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80115c4:	2200      	movs	r2, #0
 80115c6:	21dc      	movs	r1, #220	; 0xdc
 80115c8:	20ff      	movs	r0, #255	; 0xff
 80115ca:	f7ff fe2f 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80115ce:	4603      	mov	r3, r0
 80115d0:	4619      	mov	r1, r3
 80115d2:	4620      	mov	r0, r4
 80115d4:	f7ff fb59 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	33d8      	adds	r3, #216	; 0xd8
 80115dc:	2100      	movs	r1, #0
 80115de:	4618      	mov	r0, r3
 80115e0:	f7ff fba6 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80115ea:	f107 0320 	add.w	r3, r7, #32
 80115ee:	210e      	movs	r1, #14
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7ff fae1 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80115f6:	8c39      	ldrh	r1, [r7, #32]
 80115f8:	4620      	mov	r0, r4
 80115fa:	e001      	b.n	8011600 <_ZN12MainViewBaseC1Ev+0x384>
 80115fc:	080270b0 	.word	0x080270b0
 8011600:	f006 fbba 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 801160a:	233e      	movs	r3, #62	; 0x3e
 801160c:	9300      	str	r3, [sp, #0]
 801160e:	2372      	movs	r3, #114	; 0x72
 8011610:	224d      	movs	r2, #77	; 0x4d
 8011612:	21bb      	movs	r1, #187	; 0xbb
 8011614:	f7ff f86a 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801161e:	22ff      	movs	r2, #255	; 0xff
 8011620:	21ff      	movs	r1, #255	; 0xff
 8011622:	20ff      	movs	r0, #255	; 0xff
 8011624:	f7ff fe02 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011628:	4603      	mov	r3, r0
 801162a:	4619      	mov	r1, r3
 801162c:	4620      	mov	r0, r4
 801162e:	f7ff fb2c 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011638:	2100      	movs	r1, #0
 801163a:	4618      	mov	r0, r3
 801163c:	f7ff fb78 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID90).getText());
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f603 3404 	addw	r4, r3, #2820	; 0xb04
 8011646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801164a:	2138      	movs	r1, #56	; 0x38
 801164c:	4618      	mov	r0, r3
 801164e:	f7ff fab3 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011656:	4618      	mov	r0, r3
 8011658:	f7ff fabe 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 801165c:	4603      	mov	r3, r0
 801165e:	4ae1      	ldr	r2, [pc, #900]	; (80119e4 <_ZN12MainViewBaseC1Ev+0x768>)
 8011660:	2105      	movs	r1, #5
 8011662:	4620      	mov	r0, r4
 8011664:	f009 ff32 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 8011674:	4619      	mov	r1, r3
 8011676:	4610      	mov	r0, r2
 8011678:	f7ff fbe2 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8011682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011686:	2102      	movs	r1, #2
 8011688:	4618      	mov	r0, r3
 801168a:	f7ff fa95 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801168e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8011690:	4620      	mov	r0, r4
 8011692:	f006 fb71 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    SpeedValue.setPosition(23, 86, 71, 41);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f503 70a2 	add.w	r0, r3, #324	; 0x144
 801169c:	2329      	movs	r3, #41	; 0x29
 801169e:	9300      	str	r3, [sp, #0]
 80116a0:	2347      	movs	r3, #71	; 0x47
 80116a2:	2256      	movs	r2, #86	; 0x56
 80116a4:	2117      	movs	r1, #23
 80116a6:	f7ff f821 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    SpeedValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 80116b0:	22ff      	movs	r2, #255	; 0xff
 80116b2:	21ff      	movs	r1, #255	; 0xff
 80116b4:	20ff      	movs	r0, #255	; 0xff
 80116b6:	f7ff fdb9 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116ba:	4603      	mov	r3, r0
 80116bc:	4619      	mov	r1, r3
 80116be:	4620      	mov	r0, r4
 80116c0:	f7ff fae3 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    SpeedValue.setLinespacing(0);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80116ca:	2100      	movs	r1, #0
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7ff fb2f 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(SpeedValueBuffer, SPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f603 340e 	addw	r4, r3, #2830	; 0xb0e
 80116d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80116dc:	2101      	movs	r1, #1
 80116de:	4618      	mov	r0, r3
 80116e0:	f7ff fa6a 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80116e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7ff fa75 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80116ee:	4603      	mov	r3, r0
 80116f0:	4abc      	ldr	r2, [pc, #752]	; (80119e4 <_ZN12MainViewBaseC1Ev+0x768>)
 80116f2:	2105      	movs	r1, #5
 80116f4:	4620      	mov	r0, r4
 80116f6:	f009 fee9 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    SpeedValue.setWildcard(SpeedValueBuffer);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f603 330e 	addw	r3, r3, #2830	; 0xb0e
 8011706:	4619      	mov	r1, r3
 8011708:	4610      	mov	r0, r2
 801170a:	f7ff fb99 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    SpeedValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8011714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011718:	2100      	movs	r1, #0
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff fa4c 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011720:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8011722:	4620      	mov	r0, r4
 8011724:	f006 fb28 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801172e:	223f      	movs	r2, #63	; 0x3f
 8011730:	21b3      	movs	r1, #179	; 0xb3
 8011732:	4618      	mov	r0, r3
 8011734:	f7ff f825 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801173e:	2100      	movs	r1, #0
 8011740:	4618      	mov	r0, r3
 8011742:	f7ff f88f 	bl	8010864 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 801174c:	230e      	movs	r3, #14
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	2312      	movs	r3, #18
 8011752:	223f      	movs	r2, #63	; 0x3f
 8011754:	2136      	movs	r1, #54	; 0x36
 8011756:	f7fe ffc9 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011760:	22ff      	movs	r2, #255	; 0xff
 8011762:	21ff      	movs	r1, #255	; 0xff
 8011764:	20ff      	movs	r0, #255	; 0xff
 8011766:	f7ff fd61 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801176a:	4603      	mov	r3, r0
 801176c:	4619      	mov	r1, r3
 801176e:	4620      	mov	r0, r4
 8011770:	f7ff fa8b 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801177a:	2100      	movs	r1, #0
 801177c:	4618      	mov	r0, r3
 801177e:	f7ff fad7 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f603 3418 	addw	r4, r3, #2840	; 0xb18
 8011788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801178c:	211f      	movs	r1, #31
 801178e:	4618      	mov	r0, r3
 8011790:	f7ff fa12 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011794:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011798:	4618      	mov	r0, r3
 801179a:	f7ff fa1d 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 801179e:	4603      	mov	r3, r0
 80117a0:	4a90      	ldr	r2, [pc, #576]	; (80119e4 <_ZN12MainViewBaseC1Ev+0x768>)
 80117a2:	2102      	movs	r1, #2
 80117a4:	4620      	mov	r0, r4
 80117a6:	f009 fe91 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 80117b6:	4619      	mov	r1, r3
 80117b8:	4610      	mov	r0, r2
 80117ba:	f7ff fb41 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80117c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80117c8:	2103      	movs	r1, #3
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7ff f9f4 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80117d0:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80117d2:	4620      	mov	r0, r4
 80117d4:	f006 fad0 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 80117de:	230e      	movs	r3, #14
 80117e0:	9300      	str	r3, [sp, #0]
 80117e2:	2312      	movs	r3, #18
 80117e4:	223f      	movs	r2, #63	; 0x3f
 80117e6:	2173      	movs	r1, #115	; 0x73
 80117e8:	f7fe ff80 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 80117f2:	22ff      	movs	r2, #255	; 0xff
 80117f4:	21ff      	movs	r1, #255	; 0xff
 80117f6:	20ff      	movs	r0, #255	; 0xff
 80117f8:	f7ff fd18 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80117fc:	4603      	mov	r3, r0
 80117fe:	4619      	mov	r1, r3
 8011800:	4620      	mov	r0, r4
 8011802:	f7ff fa42 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801180c:	2100      	movs	r1, #0
 801180e:	4618      	mov	r0, r3
 8011810:	f7ff fa8e 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f603 341c 	addw	r4, r3, #2844	; 0xb1c
 801181a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801181e:	2120      	movs	r1, #32
 8011820:	4618      	mov	r0, r3
 8011822:	f7ff f9c9 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011826:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801182a:	4618      	mov	r0, r3
 801182c:	f7ff f9d4 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011830:	4603      	mov	r3, r0
 8011832:	4a6c      	ldr	r2, [pc, #432]	; (80119e4 <_ZN12MainViewBaseC1Ev+0x768>)
 8011834:	2102      	movs	r1, #2
 8011836:	4620      	mov	r0, r4
 8011838:	f009 fe48 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 8011848:	4619      	mov	r1, r3
 801184a:	4610      	mov	r0, r2
 801184c:	f7ff faf8 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8011856:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801185a:	2104      	movs	r1, #4
 801185c:	4618      	mov	r0, r3
 801185e:	f7ff f9ab 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011862:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8011866:	4620      	mov	r0, r4
 8011868:	f006 fa86 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8011872:	230e      	movs	r3, #14
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	2312      	movs	r3, #18
 8011878:	223e      	movs	r2, #62	; 0x3e
 801187a:	21ad      	movs	r1, #173	; 0xad
 801187c:	f7fe ff36 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8011886:	22ff      	movs	r2, #255	; 0xff
 8011888:	21ff      	movs	r1, #255	; 0xff
 801188a:	20ff      	movs	r0, #255	; 0xff
 801188c:	f7ff fcce 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011890:	4603      	mov	r3, r0
 8011892:	4619      	mov	r1, r3
 8011894:	4620      	mov	r0, r4
 8011896:	f7ff f9f8 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80118a0:	2100      	movs	r1, #0
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7ff fa44 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f503 6432 	add.w	r4, r3, #2848	; 0xb20
 80118ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80118b2:	2121      	movs	r1, #33	; 0x21
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7ff f97f 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80118ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80118be:	4618      	mov	r0, r3
 80118c0:	f7ff f98a 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80118c4:	4603      	mov	r3, r0
 80118c6:	4a47      	ldr	r2, [pc, #284]	; (80119e4 <_ZN12MainViewBaseC1Ev+0x768>)
 80118c8:	2102      	movs	r1, #2
 80118ca:	4620      	mov	r0, r4
 80118cc:	f009 fdfe 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f503 7206 	add.w	r2, r3, #536	; 0x218
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 80118dc:	4619      	mov	r1, r3
 80118de:	4610      	mov	r0, r2
 80118e0:	f7ff faae 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f503 7406 	add.w	r4, r3, #536	; 0x218
 80118ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80118ee:	2105      	movs	r1, #5
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7ff f961 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80118f6:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80118fa:	4620      	mov	r0, r4
 80118fc:	f006 fa3c 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f503 7014 	add.w	r0, r3, #592	; 0x250
 8011906:	230e      	movs	r3, #14
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	2312      	movs	r3, #18
 801190c:	223e      	movs	r2, #62	; 0x3e
 801190e:	21e7      	movs	r1, #231	; 0xe7
 8011910:	f7fe feec 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f503 7414 	add.w	r4, r3, #592	; 0x250
 801191a:	22ff      	movs	r2, #255	; 0xff
 801191c:	21ff      	movs	r1, #255	; 0xff
 801191e:	20ff      	movs	r0, #255	; 0xff
 8011920:	f7ff fc84 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011924:	4603      	mov	r3, r0
 8011926:	4619      	mov	r1, r3
 8011928:	4620      	mov	r0, r4
 801192a:	f7ff f9ae 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011934:	2100      	movs	r1, #0
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff f9fa 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f603 3424 	addw	r4, r3, #2852	; 0xb24
 8011942:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011946:	2122      	movs	r1, #34	; 0x22
 8011948:	4618      	mov	r0, r3
 801194a:	f7ff f935 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801194e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011952:	4618      	mov	r0, r3
 8011954:	f7ff f940 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011958:	4603      	mov	r3, r0
 801195a:	4a22      	ldr	r2, [pc, #136]	; (80119e4 <_ZN12MainViewBaseC1Ev+0x768>)
 801195c:	2102      	movs	r1, #2
 801195e:	4620      	mov	r0, r4
 8011960:	f009 fdb4 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f503 7214 	add.w	r2, r3, #592	; 0x250
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f603 3324 	addw	r3, r3, #2852	; 0xb24
 8011970:	4619      	mov	r1, r3
 8011972:	4610      	mov	r0, r2
 8011974:	f7ff fa64 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f503 7414 	add.w	r4, r3, #592	; 0x250
 801197e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011982:	2106      	movs	r1, #6
 8011984:	4618      	mov	r0, r3
 8011986:	f7ff f917 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801198a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 801198e:	4620      	mov	r0, r4
 8011990:	f006 f9f2 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f503 7022 	add.w	r0, r3, #648	; 0x288
 801199a:	230e      	movs	r3, #14
 801199c:	9300      	str	r3, [sp, #0]
 801199e:	2312      	movs	r3, #18
 80119a0:	223f      	movs	r2, #63	; 0x3f
 80119a2:	f44f 7192 	mov.w	r1, #292	; 0x124
 80119a6:	f7fe fea1 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f503 7422 	add.w	r4, r3, #648	; 0x288
 80119b0:	22ff      	movs	r2, #255	; 0xff
 80119b2:	21ff      	movs	r1, #255	; 0xff
 80119b4:	20ff      	movs	r0, #255	; 0xff
 80119b6:	f7ff fc39 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80119ba:	4603      	mov	r3, r0
 80119bc:	4619      	mov	r1, r3
 80119be:	4620      	mov	r0, r4
 80119c0:	f7ff f963 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80119ca:	2100      	movs	r1, #0
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7ff f9af 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f603 3428 	addw	r4, r3, #2856	; 0xb28
 80119d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80119dc:	2123      	movs	r1, #35	; 0x23
 80119de:	4618      	mov	r0, r3
 80119e0:	e002      	b.n	80119e8 <_ZN12MainViewBaseC1Ev+0x76c>
 80119e2:	bf00      	nop
 80119e4:	08026ae0 	.word	0x08026ae0
 80119e8:	f7ff f8e6 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80119ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7ff f8f1 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80119f6:	4603      	mov	r3, r0
 80119f8:	4ae2      	ldr	r2, [pc, #904]	; (8011d84 <_ZN12MainViewBaseC1Ev+0xb08>)
 80119fa:	2102      	movs	r1, #2
 80119fc:	4620      	mov	r0, r4
 80119fe:	f009 fd65 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8011a0e:	4619      	mov	r1, r3
 8011a10:	4610      	mov	r0, r2
 8011a12:	f7ff fa15 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f503 7422 	add.w	r4, r3, #648	; 0x288
 8011a1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011a20:	2107      	movs	r1, #7
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7ff f8c8 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011a28:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f006 f9a3 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8011a38:	230e      	movs	r3, #14
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	2312      	movs	r3, #18
 8011a3e:	223f      	movs	r2, #63	; 0x3f
 8011a40:	f240 115d 	movw	r1, #349	; 0x15d
 8011a44:	f7fe fe52 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8011a4e:	22ff      	movs	r2, #255	; 0xff
 8011a50:	21ff      	movs	r1, #255	; 0xff
 8011a52:	20ff      	movs	r0, #255	; 0xff
 8011a54:	f7ff fbea 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f7ff f914 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8011a68:	2100      	movs	r1, #0
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7ff f960 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f603 342c 	addw	r4, r3, #2860	; 0xb2c
 8011a76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011a7a:	2124      	movs	r1, #36	; 0x24
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7ff f89b 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011a82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7ff f8a6 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	4abd      	ldr	r2, [pc, #756]	; (8011d84 <_ZN12MainViewBaseC1Ev+0xb08>)
 8011a90:	2102      	movs	r1, #2
 8011a92:	4620      	mov	r0, r4
 8011a94:	f009 fd1a 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f503 7230 	add.w	r2, r3, #704	; 0x2c0
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f603 332c 	addw	r3, r3, #2860	; 0xb2c
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	4610      	mov	r0, r2
 8011aa8:	f7ff f9ca 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8011ab2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011ab6:	2108      	movs	r1, #8
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7ff f87d 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011abe:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f006 f958 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8011ace:	230f      	movs	r3, #15
 8011ad0:	9300      	str	r3, [sp, #0]
 8011ad2:	2312      	movs	r3, #18
 8011ad4:	223e      	movs	r2, #62	; 0x3e
 8011ad6:	f240 119b 	movw	r1, #411	; 0x19b
 8011ada:	f7fe fe07 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 8011ae4:	22ff      	movs	r2, #255	; 0xff
 8011ae6:	21ff      	movs	r1, #255	; 0xff
 8011ae8:	20ff      	movs	r0, #255	; 0xff
 8011aea:	f7ff fb9f 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011aee:	4603      	mov	r3, r0
 8011af0:	4619      	mov	r1, r3
 8011af2:	4620      	mov	r0, r4
 8011af4:	f7ff f8c9 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8011afe:	2100      	movs	r1, #0
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7ff f915 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f503 6433 	add.w	r4, r3, #2864	; 0xb30
 8011b0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011b10:	2125      	movs	r1, #37	; 0x25
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7ff f850 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011b18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7ff f85b 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011b22:	4603      	mov	r3, r0
 8011b24:	4a97      	ldr	r2, [pc, #604]	; (8011d84 <_ZN12MainViewBaseC1Ev+0xb08>)
 8011b26:	2102      	movs	r1, #2
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f009 fccf 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f503 723e 	add.w	r2, r3, #760	; 0x2f8
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	4610      	mov	r0, r2
 8011b3e:	f7ff f97f 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f503 743e 	add.w	r4, r3, #760	; 0x2f8
 8011b48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011b4c:	2109      	movs	r1, #9
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7ff f832 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011b54:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f006 f90d 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8011b64:	230e      	movs	r3, #14
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	2312      	movs	r3, #18
 8011b6a:	223e      	movs	r2, #62	; 0x3e
 8011b6c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8011b70:	f7fe fdbc 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8011b7a:	22ff      	movs	r2, #255	; 0xff
 8011b7c:	21ff      	movs	r1, #255	; 0xff
 8011b7e:	20ff      	movs	r0, #255	; 0xff
 8011b80:	f7ff fb54 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011b84:	4603      	mov	r3, r0
 8011b86:	4619      	mov	r1, r3
 8011b88:	4620      	mov	r0, r4
 8011b8a:	f7ff f87e 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8011b94:	2100      	movs	r1, #0
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ff f8ca 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f603 3434 	addw	r4, r3, #2868	; 0xb34
 8011ba2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011ba6:	2126      	movs	r1, #38	; 0x26
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7ff f805 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011bae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7ff f810 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	4a72      	ldr	r2, [pc, #456]	; (8011d84 <_ZN12MainViewBaseC1Ev+0xb08>)
 8011bbc:	2102      	movs	r1, #2
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f009 fc84 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f503 724c 	add.w	r2, r3, #816	; 0x330
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f603 3334 	addw	r3, r3, #2868	; 0xb34
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	4610      	mov	r0, r2
 8011bd4:	f7ff f934 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8011bde:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011be2:	210a      	movs	r1, #10
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7fe ffe7 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011bea:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f006 f8c2 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f503 705a 	add.w	r0, r3, #872	; 0x368
 8011bfa:	2305      	movs	r3, #5
 8011bfc:	9300      	str	r3, [sp, #0]
 8011bfe:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8011c02:	223a      	movs	r2, #58	; 0x3a
 8011c04:	f06f 0101 	mvn.w	r1, #1
 8011c08:	f7fe fd70 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 8011c12:	22ff      	movs	r2, #255	; 0xff
 8011c14:	21ff      	movs	r1, #255	; 0xff
 8011c16:	20ff      	movs	r0, #255	; 0xff
 8011c18:	f7ff fb08 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	22ff      	movs	r2, #255	; 0xff
 8011c20:	4619      	mov	r1, r3
 8011c22:	4620      	mov	r0, r4
 8011c24:	f005 fb79 	bl	801731a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f503 725a 	add.w	r2, r3, #872	; 0x368
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8011c34:	4619      	mov	r1, r3
 8011c36:	4610      	mov	r0, r2
 8011c38:	f005 fbd8 	bl	80173ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8011c42:	2203      	movs	r2, #3
 8011c44:	2100      	movs	r1, #0
 8011c46:	4618      	mov	r0, r3
 8011c48:	f000 ffa0 	bl	8012b8c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8011c52:	2203      	movs	r2, #3
 8011c54:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f000 ffbd 	bl	8012bd8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8011c64:	2102      	movs	r1, #2
 8011c66:	4618      	mov	r0, r3
 8011c68:	f000 ffdc 	bl	8012c24 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8011c72:	2101      	movs	r1, #1
 8011c74:	4618      	mov	r0, r3
 8011c76:	f005 fed3 	bl	8017a20 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(132, 127);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011c80:	227f      	movs	r2, #127	; 0x7f
 8011c82:	2184      	movs	r1, #132	; 0x84
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fe fd7c 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 8011c90:	2200      	movs	r2, #0
 8011c92:	21dc      	movs	r1, #220	; 0xdc
 8011c94:	20ff      	movs	r0, #255	; 0xff
 8011c96:	f7ff fac9 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f7fe fff3 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8011caa:	2100      	movs	r1, #0
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7ff f83f 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f503 747d 	add.w	r4, r3, #1012	; 0x3f4
 8011cb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011cbc:	210d      	movs	r1, #13
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe ff7a 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011cc4:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8011cc8:	4620      	mov	r0, r4
 8011cca:	f006 f855 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(114, 86, 60, 42);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f503 6085 	add.w	r0, r3, #1064	; 0x428
 8011cd4:	232a      	movs	r3, #42	; 0x2a
 8011cd6:	9300      	str	r3, [sp, #0]
 8011cd8:	233c      	movs	r3, #60	; 0x3c
 8011cda:	2256      	movs	r2, #86	; 0x56
 8011cdc:	2172      	movs	r1, #114	; 0x72
 8011cde:	f7fe fd05 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8011ce8:	22ff      	movs	r2, #255	; 0xff
 8011cea:	21ff      	movs	r1, #255	; 0xff
 8011cec:	20ff      	movs	r0, #255	; 0xff
 8011cee:	f7ff fa9d 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	f7fe ffc7 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8011d02:	2100      	movs	r1, #0
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7ff f813 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f603 3438 	addw	r4, r3, #2872	; 0xb38
 8011d10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011d14:	210c      	movs	r1, #12
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fe ff4e 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011d1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7fe ff59 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011d26:	4603      	mov	r3, r0
 8011d28:	4a16      	ldr	r2, [pc, #88]	; (8011d84 <_ZN12MainViewBaseC1Ev+0xb08>)
 8011d2a:	2105      	movs	r1, #5
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f009 fbcd 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f503 6285 	add.w	r2, r3, #1064	; 0x428
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8011d3e:	4619      	mov	r1, r3
 8011d40:	4610      	mov	r0, r2
 8011d42:	f7ff f87d 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8011d4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011d50:	210b      	movs	r1, #11
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7fe ff30 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011d58:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	f006 f80b 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(325, 126);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8011d68:	227e      	movs	r2, #126	; 0x7e
 8011d6a:	f240 1145 	movw	r1, #325	; 0x145
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fe fd07 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	21dc      	movs	r1, #220	; 0xdc
 8011d7e:	20ff      	movs	r0, #255	; 0xff
 8011d80:	e002      	b.n	8011d88 <_ZN12MainViewBaseC1Ev+0xb0c>
 8011d82:	bf00      	nop
 8011d84:	08026ae0 	.word	0x08026ae0
 8011d88:	f7ff fa50 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	4619      	mov	r1, r3
 8011d90:	4620      	mov	r0, r4
 8011d92:	f7fe ff7a 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7fe ffc6 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 8011daa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011dae:	2110      	movs	r1, #16
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fe ff01 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011db6:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f005 ffdc 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(401, 126);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011dc6:	227e      	movs	r2, #126	; 0x7e
 8011dc8:	f240 1191 	movw	r1, #401	; 0x191
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7fe fcd8 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8011dd8:	2200      	movs	r2, #0
 8011dda:	21dc      	movs	r1, #220	; 0xdc
 8011ddc:	20ff      	movs	r0, #255	; 0xff
 8011dde:	f7ff fa25 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011de2:	4603      	mov	r3, r0
 8011de4:	4619      	mov	r1, r3
 8011de6:	4620      	mov	r0, r4
 8011de8:	f7fe ff4f 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8011df2:	2100      	movs	r1, #0
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fe ff9b 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8011e00:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011e04:	2111      	movs	r1, #17
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fe fed6 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011e0c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8011e10:	4620      	mov	r0, r4
 8011e12:	f005 ffb1 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 85, 75, 42);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 8011e1c:	232a      	movs	r3, #42	; 0x2a
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	234b      	movs	r3, #75	; 0x4b
 8011e22:	2255      	movs	r2, #85	; 0x55
 8011e24:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8011e28:	f7fe fc60 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011e32:	22ff      	movs	r2, #255	; 0xff
 8011e34:	21ff      	movs	r1, #255	; 0xff
 8011e36:	20ff      	movs	r0, #255	; 0xff
 8011e38:	f7ff f9f8 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	4619      	mov	r1, r3
 8011e40:	4620      	mov	r0, r4
 8011e42:	f7fe ff22 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8011e4c:	2100      	movs	r1, #0
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f7fe ff6e 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f603 3442 	addw	r4, r3, #2882	; 0xb42
 8011e5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011e5e:	2113      	movs	r1, #19
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7fe fea9 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011e66:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7fe feb4 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011e70:	4603      	mov	r3, r0
 8011e72:	4ae1      	ldr	r2, [pc, #900]	; (80121f8 <_ZN12MainViewBaseC1Ev+0xf7c>)
 8011e74:	2105      	movs	r1, #5
 8011e76:	4620      	mov	r0, r4
 8011e78:	f009 fb28 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f603 3342 	addw	r3, r3, #2882	; 0xb42
 8011e88:	4619      	mov	r1, r3
 8011e8a:	4610      	mov	r0, r2
 8011e8c:	f7fe ffd8 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8011e96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011e9a:	2112      	movs	r1, #18
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7fe fe8b 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011ea2:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f005 ff66 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 85, 71, 40);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
 8011eb2:	2328      	movs	r3, #40	; 0x28
 8011eb4:	9300      	str	r3, [sp, #0]
 8011eb6:	2347      	movs	r3, #71	; 0x47
 8011eb8:	2255      	movs	r2, #85	; 0x55
 8011eba:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8011ebe:	f7fe fc15 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8011ec8:	22ff      	movs	r2, #255	; 0xff
 8011eca:	21ff      	movs	r1, #255	; 0xff
 8011ecc:	20ff      	movs	r0, #255	; 0xff
 8011ece:	f7ff f9ad 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	f7fe fed7 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011ee2:	2100      	movs	r1, #0
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7fe ff23 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f603 344c 	addw	r4, r3, #2892	; 0xb4c
 8011ef0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011ef4:	211e      	movs	r1, #30
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7fe fe5e 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011efc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fe fe69 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8011f06:	4603      	mov	r3, r0
 8011f08:	4abb      	ldr	r2, [pc, #748]	; (80121f8 <_ZN12MainViewBaseC1Ev+0xf7c>)
 8011f0a:	2105      	movs	r1, #5
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	f009 fadd 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f603 334c 	addw	r3, r3, #2892	; 0xb4c
 8011f1e:	4619      	mov	r1, r3
 8011f20:	4610      	mov	r0, r2
 8011f22:	f7fe ff8d 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8011f2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011f30:	2114      	movs	r1, #20
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7fe fe40 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011f38:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	f005 ff1b 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8011f48:	22f0      	movs	r2, #240	; 0xf0
 8011f4a:	f240 1197 	movw	r1, #407	; 0x197
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7fe fc17 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	21dc      	movs	r1, #220	; 0xdc
 8011f5e:	20ff      	movs	r0, #255	; 0xff
 8011f60:	f7ff f964 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f64:	4603      	mov	r3, r0
 8011f66:	4619      	mov	r1, r3
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f7fe fe8e 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8011f74:	2100      	movs	r1, #0
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7fe feda 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 8011f82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011f86:	2116      	movs	r1, #22
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7fe fe15 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8011f8e:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8011f92:	4620      	mov	r0, r4
 8011f94:	f005 fef0 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011f9e:	22e2      	movs	r2, #226	; 0xe2
 8011fa0:	f240 116f 	movw	r1, #367	; 0x16f
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7fe fbec 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 8011fb0:	230a      	movs	r3, #10
 8011fb2:	9300      	str	r3, [sp, #0]
 8011fb4:	2364      	movs	r3, #100	; 0x64
 8011fb6:	2202      	movs	r2, #2
 8011fb8:	2102      	movs	r1, #2
 8011fba:	f003 fcdd 	bl	8015978 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f203 506c 	addw	r0, r3, #1388	; 0x56c
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	2300      	movs	r3, #0
 8011fca:	2264      	movs	r2, #100	; 0x64
 8011fcc:	2100      	movs	r1, #0
 8011fce:	f003 ff51 	bl	8015e74 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8011fd8:	2100      	movs	r1, #0
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f003 fd2c 	bl	8015a38 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 8011fe6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011fea:	2100      	movs	r1, #0
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7fe fb1f 	bl	8010630 <_ZN8touchgfx6BitmapC1Et>
 8011ff2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f003 ff30 	bl	8015e5e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f203 546c 	addw	r4, r3, #1388	; 0x56c
 8012004:	2200      	movs	r2, #0
 8012006:	21dc      	movs	r1, #220	; 0xdc
 8012008:	20ff      	movs	r0, #255	; 0xff
 801200a:	f7ff f90f 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801200e:	4603      	mov	r3, r0
 8012010:	4619      	mov	r1, r3
 8012012:	4620      	mov	r0, r4
 8012014:	f003 fc5a 	bl	80158cc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801201e:	213c      	movs	r1, #60	; 0x3c
 8012020:	4618      	mov	r0, r3
 8012022:	f003 fcc1 	bl	80159a8 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f203 602c 	addw	r0, r3, #1580	; 0x62c
 801202c:	230a      	movs	r3, #10
 801202e:	9300      	str	r3, [sp, #0]
 8012030:	23b4      	movs	r3, #180	; 0xb4
 8012032:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012036:	210e      	movs	r1, #14
 8012038:	f7fe fb58 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 8012042:	22ff      	movs	r2, #255	; 0xff
 8012044:	21ff      	movs	r1, #255	; 0xff
 8012046:	20ff      	movs	r0, #255	; 0xff
 8012048:	f7ff f8f0 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801204c:	4603      	mov	r3, r0
 801204e:	22ff      	movs	r2, #255	; 0xff
 8012050:	4619      	mov	r1, r3
 8012052:	4620      	mov	r0, r4
 8012054:	f005 f961 	bl	801731a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f203 622c 	addw	r2, r3, #1580	; 0x62c
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8012064:	4619      	mov	r1, r3
 8012066:	4610      	mov	r0, r2
 8012068:	f005 f9c0 	bl	80173ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8012072:	2205      	movs	r2, #5
 8012074:	2100      	movs	r1, #0
 8012076:	4618      	mov	r0, r3
 8012078:	f000 fd88 	bl	8012b8c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8012082:	2205      	movs	r2, #5
 8012084:	21b4      	movs	r1, #180	; 0xb4
 8012086:	4618      	mov	r0, r3
 8012088:	f000 fda6 	bl	8012bd8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8012092:	2102      	movs	r1, #2
 8012094:	4618      	mov	r0, r3
 8012096:	f000 fdc5 	bl	8012c24 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80120a0:	2100      	movs	r1, #0
 80120a2:	4618      	mov	r0, r3
 80120a4:	f005 fcbc 	bl	8017a20 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f503 60d7 	add.w	r0, r3, #1720	; 0x6b8
 80120ae:	230a      	movs	r3, #10
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	23b4      	movs	r3, #180	; 0xb4
 80120b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80120b8:	f240 111f 	movw	r1, #287	; 0x11f
 80120bc:	f7fe fb16 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f203 742c 	addw	r4, r3, #1836	; 0x72c
 80120c6:	22ff      	movs	r2, #255	; 0xff
 80120c8:	21ff      	movs	r1, #255	; 0xff
 80120ca:	20ff      	movs	r0, #255	; 0xff
 80120cc:	f7ff f8ae 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80120d0:	4603      	mov	r3, r0
 80120d2:	22ff      	movs	r2, #255	; 0xff
 80120d4:	4619      	mov	r1, r3
 80120d6:	4620      	mov	r0, r4
 80120d8:	f005 f91f 	bl	801731a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f503 62d7 	add.w	r2, r3, #1720	; 0x6b8
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80120e8:	4619      	mov	r1, r3
 80120ea:	4610      	mov	r0, r2
 80120ec:	f005 f97e 	bl	80173ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80120f6:	2205      	movs	r2, #5
 80120f8:	2100      	movs	r1, #0
 80120fa:	4618      	mov	r0, r3
 80120fc:	f000 fd46 	bl	8012b8c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012106:	2205      	movs	r2, #5
 8012108:	21b4      	movs	r1, #180	; 0xb4
 801210a:	4618      	mov	r0, r3
 801210c:	f000 fd64 	bl	8012bd8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012116:	2102      	movs	r1, #2
 8012118:	4618      	mov	r0, r3
 801211a:	f000 fd83 	bl	8012c24 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012124:	2100      	movs	r1, #0
 8012126:	4618      	mov	r0, r3
 8012128:	f005 fc7a 	bl	8017a20 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 253, 60, 21);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f203 7044 	addw	r0, r3, #1860	; 0x744
 8012132:	2315      	movs	r3, #21
 8012134:	9300      	str	r3, [sp, #0]
 8012136:	233c      	movs	r3, #60	; 0x3c
 8012138:	22fd      	movs	r2, #253	; 0xfd
 801213a:	21d2      	movs	r1, #210	; 0xd2
 801213c:	f7fe fad6 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8012146:	22ff      	movs	r2, #255	; 0xff
 8012148:	21ff      	movs	r1, #255	; 0xff
 801214a:	20ff      	movs	r0, #255	; 0xff
 801214c:	f7ff f86e 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012150:	4603      	mov	r3, r0
 8012152:	4619      	mov	r1, r3
 8012154:	4620      	mov	r0, r4
 8012156:	f7fe fd98 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8012160:	2100      	movs	r1, #0
 8012162:	4618      	mov	r0, r3
 8012164:	f7fe fde4 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f603 3456 	addw	r4, r3, #2902	; 0xb56
 801216e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012172:	2118      	movs	r1, #24
 8012174:	4618      	mov	r0, r3
 8012176:	f7fe fd1f 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801217a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801217e:	4618      	mov	r0, r3
 8012180:	f7fe fd2a 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012184:	4603      	mov	r3, r0
 8012186:	4a1c      	ldr	r2, [pc, #112]	; (80121f8 <_ZN12MainViewBaseC1Ev+0xf7c>)
 8012188:	2105      	movs	r1, #5
 801218a:	4620      	mov	r0, r4
 801218c:	f009 f99e 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f203 7244 	addw	r2, r3, #1860	; 0x744
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f603 3356 	addw	r3, r3, #2902	; 0xb56
 801219c:	4619      	mov	r1, r3
 801219e:	4610      	mov	r0, r2
 80121a0:	f7fe fe4e 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f203 7444 	addw	r4, r3, #1860	; 0x744
 80121aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80121ae:	2117      	movs	r1, #23
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fe fd01 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80121b6:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 80121ba:	4620      	mov	r0, r4
 80121bc:	f005 fddc 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80121c6:	2201      	movs	r2, #1
 80121c8:	2101      	movs	r1, #1
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fe fad9 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 80121d6:	2337      	movs	r3, #55	; 0x37
 80121d8:	9300      	str	r3, [sp, #0]
 80121da:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80121de:	2202      	movs	r2, #2
 80121e0:	2102      	movs	r1, #2
 80121e2:	f003 fd19 	bl	8015c18 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 80121ec:	2300      	movs	r3, #0
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	2300      	movs	r3, #0
 80121f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80121f6:	e001      	b.n	80121fc <_ZN12MainViewBaseC1Ev+0xf80>
 80121f8:	08026ae0 	.word	0x08026ae0
 80121fc:	2100      	movs	r1, #0
 80121fe:	f003 fe39 	bl	8015e74 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012208:	2100      	movs	r1, #0
 801220a:	4618      	mov	r0, r3
 801220c:	f003 fc14 	bl	8015a38 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012216:	2101      	movs	r1, #1
 8012218:	4618      	mov	r0, r3
 801221a:	f003 fc58 	bl	8015ace <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012224:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8012228:	4618      	mov	r0, r3
 801222a:	f003 fd0d 	bl	8015c48 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012234:	2101      	movs	r1, #1
 8012236:	4618      	mov	r0, r3
 8012238:	f003 fc32 	bl	8015aa0 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(11, 4, 55, 22);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f603 006c 	addw	r0, r3, #2156	; 0x86c
 8012242:	2316      	movs	r3, #22
 8012244:	9300      	str	r3, [sp, #0]
 8012246:	2337      	movs	r3, #55	; 0x37
 8012248:	2204      	movs	r2, #4
 801224a:	210b      	movs	r1, #11
 801224c:	f7fe fa4e 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f603 046c 	addw	r4, r3, #2156	; 0x86c
 8012256:	22ff      	movs	r2, #255	; 0xff
 8012258:	21ff      	movs	r1, #255	; 0xff
 801225a:	20ff      	movs	r0, #255	; 0xff
 801225c:	f7fe ffe6 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012260:	4603      	mov	r3, r0
 8012262:	4619      	mov	r1, r3
 8012264:	4620      	mov	r0, r4
 8012266:	f7fe fd10 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 8012270:	2100      	movs	r1, #0
 8012272:	4618      	mov	r0, r3
 8012274:	f7fe fd5c 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f503 6436 	add.w	r4, r3, #2912	; 0xb60
 801227e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012282:	211a      	movs	r1, #26
 8012284:	4618      	mov	r0, r3
 8012286:	f7fe fc97 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801228a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801228e:	4618      	mov	r0, r3
 8012290:	f7fe fca2 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012294:	4603      	mov	r3, r0
 8012296:	4ae4      	ldr	r2, [pc, #912]	; (8012628 <_ZN12MainViewBaseC1Ev+0x13ac>)
 8012298:	2105      	movs	r1, #5
 801229a:	4620      	mov	r0, r4
 801229c:	f009 f916 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f603 026c 	addw	r2, r3, #2156	; 0x86c
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 80122ac:	4619      	mov	r1, r3
 80122ae:	4610      	mov	r0, r2
 80122b0:	f7fe fdc6 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f603 046c 	addw	r4, r3, #2156	; 0x86c
 80122ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80122be:	2119      	movs	r1, #25
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7fe fc79 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80122c6:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 80122ca:	4620      	mov	r0, r4
 80122cc:	f005 fd54 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(61, 15);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 80122d6:	220f      	movs	r2, #15
 80122d8:	213d      	movs	r1, #61	; 0x3d
 80122da:	4618      	mov	r0, r3
 80122dc:	f7fe fa51 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f603 04a4 	addw	r4, r3, #2212	; 0x8a4
 80122e6:	22ff      	movs	r2, #255	; 0xff
 80122e8:	21ff      	movs	r1, #255	; 0xff
 80122ea:	20ff      	movs	r0, #255	; 0xff
 80122ec:	f7fe ff9e 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80122f0:	4603      	mov	r3, r0
 80122f2:	4619      	mov	r1, r3
 80122f4:	4620      	mov	r0, r4
 80122f6:	f7fe fcc8 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8012300:	2100      	movs	r1, #0
 8012302:	4618      	mov	r0, r3
 8012304:	f7fe fd14 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f603 04a4 	addw	r4, r3, #2212	; 0x8a4
 801230e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012312:	211b      	movs	r1, #27
 8012314:	4618      	mov	r0, r3
 8012316:	f7fe fc4f 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801231a:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 801231e:	4620      	mov	r0, r4
 8012320:	f005 fd2a 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(195, 158, 96, 60);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f603 00d8 	addw	r0, r3, #2264	; 0x8d8
 801232a:	233c      	movs	r3, #60	; 0x3c
 801232c:	9300      	str	r3, [sp, #0]
 801232e:	2360      	movs	r3, #96	; 0x60
 8012330:	229e      	movs	r2, #158	; 0x9e
 8012332:	21c3      	movs	r1, #195	; 0xc3
 8012334:	f7fe f9da 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 801233e:	22ff      	movs	r2, #255	; 0xff
 8012340:	21ff      	movs	r1, #255	; 0xff
 8012342:	20ff      	movs	r0, #255	; 0xff
 8012344:	f7fe ff72 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012348:	4603      	mov	r3, r0
 801234a:	4619      	mov	r1, r3
 801234c:	4620      	mov	r0, r4
 801234e:	f7fe fc9c 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8012358:	2100      	movs	r1, #0
 801235a:	4618      	mov	r0, r3
 801235c:	f7fe fce8 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f603 346a 	addw	r4, r3, #2922	; 0xb6a
 8012366:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801236a:	211d      	movs	r1, #29
 801236c:	4618      	mov	r0, r3
 801236e:	f7fe fc23 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8012372:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012376:	4618      	mov	r0, r3
 8012378:	f7fe fc2e 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 801237c:	4603      	mov	r3, r0
 801237e:	4aaa      	ldr	r2, [pc, #680]	; (8012628 <_ZN12MainViewBaseC1Ev+0x13ac>)
 8012380:	2105      	movs	r1, #5
 8012382:	4620      	mov	r0, r4
 8012384:	f009 f8a2 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f603 02d8 	addw	r2, r3, #2264	; 0x8d8
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f603 336a 	addw	r3, r3, #2922	; 0xb6a
 8012394:	4619      	mov	r1, r3
 8012396:	4610      	mov	r0, r2
 8012398:	f7fe fd52 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f603 04d8 	addw	r4, r3, #2264	; 0x8d8
 80123a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80123a6:	211c      	movs	r1, #28
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7fe fc05 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80123ae:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 80123b2:	4620      	mov	r0, r4
 80123b4:	f005 fce0 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(397, 157, 68, 42);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f503 6011 	add.w	r0, r3, #2320	; 0x910
 80123be:	232a      	movs	r3, #42	; 0x2a
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	2344      	movs	r3, #68	; 0x44
 80123c4:	229d      	movs	r2, #157	; 0x9d
 80123c6:	f240 118d 	movw	r1, #397	; 0x18d
 80123ca:	f7fe f98f 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 80123d4:	22ff      	movs	r2, #255	; 0xff
 80123d6:	21ff      	movs	r1, #255	; 0xff
 80123d8:	20ff      	movs	r0, #255	; 0xff
 80123da:	f7fe ff27 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80123de:	4603      	mov	r3, r0
 80123e0:	4619      	mov	r1, r3
 80123e2:	4620      	mov	r0, r4
 80123e4:	f7fe fc51 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80123ee:	2100      	movs	r1, #0
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7fe fc9d 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f603 3474 	addw	r4, r3, #2932	; 0xb74
 80123fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012400:	2128      	movs	r1, #40	; 0x28
 8012402:	4618      	mov	r0, r3
 8012404:	f7fe fbd8 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8012408:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801240c:	4618      	mov	r0, r3
 801240e:	f7fe fbe3 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012412:	4603      	mov	r3, r0
 8012414:	4a84      	ldr	r2, [pc, #528]	; (8012628 <_ZN12MainViewBaseC1Ev+0x13ac>)
 8012416:	2105      	movs	r1, #5
 8012418:	4620      	mov	r0, r4
 801241a:	f009 f857 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f503 6211 	add.w	r2, r3, #2320	; 0x910
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f603 3374 	addw	r3, r3, #2932	; 0xb74
 801242a:	4619      	mov	r1, r3
 801242c:	4610      	mov	r0, r2
 801242e:	f7fe fd07 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 8012438:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801243c:	2127      	movs	r1, #39	; 0x27
 801243e:	4618      	mov	r0, r3
 8012440:	f7fe fbba 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8012444:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8012448:	4620      	mov	r0, r4
 801244a:	f005 fc95 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(397, 198);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012454:	22c6      	movs	r2, #198	; 0xc6
 8012456:	f240 118d 	movw	r1, #397	; 0x18d
 801245a:	4618      	mov	r0, r3
 801245c:	f7fe f991 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8012466:	2200      	movs	r2, #0
 8012468:	21dc      	movs	r1, #220	; 0xdc
 801246a:	20ff      	movs	r0, #255	; 0xff
 801246c:	f7fe fede 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012470:	4603      	mov	r3, r0
 8012472:	4619      	mov	r1, r3
 8012474:	4620      	mov	r0, r4
 8012476:	f7fe fc08 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012480:	2100      	movs	r1, #0
 8012482:	4618      	mov	r0, r3
 8012484:	f7fe fc54 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f603 1448 	addw	r4, r3, #2376	; 0x948
 801248e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012492:	2129      	movs	r1, #41	; 0x29
 8012494:	4618      	mov	r0, r3
 8012496:	f7fe fb8f 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801249a:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 801249e:	4620      	mov	r0, r4
 80124a0:	f005 fc6a 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f603 107c 	addw	r0, r3, #2428	; 0x97c
 80124aa:	2311      	movs	r3, #17
 80124ac:	9300      	str	r3, [sp, #0]
 80124ae:	2313      	movs	r3, #19
 80124b0:	22e2      	movs	r2, #226	; 0xe2
 80124b2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80124b6:	f7fe f919 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 80124c0:	220d      	movs	r2, #13
 80124c2:	210d      	movs	r1, #13
 80124c4:	200d      	movs	r0, #13
 80124c6:	f7fe feb1 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80124ca:	4603      	mov	r3, r0
 80124cc:	4619      	mov	r1, r3
 80124ce:	4620      	mov	r0, r4
 80124d0:	f7fe fbdb 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 80124da:	2100      	movs	r1, #0
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fe fc27 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f603 347e 	addw	r4, r3, #2942	; 0xb7e
 80124e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80124ec:	212b      	movs	r1, #43	; 0x2b
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7fe fb62 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80124f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fe fb6d 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80124fe:	4603      	mov	r3, r0
 8012500:	4a49      	ldr	r2, [pc, #292]	; (8012628 <_ZN12MainViewBaseC1Ev+0x13ac>)
 8012502:	2105      	movs	r1, #5
 8012504:	4620      	mov	r0, r4
 8012506:	f008 ffe1 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f603 127c 	addw	r2, r3, #2428	; 0x97c
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f603 337e 	addw	r3, r3, #2942	; 0xb7e
 8012516:	4619      	mov	r1, r3
 8012518:	4610      	mov	r0, r2
 801251a:	f7fe fc91 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f603 147c 	addw	r4, r3, #2428	; 0x97c
 8012524:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012528:	212a      	movs	r1, #42	; 0x2a
 801252a:	4618      	mov	r0, r3
 801252c:	f7fe fb44 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8012530:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8012534:	4620      	mov	r0, r4
 8012536:	f005 fc1f 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MinFuelPValue.setPosition(430, 198, 43, 19);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f603 10b4 	addw	r0, r3, #2484	; 0x9b4
 8012540:	2313      	movs	r3, #19
 8012542:	9300      	str	r3, [sp, #0]
 8012544:	232b      	movs	r3, #43	; 0x2b
 8012546:	22c6      	movs	r2, #198	; 0xc6
 8012548:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801254c:	f7fe f8ce 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MinFuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f603 14b4 	addw	r4, r3, #2484	; 0x9b4
 8012556:	22b8      	movs	r2, #184	; 0xb8
 8012558:	21b8      	movs	r1, #184	; 0xb8
 801255a:	20b9      	movs	r0, #185	; 0xb9
 801255c:	f7fe fe66 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012560:	4603      	mov	r3, r0
 8012562:	4619      	mov	r1, r3
 8012564:	4620      	mov	r0, r4
 8012566:	f7fe fb90 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MinFuelPValue.setLinespacing(0);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8012570:	2100      	movs	r1, #0
 8012572:	4618      	mov	r0, r3
 8012574:	f7fe fbdc 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MinFuelPValueBuffer, MINFUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID77).getText());
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f603 3488 	addw	r4, r3, #2952	; 0xb88
 801257e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012582:	212d      	movs	r1, #45	; 0x2d
 8012584:	4618      	mov	r0, r3
 8012586:	f7fe fb17 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801258a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801258e:	4618      	mov	r0, r3
 8012590:	f7fe fb22 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012594:	4603      	mov	r3, r0
 8012596:	4a24      	ldr	r2, [pc, #144]	; (8012628 <_ZN12MainViewBaseC1Ev+0x13ac>)
 8012598:	2105      	movs	r1, #5
 801259a:	4620      	mov	r0, r4
 801259c:	f008 ff96 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MinFuelPValue.setWildcard(MinFuelPValueBuffer);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f603 12b4 	addw	r2, r3, #2484	; 0x9b4
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 80125ac:	4619      	mov	r1, r3
 80125ae:	4610      	mov	r0, r2
 80125b0:	f7fe fc46 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MinFuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID76));
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f603 14b4 	addw	r4, r3, #2484	; 0x9b4
 80125ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80125be:	212c      	movs	r1, #44	; 0x2c
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7fe faf9 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80125c6:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 80125ca:	4620      	mov	r0, r4
 80125cc:	f005 fbd4 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MinOilPValue.setPosition(430, 126, 43, 20);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f603 10ec 	addw	r0, r3, #2540	; 0x9ec
 80125d6:	2314      	movs	r3, #20
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	232b      	movs	r3, #43	; 0x2b
 80125dc:	227e      	movs	r2, #126	; 0x7e
 80125de:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80125e2:	f7fe f883 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MinOilPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 80125ec:	22b8      	movs	r2, #184	; 0xb8
 80125ee:	21b8      	movs	r1, #184	; 0xb8
 80125f0:	20b9      	movs	r0, #185	; 0xb9
 80125f2:	f7fe fe1b 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80125f6:	4603      	mov	r3, r0
 80125f8:	4619      	mov	r1, r3
 80125fa:	4620      	mov	r0, r4
 80125fc:	f7fe fb45 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MinOilPValue.setLinespacing(0);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8012606:	2100      	movs	r1, #0
 8012608:	4618      	mov	r0, r3
 801260a:	f7fe fb91 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MinOilPValueBuffer, MINOILPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID79).getText());
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f603 3492 	addw	r4, r3, #2962	; 0xb92
 8012614:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012618:	212f      	movs	r1, #47	; 0x2f
 801261a:	4618      	mov	r0, r3
 801261c:	f7fe facc 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8012620:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012624:	e002      	b.n	801262c <_ZN12MainViewBaseC1Ev+0x13b0>
 8012626:	bf00      	nop
 8012628:	08026ae0 	.word	0x08026ae0
 801262c:	4618      	mov	r0, r3
 801262e:	f7fe fad3 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012632:	4603      	mov	r3, r0
 8012634:	4adb      	ldr	r2, [pc, #876]	; (80129a4 <_ZN12MainViewBaseC1Ev+0x1728>)
 8012636:	2105      	movs	r1, #5
 8012638:	4620      	mov	r0, r4
 801263a:	f008 ff47 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MinOilPValue.setWildcard(MinOilPValueBuffer);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f603 12ec 	addw	r2, r3, #2540	; 0x9ec
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f603 3392 	addw	r3, r3, #2962	; 0xb92
 801264a:	4619      	mov	r1, r3
 801264c:	4610      	mov	r0, r2
 801264e:	f7fe fbf7 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MinOilPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID78));
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 8012658:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801265c:	212e      	movs	r1, #46	; 0x2e
 801265e:	4618      	mov	r0, r3
 8012660:	f7fe faaa 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8012664:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8012668:	4620      	mov	r0, r4
 801266a:	f005 fb85 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxOilTValue.setPosition(353, 126, 43, 20);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f603 2024 	addw	r0, r3, #2596	; 0xa24
 8012674:	2314      	movs	r3, #20
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	232b      	movs	r3, #43	; 0x2b
 801267a:	227e      	movs	r2, #126	; 0x7e
 801267c:	f240 1161 	movw	r1, #353	; 0x161
 8012680:	f7fe f834 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxOilTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 801268a:	22b8      	movs	r2, #184	; 0xb8
 801268c:	21b8      	movs	r1, #184	; 0xb8
 801268e:	20b9      	movs	r0, #185	; 0xb9
 8012690:	f7fe fdcc 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012694:	4603      	mov	r3, r0
 8012696:	4619      	mov	r1, r3
 8012698:	4620      	mov	r0, r4
 801269a:	f7fe faf6 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxOilTValue.setLinespacing(0);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 80126a4:	2100      	movs	r1, #0
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7fe fb42 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxOilTValueBuffer, MAXOILTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID81).getText());
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f603 349c 	addw	r4, r3, #2972	; 0xb9c
 80126b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80126b6:	2131      	movs	r1, #49	; 0x31
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7fe fa7d 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80126be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7fe fa88 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80126c8:	4603      	mov	r3, r0
 80126ca:	4ab6      	ldr	r2, [pc, #728]	; (80129a4 <_ZN12MainViewBaseC1Ev+0x1728>)
 80126cc:	2105      	movs	r1, #5
 80126ce:	4620      	mov	r0, r4
 80126d0:	f008 fefc 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxOilTValue.setWildcard(MaxOilTValueBuffer);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f603 2224 	addw	r2, r3, #2596	; 0xa24
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f603 339c 	addw	r3, r3, #2972	; 0xb9c
 80126e0:	4619      	mov	r1, r3
 80126e2:	4610      	mov	r0, r2
 80126e4:	f7fe fbac 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxOilTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID80));
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f603 2424 	addw	r4, r3, #2596	; 0xa24
 80126ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80126f2:	2130      	movs	r1, #48	; 0x30
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7fe fa5f 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80126fa:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 80126fe:	4620      	mov	r0, r4
 8012700:	f005 fb3a 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxCltValue.setPosition(233, 220, 43, 20);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f603 205c 	addw	r0, r3, #2652	; 0xa5c
 801270a:	2314      	movs	r3, #20
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	232b      	movs	r3, #43	; 0x2b
 8012710:	22dc      	movs	r2, #220	; 0xdc
 8012712:	21e9      	movs	r1, #233	; 0xe9
 8012714:	f7fd ffea 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxCltValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f603 245c 	addw	r4, r3, #2652	; 0xa5c
 801271e:	22b8      	movs	r2, #184	; 0xb8
 8012720:	21b8      	movs	r1, #184	; 0xb8
 8012722:	20b9      	movs	r0, #185	; 0xb9
 8012724:	f7fe fd82 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012728:	4603      	mov	r3, r0
 801272a:	4619      	mov	r1, r3
 801272c:	4620      	mov	r0, r4
 801272e:	f7fe faac 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxCltValue.setLinespacing(0);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8012738:	2100      	movs	r1, #0
 801273a:	4618      	mov	r0, r3
 801273c:	f7fe faf8 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxCltValueBuffer, MAXCLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID83).getText());
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f603 34a6 	addw	r4, r3, #2982	; 0xba6
 8012746:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801274a:	2133      	movs	r1, #51	; 0x33
 801274c:	4618      	mov	r0, r3
 801274e:	f7fe fa33 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8012752:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8012756:	4618      	mov	r0, r3
 8012758:	f7fe fa3e 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 801275c:	4603      	mov	r3, r0
 801275e:	4a91      	ldr	r2, [pc, #580]	; (80129a4 <_ZN12MainViewBaseC1Ev+0x1728>)
 8012760:	2105      	movs	r1, #5
 8012762:	4620      	mov	r0, r4
 8012764:	f008 feb2 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxCltValue.setWildcard(MaxCltValueBuffer);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f603 33a6 	addw	r3, r3, #2982	; 0xba6
 8012774:	4619      	mov	r1, r3
 8012776:	4610      	mov	r0, r2
 8012778:	f7fe fb62 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxCltValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID82));
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f603 245c 	addw	r4, r3, #2652	; 0xa5c
 8012782:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012786:	2132      	movs	r1, #50	; 0x32
 8012788:	4618      	mov	r0, r3
 801278a:	f7fe fa15 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801278e:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	; 0xec
 8012792:	4620      	mov	r0, r4
 8012794:	f005 faf0 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxRPMValue.setPosition(82, 15, 36, 13);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f603 2094 	addw	r0, r3, #2708	; 0xa94
 801279e:	230d      	movs	r3, #13
 80127a0:	9300      	str	r3, [sp, #0]
 80127a2:	2324      	movs	r3, #36	; 0x24
 80127a4:	220f      	movs	r2, #15
 80127a6:	2152      	movs	r1, #82	; 0x52
 80127a8:	f7fd ffa0 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxRPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(153, 153, 153));
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f603 2494 	addw	r4, r3, #2708	; 0xa94
 80127b2:	2299      	movs	r2, #153	; 0x99
 80127b4:	2199      	movs	r1, #153	; 0x99
 80127b6:	2099      	movs	r0, #153	; 0x99
 80127b8:	f7fe fd38 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80127bc:	4603      	mov	r3, r0
 80127be:	4619      	mov	r1, r3
 80127c0:	4620      	mov	r0, r4
 80127c2:	f7fe fa62 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxRPMValue.setLinespacing(0);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 80127cc:	2100      	movs	r1, #0
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7fe faae 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxRPMValueBuffer, MAXRPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID85).getText());
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f503 643b 	add.w	r4, r3, #2992	; 0xbb0
 80127da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80127de:	2135      	movs	r1, #53	; 0x35
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7fe f9e9 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80127e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fe f9f4 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80127f0:	4603      	mov	r3, r0
 80127f2:	4a6c      	ldr	r2, [pc, #432]	; (80129a4 <_ZN12MainViewBaseC1Ev+0x1728>)
 80127f4:	2105      	movs	r1, #5
 80127f6:	4620      	mov	r0, r4
 80127f8:	f008 fe68 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxRPMValue.setWildcard(MaxRPMValueBuffer);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f603 2294 	addw	r2, r3, #2708	; 0xa94
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 8012808:	4619      	mov	r1, r3
 801280a:	4610      	mov	r0, r2
 801280c:	f7fe fb18 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxRPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID84));
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f603 2494 	addw	r4, r3, #2708	; 0xa94
 8012816:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801281a:	2134      	movs	r1, #52	; 0x34
 801281c:	4618      	mov	r0, r3
 801281e:	f7fe f9cb 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 8012822:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 8012826:	4620      	mov	r0, r4
 8012828:	f005 faa6 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MaxSpeedValue.setPosition(61, 127, 43, 20);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f603 20cc 	addw	r0, r3, #2764	; 0xacc
 8012832:	2314      	movs	r3, #20
 8012834:	9300      	str	r3, [sp, #0]
 8012836:	232b      	movs	r3, #43	; 0x2b
 8012838:	227f      	movs	r2, #127	; 0x7f
 801283a:	213d      	movs	r1, #61	; 0x3d
 801283c:	f7fd ff56 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
    MaxSpeedValue.setColor(touchgfx::Color::getColorFrom24BitRGB(185, 184, 184));
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f603 24cc 	addw	r4, r3, #2764	; 0xacc
 8012846:	22b8      	movs	r2, #184	; 0xb8
 8012848:	21b8      	movs	r1, #184	; 0xb8
 801284a:	20b9      	movs	r0, #185	; 0xb9
 801284c:	f7fe fcee 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012850:	4603      	mov	r3, r0
 8012852:	4619      	mov	r1, r3
 8012854:	4620      	mov	r0, r4
 8012856:	f7fe fa18 	bl	8010c8a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MaxSpeedValue.setLinespacing(0);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8012860:	2100      	movs	r1, #0
 8012862:	4618      	mov	r0, r3
 8012864:	f7fe fa64 	bl	8010d30 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MaxSpeedValueBuffer, MAXSPEEDVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID89).getText());
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f603 34ba 	addw	r4, r3, #3002	; 0xbba
 801286e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8012872:	2137      	movs	r1, #55	; 0x37
 8012874:	4618      	mov	r0, r3
 8012876:	f7fe f99f 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 801287a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801287e:	4618      	mov	r0, r3
 8012880:	f7fe f9aa 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8012884:	4603      	mov	r3, r0
 8012886:	4a47      	ldr	r2, [pc, #284]	; (80129a4 <_ZN12MainViewBaseC1Ev+0x1728>)
 8012888:	2105      	movs	r1, #5
 801288a:	4620      	mov	r0, r4
 801288c:	f008 fe1e 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MaxSpeedValue.setWildcard(MaxSpeedValueBuffer);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f603 22cc 	addw	r2, r3, #2764	; 0xacc
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f603 33ba 	addw	r3, r3, #3002	; 0xbba
 801289c:	4619      	mov	r1, r3
 801289e:	4610      	mov	r0, r2
 80128a0:	f7fe face 	bl	8010e40 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MaxSpeedValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID88));
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f603 24cc 	addw	r4, r3, #2764	; 0xacc
 80128aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80128ae:	2136      	movs	r1, #54	; 0x36
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fe f981 	bl	8010bb8 <_ZN8touchgfx9TypedTextC1Et>
 80128b6:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 80128ba:	4620      	mov	r0, r4
 80128bc:	f005 fa5c 	bl	8017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 80128c0:	687a      	ldr	r2, [r7, #4]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	3340      	adds	r3, #64	; 0x40
 80128c6:	4619      	mov	r1, r3
 80128c8:	4610      	mov	r0, r2
 80128ca:	f7fe f8bd 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	3370      	adds	r3, #112	; 0x70
 80128d4:	4619      	mov	r1, r3
 80128d6:	4610      	mov	r0, r2
 80128d8:	f7fe f8b6 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	33a4      	adds	r3, #164	; 0xa4
 80128e2:	4619      	mov	r1, r3
 80128e4:	4610      	mov	r0, r2
 80128e6:	f7fe f8af 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	33d8      	adds	r3, #216	; 0xd8
 80128f0:	4619      	mov	r1, r3
 80128f2:	4610      	mov	r0, r2
 80128f4:	f7fe f8a8 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 80128f8:	687a      	ldr	r2, [r7, #4]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012900:	4619      	mov	r1, r3
 8012902:	4610      	mov	r0, r2
 8012904:	f7fe f8a0 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(SpeedValue);
 8012908:	687a      	ldr	r2, [r7, #4]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012910:	4619      	mov	r1, r3
 8012912:	4610      	mov	r0, r2
 8012914:	f7fe f898 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8012918:	687a      	ldr	r2, [r7, #4]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012920:	4619      	mov	r1, r3
 8012922:	4610      	mov	r0, r2
 8012924:	f7fe f890 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012930:	4619      	mov	r1, r3
 8012932:	4610      	mov	r0, r2
 8012934:	f7fe f888 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8012940:	4619      	mov	r1, r3
 8012942:	4610      	mov	r0, r2
 8012944:	f7fe f880 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8012950:	4619      	mov	r1, r3
 8012952:	4610      	mov	r0, r2
 8012954:	f7fe f878 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8012960:	4619      	mov	r1, r3
 8012962:	4610      	mov	r0, r2
 8012964:	f7fe f870 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8012970:	4619      	mov	r1, r3
 8012972:	4610      	mov	r0, r2
 8012974:	f7fe f868 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8012980:	4619      	mov	r1, r3
 8012982:	4610      	mov	r0, r2
 8012984:	f7fe f860 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8012990:	4619      	mov	r1, r3
 8012992:	4610      	mov	r0, r2
 8012994:	f7fe f858 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80129a0:	e002      	b.n	80129a8 <_ZN12MainViewBaseC1Ev+0x172c>
 80129a2:	bf00      	nop
 80129a4:	08026ae0 	.word	0x08026ae0
 80129a8:	4619      	mov	r1, r3
 80129aa:	4610      	mov	r0, r2
 80129ac:	f7fe f84c 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 80129b0:	687a      	ldr	r2, [r7, #4]
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80129b8:	4619      	mov	r1, r3
 80129ba:	4610      	mov	r0, r2
 80129bc:	f7fe f844 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 80129c0:	687a      	ldr	r2, [r7, #4]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 80129c8:	4619      	mov	r1, r3
 80129ca:	4610      	mov	r0, r2
 80129cc:	f7fe f83c 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80129d8:	4619      	mov	r1, r3
 80129da:	4610      	mov	r0, r2
 80129dc:	f7fe f834 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 80129e0:	687a      	ldr	r2, [r7, #4]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80129e8:	4619      	mov	r1, r3
 80129ea:	4610      	mov	r0, r2
 80129ec:	f7fe f82c 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80129f8:	4619      	mov	r1, r3
 80129fa:	4610      	mov	r0, r2
 80129fc:	f7fe f824 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8012a08:	4619      	mov	r1, r3
 8012a0a:	4610      	mov	r0, r2
 8012a0c:	f7fe f81c 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 8012a10:	687a      	ldr	r2, [r7, #4]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a18:	4619      	mov	r1, r3
 8012a1a:	4610      	mov	r0, r2
 8012a1c:	f7fe f814 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8012a28:	4619      	mov	r1, r3
 8012a2a:	4610      	mov	r0, r2
 8012a2c:	f7fe f80c 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8012a30:	687a      	ldr	r2, [r7, #4]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8012a38:	4619      	mov	r1, r3
 8012a3a:	4610      	mov	r0, r2
 8012a3c:	f7fe f804 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8012a48:	4619      	mov	r1, r3
 8012a4a:	4610      	mov	r0, r2
 8012a4c:	f7fd fffc 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8012a50:	687a      	ldr	r2, [r7, #4]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8012a58:	4619      	mov	r1, r3
 8012a5a:	4610      	mov	r0, r2
 8012a5c:	f7fd fff4 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8012a60:	687a      	ldr	r2, [r7, #4]
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8012a68:	4619      	mov	r1, r3
 8012a6a:	4610      	mov	r0, r2
 8012a6c:	f7fd ffec 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8012a70:	687a      	ldr	r2, [r7, #4]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8012a78:	4619      	mov	r1, r3
 8012a7a:	4610      	mov	r0, r2
 8012a7c:	f7fd ffe4 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 8012a88:	4619      	mov	r1, r3
 8012a8a:	4610      	mov	r0, r2
 8012a8c:	f7fd ffdc 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8012a98:	4619      	mov	r1, r3
 8012a9a:	4610      	mov	r0, r2
 8012a9c:	f7fd ffd4 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8012aa0:	687a      	ldr	r2, [r7, #4]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	4610      	mov	r0, r2
 8012aac:	f7fd ffcc 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 8012ab0:	687a      	ldr	r2, [r7, #4]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8012ab8:	4619      	mov	r1, r3
 8012aba:	4610      	mov	r0, r2
 8012abc:	f7fd ffc4 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 8012ac0:	687a      	ldr	r2, [r7, #4]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012ac8:	4619      	mov	r1, r3
 8012aca:	4610      	mov	r0, r2
 8012acc:	f7fd ffbc 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8012ad8:	4619      	mov	r1, r3
 8012ada:	4610      	mov	r0, r2
 8012adc:	f7fd ffb4 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MinFuelPValue);
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8012ae8:	4619      	mov	r1, r3
 8012aea:	4610      	mov	r0, r2
 8012aec:	f7fd ffac 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MinOilPValue);
 8012af0:	687a      	ldr	r2, [r7, #4]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8012af8:	4619      	mov	r1, r3
 8012afa:	4610      	mov	r0, r2
 8012afc:	f7fd ffa4 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxOilTValue);
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8012b08:	4619      	mov	r1, r3
 8012b0a:	4610      	mov	r0, r2
 8012b0c:	f7fd ff9c 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxCltValue);
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8012b18:	4619      	mov	r1, r3
 8012b1a:	4610      	mov	r0, r2
 8012b1c:	f7fd ff94 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxRPMValue);
 8012b20:	687a      	ldr	r2, [r7, #4]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8012b28:	4619      	mov	r1, r3
 8012b2a:	4610      	mov	r0, r2
 8012b2c:	f7fd ff8c 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MaxSpeedValue);
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 8012b38:	4619      	mov	r1, r3
 8012b3a:	4610      	mov	r0, r2
 8012b3c:	f7fd ff84 	bl	8010a48 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	4618      	mov	r0, r3
 8012b44:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd90      	pop	{r4, r7, pc}

08012b4c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b083      	sub	sp, #12
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]

}
 8012b54:	bf00      	nop
 8012b56:	370c      	adds	r7, #12
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f007 fbe8 	bl	801a340 <_ZN8touchgfx6ScreenC1Ev>
 8012b70:	4a05      	ldr	r2, [pc, #20]	; (8012b88 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	601a      	str	r2, [r3, #0]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3708      	adds	r7, #8
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	080270e4 	.word	0x080270e4

08012b8c <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8012b8c:	b590      	push	{r4, r7, lr}
 8012b8e:	b089      	sub	sp, #36	; 0x24
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	015a      	lsls	r2, r3, #5
 8012ba0:	f107 0314 	add.w	r3, r7, #20
 8012ba4:	4611      	mov	r1, r2
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7fe f97a 	bl	8010ea0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	461c      	mov	r4, r3
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	61fb      	str	r3, [r7, #28]
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	015a      	lsls	r2, r3, #5
 8012bb8:	f107 0310 	add.w	r3, r7, #16
 8012bbc:	4611      	mov	r1, r2
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fe f96e 	bl	8010ea0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012bc4:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	4621      	mov	r1, r4
 8012bca:	68f8      	ldr	r0, [r7, #12]
 8012bcc:	f004 ff12 	bl	80179f4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8012bd0:	bf00      	nop
 8012bd2:	3724      	adds	r7, #36	; 0x24
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd90      	pop	{r4, r7, pc}

08012bd8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8012bd8:	b590      	push	{r4, r7, lr}
 8012bda:	b089      	sub	sp, #36	; 0x24
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	61bb      	str	r3, [r7, #24]
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	015a      	lsls	r2, r3, #5
 8012bec:	f107 0314 	add.w	r3, r7, #20
 8012bf0:	4611      	mov	r1, r2
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7fe f954 	bl	8010ea0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	461c      	mov	r4, r3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	61fb      	str	r3, [r7, #28]
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	015a      	lsls	r2, r3, #5
 8012c04:	f107 0310 	add.w	r3, r7, #16
 8012c08:	4611      	mov	r1, r2
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fe f948 	bl	8010ea0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012c10:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012c12:	461a      	mov	r2, r3
 8012c14:	4621      	mov	r1, r4
 8012c16:	68f8      	ldr	r0, [r7, #12]
 8012c18:	f004 fef7 	bl	8017a0a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8012c1c:	bf00      	nop
 8012c1e:	3724      	adds	r7, #36	; 0x24
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd90      	pop	{r4, r7, pc}

08012c24 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
 8012c2c:	6039      	str	r1, [r7, #0]
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	60fb      	str	r3, [r7, #12]
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	015a      	lsls	r2, r3, #5
 8012c36:	f107 0308 	add.w	r3, r7, #8
 8012c3a:	4611      	mov	r1, r2
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7fe f92f 	bl	8010ea0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012c42:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8012c44:	4619      	mov	r1, r3
 8012c46:	6878      	ldr	r0, [r7, #4]
 8012c48:	f7fe f945 	bl	8010ed6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8012c4c:	bf00      	nop
 8012c4e:	3710      	adds	r7, #16
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}

08012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	4a05      	ldr	r2, [pc, #20]	; (8012c74 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	601a      	str	r2, [r3, #0]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7fe f8b3 	bl	8010dd0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	08028b84 	.word	0x08028b84

08012c78 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f7ff ffe7 	bl	8012c54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012c86:	2138      	movs	r1, #56	; 0x38
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f012 fb89 	bl	80253a0 <_ZdlPvj>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	4618      	mov	r0, r3
 8012c92:	3708      	adds	r7, #8
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	4a05      	ldr	r2, [pc, #20]	; (8012cb8 <_ZN8touchgfx4LineD1Ev+0x20>)
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	601a      	str	r2, [r3, #0]
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f004 fc7d 	bl	80175a8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3708      	adds	r7, #8
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}
 8012cb8:	08028930 	.word	0x08028930

08012cbc <_ZN8touchgfx4LineD0Ev>:
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7ff ffe7 	bl	8012c98 <_ZN8touchgfx4LineD1Ev>
 8012cca:	2174      	movs	r1, #116	; 0x74
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f012 fb67 	bl	80253a0 <_ZdlPvj>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	4a05      	ldr	r2, [pc, #20]	; (8012cfc <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	601a      	str	r2, [r3, #0]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7fe f915 	bl	8010f1c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	08028634 	.word	0x08028634

08012d00 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f7ff ffe7 	bl	8012cdc <_ZN8touchgfx13PainterRGB888D1Ev>
 8012d0e:	2118      	movs	r1, #24
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f012 fb45 	bl	80253a0 <_ZdlPvj>
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3708      	adds	r7, #8
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8012d20:	b480      	push	{r7}
 8012d22:	af00      	add	r7, sp, #0
    return bitmap_database;
 8012d24:	4b02      	ldr	r3, [pc, #8]	; (8012d30 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2e:	4770      	bx	lr
 8012d30:	080271f4 	.word	0x080271f4

08012d34 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8012d34:	b480      	push	{r7}
 8012d36:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8012d38:	2303      	movs	r3, #3
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr

08012d44 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012d44:	b480      	push	{r7}
 8012d46:	b085      	sub	sp, #20
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	4613      	mov	r3, r2
 8012d50:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8012d52:	4a07      	ldr	r2, [pc, #28]	; (8012d70 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	6013      	str	r3, [r2, #0]
        fonts = f;
 8012d58:	4a06      	ldr	r2, [pc, #24]	; (8012d74 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8012d5e:	4a06      	ldr	r2, [pc, #24]	; (8012d78 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012d60:	88fb      	ldrh	r3, [r7, #6]
 8012d62:	8013      	strh	r3, [r2, #0]
    }
 8012d64:	bf00      	nop
 8012d66:	3714      	adds	r7, #20
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr
 8012d70:	2000c5f4 	.word	0x2000c5f4
 8012d74:	2000c5fc 	.word	0x2000c5fc
 8012d78:	2000c5f8 	.word	0x2000c5f8

08012d7c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8012d7c:	b590      	push	{r4, r7, lr}
 8012d7e:	b085      	sub	sp, #20
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	4603      	mov	r3, r0
 8012d84:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012d86:	2300      	movs	r3, #0
 8012d88:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8012d8a:	88fb      	ldrh	r3, [r7, #6]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d127      	bne.n	8012de0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8012d90:	88fb      	ldrh	r3, [r7, #6]
 8012d92:	4a1e      	ldr	r2, [pc, #120]	; (8012e0c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d016      	beq.n	8012dca <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012d9c:	88fb      	ldrh	r3, [r7, #6]
 8012d9e:	4a1b      	ldr	r2, [pc, #108]	; (8012e0c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012da4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	68ba      	ldr	r2, [r7, #8]
 8012dac:	4413      	add	r3, r2
 8012dae:	4a18      	ldr	r2, [pc, #96]	; (8012e10 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012db0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	68ba      	ldr	r2, [r7, #8]
 8012db8:	4413      	add	r3, r2
 8012dba:	4a16      	ldr	r2, [pc, #88]	; (8012e14 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012dbc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	689b      	ldr	r3, [r3, #8]
 8012dc2:	68ba      	ldr	r2, [r7, #8]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	60fb      	str	r3, [r7, #12]
 8012dc8:	e00a      	b.n	8012de0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012dca:	4b11      	ldr	r3, [pc, #68]	; (8012e10 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012dcc:	4a12      	ldr	r2, [pc, #72]	; (8012e18 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8012dce:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012dd0:	4a12      	ldr	r2, [pc, #72]	; (8012e1c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8012dd2:	4b10      	ldr	r3, [pc, #64]	; (8012e14 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012dd4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012dd6:	88fb      	ldrh	r3, [r7, #6]
 8012dd8:	4a11      	ldr	r2, [pc, #68]	; (8012e20 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8012dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012dde:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00d      	beq.n	8012e02 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012de6:	4a0f      	ldr	r2, [pc, #60]	; (8012e24 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012de8:	88fb      	ldrh	r3, [r7, #6]
 8012dea:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012dec:	f000 f83e 	bl	8012e6c <_ZN17TypedTextDatabase8getFontsEv>
 8012df0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012df2:	f000 f833 	bl	8012e5c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012df6:	4603      	mov	r3, r0
 8012df8:	461a      	mov	r2, r3
 8012dfa:	4621      	mov	r1, r4
 8012dfc:	68f8      	ldr	r0, [r7, #12]
 8012dfe:	f7ff ffa1 	bl	8012d44 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012e02:	bf00      	nop
 8012e04:	3714      	adds	r7, #20
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd90      	pop	{r4, r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	20008e00 	.word	0x20008e00
 8012e10:	20008e08 	.word	0x20008e08
 8012e14:	20008e0c 	.word	0x20008e0c
 8012e18:	08061a50 	.word	0x08061a50
 8012e1c:	0806196c 	.word	0x0806196c
 8012e20:	08061b5c 	.word	0x08061b5c
 8012e24:	20008e04 	.word	0x20008e04

08012e28 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b083      	sub	sp, #12
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	460b      	mov	r3, r1
 8012e32:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012e34:	4b07      	ldr	r3, [pc, #28]	; (8012e54 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012e36:	681a      	ldr	r2, [r3, #0]
 8012e38:	4b07      	ldr	r3, [pc, #28]	; (8012e58 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8012e3a:	6819      	ldr	r1, [r3, #0]
 8012e3c:	887b      	ldrh	r3, [r7, #2]
 8012e3e:	009b      	lsls	r3, r3, #2
 8012e40:	440b      	add	r3, r1
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	005b      	lsls	r3, r3, #1
 8012e46:	4413      	add	r3, r2
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	370c      	adds	r7, #12
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e52:	4770      	bx	lr
 8012e54:	20008e08 	.word	0x20008e08
 8012e58:	20008e0c 	.word	0x20008e0c

08012e5c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8012e5c:	b480      	push	{r7}
 8012e5e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012e60:	2339      	movs	r3, #57	; 0x39
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	af00      	add	r7, sp, #0
    return _fonts;
 8012e70:	4b02      	ldr	r3, [pc, #8]	; (8012e7c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr
 8012e7c:	20008e10 	.word	0x20008e10

08012e80 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	6039      	str	r1, [r7, #0]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	d127      	bne.n	8012ee0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d122      	bne.n	8012ee0 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_14_4bpp()),
 8012e9a:	f7fc fcd1 	bl	800f840 <_Z25getFont_Asap_Bold_14_4bppv>
 8012e9e:	4603      	mov	r3, r0
};
 8012ea0:	4a11      	ldr	r2, [pc, #68]	; (8012ee8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012ea2:	6013      	str	r3, [r2, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8012ea4:	f7fc fdc8 	bl	800fa38 <_Z25getFont_Asap_Bold_40_4bppv>
 8012ea8:	4603      	mov	r3, r0
};
 8012eaa:	4a0f      	ldr	r2, [pc, #60]	; (8012ee8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012eac:	6053      	str	r3, [r2, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8012eae:	f7fc fd6f 	bl	800f990 <_Z25getFont_Asap_Bold_30_4bppv>
 8012eb2:	4603      	mov	r3, r0
};
 8012eb4:	4a0c      	ldr	r2, [pc, #48]	; (8012ee8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012eb6:	6093      	str	r3, [r2, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8012eb8:	f7fc fc6e 	bl	800f798 <_Z25getFont_Asap_Bold_12_4bppv>
 8012ebc:	4603      	mov	r3, r0
};
 8012ebe:	4a0a      	ldr	r2, [pc, #40]	; (8012ee8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012ec0:	60d3      	str	r3, [r2, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8012ec2:	f7fc fe0d 	bl	800fae0 <_Z25getFont_Asap_Bold_60_4bppv>
 8012ec6:	4603      	mov	r3, r0
};
 8012ec8:	4a07      	ldr	r2, [pc, #28]	; (8012ee8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012eca:	6113      	str	r3, [r2, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8012ecc:	f7fc fd0c 	bl	800f8e8 <_Z25getFont_Asap_Bold_21_4bppv>
 8012ed0:	4603      	mov	r3, r0
};
 8012ed2:	4a05      	ldr	r2, [pc, #20]	; (8012ee8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012ed4:	6153      	str	r3, [r2, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8012ed6:	f7fc fc0b 	bl	800f6f0 <_Z25getFont_Asap_Bold_10_4bppv>
 8012eda:	4603      	mov	r3, r0
};
 8012edc:	4a02      	ldr	r2, [pc, #8]	; (8012ee8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8012ede:	6193      	str	r3, [r2, #24]
}  // namespace TypedTextDatabase
 8012ee0:	bf00      	nop
 8012ee2:	3708      	adds	r7, #8
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	20008e10 	.word	0x20008e10

08012eec <_GLOBAL__sub_I__fonts>:
 8012eec:	b580      	push	{r7, lr}
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012ef4:	2001      	movs	r0, #1
 8012ef6:	f7ff ffc3 	bl	8012e80 <_Z41__static_initialization_and_destruction_0ii>
 8012efa:	bd80      	pop	{r7, pc}

08012efc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	4a05      	ldr	r2, [pc, #20]	; (8012f1c <_ZN19FrontendApplicationD1Ev+0x20>)
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	601a      	str	r2, [r3, #0]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7fd f889 	bl	8010024 <_ZN23FrontendApplicationBaseD1Ev>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	4618      	mov	r0, r3
 8012f16:	3708      	adds	r7, #8
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	08027238 	.word	0x08027238

08012f20 <_ZN19FrontendApplicationD0Ev>:
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7ff ffe7 	bl	8012efc <_ZN19FrontendApplicationD1Ev>
 8012f2e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f012 fa34 	bl	80253a0 <_ZdlPvj>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}

08012f42 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b082      	sub	sp, #8
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012f50:	4618      	mov	r0, r3
 8012f52:	f000 fd79 	bl	8013a48 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f006 f975 	bl	8019248 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012f5e:	bf00      	nop
 8012f60:	3708      	adds	r7, #8
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
	...

08012f68 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b084      	sub	sp, #16
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	687a      	ldr	r2, [r7, #4]
 8012f78:	68b9      	ldr	r1, [r7, #8]
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7fd f8cc 	bl	8010118 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8012f80:	4a03      	ldr	r2, [pc, #12]	; (8012f90 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	601a      	str	r2, [r3, #0]
{
}
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3710      	adds	r7, #16
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}
 8012f90:	08027238 	.word	0x08027238

08012f94 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
    {
    }
 8012f9c:	bf00      	nop
 8012f9e:	370c      	adds	r7, #12
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa6:	4770      	bx	lr

08012fa8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012fa8:	b480      	push	{r7}
 8012faa:	b083      	sub	sp, #12
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
    {
    }
 8012fb0:	bf00      	nop
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr

08012fbc <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8012fbc:	b480      	push	{r7}
 8012fbe:	b083      	sub	sp, #12
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
    {
 8012fc4:	4a04      	ldr	r2, [pc, #16]	; (8012fd8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	601a      	str	r2, [r3, #0]
    }
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	370c      	adds	r7, #12
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr
 8012fd8:	080272c4 	.word	0x080272c4

08012fdc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
    }
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f7ff ffe9 	bl	8012fbc <_ZN8touchgfx9PresenterD1Ev>
 8012fea:	2104      	movs	r1, #4
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f012 f9d7 	bl	80253a0 <_ZdlPvj>
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3708      	adds	r7, #8
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8012ffc:	b480      	push	{r7}
 8012ffe:	b083      	sub	sp, #12
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
    {
 8013004:	4a04      	ldr	r2, [pc, #16]	; (8013018 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	601a      	str	r2, [r3, #0]
    }
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	4618      	mov	r0, r3
 801300e:	370c      	adds	r7, #12
 8013010:	46bd      	mov	sp, r7
 8013012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013016:	4770      	bx	lr
 8013018:	080272c4 	.word	0x080272c4

0801301c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	4a06      	ldr	r2, [pc, #24]	; (8013040 <_ZN13ModelListenerC1Ev+0x24>)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	601a      	str	r2, [r3, #0]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2200      	movs	r2, #0
 801302e:	605a      	str	r2, [r3, #4]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	4618      	mov	r0, r3
 8013034:	370c      	adds	r7, #12
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop
 8013040:	080272ac 	.word	0x080272ac

08013044 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8013044:	b480      	push	{r7}
 8013046:	b083      	sub	sp, #12
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	4a04      	ldr	r2, [pc, #16]	; (8013060 <_ZN13ModelListenerD1Ev+0x1c>)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	601a      	str	r2, [r3, #0]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	4618      	mov	r0, r3
 8013056:	370c      	adds	r7, #12
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr
 8013060:	080272ac 	.word	0x080272ac

08013064 <_ZN13ModelListenerD0Ev>:
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f7ff ffe9 	bl	8013044 <_ZN13ModelListenerD1Ev>
 8013072:	2108      	movs	r1, #8
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f012 f993 	bl	80253a0 <_ZdlPvj>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	4618      	mov	r0, r3
 801307e:	3708      	adds	r7, #8
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
 801308e:	bf00      	nop
 8013090:	370c      	adds	r7, #12
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr

0801309a <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 801309a:	b480      	push	{r7}
 801309c:	b083      	sub	sp, #12
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
 80130a2:	6039      	str	r1, [r7, #0]
 80130a4:	bf00      	nop
 80130a6:	370c      	adds	r7, #12
 80130a8:	46bd      	mov	sp, r7
 80130aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ae:	4770      	bx	lr

080130b0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	4a09      	ldr	r2, [pc, #36]	; (80130e0 <_ZN13MainPresenterD1Ev+0x30>)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	4a09      	ldr	r2, [pc, #36]	; (80130e4 <_ZN13MainPresenterD1Ev+0x34>)
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	605a      	str	r2, [r3, #4]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	3304      	adds	r3, #4
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7ff ffbb 	bl	8013044 <_ZN13ModelListenerD1Ev>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7ff ff73 	bl	8012fbc <_ZN8touchgfx9PresenterD1Ev>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	4618      	mov	r0, r3
 80130da:	3708      	adds	r7, #8
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	08027274 	.word	0x08027274
 80130e4:	08027294 	.word	0x08027294

080130e8 <_ZThn4_N13MainPresenterD1Ev>:
 80130e8:	f1a0 0004 	sub.w	r0, r0, #4
 80130ec:	e7e0      	b.n	80130b0 <_ZN13MainPresenterD1Ev>
 80130ee:	bf00      	nop

080130f0 <_ZN13MainPresenterD0Ev>:
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b082      	sub	sp, #8
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f7ff ffd9 	bl	80130b0 <_ZN13MainPresenterD1Ev>
 80130fe:	2110      	movs	r1, #16
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f012 f94d 	bl	80253a0 <_ZdlPvj>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	4618      	mov	r0, r3
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}

08013110 <_ZThn4_N13MainPresenterD0Ev>:
 8013110:	f1a0 0004 	sub.w	r0, r0, #4
 8013114:	e7ec      	b.n	80130f0 <_ZN13MainPresenterD0Ev>
	...

08013118 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
    : view(v)
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	4618      	mov	r0, r3
 8013126:	f7ff ff69 	bl	8012ffc <_ZN8touchgfx9PresenterC1Ev>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	3304      	adds	r3, #4
 801312e:	4618      	mov	r0, r3
 8013130:	f7ff ff74 	bl	801301c <_ZN13ModelListenerC1Ev>
 8013134:	4a06      	ldr	r2, [pc, #24]	; (8013150 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	601a      	str	r2, [r3, #0]
 801313a:	4a06      	ldr	r2, [pc, #24]	; (8013154 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	605a      	str	r2, [r3, #4]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	683a      	ldr	r2, [r7, #0]
 8013144:	60da      	str	r2, [r3, #12]
{
}
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	08027274 	.word	0x08027274
 8013154:	08027294 	.word	0x08027294

08013158 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8013158:	b480      	push	{r7}
 801315a:	b083      	sub	sp, #12
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
}
 8013160:	bf00      	nop
 8013162:	370c      	adds	r7, #12
 8013164:	46bd      	mov	sp, r7
 8013166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316a:	4770      	bx	lr

0801316c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 801316c:	b480      	push	{r7}
 801316e:	b083      	sub	sp, #12
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
}
 8013174:	bf00      	nop
 8013176:	370c      	adds	r7, #12
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr

08013180 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b082      	sub	sp, #8
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	68db      	ldr	r3, [r3, #12]
 801318e:	6839      	ldr	r1, [r7, #0]
 8013190:	4618      	mov	r0, r3
 8013192:	f000 f9f7 	bl	8013584 <_ZN8MainView9updateValEPh>
}
 8013196:	bf00      	nop
 8013198:	3708      	adds	r7, #8
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}

0801319e <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 801319e:	f1a0 0004 	sub.w	r0, r0, #4
 80131a2:	f7ff bfed 	b.w	8013180 <_ZN13MainPresenter11setNewValueEPh>

080131a6 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b082      	sub	sp, #8
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
 80131ae:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	68db      	ldr	r3, [r3, #12]
 80131b4:	6839      	ldr	r1, [r7, #0]
 80131b6:	4618      	mov	r0, r3
 80131b8:	f000 f908 	bl	80133cc <_ZN8MainView14updateSettingsEPh>
}
 80131bc:	bf00      	nop
 80131be:	3708      	adds	r7, #8
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 80131c4:	f1a0 0004 	sub.w	r0, r0, #4
 80131c8:	f7ff bfed 	b.w	80131a6 <_ZN13MainPresenter21updateDisplaySettingsEPh>

080131cc <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2200      	movs	r2, #0
 80131d8:	601a      	str	r2, [r3, #0]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	4618      	mov	r0, r3
 80131de:	370c      	adds	r7, #12
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b084      	sub	sp, #16
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	460b      	mov	r3, r1
 80131f2:	607a      	str	r2, [r7, #4]
 80131f4:	ed87 0a00 	vstr	s0, [r7]
 80131f8:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80131fa:	463b      	mov	r3, r7
 80131fc:	8979      	ldrh	r1, [r7, #10]
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	68f8      	ldr	r0, [r7, #12]
 8013202:	f008 fabd 	bl	801b780 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8013206:	4603      	mov	r3, r0
    }
 8013208:	4618      	mov	r0, r3
 801320a:	3710      	adds	r7, #16
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}

08013210 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
        return rect.width;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801321e:	4618      	mov	r0, r3
 8013220:	370c      	adds	r7, #12
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr

0801322a <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 801322a:	b480      	push	{r7}
 801322c:	b083      	sub	sp, #12
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
        return rect.height;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8013238:	4618      	mov	r0, r3
 801323a:	370c      	adds	r7, #12
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr

08013244 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	4a05      	ldr	r2, [pc, #20]	; (8013264 <_ZN8MainViewD1Ev+0x20>)
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	601a      	str	r2, [r3, #0]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	4618      	mov	r0, r3
 8013256:	f7fd fec7 	bl	8010fe8 <_ZN12MainViewBaseD1Ev>
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	4618      	mov	r0, r3
 801325e:	3708      	adds	r7, #8
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	080272dc 	.word	0x080272dc

08013268 <_ZN8MainViewD0Ev>:
 8013268:	b580      	push	{r7, lr}
 801326a:	b082      	sub	sp, #8
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f7ff ffe7 	bl	8013244 <_ZN8MainViewD1Ev>
 8013276:	f242 71e4 	movw	r1, #10212	; 0x27e4
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	f012 f890 	bl	80253a0 <_ZdlPvj>
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	4618      	mov	r0, r3
 8013284:	3708      	adds	r7, #8
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
	...

0801328c <_ZN8MainViewC1Ev>:
static int prev_min_fuel_press = 99;
static int prev_iat = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView()
 801328c:	b590      	push	{r4, r7, lr}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	4618      	mov	r0, r3
 8013298:	f7fd fff0 	bl	801127c <_ZN12MainViewBaseC1Ev>
 801329c:	4a15      	ldr	r2, [pc, #84]	; (80132f4 <_ZN8MainViewC1Ev+0x68>)
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80132a2:	4b15      	ldr	r3, [pc, #84]	; (80132f8 <_ZN8MainViewC1Ev+0x6c>)
 80132a4:	881b      	ldrh	r3, [r3, #0]
 80132a6:	461c      	mov	r4, r3
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7ff ffae 	bl	8013210 <_ZNK8touchgfx8Drawable8getWidthEv>
 80132b4:	4603      	mov	r3, r0
 80132b6:	429c      	cmp	r4, r3
 80132b8:	dc0b      	bgt.n	80132d2 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 80132ba:	4b10      	ldr	r3, [pc, #64]	; (80132fc <_ZN8MainViewC1Ev+0x70>)
 80132bc:	881b      	ldrh	r3, [r3, #0]
 80132be:	461c      	mov	r4, r3
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7ff ffaf 	bl	801322a <_ZNK8touchgfx8Drawable9getHeightEv>
 80132cc:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80132ce:	429c      	cmp	r4, r3
 80132d0:	dd01      	ble.n	80132d6 <_ZN8MainViewC1Ev+0x4a>
 80132d2:	2301      	movs	r3, #1
 80132d4:	e000      	b.n	80132d8 <_ZN8MainViewC1Ev+0x4c>
 80132d6:	2300      	movs	r3, #0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d005      	beq.n	80132e8 <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	3340      	adds	r3, #64	; 0x40
 80132e0:	2101      	movs	r1, #1
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fd fabe 	bl	8010864 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	4618      	mov	r0, r3
 80132ec:	370c      	adds	r7, #12
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd90      	pop	{r4, r7, pc}
 80132f2:	bf00      	nop
 80132f4:	080272dc 	.word	0x080272dc
 80132f8:	2000c558 	.word	0x2000c558
 80132fc:	2000c55a 	.word	0x2000c55a

08013300 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8013300:	b480      	push	{r7}
 8013302:	b083      	sub	sp, #12
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
}
 8013308:	bf00      	nop
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr

08013314 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8013314:	b480      	push	{r7}
 8013316:	b083      	sub	sp, #12
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
}
 801331c:	bf00      	nop
 801331e:	370c      	adds	r7, #12
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr

08013328 <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 801332e:	2200      	movs	r2, #0
 8013330:	2100      	movs	r1, #0
 8013332:	2000      	movs	r0, #0
 8013334:	f7fd ff7a 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013338:	4603      	mov	r3, r0
 801333a:	607b      	str	r3, [r7, #4]
}
 801333c:	bf00      	nop
 801333e:	4618      	mov	r0, r3
 8013340:	3708      	adds	r7, #8
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}
	...

08013348 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0

	color_index ++;
 801334e:	4b1e      	ldr	r3, [pc, #120]	; (80133c8 <_ZL20getColorFromRevLimitv+0x80>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	3301      	adds	r3, #1
 8013354:	4a1c      	ldr	r2, [pc, #112]	; (80133c8 <_ZL20getColorFromRevLimitv+0x80>)
 8013356:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 8013358:	4b1b      	ldr	r3, [pc, #108]	; (80133c8 <_ZL20getColorFromRevLimitv+0x80>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2b02      	cmp	r3, #2
 801335e:	dd02      	ble.n	8013366 <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8013360:	4b19      	ldr	r3, [pc, #100]	; (80133c8 <_ZL20getColorFromRevLimitv+0x80>)
 8013362:	2200      	movs	r2, #0
 8013364:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 8013366:	2200      	movs	r2, #0
 8013368:	2100      	movs	r1, #0
 801336a:	20ff      	movs	r0, #255	; 0xff
 801336c:	f7fd ff5e 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013370:	4603      	mov	r3, r0
 8013372:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8013374:	2200      	movs	r2, #0
 8013376:	2100      	movs	r1, #0
 8013378:	2000      	movs	r0, #0
 801337a:	f7fd ff57 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801337e:	4603      	mov	r3, r0
 8013380:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8013382:	22ff      	movs	r2, #255	; 0xff
 8013384:	21ff      	movs	r1, #255	; 0xff
 8013386:	20ff      	movs	r0, #255	; 0xff
 8013388:	f7fd ff50 	bl	801122c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801338c:	4603      	mov	r3, r0
 801338e:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8013390:	463b      	mov	r3, r7
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff ff1a 	bl	80131cc <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 8013398:	4b0b      	ldr	r3, [pc, #44]	; (80133c8 <_ZL20getColorFromRevLimitv+0x80>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d101      	bne.n	80133a4 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 80133a4:	4b08      	ldr	r3, [pc, #32]	; (80133c8 <_ZL20getColorFromRevLimitv+0x80>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d101      	bne.n	80133b0 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 80133b0:	4b05      	ldr	r3, [pc, #20]	; (80133c8 <_ZL20getColorFromRevLimitv+0x80>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	2b02      	cmp	r3, #2
 80133b6:	d101      	bne.n	80133bc <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 80133bc:	683b      	ldr	r3, [r7, #0]
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3710      	adds	r7, #16
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
 80133c6:	bf00      	nop
 80133c8:	20008e2c 	.word	0x20008e2c

080133cc <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b086      	sub	sp, #24
 80133d0:	af02      	add	r7, sp, #8
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	4a66      	ldr	r2, [pc, #408]	; (8013578 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 80133e0:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f203 707c 	addw	r0, r3, #1916	; 0x77c
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	6a1b      	ldr	r3, [r3, #32]
 80133ec:	ee07 3a90 	vmov	s15, r3
 80133f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133f4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 801357c <_ZN8MainView14updateSettingsEPh+0x1b0>
 80133f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80133fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013400:	ee17 3a90 	vmov	r3, s15
 8013404:	b21a      	sxth	r2, r3
 8013406:	2300      	movs	r3, #0
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	2300      	movs	r3, #0
 801340c:	2100      	movs	r1, #0
 801340e:	f002 fd31 	bl	8015e74 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013418:	4618      	mov	r0, r3
 801341a:	f006 fc29 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f603 3018 	addw	r0, r3, #2840	; 0xb18
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	4a55      	ldr	r2, [pc, #340]	; (8013580 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801342a:	2102      	movs	r1, #2
 801342c:	f008 f84e 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013436:	4618      	mov	r0, r3
 8013438:	f004 fc74 	bl	8017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013442:	4618      	mov	r0, r3
 8013444:	f006 fc14 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f603 301c 	addw	r0, r3, #2844	; 0xb1c
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	689b      	ldr	r3, [r3, #8]
 8013452:	4a4b      	ldr	r2, [pc, #300]	; (8013580 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8013454:	2102      	movs	r1, #2
 8013456:	f008 f839 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8013460:	4618      	mov	r0, r3
 8013462:	f004 fc5f 	bl	8017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801346c:	4618      	mov	r0, r3
 801346e:	f006 fbff 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f503 6032 	add.w	r0, r3, #2848	; 0xb20
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	4a40      	ldr	r2, [pc, #256]	; (8013580 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801347e:	2102      	movs	r1, #2
 8013480:	f008 f824 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f503 7306 	add.w	r3, r3, #536	; 0x218
 801348a:	4618      	mov	r0, r3
 801348c:	f004 fc4a 	bl	8017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8013496:	4618      	mov	r0, r3
 8013498:	f006 fbea 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	f603 3024 	addw	r0, r3, #2852	; 0xb24
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	691b      	ldr	r3, [r3, #16]
 80134a6:	4a36      	ldr	r2, [pc, #216]	; (8013580 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80134a8:	2102      	movs	r1, #2
 80134aa:	f008 f80f 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80134b4:	4618      	mov	r0, r3
 80134b6:	f004 fc35 	bl	8017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80134c0:	4618      	mov	r0, r3
 80134c2:	f006 fbd5 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f603 3028 	addw	r0, r3, #2856	; 0xb28
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	695b      	ldr	r3, [r3, #20]
 80134d0:	4a2b      	ldr	r2, [pc, #172]	; (8013580 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80134d2:	2102      	movs	r1, #2
 80134d4:	f007 fffa 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80134de:	4618      	mov	r0, r3
 80134e0:	f004 fc20 	bl	8017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80134ea:	4618      	mov	r0, r3
 80134ec:	f006 fbc0 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f603 302c 	addw	r0, r3, #2860	; 0xb2c
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	699b      	ldr	r3, [r3, #24]
 80134fa:	4a21      	ldr	r2, [pc, #132]	; (8013580 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80134fc:	2102      	movs	r1, #2
 80134fe:	f007 ffe5 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8013508:	4618      	mov	r0, r3
 801350a:	f004 fc0b 	bl	8017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8013514:	4618      	mov	r0, r3
 8013516:	f006 fbab 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f503 6033 	add.w	r0, r3, #2864	; 0xb30
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	69db      	ldr	r3, [r3, #28]
 8013524:	4a16      	ldr	r2, [pc, #88]	; (8013580 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8013526:	2102      	movs	r1, #2
 8013528:	f007 ffd0 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8013532:	4618      	mov	r0, r3
 8013534:	f004 fbf6 	bl	8017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 801353e:	4618      	mov	r0, r3
 8013540:	f006 fb96 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f603 3034 	addw	r0, r3, #2868	; 0xb34
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	6a1b      	ldr	r3, [r3, #32]
 801354e:	4a0c      	ldr	r2, [pc, #48]	; (8013580 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8013550:	2102      	movs	r1, #2
 8013552:	f007 ffbb 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801355c:	4618      	mov	r0, r3
 801355e:	f004 fbe1 	bl	8017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8013568:	4618      	mov	r0, r3
 801356a:	f006 fb81 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 801356e:	bf00      	nop
 8013570:	3710      	adds	r7, #16
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
 8013576:	bf00      	nop
 8013578:	20000034 	.word	0x20000034
 801357c:	447a0000 	.word	0x447a0000
 8013580:	08026cd0 	.word	0x08026cd0

08013584 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8013584:	b590      	push	{r4, r7, lr}
 8013586:	b085      	sub	sp, #20
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	681a      	ldr	r2, [r3, #0]
 8013596:	4b0e      	ldr	r3, [pc, #56]	; (80135d0 <_ZN8MainView9updateValEPh+0x4c>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	429a      	cmp	r2, r3
 801359c:	bfac      	ite	ge
 801359e:	2301      	movge	r3, #1
 80135a0:	2300      	movlt	r3, #0
 80135a2:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 80135a4:	7afb      	ldrb	r3, [r7, #11]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d016      	beq.n	80135d8 <_ZN8MainView9updateValEPh+0x54>
	{
		background_is_black = false;
 80135aa:	4b0a      	ldr	r3, [pc, #40]	; (80135d4 <_ZN8MainView9updateValEPh+0x50>)
 80135ac:	2200      	movs	r2, #0
 80135ae:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80135b6:	f7ff fec7 	bl	8013348 <_ZL20getColorFromRevLimitv>
 80135ba:	4603      	mov	r3, r0
 80135bc:	4619      	mov	r1, r3
 80135be:	4620      	mov	r0, r4
 80135c0:	f7fd faec 	bl	8010b9c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	3340      	adds	r3, #64	; 0x40
 80135c8:	4618      	mov	r0, r3
 80135ca:	f006 fb51 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
 80135ce:	e01c      	b.n	801360a <_ZN8MainView9updateValEPh+0x86>
 80135d0:	20000034 	.word	0x20000034
 80135d4:	20008e5c 	.word	0x20008e5c
	}
	else if(!background_is_black){
 80135d8:	4ba9      	ldr	r3, [pc, #676]	; (8013880 <_ZN8MainView9updateValEPh+0x2fc>)
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	f083 0301 	eor.w	r3, r3, #1
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d011      	beq.n	801360a <_ZN8MainView9updateValEPh+0x86>
		backgroundBox.setColor(getBlackColor());
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80135ec:	f7ff fe9c 	bl	8013328 <_ZL13getBlackColorv>
 80135f0:	4603      	mov	r3, r0
 80135f2:	4619      	mov	r1, r3
 80135f4:	4620      	mov	r0, r4
 80135f6:	f7fd fad1 	bl	8010b9c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	3340      	adds	r3, #64	; 0x40
 80135fe:	4618      	mov	r0, r3
 8013600:	f006 fb36 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8013604:	4b9e      	ldr	r3, [pc, #632]	; (8013880 <_ZN8MainView9updateValEPh+0x2fc>)
 8013606:	2201      	movs	r2, #1
 8013608:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	4b9d      	ldr	r3, [pc, #628]	; (8013884 <_ZN8MainView9updateValEPh+0x300>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	429a      	cmp	r2, r3
 8013614:	d021      	beq.n	801365a <_ZN8MainView9updateValEPh+0xd6>
		prev_rpm = values->rpm;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	4a9a      	ldr	r2, [pc, #616]	; (8013884 <_ZN8MainView9updateValEPh+0x300>)
 801361c:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f203 727c 	addw	r2, r3, #1916	; 0x77c
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	4619      	mov	r1, r3
 801362a:	4610      	mov	r0, r2
 801362c:	f002 fb0c 	bl	8015c48 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013636:	4618      	mov	r0, r3
 8013638:	f006 fb1a 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f503 6036 	add.w	r0, r3, #2912	; 0xb60
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	4a90      	ldr	r2, [pc, #576]	; (8013888 <_ZN8MainView9updateValEPh+0x304>)
 8013648:	2105      	movs	r1, #5
 801364a:	f007 ff3f 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 8013654:	4618      	mov	r0, r3
 8013656:	f006 fb0b 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_rpm != prev_max_rpm) {
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	685a      	ldr	r2, [r3, #4]
 801365e:	4b8b      	ldr	r3, [pc, #556]	; (801388c <_ZN8MainView9updateValEPh+0x308>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	429a      	cmp	r2, r3
 8013664:	d012      	beq.n	801368c <_ZN8MainView9updateValEPh+0x108>
		prev_max_rpm = values->max_rpm;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	4a88      	ldr	r2, [pc, #544]	; (801388c <_ZN8MainView9updateValEPh+0x308>)
 801366c:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxRPMValueBuffer, MAXRPMVALUE_SIZE, "%d", prev_max_rpm);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f503 603b 	add.w	r0, r3, #2992	; 0xbb0
 8013674:	4b85      	ldr	r3, [pc, #532]	; (801388c <_ZN8MainView9updateValEPh+0x308>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	4a83      	ldr	r2, [pc, #524]	; (8013888 <_ZN8MainView9updateValEPh+0x304>)
 801367a:	2105      	movs	r1, #5
 801367c:	f007 ff26 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxRPMValue.invalidate();
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8013686:	4618      	mov	r0, r3
 8013688:	f006 faf2 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	689a      	ldr	r2, [r3, #8]
 8013690:	4b7f      	ldr	r3, [pc, #508]	; (8013890 <_ZN8MainView9updateValEPh+0x30c>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	429a      	cmp	r2, r3
 8013696:	d012      	beq.n	80136be <_ZN8MainView9updateValEPh+0x13a>
		prev_clt = values->clt;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	4a7c      	ldr	r2, [pc, #496]	; (8013890 <_ZN8MainView9updateValEPh+0x30c>)
 801369e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f603 306a 	addw	r0, r3, #2922	; 0xb6a
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	689b      	ldr	r3, [r3, #8]
 80136aa:	4a77      	ldr	r2, [pc, #476]	; (8013888 <_ZN8MainView9updateValEPh+0x304>)
 80136ac:	2105      	movs	r1, #5
 80136ae:	f007 ff0d 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f603 03d8 	addw	r3, r3, #2264	; 0x8d8
 80136b8:	4618      	mov	r0, r3
 80136ba:	f006 fad9 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_clt != prev_max_clt) {
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	68da      	ldr	r2, [r3, #12]
 80136c2:	4b74      	ldr	r3, [pc, #464]	; (8013894 <_ZN8MainView9updateValEPh+0x310>)
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d012      	beq.n	80136f0 <_ZN8MainView9updateValEPh+0x16c>
		prev_max_clt = values->max_clt;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	68db      	ldr	r3, [r3, #12]
 80136ce:	4a71      	ldr	r2, [pc, #452]	; (8013894 <_ZN8MainView9updateValEPh+0x310>)
 80136d0:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxCltValueBuffer, MAXCLTVALUE_SIZE, "%d", values->max_clt);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f603 30a6 	addw	r0, r3, #2982	; 0xba6
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	4a6a      	ldr	r2, [pc, #424]	; (8013888 <_ZN8MainView9updateValEPh+0x304>)
 80136de:	2105      	movs	r1, #5
 80136e0:	f007 fef4 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxCltValue.invalidate();
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80136ea:	4618      	mov	r0, r3
 80136ec:	f006 fac0 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	ed93 7a06 	vldr	s14, [r3, #24]
 80136f6:	4b68      	ldr	r3, [pc, #416]	; (8013898 <_ZN8MainView9updateValEPh+0x314>)
 80136f8:	edd3 7a00 	vldr	s15, [r3]
 80136fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8013700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013704:	d015      	beq.n	8013732 <_ZN8MainView9updateValEPh+0x1ae>
		prev_lambda = values->lambda;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	699b      	ldr	r3, [r3, #24]
 801370a:	4a63      	ldr	r2, [pc, #396]	; (8013898 <_ZN8MainView9updateValEPh+0x314>)
 801370c:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f603 3004 	addw	r0, r3, #2820	; 0xb04
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	edd3 7a06 	vldr	s15, [r3, #24]
 801371a:	eeb0 0a67 	vmov.f32	s0, s15
 801371e:	4a5f      	ldr	r2, [pc, #380]	; (801389c <_ZN8MainView9updateValEPh+0x318>)
 8013720:	2105      	movs	r1, #5
 8013722:	f7ff fd61 	bl	80131e8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801372c:	4618      	mov	r0, r3
 801372e:	f006 fa9f 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	69da      	ldr	r2, [r3, #28]
 8013736:	4b5a      	ldr	r3, [pc, #360]	; (80138a0 <_ZN8MainView9updateValEPh+0x31c>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	429a      	cmp	r2, r3
 801373c:	d012      	beq.n	8013764 <_ZN8MainView9updateValEPh+0x1e0>
		prev_oil_tmp = values->oil_tmp;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	69db      	ldr	r3, [r3, #28]
 8013742:	4a57      	ldr	r2, [pc, #348]	; (80138a0 <_ZN8MainView9updateValEPh+0x31c>)
 8013744:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f603 3042 	addw	r0, r3, #2882	; 0xb42
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	69db      	ldr	r3, [r3, #28]
 8013750:	4a4d      	ldr	r2, [pc, #308]	; (8013888 <_ZN8MainView9updateValEPh+0x304>)
 8013752:	2105      	movs	r1, #5
 8013754:	f007 feba 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801375e:	4618      	mov	r0, r3
 8013760:	f006 fa86 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_oil_tmp != prev_max_oil_tmp) {
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6a1a      	ldr	r2, [r3, #32]
 8013768:	4b4e      	ldr	r3, [pc, #312]	; (80138a4 <_ZN8MainView9updateValEPh+0x320>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	429a      	cmp	r2, r3
 801376e:	d012      	beq.n	8013796 <_ZN8MainView9updateValEPh+0x212>
		prev_max_oil_tmp = values->max_oil_tmp;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	6a1b      	ldr	r3, [r3, #32]
 8013774:	4a4b      	ldr	r2, [pc, #300]	; (80138a4 <_ZN8MainView9updateValEPh+0x320>)
 8013776:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxOilTValueBuffer, MAXOILTVALUE_SIZE, "%d",values->max_oil_tmp);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f603 309c 	addw	r0, r3, #2972	; 0xb9c
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	6a1b      	ldr	r3, [r3, #32]
 8013782:	4a41      	ldr	r2, [pc, #260]	; (8013888 <_ZN8MainView9updateValEPh+0x304>)
 8013784:	2105      	movs	r1, #5
 8013786:	f007 fea1 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxOilTValue.invalidate();
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8013790:	4618      	mov	r0, r3
 8013792:	f006 fa6d 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801379c:	4b42      	ldr	r3, [pc, #264]	; (80138a8 <_ZN8MainView9updateValEPh+0x324>)
 801379e:	edd3 7a00 	vldr	s15, [r3]
 80137a2:	eeb4 7a67 	vcmp.f32	s14, s15
 80137a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137aa:	d015      	beq.n	80137d8 <_ZN8MainView9updateValEPh+0x254>
		prev_oil_press = values->oil_press;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137b0:	4a3d      	ldr	r2, [pc, #244]	; (80138a8 <_ZN8MainView9updateValEPh+0x324>)
 80137b2:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f603 304c 	addw	r0, r3, #2892	; 0xb4c
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80137c0:	eeb0 0a67 	vmov.f32	s0, s15
 80137c4:	4a39      	ldr	r2, [pc, #228]	; (80138ac <_ZN8MainView9updateValEPh+0x328>)
 80137c6:	2105      	movs	r1, #5
 80137c8:	f7ff fd0e 	bl	80131e8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137d2:	4618      	mov	r0, r3
 80137d4:	f006 fa4c 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->min_oil_press != prev_min_oil_press) {
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80137de:	4b34      	ldr	r3, [pc, #208]	; (80138b0 <_ZN8MainView9updateValEPh+0x32c>)
 80137e0:	edd3 7a00 	vldr	s15, [r3]
 80137e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80137e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ec:	d015      	beq.n	801381a <_ZN8MainView9updateValEPh+0x296>
		prev_min_oil_press = values->min_oil_press;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137f2:	4a2f      	ldr	r2, [pc, #188]	; (80138b0 <_ZN8MainView9updateValEPh+0x32c>)
 80137f4:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(MinOilPValueBuffer, MINOILPVALUE_SIZE, "%.1f",values->min_oil_press);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f603 3092 	addw	r0, r3, #2962	; 0xb92
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013802:	eeb0 0a67 	vmov.f32	s0, s15
 8013806:	4a29      	ldr	r2, [pc, #164]	; (80138ac <_ZN8MainView9updateValEPh+0x328>)
 8013808:	2105      	movs	r1, #5
 801380a:	f7ff fced 	bl	80131e8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		MinOilPValue.invalidate();
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8013814:	4618      	mov	r0, r3
 8013816:	f006 fa2b 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801381e:	4b25      	ldr	r3, [pc, #148]	; (80138b4 <_ZN8MainView9updateValEPh+0x330>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	429a      	cmp	r2, r3
 8013824:	d012      	beq.n	801384c <_ZN8MainView9updateValEPh+0x2c8>
		prev_fuel_press = values->fuel_press;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801382a:	4a22      	ldr	r2, [pc, #136]	; (80138b4 <_ZN8MainView9updateValEPh+0x330>)
 801382c:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",values->fuel_press);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f603 3074 	addw	r0, r3, #2932	; 0xb74
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013838:	4a13      	ldr	r2, [pc, #76]	; (8013888 <_ZN8MainView9updateValEPh+0x304>)
 801383a:	2105      	movs	r1, #5
 801383c:	f007 fe46 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelPValue.invalidate();
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8013846:	4618      	mov	r0, r3
 8013848:	f006 fa12 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->min_fuel_press != prev_min_fuel_press) {
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013850:	4b19      	ldr	r3, [pc, #100]	; (80138b8 <_ZN8MainView9updateValEPh+0x334>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	429a      	cmp	r2, r3
 8013856:	d031      	beq.n	80138bc <_ZN8MainView9updateValEPh+0x338>
		prev_min_fuel_press = values->fuel_press;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801385c:	4a16      	ldr	r2, [pc, #88]	; (80138b8 <_ZN8MainView9updateValEPh+0x334>)
 801385e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MinFuelPValueBuffer, MINFUELPVALUE_SIZE, "%d",values->min_fuel_press);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f603 3088 	addw	r0, r3, #2952	; 0xb88
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801386a:	4a07      	ldr	r2, [pc, #28]	; (8013888 <_ZN8MainView9updateValEPh+0x304>)
 801386c:	2105      	movs	r1, #5
 801386e:	f007 fe2d 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MinFuelPValue.invalidate();
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f603 13b4 	addw	r3, r3, #2484	; 0x9b4
 8013878:	4618      	mov	r0, r3
 801387a:	f006 f9f9 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
 801387e:	e01d      	b.n	80138bc <_ZN8MainView9updateValEPh+0x338>
 8013880:	20008e5c 	.word	0x20008e5c
 8013884:	20000038 	.word	0x20000038
 8013888:	08026cd0 	.word	0x08026cd0
 801388c:	2000003c 	.word	0x2000003c
 8013890:	20008e38 	.word	0x20008e38
 8013894:	20008e3c 	.word	0x20008e3c
 8013898:	20000040 	.word	0x20000040
 801389c:	08026cd4 	.word	0x08026cd4
 80138a0:	20008e40 	.word	0x20008e40
 80138a4:	20008e44 	.word	0x20008e44
 80138a8:	20008e48 	.word	0x20008e48
 80138ac:	08026cdc 	.word	0x08026cdc
 80138b0:	20000044 	.word	0x20000044
 80138b4:	20008e4c 	.word	0x20008e4c
 80138b8:	20000048 	.word	0x20000048
	}

	if(values->speed != prev_speed) {
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	691a      	ldr	r2, [r3, #16]
 80138c0:	4b4a      	ldr	r3, [pc, #296]	; (80139ec <_ZN8MainView9updateValEPh+0x468>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d012      	beq.n	80138ee <_ZN8MainView9updateValEPh+0x36a>
		prev_speed = values->speed;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	691b      	ldr	r3, [r3, #16]
 80138cc:	4a47      	ldr	r2, [pc, #284]	; (80139ec <_ZN8MainView9updateValEPh+0x468>)
 80138ce:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(SpeedValueBuffer, SPEEDVALUE_SIZE, "%d",values->speed);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f603 300e 	addw	r0, r3, #2830	; 0xb0e
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	691b      	ldr	r3, [r3, #16]
 80138da:	4a45      	ldr	r2, [pc, #276]	; (80139f0 <_ZN8MainView9updateValEPh+0x46c>)
 80138dc:	2105      	movs	r1, #5
 80138de:	f007 fdf5 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		SpeedValue.invalidate();
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80138e8:	4618      	mov	r0, r3
 80138ea:	f006 f9c1 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->max_speed != prev_max_speed) {
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	695a      	ldr	r2, [r3, #20]
 80138f2:	4b40      	ldr	r3, [pc, #256]	; (80139f4 <_ZN8MainView9updateValEPh+0x470>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d012      	beq.n	8013920 <_ZN8MainView9updateValEPh+0x39c>
		prev_max_speed = values->max_speed;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	695b      	ldr	r3, [r3, #20]
 80138fe:	4a3d      	ldr	r2, [pc, #244]	; (80139f4 <_ZN8MainView9updateValEPh+0x470>)
 8013900:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MaxSpeedValueBuffer, MAXSPEEDVALUE_SIZE, "%d",values->max_speed);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f603 30ba 	addw	r0, r3, #3002	; 0xbba
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	695b      	ldr	r3, [r3, #20]
 801390c:	4a38      	ldr	r2, [pc, #224]	; (80139f0 <_ZN8MainView9updateValEPh+0x46c>)
 801390e:	2105      	movs	r1, #5
 8013910:	f007 fddc 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MaxSpeedValue.invalidate();
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f603 23cc 	addw	r3, r3, #2764	; 0xacc
 801391a:	4618      	mov	r0, r3
 801391c:	f006 f9a8 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013924:	4b34      	ldr	r3, [pc, #208]	; (80139f8 <_ZN8MainView9updateValEPh+0x474>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	429a      	cmp	r2, r3
 801392a:	d012      	beq.n	8013952 <_ZN8MainView9updateValEPh+0x3ce>
		prev_iat = values->iat;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013930:	4a31      	ldr	r2, [pc, #196]	; (80139f8 <_ZN8MainView9updateValEPh+0x474>)
 8013932:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f603 3038 	addw	r0, r3, #2872	; 0xb38
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801393e:	4a2c      	ldr	r2, [pc, #176]	; (80139f0 <_ZN8MainView9updateValEPh+0x46c>)
 8013940:	2105      	movs	r1, #5
 8013942:	f007 fdc3 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 801394c:	4618      	mov	r0, r3
 801394e:	f006 f98f 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->tps != prev_tps) {
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013956:	4b29      	ldr	r3, [pc, #164]	; (80139fc <_ZN8MainView9updateValEPh+0x478>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	429a      	cmp	r2, r3
 801395c:	d021      	beq.n	80139a2 <_ZN8MainView9updateValEPh+0x41e>
		prev_tps = values->tps;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013962:	4a26      	ldr	r2, [pc, #152]	; (80139fc <_ZN8MainView9updateValEPh+0x478>)
 8013964:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f203 526c 	addw	r2, r3, #1388	; 0x56c
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013970:	4619      	mov	r1, r3
 8013972:	4610      	mov	r0, r2
 8013974:	f002 f818 	bl	80159a8 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 801397e:	4618      	mov	r0, r3
 8013980:	f006 f976 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f603 307e 	addw	r0, r3, #2942	; 0xb7e
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801398e:	4a18      	ldr	r2, [pc, #96]	; (80139f0 <_ZN8MainView9updateValEPh+0x46c>)
 8013990:	2105      	movs	r1, #5
 8013992:	f007 fd9b 	bl	801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 801399c:	4618      	mov	r0, r3
 801399e:	f006 f967 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80139a8:	4b15      	ldr	r3, [pc, #84]	; (8013a00 <_ZN8MainView9updateValEPh+0x47c>)
 80139aa:	edd3 7a00 	vldr	s15, [r3]
 80139ae:	eeb4 7a67 	vcmp.f32	s14, s15
 80139b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139b6:	d015      	beq.n	80139e4 <_ZN8MainView9updateValEPh+0x460>
		prev_batt_v = values->batt_v;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139bc:	4a10      	ldr	r2, [pc, #64]	; (8013a00 <_ZN8MainView9updateValEPh+0x47c>)
 80139be:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f603 3056 	addw	r0, r3, #2902	; 0xb56
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80139cc:	eeb0 0a67 	vmov.f32	s0, s15
 80139d0:	4a0c      	ldr	r2, [pc, #48]	; (8013a04 <_ZN8MainView9updateValEPh+0x480>)
 80139d2:	2105      	movs	r1, #5
 80139d4:	f7ff fc08 	bl	80131e8 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		BatteryVoltage.invalidate();
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f203 7344 	addw	r3, r3, #1860	; 0x744
 80139de:	4618      	mov	r0, r3
 80139e0:	f006 f946 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 80139e4:	bf00      	nop
 80139e6:	3714      	adds	r7, #20
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd90      	pop	{r4, r7, pc}
 80139ec:	20008e30 	.word	0x20008e30
 80139f0:	08026cd0 	.word	0x08026cd0
 80139f4:	20008e34 	.word	0x20008e34
 80139f8:	20008e50 	.word	0x20008e50
 80139fc:	20008e54 	.word	0x20008e54
 8013a00:	20008e58 	.word	0x20008e58
 8013a04:	08026cd4 	.word	0x08026cd4

08013a08 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b082      	sub	sp, #8
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2200      	movs	r2, #0
 8013a14:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8013a16:	2200      	movs	r2, #0
 8013a18:	2140      	movs	r1, #64	; 0x40
 8013a1a:	2001      	movs	r0, #1
 8013a1c:	f7f9 f90c 	bl	800cc38 <xQueueGenericCreate>
 8013a20:	4603      	mov	r3, r0
 8013a22:	4a07      	ldr	r2, [pc, #28]	; (8013a40 <_ZN5ModelC1Ev+0x38>)
 8013a24:	6013      	str	r3, [r2, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8013a26:	2200      	movs	r2, #0
 8013a28:	2128      	movs	r1, #40	; 0x28
 8013a2a:	2001      	movs	r0, #1
 8013a2c:	f7f9 f904 	bl	800cc38 <xQueueGenericCreate>
 8013a30:	4603      	mov	r3, r0
 8013a32:	4a04      	ldr	r2, [pc, #16]	; (8013a44 <_ZN5ModelC1Ev+0x3c>)
 8013a34:	6013      	str	r3, [r2, #0]
}
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3708      	adds	r7, #8
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	20008ec8 	.word	0x20008ec8
 8013a44:	20008ecc 	.word	0x20008ecc

08013a48 <_ZN5Model4tickEv>:

void Model::tick()
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8013a50:	4b1a      	ldr	r3, [pc, #104]	; (8013abc <_ZN5Model4tickEv+0x74>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	2200      	movs	r2, #0
 8013a56:	491a      	ldr	r1, [pc, #104]	; (8013ac0 <_ZN5Model4tickEv+0x78>)
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7f9 fb8b 	bl	800d174 <xQueueReceive>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b01      	cmp	r3, #1
 8013a62:	bf0c      	ite	eq
 8013a64:	2301      	moveq	r3, #1
 8013a66:	2300      	movne	r3, #0
 8013a68:	b2db      	uxtb	r3, r3
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d009      	beq.n	8013a82 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681a      	ldr	r2, [r3, #0]
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	3308      	adds	r3, #8
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	4910      	ldr	r1, [pc, #64]	; (8013ac0 <_ZN5Model4tickEv+0x78>)
 8013a7e:	4610      	mov	r0, r2
 8013a80:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8013a82:	4b10      	ldr	r3, [pc, #64]	; (8013ac4 <_ZN5Model4tickEv+0x7c>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2200      	movs	r2, #0
 8013a88:	490f      	ldr	r1, [pc, #60]	; (8013ac8 <_ZN5Model4tickEv+0x80>)
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7f9 fb72 	bl	800d174 <xQueueReceive>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b01      	cmp	r3, #1
 8013a94:	bf0c      	ite	eq
 8013a96:	2301      	moveq	r3, #1
 8013a98:	2300      	movne	r3, #0
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d009      	beq.n	8013ab4 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	330c      	adds	r3, #12
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	4906      	ldr	r1, [pc, #24]	; (8013ac8 <_ZN5Model4tickEv+0x80>)
 8013ab0:	4610      	mov	r0, r2
 8013ab2:	4798      	blx	r3
	}
}
 8013ab4:	bf00      	nop
 8013ab6:	3708      	adds	r7, #8
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}
 8013abc:	20008ec8 	.word	0x20008ec8
 8013ac0:	20008e60 	.word	0x20008e60
 8013ac4:	20008ecc 	.word	0x20008ecc
 8013ac8:	20008ea0 	.word	0x20008ea0

08013acc <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8013acc:	b480      	push	{r7}
 8013ace:	b083      	sub	sp, #12
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
    {
 8013ad4:	4a04      	ldr	r2, [pc, #16]	; (8013ae8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	601a      	str	r2, [r3, #0]
    }
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	4618      	mov	r0, r3
 8013ade:	370c      	adds	r7, #12
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae6:	4770      	bx	lr
 8013ae8:	08027328 	.word	0x08027328

08013aec <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
    }
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f7ff ffe9 	bl	8013acc <_ZN8touchgfx15TouchControllerD1Ev>
 8013afa:	2104      	movs	r1, #4
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f011 fc4f 	bl	80253a0 <_ZdlPvj>
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	4618      	mov	r0, r3
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8013b0c:	b480      	push	{r7}
 8013b0e:	b083      	sub	sp, #12
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8013b14:	bf00      	nop
 8013b16:	370c      	adds	r7, #12
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr

08013b20 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8013b20:	b480      	push	{r7}
 8013b22:	b085      	sub	sp, #20
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	60f8      	str	r0, [r7, #12]
 8013b28:	60b9      	str	r1, [r7, #8]
 8013b2a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3714      	adds	r7, #20
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr
	...

08013b3c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b082      	sub	sp, #8
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	4a05      	ldr	r2, [pc, #20]	; (8013b5c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	601a      	str	r2, [r3, #0]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7ff ffbd 	bl	8013acc <_ZN8touchgfx15TouchControllerD1Ev>
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	4618      	mov	r0, r3
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	08027310 	.word	0x08027310

08013b60 <_ZN20STM32TouchControllerD0Ev>:
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b082      	sub	sp, #8
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f7ff ffe7 	bl	8013b3c <_ZN20STM32TouchControllerD1Ev>
 8013b6e:	2104      	movs	r1, #4
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f011 fc15 	bl	80253a0 <_ZdlPvj>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3708      	adds	r7, #8
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}

08013b80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013b80:	b480      	push	{r7}
 8013b82:	b083      	sub	sp, #12
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	4603      	mov	r3, r0
 8013b88:	71fb      	strb	r3, [r7, #7]

}
 8013b8a:	bf00      	nop
 8013b8c:	370c      	adds	r7, #12
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b94:	4770      	bx	lr

08013b96 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8013b96:	b480      	push	{r7}
 8013b98:	b083      	sub	sp, #12
 8013b9a:	af00      	add	r7, sp, #0
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	71fb      	strb	r3, [r7, #7]

}
 8013ba0:	bf00      	nop
 8013ba2:	370c      	adds	r7, #12
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr

08013bac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b083      	sub	sp, #12
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	71fb      	strb	r3, [r7, #7]

}
 8013bb6:	bf00      	nop
 8013bb8:	370c      	adds	r7, #12
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc0:	4770      	bx	lr
	...

08013bc4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
    {
 8013bcc:	4a04      	ldr	r2, [pc, #16]	; (8013be0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	601a      	str	r2, [r3, #0]
    }
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	370c      	adds	r7, #12
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr
 8013be0:	08028008 	.word	0x08028008

08013be4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
    }
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7ff ffe9 	bl	8013bc4 <_ZN8touchgfx3HALD1Ev>
 8013bf2:	2178      	movs	r1, #120	; 0x78
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f011 fbd3 	bl	80253a0 <_ZdlPvj>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3708      	adds	r7, #8
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8013c04:	b480      	push	{r7}
 8013c06:	b083      	sub	sp, #12
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	78fa      	ldrb	r2, [r7, #3]
 8013c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2201      	movs	r2, #1
 8013c1c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8013c20:	bf00      	nop
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr

08013c2c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	685a      	ldr	r2, [r3, #4]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	4610      	mov	r0, r2
 8013c42:	4798      	blx	r3
 8013c44:	4603      	mov	r3, r0
    }
 8013c46:	4618      	mov	r0, r3
 8013c48:	3708      	adds	r7, #8
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8013c4e:	b580      	push	{r7, lr}
 8013c50:	b082      	sub	sp, #8
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f003 f900 	bl	8016e5c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	3390      	adds	r3, #144	; 0x90
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	4798      	blx	r3
    }
 8013c68:	bf00      	nop
 8013c6a:	3708      	adds	r7, #8
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
    {
        return false;
 8013c7a:	2300      	movs	r3, #0
    }
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	370c      	adds	r7, #12
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr

08013c88 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8013c88:	b590      	push	{r4, r7, lr}
 8013c8a:	b08b      	sub	sp, #44	; 0x2c
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	4611      	mov	r1, r2
 8013c94:	461a      	mov	r2, r3
 8013c96:	460b      	mov	r3, r1
 8013c98:	80fb      	strh	r3, [r7, #6]
 8013c9a:	4613      	mov	r3, r2
 8013c9c:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8013c9e:	f7fc f873 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	3228      	adds	r2, #40	; 0x28
 8013ca8:	6812      	ldr	r2, [r2, #0]
 8013caa:	4618      	mov	r0, r3
 8013cac:	4790      	blx	r2
 8013cae:	4603      	mov	r3, r0
 8013cb0:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8013cb2:	8b7b      	ldrh	r3, [r7, #26]
 8013cb4:	4a25      	ldr	r2, [pc, #148]	; (8013d4c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc4>)
 8013cb6:	8812      	ldrh	r2, [r2, #0]
 8013cb8:	fb02 f303 	mul.w	r3, r2, r3
 8013cbc:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8013cca:	797b      	ldrb	r3, [r7, #5]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d005      	beq.n	8013cdc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8013cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	4413      	add	r3, r2
 8013cd6:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8013cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cda:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8013cdc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d005      	beq.n	8013cf0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8013ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	4413      	add	r3, r2
 8013cea:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8013cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cee:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8013cf0:	88fb      	ldrh	r3, [r7, #6]
 8013cf2:	2b02      	cmp	r3, #2
 8013cf4:	dc10      	bgt.n	8013d18 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	dc13      	bgt.n	8013d22 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 8013cfa:	e01c      	b.n	8013d36 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8013cfc:	3b04      	subs	r3, #4
 8013cfe:	4a14      	ldr	r2, [pc, #80]	; (8013d50 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xc8>)
 8013d00:	fa22 f303 	lsr.w	r3, r2, r3
 8013d04:	f003 0301 	and.w	r3, r3, #1
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	bf14      	ite	ne
 8013d0c:	2301      	movne	r3, #1
 8013d0e:	2300      	moveq	r3, #0
 8013d10:	b2db      	uxtb	r3, r3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d105      	bne.n	8013d22 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9a>
 8013d16:	e00e      	b.n	8013d36 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8013d18:	2b20      	cmp	r3, #32
 8013d1a:	dc0c      	bgt.n	8013d36 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
 8013d1c:	2b04      	cmp	r3, #4
 8013d1e:	daed      	bge.n	8013cfc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x74>
 8013d20:	e009      	b.n	8013d36 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xae>
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	3374      	adds	r3, #116	; 0x74
 8013d28:	681c      	ldr	r4, [r3, #0]
 8013d2a:	69fb      	ldr	r3, [r7, #28]
 8013d2c:	6a3a      	ldr	r2, [r7, #32]
 8013d2e:	68b9      	ldr	r1, [r7, #8]
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	47a0      	blx	r4
            break;
 8013d34:	e006      	b.n	8013d44 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xbc>
        default:
            assert(0 && "Unsupported bit depth");
 8013d36:	4b07      	ldr	r3, [pc, #28]	; (8013d54 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xcc>)
 8013d38:	4a07      	ldr	r2, [pc, #28]	; (8013d58 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd0>)
 8013d3a:	f240 3125 	movw	r1, #805	; 0x325
 8013d3e:	4807      	ldr	r0, [pc, #28]	; (8013d5c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd4>)
 8013d40:	f011 fb5c 	bl	80253fc <__assert_func>
            break;
        }
    }
 8013d44:	bf00      	nop
 8013d46:	372c      	adds	r7, #44	; 0x2c
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd90      	pop	{r4, r7, pc}
 8013d4c:	2000c560 	.word	0x2000c560
 8013d50:	10101011 	.word	0x10101011
 8013d54:	08026ce4 	.word	0x08026ce4
 8013d58:	08026d04 	.word	0x08026d04
 8013d5c:	08026d58 	.word	0x08026d58

08013d60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
 8013d6c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d106      	bne.n	8013d82 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013d74:	4b11      	ldr	r3, [pc, #68]	; (8013dbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8013d76:	4a12      	ldr	r2, [pc, #72]	; (8013dc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8013d78:	f240 3137 	movw	r1, #823	; 0x337
 8013d7c:	4811      	ldr	r0, [pc, #68]	; (8013dc4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8013d7e:	f011 fb3d 	bl	80253fc <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	68ba      	ldr	r2, [r7, #8]
 8013d86:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	683a      	ldr	r2, [r7, #0]
 8013d92:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	bf14      	ite	ne
 8013d9a:	2301      	movne	r3, #1
 8013d9c:	2300      	moveq	r3, #0
 8013d9e:	b2da      	uxtb	r2, r3
 8013da0:	4b09      	ldr	r3, [pc, #36]	; (8013dc8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8013da2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	bf14      	ite	ne
 8013daa:	2301      	movne	r3, #1
 8013dac:	2300      	moveq	r3, #0
 8013dae:	b2da      	uxtb	r2, r3
 8013db0:	4b06      	ldr	r3, [pc, #24]	; (8013dcc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8013db2:	701a      	strb	r2, [r3, #0]
    }
 8013db4:	bf00      	nop
 8013db6:	3710      	adds	r7, #16
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}
 8013dbc:	08026d9c 	.word	0x08026d9c
 8013dc0:	08026dd4 	.word	0x08026dd4
 8013dc4:	08026d58 	.word	0x08026d58
 8013dc8:	2000c562 	.word	0x2000c562
 8013dcc:	2000c563 	.word	0x2000c563

08013dd0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b082      	sub	sp, #8
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	460b      	mov	r3, r1
 8013dda:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d004      	beq.n	8013dee <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013de8:	887a      	ldrh	r2, [r7, #2]
 8013dea:	4610      	mov	r0, r2
 8013dec:	4798      	blx	r3
        }
    }
 8013dee:	bf00      	nop
 8013df0:	3708      	adds	r7, #8
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd80      	pop	{r7, pc}

08013df6 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8013df6:	b580      	push	{r7, lr}
 8013df8:	b082      	sub	sp, #8
 8013dfa:	af00      	add	r7, sp, #0
 8013dfc:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	685a      	ldr	r2, [r3, #4]
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	3318      	adds	r3, #24
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	4610      	mov	r0, r2
 8013e0e:	4798      	blx	r3
 8013e10:	4603      	mov	r3, r0
    }
 8013e12:	4618      	mov	r0, r3
 8013e14:	3708      	adds	r7, #8
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}
	...

08013e1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8013e1c:	b480      	push	{r7}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d017      	beq.n	8013e64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013e34:	4b1a      	ldr	r3, [pc, #104]	; (8013ea0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e36:	781b      	ldrb	r3, [r3, #0]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d12a      	bne.n	8013e92 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013e3c:	4b19      	ldr	r3, [pc, #100]	; (8013ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e3e:	881a      	ldrh	r2, [r3, #0]
 8013e40:	4b19      	ldr	r3, [pc, #100]	; (8013ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e42:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013e44:	4b19      	ldr	r3, [pc, #100]	; (8013eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e46:	881a      	ldrh	r2, [r3, #0]
 8013e48:	4b19      	ldr	r3, [pc, #100]	; (8013eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e4a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8013e4c:	4b16      	ldr	r3, [pc, #88]	; (8013ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e4e:	881a      	ldrh	r2, [r3, #0]
 8013e50:	4b16      	ldr	r3, [pc, #88]	; (8013eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e52:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8013e54:	4b16      	ldr	r3, [pc, #88]	; (8013eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e56:	881a      	ldrh	r2, [r3, #0]
 8013e58:	4b12      	ldr	r3, [pc, #72]	; (8013ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e5a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8013e5c:	4b10      	ldr	r3, [pc, #64]	; (8013ea0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e5e:	2201      	movs	r2, #1
 8013e60:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8013e62:	e016      	b.n	8013e92 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8013e64:	4b0e      	ldr	r3, [pc, #56]	; (8013ea0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e66:	781b      	ldrb	r3, [r3, #0]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d012      	beq.n	8013e92 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8013e6c:	4b0f      	ldr	r3, [pc, #60]	; (8013eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e6e:	881a      	ldrh	r2, [r3, #0]
 8013e70:	4b0d      	ldr	r3, [pc, #52]	; (8013ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e72:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8013e74:	4b0b      	ldr	r3, [pc, #44]	; (8013ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e76:	881a      	ldrh	r2, [r3, #0]
 8013e78:	4b0d      	ldr	r3, [pc, #52]	; (8013eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e7a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8013e7c:	4b0c      	ldr	r3, [pc, #48]	; (8013eb0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8013e7e:	881a      	ldrh	r2, [r3, #0]
 8013e80:	4b0a      	ldr	r3, [pc, #40]	; (8013eac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8013e82:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8013e84:	4b08      	ldr	r3, [pc, #32]	; (8013ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8013e86:	881a      	ldrh	r2, [r3, #0]
 8013e88:	4b06      	ldr	r3, [pc, #24]	; (8013ea4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8013e8a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8013e8c:	4b04      	ldr	r3, [pc, #16]	; (8013ea0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8013e8e:	2200      	movs	r2, #0
 8013e90:	701a      	strb	r2, [r3, #0]
    }
 8013e92:	bf00      	nop
 8013e94:	370c      	adds	r7, #12
 8013e96:	46bd      	mov	sp, r7
 8013e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop
 8013ea0:	2000c55c 	.word	0x2000c55c
 8013ea4:	2000c558 	.word	0x2000c558
 8013ea8:	2000c55e 	.word	0x2000c55e
 8013eac:	2000c55a 	.word	0x2000c55a
 8013eb0:	2000c560 	.word	0x2000c560

08013eb4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f002 fa4e 	bl	8016360 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8013ec4:	bf00      	nop
 8013ec6:	3708      	adds	r7, #8
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}

08013ecc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b082      	sub	sp, #8
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	4a05      	ldr	r2, [pc, #20]	; (8013eec <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	601a      	str	r2, [r3, #0]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7ff fe71 	bl	8013bc4 <_ZN8touchgfx3HALD1Ev>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3708      	adds	r7, #8
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}
 8013eec:	0802753c 	.word	0x0802753c

08013ef0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f7ff ffe7 	bl	8013ecc <_ZN20TouchGFXGeneratedHALD1Ev>
 8013efe:	2178      	movs	r1, #120	; 0x78
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f011 fa4d 	bl	80253a0 <_ZdlPvj>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3708      	adds	r7, #8
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b082      	sub	sp, #8
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7ff ffca 	bl	8013eb4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013f20:	bf00      	nop
 8013f22:	3708      	adds	r7, #8
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}

08013f28 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b082      	sub	sp, #8
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	4618      	mov	r0, r3
 8013f34:	f001 fb1c 	bl	8015570 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8013f38:	bf00      	nop
 8013f3a:	3708      	adds	r7, #8
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f001 fb9c 	bl	8015688 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8013f50:	4603      	mov	r3, r0
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3708      	adds	r7, #8
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}

08013f5a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8013f5a:	b580      	push	{r7, lr}
 8013f5c:	b082      	sub	sp, #8
 8013f5e:	af00      	add	r7, sp, #0
 8013f60:	6078      	str	r0, [r7, #4]
 8013f62:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6839      	ldr	r1, [r7, #0]
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f001 fb9b 	bl	80156a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8013f6e:	bf00      	nop
 8013f70:	3708      	adds	r7, #8
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}

08013f76 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013f76:	b580      	push	{r7, lr}
 8013f78:	b082      	sub	sp, #8
 8013f7a:	af00      	add	r7, sp, #0
 8013f7c:	6078      	str	r0, [r7, #4]
 8013f7e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f001 fba3 	bl	80156d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8013f8a:	bf00      	nop
 8013f8c:	3708      	adds	r7, #8
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}

08013f92 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8013f92:	b580      	push	{r7, lr}
 8013f94:	b082      	sub	sp, #8
 8013f96:	af00      	add	r7, sp, #0
 8013f98:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f001 fb19 	bl	80155d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8013fa2:	bf00      	nop
 8013fa4:	3708      	adds	r7, #8
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}

08013faa <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8013faa:	b580      	push	{r7, lr}
 8013fac:	b082      	sub	sp, #8
 8013fae:	af00      	add	r7, sp, #0
 8013fb0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f001 fb1d 	bl	80155f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013fba:	bf00      	nop
 8013fbc:	3708      	adds	r7, #8
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}

08013fc2 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8013fc2:	b580      	push	{r7, lr}
 8013fc4:	b082      	sub	sp, #8
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f001 fb1f 	bl	8015610 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8013fd2:	bf00      	nop
 8013fd4:	3708      	adds	r7, #8
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b082      	sub	sp, #8
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f001 fb21 	bl	801562c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013fea:	bf00      	nop
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
	...

08013ff4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b082      	sub	sp, #8
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	4a05      	ldr	r2, [pc, #20]	; (8014014 <_ZN11TouchGFXHALD1Ev+0x20>)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	601a      	str	r2, [r3, #0]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	4618      	mov	r0, r3
 8014006:	f7ff ff61 	bl	8013ecc <_ZN20TouchGFXGeneratedHALD1Ev>
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	4618      	mov	r0, r3
 801400e:	3708      	adds	r7, #8
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}
 8014014:	08027340 	.word	0x08027340

08014018 <_ZN11TouchGFXHALD0Ev>:
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f7ff ffe7 	bl	8013ff4 <_ZN11TouchGFXHALD1Ev>
 8014026:	2178      	movs	r1, #120	; 0x78
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f011 f9b9 	bl	80253a0 <_ZdlPvj>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	4618      	mov	r0, r3
 8014032:	3708      	adds	r7, #8
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014038:	b580      	push	{r7, lr}
 801403a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 801403c:	2203      	movs	r2, #3
 801403e:	2100      	movs	r1, #0
 8014040:	2001      	movs	r0, #1
 8014042:	f7f8 fdf9 	bl	800cc38 <xQueueGenericCreate>
 8014046:	4603      	mov	r3, r0
 8014048:	4a0b      	ldr	r2, [pc, #44]	; (8014078 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801404a:	6013      	str	r3, [r2, #0]
 801404c:	4b0a      	ldr	r3, [pc, #40]	; (8014078 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d006      	beq.n	8014062 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8014054:	4b08      	ldr	r3, [pc, #32]	; (8014078 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8014056:	6818      	ldr	r0, [r3, #0]
 8014058:	2300      	movs	r3, #0
 801405a:	2200      	movs	r2, #0
 801405c:	2100      	movs	r1, #0
 801405e:	f7f8 fe4d 	bl	800ccfc <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8014062:	2200      	movs	r2, #0
 8014064:	2101      	movs	r1, #1
 8014066:	2001      	movs	r0, #1
 8014068:	f7f8 fde6 	bl	800cc38 <xQueueGenericCreate>
 801406c:	4603      	mov	r3, r0
 801406e:	4a03      	ldr	r2, [pc, #12]	; (801407c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8014070:	6013      	str	r3, [r2, #0]
}
 8014072:	bf00      	nop
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	20008ed0 	.word	0x20008ed0
 801407c:	20008ed4 	.word	0x20008ed4

08014080 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8014080:	b580      	push	{r7, lr}
 8014082:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8014084:	4b04      	ldr	r3, [pc, #16]	; (8014098 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	f04f 31ff 	mov.w	r1, #4294967295
 801408c:	4618      	mov	r0, r3
 801408e:	f7f9 f957 	bl	800d340 <xQueueSemaphoreTake>
}
 8014092:	bf00      	nop
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	20008ed0 	.word	0x20008ed0

0801409c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801409c:	b580      	push	{r7, lr}
 801409e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80140a0:	4b04      	ldr	r3, [pc, #16]	; (80140b4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80140a2:	6818      	ldr	r0, [r3, #0]
 80140a4:	2300      	movs	r3, #0
 80140a6:	2200      	movs	r2, #0
 80140a8:	2100      	movs	r1, #0
 80140aa:	f7f8 fe27 	bl	800ccfc <xQueueGenericSend>
}
 80140ae:	bf00      	nop
 80140b0:	bd80      	pop	{r7, pc}
 80140b2:	bf00      	nop
 80140b4:	20008ed0 	.word	0x20008ed0

080140b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80140bc:	4b03      	ldr	r3, [pc, #12]	; (80140cc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2100      	movs	r1, #0
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7f9 f93c 	bl	800d340 <xQueueSemaphoreTake>
}
 80140c8:	bf00      	nop
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	20008ed0 	.word	0x20008ed0

080140d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80140d6:	2300      	movs	r3, #0
 80140d8:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80140da:	4b0b      	ldr	r3, [pc, #44]	; (8014108 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	1d3a      	adds	r2, r7, #4
 80140e0:	4611      	mov	r1, r2
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7f8 ffb0 	bl	800d048 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d007      	beq.n	80140fe <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80140ee:	4b07      	ldr	r3, [pc, #28]	; (801410c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80140f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140f4:	601a      	str	r2, [r3, #0]
 80140f6:	f3bf 8f4f 	dsb	sy
 80140fa:	f3bf 8f6f 	isb	sy
}
 80140fe:	bf00      	nop
 8014100:	3708      	adds	r7, #8
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	20008ed0 	.word	0x20008ed0
 801410c:	e000ed04 	.word	0xe000ed04

08014110 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
    if (vsync_q)
 8014116:	4b0e      	ldr	r3, [pc, #56]	; (8014150 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d013      	beq.n	8014146 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 801411e:	2300      	movs	r3, #0
 8014120:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8014122:	4b0b      	ldr	r3, [pc, #44]	; (8014150 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8014124:	6818      	ldr	r0, [r3, #0]
 8014126:	1d3a      	adds	r2, r7, #4
 8014128:	2300      	movs	r3, #0
 801412a:	490a      	ldr	r1, [pc, #40]	; (8014154 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 801412c:	f7f8 feec 	bl	800cf08 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d007      	beq.n	8014146 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8014136:	4b08      	ldr	r3, [pc, #32]	; (8014158 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8014138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801413c:	601a      	str	r2, [r3, #0]
 801413e:	f3bf 8f4f 	dsb	sy
 8014142:	f3bf 8f6f 	isb	sy
    }
}
 8014146:	bf00      	nop
 8014148:	3708      	adds	r7, #8
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	20008ed4 	.word	0x20008ed4
 8014154:	2000004c 	.word	0x2000004c
 8014158:	e000ed04 	.word	0xe000ed04

0801415c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801415c:	b580      	push	{r7, lr}
 801415e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8014160:	4b08      	ldr	r3, [pc, #32]	; (8014184 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	2200      	movs	r2, #0
 8014166:	4908      	ldr	r1, [pc, #32]	; (8014188 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014168:	4618      	mov	r0, r3
 801416a:	f7f9 f803 	bl	800d174 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 801416e:	4b05      	ldr	r3, [pc, #20]	; (8014184 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f04f 32ff 	mov.w	r2, #4294967295
 8014176:	4904      	ldr	r1, [pc, #16]	; (8014188 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014178:	4618      	mov	r0, r3
 801417a:	f7f8 fffb 	bl	800d174 <xQueueReceive>
}
 801417e:	bf00      	nop
 8014180:	bd80      	pop	{r7, pc}
 8014182:	bf00      	nop
 8014184:	20008ed4 	.word	0x20008ed4
 8014188:	2000004c 	.word	0x2000004c

0801418c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	4603      	mov	r3, r0
 8014194:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8014196:	88fb      	ldrh	r3, [r7, #6]
 8014198:	4618      	mov	r0, r3
 801419a:	f7f9 fd39 	bl	800dc10 <vTaskDelay>
}
 801419e:	bf00      	nop
 80141a0:	3708      	adds	r7, #8
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}
	...

080141a8 <__NVIC_EnableIRQ>:
{
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	4603      	mov	r3, r0
 80141b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80141b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	db0b      	blt.n	80141d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80141ba:	79fb      	ldrb	r3, [r7, #7]
 80141bc:	f003 021f 	and.w	r2, r3, #31
 80141c0:	4907      	ldr	r1, [pc, #28]	; (80141e0 <__NVIC_EnableIRQ+0x38>)
 80141c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141c6:	095b      	lsrs	r3, r3, #5
 80141c8:	2001      	movs	r0, #1
 80141ca:	fa00 f202 	lsl.w	r2, r0, r2
 80141ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80141d2:	bf00      	nop
 80141d4:	370c      	adds	r7, #12
 80141d6:	46bd      	mov	sp, r7
 80141d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141dc:	4770      	bx	lr
 80141de:	bf00      	nop
 80141e0:	e000e100 	.word	0xe000e100

080141e4 <__NVIC_DisableIRQ>:
{
 80141e4:	b480      	push	{r7}
 80141e6:	b083      	sub	sp, #12
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	4603      	mov	r3, r0
 80141ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80141ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	db12      	blt.n	801421c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80141f6:	79fb      	ldrb	r3, [r7, #7]
 80141f8:	f003 021f 	and.w	r2, r3, #31
 80141fc:	490a      	ldr	r1, [pc, #40]	; (8014228 <__NVIC_DisableIRQ+0x44>)
 80141fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014202:	095b      	lsrs	r3, r3, #5
 8014204:	2001      	movs	r0, #1
 8014206:	fa00 f202 	lsl.w	r2, r0, r2
 801420a:	3320      	adds	r3, #32
 801420c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014210:	f3bf 8f4f 	dsb	sy
}
 8014214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8014216:	f3bf 8f6f 	isb	sy
}
 801421a:	bf00      	nop
}
 801421c:	bf00      	nop
 801421e:	370c      	adds	r7, #12
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr
 8014228:	e000e100 	.word	0xe000e100

0801422c <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 801422c:	b480      	push	{r7}
 801422e:	b083      	sub	sp, #12
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
        return color;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
    }
 8014238:	4618      	mov	r0, r3
 801423a:	370c      	adds	r7, #12
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr

08014244 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8014244:	b480      	push	{r7}
 8014246:	b083      	sub	sp, #12
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	b29b      	uxth	r3, r3
    }
 8014252:	4618      	mov	r0, r3
 8014254:	370c      	adds	r7, #12
 8014256:	46bd      	mov	sp, r7
 8014258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425c:	4770      	bx	lr
	...

08014260 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
    {
 8014268:	4a04      	ldr	r2, [pc, #16]	; (801427c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	601a      	str	r2, [r3, #0]
    }
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	4618      	mov	r0, r3
 8014272:	370c      	adds	r7, #12
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr
 801427c:	08027444 	.word	0x08027444

08014280 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
    }
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f7ff ffe9 	bl	8014260 <_ZN8touchgfx9DMA_QueueD1Ev>
 801428e:	2104      	movs	r1, #4
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f011 f885 	bl	80253a0 <_ZdlPvj>
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	4618      	mov	r0, r3
 801429a:	3708      	adds	r7, #8
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	3344      	adds	r3, #68	; 0x44
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	4798      	blx	r3
    }
 80142b4:	bf00      	nop
 80142b6:	3708      	adds	r7, #8
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}

080142bc <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80142bc:	b480      	push	{r7}
 80142be:	b083      	sub	sp, #12
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80142c4:	2300      	movs	r3, #0
    }
 80142c6:	4618      	mov	r0, r3
 80142c8:	370c      	adds	r7, #12
 80142ca:	46bd      	mov	sp, r7
 80142cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d0:	4770      	bx	lr
	...

080142d4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80142d4:	b480      	push	{r7}
 80142d6:	b083      	sub	sp, #12
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
    {
 80142dc:	4a04      	ldr	r2, [pc, #16]	; (80142f0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	601a      	str	r2, [r3, #0]
    }
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	4618      	mov	r0, r3
 80142e6:	370c      	adds	r7, #12
 80142e8:	46bd      	mov	sp, r7
 80142ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ee:	4770      	bx	lr
 80142f0:	0802844c 	.word	0x0802844c

080142f4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
    }
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f7ff ffe9 	bl	80142d4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014302:	210c      	movs	r1, #12
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f011 f84b 	bl	80253a0 <_ZdlPvj>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	4618      	mov	r0, r3
 801430e:	3708      	adds	r7, #8
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014314:	b480      	push	{r7}
 8014316:	b083      	sub	sp, #12
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801431e:	4a09      	ldr	r2, [pc, #36]	; (8014344 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	601a      	str	r2, [r3, #0]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	683a      	ldr	r2, [r7, #0]
 8014328:	605a      	str	r2, [r3, #4]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2200      	movs	r2, #0
 801432e:	721a      	strb	r2, [r3, #8]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2200      	movs	r2, #0
 8014334:	725a      	strb	r2, [r3, #9]
    {
    }
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	4618      	mov	r0, r3
 801433a:	370c      	adds	r7, #12
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr
 8014344:	0802844c 	.word	0x0802844c

08014348 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8014348:	b580      	push	{r7, lr}
 801434a:	b082      	sub	sp, #8
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	685a      	ldr	r2, [r3, #4]
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	3314      	adds	r3, #20
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	4610      	mov	r0, r2
 8014360:	4798      	blx	r3
    }
 8014362:	bf00      	nop
 8014364:	3708      	adds	r7, #8
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}

0801436a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801436a:	b580      	push	{r7, lr}
 801436c:	b082      	sub	sp, #8
 801436e:	af00      	add	r7, sp, #0
 8014370:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8014372:	687a      	ldr	r2, [r7, #4]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	3328      	adds	r3, #40	; 0x28
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	4610      	mov	r0, r2
 801437e:	4798      	blx	r3
    }
 8014380:	bf00      	nop
 8014382:	3708      	adds	r7, #8
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}

08014388 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8014388:	b480      	push	{r7}
 801438a:	b085      	sub	sp, #20
 801438c:	af00      	add	r7, sp, #0
 801438e:	60f8      	str	r0, [r7, #12]
 8014390:	60b9      	str	r1, [r7, #8]
 8014392:	607a      	str	r2, [r7, #4]
 8014394:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	68ba      	ldr	r2, [r7, #8]
 80143a6:	430a      	orrs	r2, r1
 80143a8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143b0:	f023 0107 	bic.w	r1, r3, #7
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	687a      	ldr	r2, [r7, #4]
 80143ba:	430a      	orrs	r2, r1
 80143bc:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80143c4:	4b06      	ldr	r3, [pc, #24]	; (80143e0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80143c6:	4013      	ands	r3, r2
 80143c8:	68fa      	ldr	r2, [r7, #12]
 80143ca:	6812      	ldr	r2, [r2, #0]
 80143cc:	6839      	ldr	r1, [r7, #0]
 80143ce:	430b      	orrs	r3, r1
 80143d0:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80143d2:	2300      	movs	r3, #0
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3714      	adds	r7, #20
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr
 80143e0:	ffffc000 	.word	0xffffc000

080143e4 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80143ec:	f7fb fcc0 	bl	800fd70 <_ZN8touchgfx3HAL11getInstanceEv>
 80143f0:	4603      	mov	r3, r0
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7ff ffa8 	bl	8014348 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80143f8:	bf00      	nop
 80143fa:	3708      	adds	r7, #8
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b082      	sub	sp, #8
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
    assert(0);
 8014408:	4b02      	ldr	r3, [pc, #8]	; (8014414 <DMA2D_XferErrorCallback+0x14>)
 801440a:	4a03      	ldr	r2, [pc, #12]	; (8014418 <DMA2D_XferErrorCallback+0x18>)
 801440c:	213e      	movs	r1, #62	; 0x3e
 801440e:	4803      	ldr	r0, [pc, #12]	; (801441c <DMA2D_XferErrorCallback+0x1c>)
 8014410:	f010 fff4 	bl	80253fc <__assert_func>
 8014414:	08026e24 	.word	0x08026e24
 8014418:	08026e28 	.word	0x08026e28
 801441c:	08026e5c 	.word	0x08026e5c

08014420 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	3318      	adds	r3, #24
 801442c:	4618      	mov	r0, r3
 801442e:	f7fe fecd 	bl	80131cc <_ZN8touchgfx9colortypeC1Ev>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	4618      	mov	r0, r3
 8014436:	3708      	adds	r7, #8
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}

0801443c <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 801443c:	b5b0      	push	{r4, r5, r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8014444:	687a      	ldr	r2, [r7, #4]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	330c      	adds	r3, #12
 801444a:	4619      	mov	r1, r3
 801444c:	4610      	mov	r0, r2
 801444e:	f7ff ff61 	bl	8014314 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8014452:	4a0e      	ldr	r2, [pc, #56]	; (801448c <_ZN10STM32F7DMAC1Ev+0x50>)
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	601a      	str	r2, [r3, #0]
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f103 000c 	add.w	r0, r3, #12
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	3320      	adds	r3, #32
 8014462:	2260      	movs	r2, #96	; 0x60
 8014464:	4619      	mov	r1, r3
 8014466:	f002 fe1f 	bl	80170a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	3320      	adds	r3, #32
 801446e:	245f      	movs	r4, #95	; 0x5f
 8014470:	461d      	mov	r5, r3
 8014472:	e004      	b.n	801447e <_ZN10STM32F7DMAC1Ev+0x42>
 8014474:	4628      	mov	r0, r5
 8014476:	f7ff ffd3 	bl	8014420 <_ZN8touchgfx6BlitOpC1Ev>
 801447a:	3520      	adds	r5, #32
 801447c:	3c01      	subs	r4, #1
 801447e:	2c00      	cmp	r4, #0
 8014480:	daf8      	bge.n	8014474 <_ZN10STM32F7DMAC1Ev+0x38>
{}
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	4618      	mov	r0, r3
 8014486:	3708      	adds	r7, #8
 8014488:	46bd      	mov	sp, r7
 801448a:	bdb0      	pop	{r4, r5, r7, pc}
 801448c:	080273f4 	.word	0x080273f4

08014490 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
 8014498:	4a0b      	ldr	r2, [pc, #44]	; (80144c8 <_ZN10STM32F7DMAD1Ev+0x38>)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801449e:	480b      	ldr	r0, [pc, #44]	; (80144cc <_ZN10STM32F7DMAD1Ev+0x3c>)
 80144a0:	f7f0 ff50 	bl	8005344 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80144a4:	205a      	movs	r0, #90	; 0x5a
 80144a6:	f7ff fe9d 	bl	80141e4 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	330c      	adds	r3, #12
 80144ae:	4618      	mov	r0, r3
 80144b0:	f000 faa8 	bl	8014a04 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7ff ff0c 	bl	80142d4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	4618      	mov	r0, r3
 80144c0:	3708      	adds	r7, #8
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}
 80144c6:	bf00      	nop
 80144c8:	080273f4 	.word	0x080273f4
 80144cc:	20000488 	.word	0x20000488

080144d0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
}
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f7ff ffd9 	bl	8014490 <_ZN10STM32F7DMAD1Ev>
 80144de:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f010 ff5c 	bl	80253a0 <_ZdlPvj>
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	4618      	mov	r0, r3
 80144ec:	3708      	adds	r7, #8
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
	...

080144f4 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b082      	sub	sp, #8
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80144fc:	4b09      	ldr	r3, [pc, #36]	; (8014524 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80144fe:	4a0a      	ldr	r2, [pc, #40]	; (8014528 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8014500:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8014502:	4808      	ldr	r0, [pc, #32]	; (8014524 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014504:	f7f0 fed4 	bl	80052b0 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8014508:	4b06      	ldr	r3, [pc, #24]	; (8014524 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801450a:	4a08      	ldr	r2, [pc, #32]	; (801452c <_ZN10STM32F7DMA10initializeEv+0x38>)
 801450c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801450e:	4b05      	ldr	r3, [pc, #20]	; (8014524 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014510:	4a07      	ldr	r2, [pc, #28]	; (8014530 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8014512:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8014514:	205a      	movs	r0, #90	; 0x5a
 8014516:	f7ff fe47 	bl	80141a8 <__NVIC_EnableIRQ>
}
 801451a:	bf00      	nop
 801451c:	3708      	adds	r7, #8
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
 8014522:	bf00      	nop
 8014524:	20000488 	.word	0x20000488
 8014528:	4002b000 	.word	0x4002b000
 801452c:	080143e5 	.word	0x080143e5
 8014530:	08014401 	.word	0x08014401

08014534 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8014534:	b480      	push	{r7}
 8014536:	b083      	sub	sp, #12
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 801453c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8014540:	4618      	mov	r0, r3
 8014542:	370c      	adds	r7, #12
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr

0801454c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 801454c:	b590      	push	{r4, r7, lr}
 801454e:	b08d      	sub	sp, #52	; 0x34
 8014550:	af02      	add	r7, sp, #8
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8014556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801455a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 801455c:	2300      	movs	r3, #0
 801455e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014564:	2b20      	cmp	r3, #32
 8014566:	d007      	beq.n	8014578 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2b40      	cmp	r3, #64	; 0x40
 801456e:	d003      	beq.n	8014578 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2b04      	cmp	r3, #4
 8014576:	d101      	bne.n	801457c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8014578:	2301      	movs	r3, #1
 801457a:	e000      	b.n	801457e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 801457c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801457e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8014584:	2b80      	cmp	r3, #128	; 0x80
 8014586:	d004      	beq.n	8014592 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014590:	d101      	bne.n	8014596 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8014592:	2301      	movs	r3, #1
 8014594:	e000      	b.n	8014598 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8014596:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014598:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801459a:	f7fb fbf5 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 801459e:	4603      	mov	r3, r0
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	3220      	adds	r2, #32
 80145a4:	6812      	ldr	r2, [r2, #0]
 80145a6:	4618      	mov	r0, r3
 80145a8:	4790      	blx	r2
 80145aa:	4603      	mov	r3, r0
 80145ac:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145b6:	d012      	beq.n	80145de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
 80145b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145bc:	d820      	bhi.n	8014600 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80145be:	2b80      	cmp	r3, #128	; 0x80
 80145c0:	d00a      	beq.n	80145d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 80145c2:	2b80      	cmp	r3, #128	; 0x80
 80145c4:	d81c      	bhi.n	8014600 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80145c6:	2b40      	cmp	r3, #64	; 0x40
 80145c8:	d017      	beq.n	80145fa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 80145ca:	2b40      	cmp	r3, #64	; 0x40
 80145cc:	d818      	bhi.n	8014600 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 80145ce:	2b04      	cmp	r3, #4
 80145d0:	d008      	beq.n	80145e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x98>
 80145d2:	2b20      	cmp	r3, #32
 80145d4:	d011      	beq.n	80145fa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 80145d6:	e013      	b.n	8014600 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80145d8:	230a      	movs	r3, #10
 80145da:	623b      	str	r3, [r7, #32]
        break;
 80145dc:	e01a      	b.n	8014614 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80145de:	2309      	movs	r3, #9
 80145e0:	623b      	str	r3, [r7, #32]
        break;
 80145e2:	e017      	b.n	8014614 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80145e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80145e8:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80145ea:	7f7b      	ldrb	r3, [r7, #29]
 80145ec:	2b10      	cmp	r3, #16
 80145ee:	d101      	bne.n	80145f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80145f0:	2302      	movs	r3, #2
 80145f2:	e000      	b.n	80145f6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
 80145f4:	2301      	movs	r3, #1
 80145f6:	623b      	str	r3, [r7, #32]
        break;
 80145f8:	e00c      	b.n	8014614 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80145fa:	2300      	movs	r3, #0
 80145fc:	623b      	str	r3, [r7, #32]
        break;
 80145fe:	e009      	b.n	8014614 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8014600:	2300      	movs	r3, #0
 8014602:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014604:	7f7b      	ldrb	r3, [r7, #29]
 8014606:	2b10      	cmp	r3, #16
 8014608:	d101      	bne.n	801460e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc2>
 801460a:	2302      	movs	r3, #2
 801460c:	e000      	b.n	8014610 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc4>
 801460e:	2301      	movs	r3, #1
 8014610:	623b      	str	r3, [r7, #32]
        break;
 8014612:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8014614:	4a77      	ldr	r2, [pc, #476]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014618:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801461a:	7f7b      	ldrb	r3, [r7, #29]
 801461c:	2b10      	cmp	r3, #16
 801461e:	d101      	bne.n	8014624 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd8>
 8014620:	2302      	movs	r3, #2
 8014622:	e000      	b.n	8014626 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xda>
 8014624:	2301      	movs	r3, #1
 8014626:	4a73      	ldr	r2, [pc, #460]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014628:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	8adb      	ldrh	r3, [r3, #22]
 801462e:	461a      	mov	r2, r3
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	8a1b      	ldrh	r3, [r3, #16]
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	461a      	mov	r2, r3
 8014638:	4b6e      	ldr	r3, [pc, #440]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801463a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801463c:	7f7b      	ldrb	r3, [r7, #29]
 801463e:	2b10      	cmp	r3, #16
 8014640:	d101      	bne.n	8014646 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8014642:	2202      	movs	r2, #2
 8014644:	e000      	b.n	8014648 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfc>
 8014646:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	8adb      	ldrh	r3, [r3, #22]
 801464c:	4619      	mov	r1, r3
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	8a1b      	ldrh	r3, [r3, #16]
 8014652:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014656:	4867      	ldr	r0, [pc, #412]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014658:	f7ff fe96 	bl	8014388 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801465c:	4a65      	ldr	r2, [pc, #404]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801465e:	6a3b      	ldr	r3, [r7, #32]
 8014660:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	8a9b      	ldrh	r3, [r3, #20]
 8014666:	461a      	mov	r2, r3
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	8a1b      	ldrh	r3, [r3, #16]
 801466c:	1ad3      	subs	r3, r2, r3
 801466e:	461a      	mov	r2, r3
 8014670:	4b60      	ldr	r3, [pc, #384]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014672:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8014674:	7ffb      	ldrb	r3, [r7, #31]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d103      	bne.n	8014682 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 801467a:	7fbb      	ldrb	r3, [r7, #30]
 801467c:	2b00      	cmp	r3, #0
 801467e:	f000 8084 	beq.w	801478a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23e>
    {
        if (blitOp.alpha < 255)
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	7f1b      	ldrb	r3, [r3, #28]
 8014686:	2bff      	cmp	r3, #255	; 0xff
 8014688:	d008      	beq.n	801469c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801468a:	4b5a      	ldr	r3, [pc, #360]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801468c:	2202      	movs	r2, #2
 801468e:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	7f1b      	ldrb	r3, [r3, #28]
 8014694:	461a      	mov	r2, r3
 8014696:	4b57      	ldr	r3, [pc, #348]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014698:	635a      	str	r2, [r3, #52]	; 0x34
 801469a:	e002      	b.n	80146a2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801469c:	4b55      	ldr	r3, [pc, #340]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801469e:	2200      	movs	r2, #0
 80146a0:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80146a2:	7fbb      	ldrb	r3, [r7, #30]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d05b      	beq.n	8014760 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
        {
            if (bitDepth == 16)
 80146a8:	7f7b      	ldrb	r3, [r7, #29]
 80146aa:	2b10      	cmp	r3, #16
 80146ac:	d14c      	bne.n	8014748 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fc>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	3318      	adds	r3, #24
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7ff fdc6 	bl	8014244 <_ZNK8touchgfx9colortypecvtEv>
 80146b8:	4603      	mov	r3, r0
 80146ba:	0adb      	lsrs	r3, r3, #11
 80146bc:	b29b      	uxth	r3, r3
 80146be:	f003 021f 	and.w	r2, r3, #31
 80146c2:	4613      	mov	r3, r2
 80146c4:	021b      	lsls	r3, r3, #8
 80146c6:	1a9b      	subs	r3, r3, r2
 80146c8:	4a4b      	ldr	r2, [pc, #300]	; (80147f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80146ca:	fb82 1203 	smull	r1, r2, r2, r3
 80146ce:	441a      	add	r2, r3
 80146d0:	1112      	asrs	r2, r2, #4
 80146d2:	17db      	asrs	r3, r3, #31
 80146d4:	1ad3      	subs	r3, r2, r3
 80146d6:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	3318      	adds	r3, #24
 80146dc:	4618      	mov	r0, r3
 80146de:	f7ff fdb1 	bl	8014244 <_ZNK8touchgfx9colortypecvtEv>
 80146e2:	4603      	mov	r3, r0
 80146e4:	095b      	lsrs	r3, r3, #5
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80146ec:	4613      	mov	r3, r2
 80146ee:	021b      	lsls	r3, r3, #8
 80146f0:	1a9b      	subs	r3, r3, r2
 80146f2:	4a42      	ldr	r2, [pc, #264]	; (80147fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80146f4:	fb82 1203 	smull	r1, r2, r2, r3
 80146f8:	441a      	add	r2, r3
 80146fa:	1152      	asrs	r2, r2, #5
 80146fc:	17db      	asrs	r3, r3, #31
 80146fe:	1ad3      	subs	r3, r2, r3
 8014700:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	3318      	adds	r3, #24
 8014706:	4618      	mov	r0, r3
 8014708:	f7ff fd9c 	bl	8014244 <_ZNK8touchgfx9colortypecvtEv>
 801470c:	4603      	mov	r3, r0
 801470e:	f003 021f 	and.w	r2, r3, #31
 8014712:	4613      	mov	r3, r2
 8014714:	021b      	lsls	r3, r3, #8
 8014716:	1a9b      	subs	r3, r3, r2
 8014718:	4a37      	ldr	r2, [pc, #220]	; (80147f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 801471a:	fb82 1203 	smull	r1, r2, r2, r3
 801471e:	441a      	add	r2, r3
 8014720:	1112      	asrs	r2, r2, #4
 8014722:	17db      	asrs	r3, r3, #31
 8014724:	1ad3      	subs	r3, r2, r3
 8014726:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	7f1b      	ldrb	r3, [r3, #28]
 801472c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	061a      	lsls	r2, r3, #24
 8014732:	69bb      	ldr	r3, [r7, #24]
 8014734:	041b      	lsls	r3, r3, #16
 8014736:	431a      	orrs	r2, r3
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	021b      	lsls	r3, r3, #8
 801473c:	431a      	orrs	r2, r3
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	4313      	orrs	r3, r2
 8014742:	4a2c      	ldr	r2, [pc, #176]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014744:	6353      	str	r3, [r2, #52]	; 0x34
 8014746:	e00b      	b.n	8014760 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	3318      	adds	r3, #24
 801474c:	4618      	mov	r0, r3
 801474e:	f7ff fd6d 	bl	801422c <_ZNK8touchgfx9colortype10getColor32Ev>
 8014752:	4602      	mov	r2, r0
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	7f1b      	ldrb	r3, [r3, #28]
 8014758:	061b      	lsls	r3, r3, #24
 801475a:	4313      	orrs	r3, r2
 801475c:	4a25      	ldr	r2, [pc, #148]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801475e:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	8adb      	ldrh	r3, [r3, #22]
 8014764:	461a      	mov	r2, r3
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	8a1b      	ldrh	r3, [r3, #16]
 801476a:	1ad3      	subs	r3, r2, r3
 801476c:	461a      	mov	r2, r3
 801476e:	4b21      	ldr	r3, [pc, #132]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014770:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014772:	7f7b      	ldrb	r3, [r7, #29]
 8014774:	2b10      	cmp	r3, #16
 8014776:	d101      	bne.n	801477c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 8014778:	2302      	movs	r3, #2
 801477a:	e000      	b.n	801477e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 801477c:	2301      	movs	r3, #1
 801477e:	4a1d      	ldr	r2, [pc, #116]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014780:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014782:	2100      	movs	r1, #0
 8014784:	481b      	ldr	r0, [pc, #108]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8014786:	f7f1 f85d 	bl	8005844 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801478a:	2101      	movs	r1, #1
 801478c:	4819      	ldr	r0, [pc, #100]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801478e:	f7f1 f859 	bl	8005844 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8014792:	7ffb      	ldrb	r3, [r7, #31]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d102      	bne.n	801479e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 8014798:	7fbb      	ldrb	r3, [r7, #30]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d015      	beq.n	80147ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80147a2:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80147a8:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80147ae:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80147b4:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80147ba:	9301      	str	r3, [sp, #4]
 80147bc:	9200      	str	r2, [sp, #0]
 80147be:	4623      	mov	r3, r4
 80147c0:	4602      	mov	r2, r0
 80147c2:	480c      	ldr	r0, [pc, #48]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80147c4:	f7f0 fe61 	bl	800548a <HAL_DMA2D_BlendingStart_IT>
 80147c8:	e010      	b.n	80147ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80147ce:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80147d4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80147da:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80147e0:	9300      	str	r3, [sp, #0]
 80147e2:	4603      	mov	r3, r0
 80147e4:	4803      	ldr	r0, [pc, #12]	; (80147f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80147e6:	f7f0 fe1d 	bl	8005424 <HAL_DMA2D_Start_IT>
    }
}
 80147ea:	bf00      	nop
 80147ec:	bf00      	nop
 80147ee:	372c      	adds	r7, #44	; 0x2c
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd90      	pop	{r4, r7, pc}
 80147f4:	20000488 	.word	0x20000488
 80147f8:	84210843 	.word	0x84210843
 80147fc:	82082083 	.word	0x82082083

08014800 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8014800:	b590      	push	{r4, r7, lr}
 8014802:	b08d      	sub	sp, #52	; 0x34
 8014804:	af02      	add	r7, sp, #8
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801480a:	f7fb fabd 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 801480e:	4603      	mov	r3, r0
 8014810:	681a      	ldr	r2, [r3, #0]
 8014812:	3220      	adds	r2, #32
 8014814:	6812      	ldr	r2, [r2, #0]
 8014816:	4618      	mov	r0, r3
 8014818:	4790      	blx	r2
 801481a:	4603      	mov	r3, r0
 801481c:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801481e:	7ffb      	ldrb	r3, [r7, #31]
 8014820:	2b10      	cmp	r3, #16
 8014822:	d101      	bne.n	8014828 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8014824:	2302      	movs	r3, #2
 8014826:	e000      	b.n	801482a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8014828:	2301      	movs	r3, #1
 801482a:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 801482c:	2300      	movs	r3, #0
 801482e:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8014830:	7ffb      	ldrb	r3, [r7, #31]
 8014832:	2b10      	cmp	r3, #16
 8014834:	d14b      	bne.n	80148ce <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	3318      	adds	r3, #24
 801483a:	4618      	mov	r0, r3
 801483c:	f7ff fd02 	bl	8014244 <_ZNK8touchgfx9colortypecvtEv>
 8014840:	4603      	mov	r3, r0
 8014842:	0adb      	lsrs	r3, r3, #11
 8014844:	b29b      	uxth	r3, r3
 8014846:	f003 021f 	and.w	r2, r3, #31
 801484a:	4613      	mov	r3, r2
 801484c:	021b      	lsls	r3, r3, #8
 801484e:	1a9b      	subs	r3, r3, r2
 8014850:	4a69      	ldr	r2, [pc, #420]	; (80149f8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8014852:	fb82 1203 	smull	r1, r2, r2, r3
 8014856:	441a      	add	r2, r3
 8014858:	1112      	asrs	r2, r2, #4
 801485a:	17db      	asrs	r3, r3, #31
 801485c:	1ad3      	subs	r3, r2, r3
 801485e:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	3318      	adds	r3, #24
 8014864:	4618      	mov	r0, r3
 8014866:	f7ff fced 	bl	8014244 <_ZNK8touchgfx9colortypecvtEv>
 801486a:	4603      	mov	r3, r0
 801486c:	095b      	lsrs	r3, r3, #5
 801486e:	b29b      	uxth	r3, r3
 8014870:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014874:	4613      	mov	r3, r2
 8014876:	021b      	lsls	r3, r3, #8
 8014878:	1a9b      	subs	r3, r3, r2
 801487a:	4a60      	ldr	r2, [pc, #384]	; (80149fc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801487c:	fb82 1203 	smull	r1, r2, r2, r3
 8014880:	441a      	add	r2, r3
 8014882:	1152      	asrs	r2, r2, #5
 8014884:	17db      	asrs	r3, r3, #31
 8014886:	1ad3      	subs	r3, r2, r3
 8014888:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	3318      	adds	r3, #24
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff fcd8 	bl	8014244 <_ZNK8touchgfx9colortypecvtEv>
 8014894:	4603      	mov	r3, r0
 8014896:	f003 021f 	and.w	r2, r3, #31
 801489a:	4613      	mov	r3, r2
 801489c:	021b      	lsls	r3, r3, #8
 801489e:	1a9b      	subs	r3, r3, r2
 80148a0:	4a55      	ldr	r2, [pc, #340]	; (80149f8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80148a2:	fb82 1203 	smull	r1, r2, r2, r3
 80148a6:	441a      	add	r2, r3
 80148a8:	1112      	asrs	r2, r2, #4
 80148aa:	17db      	asrs	r3, r3, #31
 80148ac:	1ad3      	subs	r3, r2, r3
 80148ae:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	7f1b      	ldrb	r3, [r3, #28]
 80148b4:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	061a      	lsls	r2, r3, #24
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	041b      	lsls	r3, r3, #16
 80148be:	431a      	orrs	r2, r3
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	021b      	lsls	r3, r3, #8
 80148c4:	4313      	orrs	r3, r2
 80148c6:	68fa      	ldr	r2, [r7, #12]
 80148c8:	4313      	orrs	r3, r2
 80148ca:	623b      	str	r3, [r7, #32]
 80148cc:	e00b      	b.n	80148e6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	7f1b      	ldrb	r3, [r3, #28]
 80148d2:	061b      	lsls	r3, r3, #24
 80148d4:	461c      	mov	r4, r3
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	3318      	adds	r3, #24
 80148da:	4618      	mov	r0, r3
 80148dc:	f7ff fca6 	bl	801422c <_ZNK8touchgfx9colortype10getColor32Ev>
 80148e0:	4603      	mov	r3, r0
 80148e2:	4323      	orrs	r3, r4
 80148e4:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	2b08      	cmp	r3, #8
 80148ec:	d103      	bne.n	80148f6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80148ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80148f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80148f4:	e003      	b.n	80148fe <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80148f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80148fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80148fc:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80148fe:	4a40      	ldr	r2, [pc, #256]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014902:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014904:	7ffb      	ldrb	r3, [r7, #31]
 8014906:	2b10      	cmp	r3, #16
 8014908:	d101      	bne.n	801490e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10e>
 801490a:	2302      	movs	r3, #2
 801490c:	e000      	b.n	8014910 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 801490e:	2301      	movs	r3, #1
 8014910:	4a3b      	ldr	r2, [pc, #236]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014912:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	8adb      	ldrh	r3, [r3, #22]
 8014918:	461a      	mov	r2, r3
 801491a:	683b      	ldr	r3, [r7, #0]
 801491c:	8a1b      	ldrh	r3, [r3, #16]
 801491e:	1ad3      	subs	r3, r2, r3
 8014920:	461a      	mov	r2, r3
 8014922:	4b37      	ldr	r3, [pc, #220]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014924:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014926:	7ffb      	ldrb	r3, [r7, #31]
 8014928:	2b10      	cmp	r3, #16
 801492a:	d101      	bne.n	8014930 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x130>
 801492c:	2202      	movs	r2, #2
 801492e:	e000      	b.n	8014932 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x132>
 8014930:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	8adb      	ldrh	r3, [r3, #22]
 8014936:	4619      	mov	r1, r3
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	8a1b      	ldrh	r3, [r3, #16]
 801493c:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801493e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014940:	482f      	ldr	r0, [pc, #188]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014942:	f7ff fd21 	bl	8014388 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8014946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801494c:	d11e      	bne.n	801498c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18c>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801494e:	4b2c      	ldr	r3, [pc, #176]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014950:	2201      	movs	r2, #1
 8014952:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014954:	4a2a      	ldr	r2, [pc, #168]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014956:	6a3b      	ldr	r3, [r7, #32]
 8014958:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801495a:	4b29      	ldr	r3, [pc, #164]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801495c:	2209      	movs	r2, #9
 801495e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	8adb      	ldrh	r3, [r3, #22]
 8014964:	461a      	mov	r2, r3
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	8a1b      	ldrh	r3, [r3, #16]
 801496a:	1ad3      	subs	r3, r2, r3
 801496c:	461a      	mov	r2, r3
 801496e:	4b24      	ldr	r3, [pc, #144]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014970:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014972:	7ffb      	ldrb	r3, [r7, #31]
 8014974:	2b10      	cmp	r3, #16
 8014976:	d101      	bne.n	801497c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17c>
 8014978:	2302      	movs	r3, #2
 801497a:	e000      	b.n	801497e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17e>
 801497c:	2301      	movs	r3, #1
 801497e:	4a20      	ldr	r2, [pc, #128]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014980:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014982:	2100      	movs	r1, #0
 8014984:	481e      	ldr	r0, [pc, #120]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014986:	f7f0 ff5d 	bl	8005844 <HAL_DMA2D_ConfigLayer>
 801498a:	e005      	b.n	8014998 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x198>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801498c:	4a1c      	ldr	r2, [pc, #112]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801498e:	69bb      	ldr	r3, [r7, #24]
 8014990:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8014992:	4b1b      	ldr	r3, [pc, #108]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014994:	2200      	movs	r2, #0
 8014996:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014998:	2101      	movs	r1, #1
 801499a:	4819      	ldr	r0, [pc, #100]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 801499c:	f7f0 ff52 	bl	8005844 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80149a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80149a6:	d115      	bne.n	80149d4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d4>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80149ac:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80149b2:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80149b8:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80149be:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80149c4:	9301      	str	r3, [sp, #4]
 80149c6:	9200      	str	r2, [sp, #0]
 80149c8:	4623      	mov	r3, r4
 80149ca:	4602      	mov	r2, r0
 80149cc:	480c      	ldr	r0, [pc, #48]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80149ce:	f7f0 fd5c 	bl	800548a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 80149d2:	e00d      	b.n	80149f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f0>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80149de:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80149e4:	9300      	str	r3, [sp, #0]
 80149e6:	460b      	mov	r3, r1
 80149e8:	6a39      	ldr	r1, [r7, #32]
 80149ea:	4805      	ldr	r0, [pc, #20]	; (8014a00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 80149ec:	f7f0 fd1a 	bl	8005424 <HAL_DMA2D_Start_IT>
}
 80149f0:	bf00      	nop
 80149f2:	372c      	adds	r7, #44	; 0x2c
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd90      	pop	{r4, r7, pc}
 80149f8:	84210843 	.word	0x84210843
 80149fc:	82082083 	.word	0x82082083
 8014a00:	20000488 	.word	0x20000488

08014a04 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b082      	sub	sp, #8
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	4a05      	ldr	r2, [pc, #20]	; (8014a24 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	601a      	str	r2, [r3, #0]
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7ff fc23 	bl	8014260 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3708      	adds	r7, #8
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	0802849c 	.word	0x0802849c

08014a28 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f7ff ffe7 	bl	8014a04 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014a36:	2114      	movs	r1, #20
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f010 fcb1 	bl	80253a0 <_ZdlPvj>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	4618      	mov	r0, r3
 8014a42:	3708      	adds	r7, #8
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014a48:	b480      	push	{r7}
 8014a4a:	b083      	sub	sp, #12
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
        texts = t;
 8014a50:	4a04      	ldr	r2, [pc, #16]	; (8014a64 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6013      	str	r3, [r2, #0]
    }
 8014a56:	bf00      	nop
 8014a58:	370c      	adds	r7, #12
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a60:	4770      	bx	lr
 8014a62:	bf00      	nop
 8014a64:	2000c600 	.word	0x2000c600

08014a68 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014a68:	b480      	push	{r7}
 8014a6a:	b085      	sub	sp, #20
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	60f8      	str	r0, [r7, #12]
 8014a70:	60b9      	str	r1, [r7, #8]
 8014a72:	607a      	str	r2, [r7, #4]
 8014a74:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8014a76:	4a0b      	ldr	r2, [pc, #44]	; (8014aa4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	601a      	str	r2, [r3, #0]
            MVPApplication& app) : presenterStorage(pres),
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	68ba      	ldr	r2, [r7, #8]
 8014a80:	605a      	str	r2, [r3, #4]
        screenStorage(scr),
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	609a      	str	r2, [r3, #8]
        transitionStorage(tra),
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	683a      	ldr	r2, [r7, #0]
 8014a8c:	60da      	str	r2, [r3, #12]
        frontendApplication(app)
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	69ba      	ldr	r2, [r7, #24]
 8014a92:	611a      	str	r2, [r3, #16]
    {
    }
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	4618      	mov	r0, r3
 8014a98:	3714      	adds	r7, #20
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa0:	4770      	bx	lr
 8014aa2:	bf00      	nop
 8014aa4:	0802752c 	.word	0x0802752c

08014aa8 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8014aa8:	b480      	push	{r7}
 8014aaa:	b083      	sub	sp, #12
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
    {
 8014ab0:	4a04      	ldr	r2, [pc, #16]	; (8014ac4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	601a      	str	r2, [r3, #0]
    }
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	370c      	adds	r7, #12
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr
 8014ac4:	0802752c 	.word	0x0802752c

08014ac8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
    }
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f7ff ffe9 	bl	8014aa8 <_ZN8touchgfx7MVPHeapD1Ev>
 8014ad6:	2114      	movs	r1, #20
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f010 fc61 	bl	80253a0 <_ZdlPvj>
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3708      	adds	r7, #8
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8014ae8:	b480      	push	{r7}
 8014aea:	b083      	sub	sp, #12
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
    {
 8014af0:	4a04      	ldr	r2, [pc, #16]	; (8014b04 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	601a      	str	r2, [r3, #0]
    }
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	4618      	mov	r0, r3
 8014afa:	370c      	adds	r7, #12
 8014afc:	46bd      	mov	sp, r7
 8014afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b02:	4770      	bx	lr
 8014b04:	08028d80 	.word	0x08028d80

08014b08 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
    }
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f7ff ffe9 	bl	8014ae8 <_ZN8touchgfx3LCDD1Ev>
 8014b16:	2108      	movs	r1, #8
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f010 fc41 	bl	80253a0 <_ZdlPvj>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	4618      	mov	r0, r3
 8014b22:	3708      	adds	r7, #8
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}

08014b28 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8014b28:	b480      	push	{r7}
 8014b2a:	b083      	sub	sp, #12
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	801a      	strh	r2, [r3, #0]
            startY(0),
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	805a      	strh	r2, [r3, #2]
            downX(0),
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	809a      	strh	r2, [r3, #4]
            downY(0),
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2200      	movs	r2, #0
 8014b46:	80da      	strh	r2, [r3, #6]
            tickCount(0),
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	811a      	strh	r2, [r3, #8]
            velocityX(0),
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2200      	movs	r2, #0
 8014b52:	815a      	strh	r2, [r3, #10]
            velocityY(0),
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	2200      	movs	r2, #0
 8014b58:	819a      	strh	r2, [r3, #12]
            inProgress(false)
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	739a      	strb	r2, [r3, #14]
        {
        }
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	4618      	mov	r0, r3
 8014b64:	370c      	adds	r7, #12
 8014b66:	46bd      	mov	sp, r7
 8014b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6c:	4770      	bx	lr

08014b6e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8014b6e:	b580      	push	{r7, lr}
 8014b70:	b082      	sub	sp, #8
 8014b72:	af00      	add	r7, sp, #0
 8014b74:	6078      	str	r0, [r7, #4]
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7ff ffd5 	bl	8014b28 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2200      	movs	r2, #0
 8014b82:	611a      	str	r2, [r3, #16]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	2200      	movs	r2, #0
 8014b88:	829a      	strh	r2, [r3, #20]
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	3708      	adds	r7, #8
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}

08014b94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b084      	sub	sp, #16
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	60f8      	str	r0, [r7, #12]
 8014b9c:	60b9      	str	r1, [r7, #8]
 8014b9e:	607a      	str	r2, [r7, #4]
 8014ba0:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8014ba2:	4a44      	ldr	r2, [pc, #272]	; (8014cb4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	601a      	str	r2, [r3, #0]
        dma(dmaInterface),
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	68ba      	ldr	r2, [r7, #8]
 8014bac:	605a      	str	r2, [r3, #4]
        lcdRef(display),
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	687a      	ldr	r2, [r7, #4]
 8014bb2:	609a      	str	r2, [r3, #8]
        touchController(touchCtrl),
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	683a      	ldr	r2, [r7, #0]
 8014bb8:	60da      	str	r2, [r3, #12]
        mcuInstrumentation(0),
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	611a      	str	r2, [r3, #16]
        buttonController(0),
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	615a      	str	r2, [r3, #20]
        frameBufferAllocator(0),
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	619a      	str	r2, [r3, #24]
        displayOrientationChangeRequested(false)
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	331c      	adds	r3, #28
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7ff ffcc 	bl	8014b6e <_ZN8touchgfx8GesturesC1Ev>
        taskDelayFunc(0),
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer0(0),
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2200      	movs	r2, #0
 8014be0:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1(0),
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	2200      	movs	r2, #0
 8014be6:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2(0),
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	2200      	movs	r2, #0
 8014bec:	645a      	str	r2, [r3, #68]	; 0x44
        refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        fingerSize(1),
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2201      	movs	r2, #1
 8014bfa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        lockDMAToPorch(true),
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2201      	movs	r2, #1
 8014c02:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        auxiliaryLCD(0),
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	64da      	str	r2, [r3, #76]	; 0x4c
        displayOrientationChangeRequested(false)
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	3350      	adds	r3, #80	; 0x50
 8014c10:	4618      	mov	r0, r3
 8014c12:	f7fb fcd6 	bl	80105c2 <_ZN8touchgfx4RectC1Ev>
        touchSampleRate(1),
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	2201      	movs	r2, #1
 8014c1a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        mcuLoadPct(0),
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	2200      	movs	r2, #0
 8014c22:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        vSyncCnt(0),
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        vSyncForFrame(1),
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2201      	movs	r2, #1
 8014c32:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        vSyncCompensationEnabled(false),
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        clientDirty(false),
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2200      	movs	r2, #0
 8014c42:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        swapRequested(false),
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        lastTouched(false),
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	2200      	movs	r2, #0
 8014c52:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        updateMCULoad(0),
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	2200      	movs	r2, #0
 8014c5a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        cc_begin(0),
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2200      	movs	r2, #0
 8014c62:	671a      	str	r2, [r3, #112]	; 0x70
        displayOrientationChangeRequested(false)
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2200      	movs	r2, #0
 8014c68:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8014c6c:	4a12      	ldr	r2, [pc, #72]	; (8014cb8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014c72:	4a12      	ldr	r2, [pc, #72]	; (8014cbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014c74:	8b3b      	ldrh	r3, [r7, #24]
 8014c76:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014c78:	4a11      	ldr	r2, [pc, #68]	; (8014cc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014c7a:	8bbb      	ldrh	r3, [r7, #28]
 8014c7c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014c7e:	4b11      	ldr	r3, [pc, #68]	; (8014cc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8014c80:	2200      	movs	r2, #0
 8014c82:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014c84:	4b0d      	ldr	r3, [pc, #52]	; (8014cbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8014c86:	881a      	ldrh	r2, [r3, #0]
 8014c88:	4b0f      	ldr	r3, [pc, #60]	; (8014cc8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8014c8a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014c8c:	4b0c      	ldr	r3, [pc, #48]	; (8014cc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8014c8e:	881a      	ldrh	r2, [r3, #0]
 8014c90:	4b0e      	ldr	r3, [pc, #56]	; (8014ccc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8014c92:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014c94:	8b3a      	ldrh	r2, [r7, #24]
 8014c96:	8bbb      	ldrh	r3, [r7, #28]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	bf34      	ite	cc
 8014c9c:	2301      	movcc	r3, #1
 8014c9e:	2300      	movcs	r3, #0
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	4618      	mov	r0, r3
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}
 8014cb4:	08028008 	.word	0x08028008
 8014cb8:	2000c564 	.word	0x2000c564
 8014cbc:	2000c558 	.word	0x2000c558
 8014cc0:	2000c55a 	.word	0x2000c55a
 8014cc4:	2000c55c 	.word	0x2000c55c
 8014cc8:	2000c55e 	.word	0x2000c55e
 8014ccc:	2000c560 	.word	0x2000c560

08014cd0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
 8014cd8:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7fb fa77 	bl	80101d0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8014ce2:	bf00      	nop
 8014ce4:	3708      	adds	r7, #8
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
	...

08014cec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b086      	sub	sp, #24
 8014cf0:	af02      	add	r7, sp, #8
 8014cf2:	60f8      	str	r0, [r7, #12]
 8014cf4:	60b9      	str	r1, [r7, #8]
 8014cf6:	607a      	str	r2, [r7, #4]
 8014cf8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014cfa:	68f8      	ldr	r0, [r7, #12]
 8014cfc:	69bb      	ldr	r3, [r7, #24]
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	687a      	ldr	r2, [r7, #4]
 8014d04:	68b9      	ldr	r1, [r7, #8]
 8014d06:	f7ff feaf 	bl	8014a68 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014d0a:	4a04      	ldr	r2, [pc, #16]	; (8014d1c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	601a      	str	r2, [r3, #0]
    {

    }
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	4618      	mov	r0, r3
 8014d14:	3710      	adds	r7, #16
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	08027518 	.word	0x08027518

08014d20 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014d20:	b580      	push	{r7, lr}
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	4801      	ldr	r0, [pc, #4]	; (8014d2c <__tcf_0+0xc>)
 8014d26:	f000 f9ef 	bl	8015108 <_ZN12FrontendHeapD1Ev>
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	20008ed8 	.word	0x20008ed8

08014d30 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014d30:	b580      	push	{r7, lr}
 8014d32:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014d34:	4b11      	ldr	r3, [pc, #68]	; (8014d7c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	f3bf 8f5b 	dmb	ish
 8014d3c:	f003 0301 	and.w	r3, r3, #1
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	bf0c      	ite	eq
 8014d44:	2301      	moveq	r3, #1
 8014d46:	2300      	movne	r3, #0
 8014d48:	b2db      	uxtb	r3, r3
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d013      	beq.n	8014d76 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8014d4e:	480b      	ldr	r0, [pc, #44]	; (8014d7c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8014d50:	f010 fb28 	bl	80253a4 <__cxa_guard_acquire>
 8014d54:	4603      	mov	r3, r0
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	bf14      	ite	ne
 8014d5a:	2301      	movne	r3, #1
 8014d5c:	2300      	moveq	r3, #0
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d008      	beq.n	8014d76 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8014d64:	4806      	ldr	r0, [pc, #24]	; (8014d80 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014d66:	f000 f831 	bl	8014dcc <_ZN12FrontendHeapC1Ev>
 8014d6a:	4806      	ldr	r0, [pc, #24]	; (8014d84 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8014d6c:	f010 fb64 	bl	8025438 <atexit>
 8014d70:	4802      	ldr	r0, [pc, #8]	; (8014d7c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8014d72:	f010 fb23 	bl	80253bc <__cxa_guard_release>
        return instance;
 8014d76:	4b02      	ldr	r3, [pc, #8]	; (8014d80 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8014d78:	4618      	mov	r0, r3
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	2000b858 	.word	0x2000b858
 8014d80:	20008ed8 	.word	0x20008ed8
 8014d84:	08014d21 	.word	0x08014d21

08014d88 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b082      	sub	sp, #8
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	4a05      	ldr	r2, [pc, #20]	; (8014da8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	601a      	str	r2, [r3, #0]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7ff fe85 	bl	8014aa8 <_ZN8touchgfx7MVPHeapD1Ev>
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	4618      	mov	r0, r3
 8014da2:	3708      	adds	r7, #8
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	08027518 	.word	0x08027518

08014dac <_ZN16FrontendHeapBaseD0Ev>:
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f7ff ffe7 	bl	8014d88 <_ZN16FrontendHeapBaseD1Ev>
 8014dba:	2114      	movs	r1, #20
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f010 faef 	bl	80253a0 <_ZdlPvj>
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3708      	adds	r7, #8
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014dcc:	b5b0      	push	{r4, r5, r7, lr}
 8014dce:	b084      	sub	sp, #16
 8014dd0:	af02      	add	r7, sp, #8
 8014dd2:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f103 0414 	add.w	r4, r3, #20
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f642 0218 	movw	r2, #10264	; 0x2818
 8014de8:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014dea:	6879      	ldr	r1, [r7, #4]
 8014dec:	f642 032c 	movw	r3, #10284	; 0x282c
 8014df0:	440b      	add	r3, r1
        app(model, *this)
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	4613      	mov	r3, r2
 8014df6:	462a      	mov	r2, r5
 8014df8:	4621      	mov	r1, r4
 8014dfa:	f7ff ff77 	bl	8014cec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8014dfe:	4a1a      	ldr	r2, [pc, #104]	; (8014e68 <_ZN12FrontendHeapC1Ev+0x9c>)
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	601a      	str	r2, [r3, #0]
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	3314      	adds	r3, #20
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f000 f8df 	bl	8014fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	332c      	adds	r3, #44	; 0x2c
 8014e12:	4618      	mov	r0, r3
 8014e14:	f000 f90e 	bl	8015034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014e18:	687a      	ldr	r2, [r7, #4]
 8014e1a:	f642 0318 	movw	r3, #10264	; 0x2818
 8014e1e:	4413      	add	r3, r2
 8014e20:	4618      	mov	r0, r3
 8014e22:	f000 f93d 	bl	80150a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014e26:	687a      	ldr	r2, [r7, #4]
 8014e28:	f642 032c 	movw	r3, #10284	; 0x282c
 8014e2c:	4413      	add	r3, r2
 8014e2e:	687a      	ldr	r2, [r7, #4]
 8014e30:	f642 117c 	movw	r1, #10620	; 0x297c
 8014e34:	4411      	add	r1, r2
 8014e36:	687a      	ldr	r2, [r7, #4]
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fe f895 	bl	8012f68 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	f642 137c 	movw	r3, #10620	; 0x297c
 8014e44:	4413      	add	r3, r2
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7fe fdde 	bl	8013a08 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	687a      	ldr	r2, [r7, #4]
 8014e50:	f642 032c 	movw	r3, #10284	; 0x282c
 8014e54:	4413      	add	r3, r2
 8014e56:	4619      	mov	r1, r3
 8014e58:	f7ff ff3a 	bl	8014cd0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bdb0      	pop	{r4, r5, r7, pc}
 8014e66:	bf00      	nop
 8014e68:	08027468 	.word	0x08027468

08014e6c <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
    {
 8014e74:	4a05      	ldr	r2, [pc, #20]	; (8014e8c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	601a      	str	r2, [r3, #0]
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7ff fe33 	bl	8014ae8 <_ZN8touchgfx3LCDD1Ev>
    }
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	4618      	mov	r0, r3
 8014e86:	3708      	adds	r7, #8
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}
 8014e8c:	0802a15c 	.word	0x0802a15c

08014e90 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
    }
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f7ff ffe7 	bl	8014e6c <_ZN8touchgfx8LCD24bppD1Ev>
 8014e9e:	2158      	movs	r1, #88	; 0x58
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f010 fa7d 	bl	80253a0 <_ZdlPvj>
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	3708      	adds	r7, #8
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b086      	sub	sp, #24
 8014eb4:	af02      	add	r7, sp, #8
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	607a      	str	r2, [r7, #4]
 8014ebc:	603b      	str	r3, [r7, #0]
 8014ebe:	68f8      	ldr	r0, [r7, #12]
 8014ec0:	8bbb      	ldrh	r3, [r7, #28]
 8014ec2:	9301      	str	r3, [sp, #4]
 8014ec4:	8b3b      	ldrh	r3, [r7, #24]
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	687a      	ldr	r2, [r7, #4]
 8014ecc:	68b9      	ldr	r1, [r7, #8]
 8014ece:	f7ff fe61 	bl	8014b94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8014ed2:	4a04      	ldr	r2, [pc, #16]	; (8014ee4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	601a      	str	r2, [r3, #0]
    }
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	0802753c 	.word	0x0802753c

08014ee8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b086      	sub	sp, #24
 8014eec:	af02      	add	r7, sp, #8
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	607a      	str	r2, [r7, #4]
 8014ef4:	603b      	str	r3, [r7, #0]
 8014ef6:	68f8      	ldr	r0, [r7, #12]
 8014ef8:	8bbb      	ldrh	r3, [r7, #28]
 8014efa:	9301      	str	r3, [sp, #4]
 8014efc:	8b3b      	ldrh	r3, [r7, #24]
 8014efe:	9300      	str	r3, [sp, #0]
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	687a      	ldr	r2, [r7, #4]
 8014f04:	68b9      	ldr	r1, [r7, #8]
 8014f06:	f7ff ffd3 	bl	8014eb0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014f0a:	4a04      	ldr	r2, [pc, #16]	; (8014f1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	601a      	str	r2, [r3, #0]
    }
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	4618      	mov	r0, r3
 8014f14:	3710      	adds	r7, #16
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}
 8014f1a:	bf00      	nop
 8014f1c:	08027340 	.word	0x08027340

08014f20 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014f20:	b480      	push	{r7}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	4a04      	ldr	r2, [pc, #16]	; (8014f3c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	601a      	str	r2, [r3, #0]
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	4618      	mov	r0, r3
 8014f32:	370c      	adds	r7, #12
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr
 8014f3c:	08027328 	.word	0x08027328

08014f40 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7ff ffe8 	bl	8014f20 <_ZN8touchgfx15TouchControllerC1Ev>
 8014f50:	4a03      	ldr	r2, [pc, #12]	; (8014f60 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	601a      	str	r2, [r3, #0]
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3708      	adds	r7, #8
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	08027310 	.word	0x08027310

08014f64 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8014f64:	b590      	push	{r4, r7, lr}
 8014f66:	b085      	sub	sp, #20
 8014f68:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014f6a:	f7fd fed9 	bl	8012d20 <_ZN14BitmapDatabase11getInstanceEv>
 8014f6e:	4604      	mov	r4, r0
 8014f70:	f7fd fee0 	bl	8012d34 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014f74:	4603      	mov	r3, r0
 8014f76:	4619      	mov	r1, r3
 8014f78:	2300      	movs	r3, #0
 8014f7a:	9300      	str	r3, [sp, #0]
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	2200      	movs	r2, #0
 8014f80:	4620      	mov	r0, r4
 8014f82:	f006 fcd5 	bl	801b930 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8014f86:	4809      	ldr	r0, [pc, #36]	; (8014fac <touchgfx_init+0x48>)
 8014f88:	f7ff fd5e 	bl	8014a48 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8014f8c:	2000      	movs	r0, #0
 8014f8e:	f7fd fef5 	bl	8012d7c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8014f92:	4807      	ldr	r0, [pc, #28]	; (8014fb0 <touchgfx_init+0x4c>)
 8014f94:	f006 fc1a 	bl	801b7cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8014f98:	f7ff feca 	bl	8014d30 <_ZN12FrontendHeap11getInstanceEv>
 8014f9c:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8014f9e:	4805      	ldr	r0, [pc, #20]	; (8014fb4 <touchgfx_init+0x50>)
 8014fa0:	f7fe ffc2 	bl	8013f28 <_ZN11TouchGFXHAL10initializeEv>
}
 8014fa4:	bf00      	nop
 8014fa6:	370c      	adds	r7, #12
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd90      	pop	{r4, r7, pc}
 8014fac:	2000c4d8 	.word	0x2000c4d8
 8014fb0:	20000050 	.word	0x20000050
 8014fb4:	2000c4dc 	.word	0x2000c4dc

08014fb8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8014fbc:	4802      	ldr	r0, [pc, #8]	; (8014fc8 <touchgfx_taskEntry+0x10>)
 8014fbe:	f001 fa00 	bl	80163c2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8014fc2:	bf00      	nop
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	2000c4dc 	.word	0x2000c4dc

08014fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f000 fc70 	bl	80158bc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8014fdc:	4a03      	ldr	r2, [pc, #12]	; (8014fec <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	601a      	str	r2, [r3, #0]
    {
    }
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	080274e4 	.word	0x080274e4

08014ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b082      	sub	sp, #8
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
    {
    }
 8014ff8:	4a05      	ldr	r2, [pc, #20]	; (8015010 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	601a      	str	r2, [r3, #0]
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	4618      	mov	r0, r3
 8015002:	f000 fc59 	bl	80158b8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	4618      	mov	r0, r3
 801500a:	3708      	adds	r7, #8
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	080274e4 	.word	0x080274e4

08015014 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
    }
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7ff ffe7 	bl	8014ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015022:	2118      	movs	r1, #24
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f010 f9bb 	bl	80253a0 <_ZdlPvj>
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	4618      	mov	r0, r3
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	4618      	mov	r0, r3
 8015040:	f000 fc3c 	bl	80158bc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015044:	4a03      	ldr	r2, [pc, #12]	; (8015054 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	601a      	str	r2, [r3, #0]
    }
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	4618      	mov	r0, r3
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	080274b0 	.word	0x080274b0

08015058 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
    }
 8015060:	4a05      	ldr	r2, [pc, #20]	; (8015078 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	601a      	str	r2, [r3, #0]
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	f000 fc25 	bl	80158b8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	4618      	mov	r0, r3
 8015072:	3708      	adds	r7, #8
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}
 8015078:	080274b0 	.word	0x080274b0

0801507c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
    }
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f7ff ffe7 	bl	8015058 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801508a:	f242 71ec 	movw	r1, #10220	; 0x27ec
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f010 f986 	bl	80253a0 <_ZdlPvj>
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	4618      	mov	r0, r3
 8015098:	3708      	adds	r7, #8
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
	...

080150a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f000 fc06 	bl	80158bc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80150b0:	4a03      	ldr	r2, [pc, #12]	; (80150c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	601a      	str	r2, [r3, #0]
    }
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	4618      	mov	r0, r3
 80150ba:	3708      	adds	r7, #8
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	0802747c 	.word	0x0802747c

080150c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b082      	sub	sp, #8
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
    }
 80150cc:	4a05      	ldr	r2, [pc, #20]	; (80150e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	601a      	str	r2, [r3, #0]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	4618      	mov	r0, r3
 80150d6:	f000 fbef 	bl	80158b8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4618      	mov	r0, r3
 80150de:	3708      	adds	r7, #8
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}
 80150e4:	0802747c 	.word	0x0802747c

080150e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b082      	sub	sp, #8
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
    }
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f7ff ffe7 	bl	80150c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80150f6:	2114      	movs	r1, #20
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f010 f951 	bl	80253a0 <_ZdlPvj>
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	4618      	mov	r0, r3
 8015102:	3708      	adds	r7, #8
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	4a11      	ldr	r2, [pc, #68]	; (8015158 <_ZN12FrontendHeapD1Ev+0x50>)
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	601a      	str	r2, [r3, #0]
 8015116:	687a      	ldr	r2, [r7, #4]
 8015118:	f642 032c 	movw	r3, #10284	; 0x282c
 801511c:	4413      	add	r3, r2
 801511e:	4618      	mov	r0, r3
 8015120:	f7fd feec 	bl	8012efc <_ZN19FrontendApplicationD1Ev>
 8015124:	687a      	ldr	r2, [r7, #4]
 8015126:	f642 0318 	movw	r3, #10264	; 0x2818
 801512a:	4413      	add	r3, r2
 801512c:	4618      	mov	r0, r3
 801512e:	f7ff ffc9 	bl	80150c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	332c      	adds	r3, #44	; 0x2c
 8015136:	4618      	mov	r0, r3
 8015138:	f7ff ff8e 	bl	8015058 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	3314      	adds	r3, #20
 8015140:	4618      	mov	r0, r3
 8015142:	f7ff ff55 	bl	8014ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	4618      	mov	r0, r3
 801514a:	f7ff fe1d 	bl	8014d88 <_ZN16FrontendHeapBaseD1Ev>
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	4618      	mov	r0, r3
 8015152:	3708      	adds	r7, #8
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}
 8015158:	08027468 	.word	0x08027468

0801515c <_ZN12FrontendHeapD0Ev>:
 801515c:	b580      	push	{r7, lr}
 801515e:	b082      	sub	sp, #8
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f7ff ffcf 	bl	8015108 <_ZN12FrontendHeapD1Ev>
 801516a:	f44f 5126 	mov.w	r1, #10624	; 0x2980
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f010 f916 	bl	80253a0 <_ZdlPvj>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	4618      	mov	r0, r3
 8015178:	3708      	adds	r7, #8
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}
	...

08015180 <_Z41__static_initialization_and_destruction_0ii>:
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af02      	add	r7, sp, #8
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	2b01      	cmp	r3, #1
 801518e:	d119      	bne.n	80151c4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015196:	4293      	cmp	r3, r2
 8015198:	d114      	bne.n	80151c4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801519a:	4818      	ldr	r0, [pc, #96]	; (80151fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801519c:	f7ff fed0 	bl	8014f40 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80151a0:	4817      	ldr	r0, [pc, #92]	; (8015200 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80151a2:	f7ff f94b 	bl	801443c <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80151a6:	4817      	ldr	r0, [pc, #92]	; (8015204 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80151a8:	f008 fde8 	bl	801dd7c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80151ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80151b0:	9301      	str	r3, [sp, #4]
 80151b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80151b6:	9300      	str	r3, [sp, #0]
 80151b8:	4b10      	ldr	r3, [pc, #64]	; (80151fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80151ba:	4a12      	ldr	r2, [pc, #72]	; (8015204 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80151bc:	4910      	ldr	r1, [pc, #64]	; (8015200 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80151be:	4812      	ldr	r0, [pc, #72]	; (8015208 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80151c0:	f7ff fe92 	bl	8014ee8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d113      	bne.n	80151f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151d0:	4293      	cmp	r3, r2
 80151d2:	d10e      	bne.n	80151f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80151d4:	480c      	ldr	r0, [pc, #48]	; (8015208 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80151d6:	f7fe ff0d 	bl	8013ff4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80151da:	480c      	ldr	r0, [pc, #48]	; (801520c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80151dc:	f7fa f882 	bl	800f2e4 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80151e0:	4808      	ldr	r0, [pc, #32]	; (8015204 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80151e2:	f7ff fe43 	bl	8014e6c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80151e6:	4806      	ldr	r0, [pc, #24]	; (8015200 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80151e8:	f7ff f952 	bl	8014490 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80151ec:	4803      	ldr	r0, [pc, #12]	; (80151fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80151ee:	f7fe fca5 	bl	8013b3c <_ZN20STM32TouchControllerD1Ev>
}
 80151f2:	bf00      	nop
 80151f4:	3708      	adds	r7, #8
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop
 80151fc:	2000b85c 	.word	0x2000b85c
 8015200:	2000b860 	.word	0x2000b860
 8015204:	2000c480 	.word	0x2000c480
 8015208:	2000c4dc 	.word	0x2000c4dc
 801520c:	20000050 	.word	0x20000050

08015210 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8015210:	b480      	push	{r7}
 8015212:	b083      	sub	sp, #12
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015218:	2301      	movs	r3, #1
    }
 801521a:	4618      	mov	r0, r3
 801521c:	370c      	adds	r7, #12
 801521e:	46bd      	mov	sp, r7
 8015220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015224:	4770      	bx	lr

08015226 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8015226:	b480      	push	{r7}
 8015228:	b083      	sub	sp, #12
 801522a:	af00      	add	r7, sp, #0
 801522c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801522e:	230c      	movs	r3, #12
    }
 8015230:	4618      	mov	r0, r3
 8015232:	370c      	adds	r7, #12
 8015234:	46bd      	mov	sp, r7
 8015236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523a:	4770      	bx	lr

0801523c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801523c:	b480      	push	{r7}
 801523e:	b083      	sub	sp, #12
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	460b      	mov	r3, r1
 8015246:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015248:	887a      	ldrh	r2, [r7, #2]
 801524a:	4613      	mov	r3, r2
 801524c:	005b      	lsls	r3, r3, #1
 801524e:	4413      	add	r3, r2
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	3308      	adds	r3, #8
 8015254:	687a      	ldr	r2, [r7, #4]
 8015256:	4413      	add	r3, r2
    }
 8015258:	4618      	mov	r0, r3
 801525a:	370c      	adds	r7, #12
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr

08015264 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8015264:	b480      	push	{r7}
 8015266:	b083      	sub	sp, #12
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	460b      	mov	r3, r1
 801526e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015270:	887a      	ldrh	r2, [r7, #2]
 8015272:	4613      	mov	r3, r2
 8015274:	005b      	lsls	r3, r3, #1
 8015276:	4413      	add	r3, r2
 8015278:	009b      	lsls	r3, r3, #2
 801527a:	3308      	adds	r3, #8
 801527c:	687a      	ldr	r2, [r7, #4]
 801527e:	4413      	add	r3, r2
    }
 8015280:	4618      	mov	r0, r3
 8015282:	370c      	adds	r7, #12
 8015284:	46bd      	mov	sp, r7
 8015286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528a:	4770      	bx	lr

0801528c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801528c:	b480      	push	{r7}
 801528e:	b083      	sub	sp, #12
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015294:	2301      	movs	r3, #1
    }
 8015296:	4618      	mov	r0, r3
 8015298:	370c      	adds	r7, #12
 801529a:	46bd      	mov	sp, r7
 801529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a0:	4770      	bx	lr

080152a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80152a2:	b480      	push	{r7}
 80152a4:	b083      	sub	sp, #12
 80152a6:	af00      	add	r7, sp, #0
 80152a8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80152aa:	f242 73e4 	movw	r3, #10212	; 0x27e4
    }
 80152ae:	4618      	mov	r0, r3
 80152b0:	370c      	adds	r7, #12
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr

080152ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80152ba:	b480      	push	{r7}
 80152bc:	b083      	sub	sp, #12
 80152be:	af00      	add	r7, sp, #0
 80152c0:	6078      	str	r0, [r7, #4]
 80152c2:	460b      	mov	r3, r1
 80152c4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80152c6:	887b      	ldrh	r3, [r7, #2]
 80152c8:	f242 72e4 	movw	r2, #10212	; 0x27e4
 80152cc:	fb02 f303 	mul.w	r3, r2, r3
 80152d0:	3308      	adds	r3, #8
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	4413      	add	r3, r2
    }
 80152d6:	4618      	mov	r0, r3
 80152d8:	370c      	adds	r7, #12
 80152da:	46bd      	mov	sp, r7
 80152dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e0:	4770      	bx	lr

080152e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80152e2:	b480      	push	{r7}
 80152e4:	b083      	sub	sp, #12
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
 80152ea:	460b      	mov	r3, r1
 80152ec:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80152ee:	887b      	ldrh	r3, [r7, #2]
 80152f0:	f242 72e4 	movw	r2, #10212	; 0x27e4
 80152f4:	fb02 f303 	mul.w	r3, r2, r3
 80152f8:	3308      	adds	r3, #8
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	4413      	add	r3, r2
    }
 80152fe:	4618      	mov	r0, r3
 8015300:	370c      	adds	r7, #12
 8015302:	46bd      	mov	sp, r7
 8015304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015308:	4770      	bx	lr

0801530a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801530a:	b480      	push	{r7}
 801530c:	b083      	sub	sp, #12
 801530e:	af00      	add	r7, sp, #0
 8015310:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015312:	2301      	movs	r3, #1
    }
 8015314:	4618      	mov	r0, r3
 8015316:	370c      	adds	r7, #12
 8015318:	46bd      	mov	sp, r7
 801531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531e:	4770      	bx	lr

08015320 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015320:	b480      	push	{r7}
 8015322:	b083      	sub	sp, #12
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015328:	2310      	movs	r3, #16
    }
 801532a:	4618      	mov	r0, r3
 801532c:	370c      	adds	r7, #12
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr

08015336 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015336:	b480      	push	{r7}
 8015338:	b083      	sub	sp, #12
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
 801533e:	460b      	mov	r3, r1
 8015340:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015342:	887b      	ldrh	r3, [r7, #2]
 8015344:	011b      	lsls	r3, r3, #4
 8015346:	3308      	adds	r3, #8
 8015348:	687a      	ldr	r2, [r7, #4]
 801534a:	4413      	add	r3, r2
    }
 801534c:	4618      	mov	r0, r3
 801534e:	370c      	adds	r7, #12
 8015350:	46bd      	mov	sp, r7
 8015352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015356:	4770      	bx	lr

08015358 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	460b      	mov	r3, r1
 8015362:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015364:	887b      	ldrh	r3, [r7, #2]
 8015366:	011b      	lsls	r3, r3, #4
 8015368:	3308      	adds	r3, #8
 801536a:	687a      	ldr	r2, [r7, #4]
 801536c:	4413      	add	r3, r2
    }
 801536e:	4618      	mov	r0, r3
 8015370:	370c      	adds	r7, #12
 8015372:	46bd      	mov	sp, r7
 8015374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015378:	4770      	bx	lr

0801537a <_GLOBAL__sub_I_touchgfx_init>:
 801537a:	b580      	push	{r7, lr}
 801537c:	af00      	add	r7, sp, #0
 801537e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015382:	2001      	movs	r0, #1
 8015384:	f7ff fefc 	bl	8015180 <_Z41__static_initialization_and_destruction_0ii>
 8015388:	bd80      	pop	{r7, pc}

0801538a <_GLOBAL__sub_D_touchgfx_init>:
 801538a:	b580      	push	{r7, lr}
 801538c:	af00      	add	r7, sp, #0
 801538e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015392:	2000      	movs	r0, #0
 8015394:	f7ff fef4 	bl	8015180 <_Z41__static_initialization_and_destruction_0ii>
 8015398:	bd80      	pop	{r7, pc}

0801539a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801539a:	b580      	push	{r7, lr}
 801539c:	b082      	sub	sp, #8
 801539e:	af00      	add	r7, sp, #0
 80153a0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	3318      	adds	r3, #24
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	6878      	ldr	r0, [r7, #4]
 80153ac:	4798      	blx	r3
    }
 80153ae:	bf00      	nop
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}

080153b6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80153b6:	b480      	push	{r7}
 80153b8:	b083      	sub	sp, #12
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
 80153be:	460b      	mov	r3, r1
 80153c0:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	78fa      	ldrb	r2, [r7, #3]
 80153c6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80153ca:	bf00      	nop
 80153cc:	370c      	adds	r7, #12
 80153ce:	46bd      	mov	sp, r7
 80153d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d4:	4770      	bx	lr

080153d6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80153d6:	b480      	push	{r7}
 80153d8:	b083      	sub	sp, #12
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80153e4:	3301      	adds	r3, #1
 80153e6:	b2da      	uxtb	r2, r3
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80153ee:	bf00      	nop
 80153f0:	370c      	adds	r7, #12
 80153f2:	46bd      	mov	sp, r7
 80153f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f8:	4770      	bx	lr
	...

080153fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b082      	sub	sp, #8
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	460b      	mov	r3, r1
 8015406:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8015408:	78fb      	ldrb	r3, [r7, #3]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d002      	beq.n	8015414 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801540e:	78fb      	ldrb	r3, [r7, #3]
 8015410:	2b02      	cmp	r3, #2
 8015412:	d105      	bne.n	8015420 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	78fa      	ldrb	r2, [r7, #3]
 8015418:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801541c:	2301      	movs	r3, #1
 801541e:	e027      	b.n	8015470 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8015420:	78fb      	ldrb	r3, [r7, #3]
 8015422:	2b01      	cmp	r3, #1
 8015424:	d123      	bne.n	801546e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801542a:	2b00      	cmp	r3, #0
 801542c:	d014      	beq.n	8015458 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	3380      	adds	r3, #128	; 0x80
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	6878      	ldr	r0, [r7, #4]
 8015438:	4798      	blx	r3
 801543a:	4603      	mov	r3, r0
 801543c:	461a      	mov	r2, r3
 801543e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015442:	429a      	cmp	r2, r3
 8015444:	d008      	beq.n	8015458 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015446:	4b0c      	ldr	r3, [pc, #48]	; (8015478 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	f083 0301 	eor.w	r3, r3, #1
 801544e:	b2db      	uxtb	r3, r3
 8015450:	2b00      	cmp	r3, #0
 8015452:	d001      	beq.n	8015458 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015454:	2301      	movs	r3, #1
 8015456:	e000      	b.n	801545a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8015458:	2300      	movs	r3, #0
 801545a:	2b00      	cmp	r3, #0
 801545c:	d005      	beq.n	801546a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	78fa      	ldrb	r2, [r7, #3]
 8015462:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8015466:	2301      	movs	r3, #1
 8015468:	e002      	b.n	8015470 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801546a:	2300      	movs	r3, #0
 801546c:	e000      	b.n	8015470 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801546e:	2300      	movs	r3, #0
    }
 8015470:	4618      	mov	r0, r3
 8015472:	3708      	adds	r7, #8
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}
 8015478:	2000c562 	.word	0x2000c562

0801547c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 801547c:	b480      	push	{r7}
 801547e:	b083      	sub	sp, #12
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	683a      	ldr	r2, [r7, #0]
 801548a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801548c:	bf00      	nop
 801548e:	370c      	adds	r7, #12
 8015490:	46bd      	mov	sp, r7
 8015492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015496:	4770      	bx	lr

08015498 <__NVIC_EnableIRQ>:
{
 8015498:	b480      	push	{r7}
 801549a:	b083      	sub	sp, #12
 801549c:	af00      	add	r7, sp, #0
 801549e:	4603      	mov	r3, r0
 80154a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80154a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	db0b      	blt.n	80154c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80154aa:	79fb      	ldrb	r3, [r7, #7]
 80154ac:	f003 021f 	and.w	r2, r3, #31
 80154b0:	4907      	ldr	r1, [pc, #28]	; (80154d0 <__NVIC_EnableIRQ+0x38>)
 80154b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154b6:	095b      	lsrs	r3, r3, #5
 80154b8:	2001      	movs	r0, #1
 80154ba:	fa00 f202 	lsl.w	r2, r0, r2
 80154be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80154c2:	bf00      	nop
 80154c4:	370c      	adds	r7, #12
 80154c6:	46bd      	mov	sp, r7
 80154c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154cc:	4770      	bx	lr
 80154ce:	bf00      	nop
 80154d0:	e000e100 	.word	0xe000e100

080154d4 <__NVIC_DisableIRQ>:
{
 80154d4:	b480      	push	{r7}
 80154d6:	b083      	sub	sp, #12
 80154d8:	af00      	add	r7, sp, #0
 80154da:	4603      	mov	r3, r0
 80154dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80154de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	db12      	blt.n	801550c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80154e6:	79fb      	ldrb	r3, [r7, #7]
 80154e8:	f003 021f 	and.w	r2, r3, #31
 80154ec:	490a      	ldr	r1, [pc, #40]	; (8015518 <__NVIC_DisableIRQ+0x44>)
 80154ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154f2:	095b      	lsrs	r3, r3, #5
 80154f4:	2001      	movs	r0, #1
 80154f6:	fa00 f202 	lsl.w	r2, r0, r2
 80154fa:	3320      	adds	r3, #32
 80154fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015500:	f3bf 8f4f 	dsb	sy
}
 8015504:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015506:	f3bf 8f6f 	isb	sy
}
 801550a:	bf00      	nop
}
 801550c:	bf00      	nop
 801550e:	370c      	adds	r7, #12
 8015510:	46bd      	mov	sp, r7
 8015512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015516:	4770      	bx	lr
 8015518:	e000e100 	.word	0xe000e100

0801551c <__NVIC_SetPriority>:
{
 801551c:	b480      	push	{r7}
 801551e:	b083      	sub	sp, #12
 8015520:	af00      	add	r7, sp, #0
 8015522:	4603      	mov	r3, r0
 8015524:	6039      	str	r1, [r7, #0]
 8015526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801552c:	2b00      	cmp	r3, #0
 801552e:	db0a      	blt.n	8015546 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	b2da      	uxtb	r2, r3
 8015534:	490c      	ldr	r1, [pc, #48]	; (8015568 <__NVIC_SetPriority+0x4c>)
 8015536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801553a:	0112      	lsls	r2, r2, #4
 801553c:	b2d2      	uxtb	r2, r2
 801553e:	440b      	add	r3, r1
 8015540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015544:	e00a      	b.n	801555c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	b2da      	uxtb	r2, r3
 801554a:	4908      	ldr	r1, [pc, #32]	; (801556c <__NVIC_SetPriority+0x50>)
 801554c:	79fb      	ldrb	r3, [r7, #7]
 801554e:	f003 030f 	and.w	r3, r3, #15
 8015552:	3b04      	subs	r3, #4
 8015554:	0112      	lsls	r2, r2, #4
 8015556:	b2d2      	uxtb	r2, r2
 8015558:	440b      	add	r3, r1
 801555a:	761a      	strb	r2, [r3, #24]
}
 801555c:	bf00      	nop
 801555e:	370c      	adds	r7, #12
 8015560:	46bd      	mov	sp, r7
 8015562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015566:	4770      	bx	lr
 8015568:	e000e100 	.word	0xe000e100
 801556c:	e000ed00 	.word	0xe000ed00

08015570 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8015570:	b5b0      	push	{r4, r5, r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	4618      	mov	r0, r3
 801557c:	f001 f9e6 	bl	801694c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8015580:	687d      	ldr	r5, [r7, #4]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	334c      	adds	r3, #76	; 0x4c
 8015588:	681c      	ldr	r4, [r3, #0]
 801558a:	f003 ff43 	bl	8019414 <_ZN8touchgfx11Application11getInstanceEv>
 801558e:	4603      	mov	r3, r0
 8015590:	4619      	mov	r1, r3
 8015592:	4628      	mov	r0, r5
 8015594:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	490d      	ldr	r1, [pc, #52]	; (80155d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 801559a:	4618      	mov	r0, r3
 801559c:	f7ff ff6e 	bl	801547c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2101      	movs	r1, #1
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7ff ff29 	bl	80153fc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	3374      	adds	r3, #116	; 0x74
 80155b2:	681c      	ldr	r4, [r3, #0]
 80155b4:	2300      	movs	r3, #0
 80155b6:	2200      	movs	r2, #0
 80155b8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80155bc:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2101      	movs	r1, #1
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7ff fef7 	bl	80153b6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80155c8:	bf00      	nop
 80155ca:	3708      	adds	r7, #8
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bdb0      	pop	{r4, r5, r7, pc}
 80155d0:	0801418d 	.word	0x0801418d

080155d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b082      	sub	sp, #8
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80155dc:	2109      	movs	r1, #9
 80155de:	205a      	movs	r0, #90	; 0x5a
 80155e0:	f7ff ff9c 	bl	801551c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80155e4:	2109      	movs	r1, #9
 80155e6:	2058      	movs	r0, #88	; 0x58
 80155e8:	f7ff ff98 	bl	801551c <__NVIC_SetPriority>
}
 80155ec:	bf00      	nop
 80155ee:	3708      	adds	r7, #8
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b082      	sub	sp, #8
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80155fc:	205a      	movs	r0, #90	; 0x5a
 80155fe:	f7ff ff4b 	bl	8015498 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8015602:	2058      	movs	r0, #88	; 0x58
 8015604:	f7ff ff48 	bl	8015498 <__NVIC_EnableIRQ>
}
 8015608:	bf00      	nop
 801560a:	3708      	adds	r7, #8
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}

08015610 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8015618:	205a      	movs	r0, #90	; 0x5a
 801561a:	f7ff ff5b 	bl	80154d4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801561e:	2058      	movs	r0, #88	; 0x58
 8015620:	f7ff ff58 	bl	80154d4 <__NVIC_DisableIRQ>
}
 8015624:	bf00      	nop
 8015626:	3708      	adds	r7, #8
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}

0801562c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801562c:	b480      	push	{r7}
 801562e:	b083      	sub	sp, #12
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015634:	4b11      	ldr	r3, [pc, #68]	; (801567c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015636:	68db      	ldr	r3, [r3, #12]
 8015638:	b29b      	uxth	r3, r3
 801563a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801563e:	b29b      	uxth	r3, r3
 8015640:	3b01      	subs	r3, #1
 8015642:	b29a      	uxth	r2, r3
 8015644:	4b0e      	ldr	r3, [pc, #56]	; (8015680 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015646:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015648:	4b0c      	ldr	r3, [pc, #48]	; (801567c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801564a:	691b      	ldr	r3, [r3, #16]
 801564c:	b29b      	uxth	r3, r3
 801564e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015652:	b29b      	uxth	r3, r3
 8015654:	3b01      	subs	r3, #1
 8015656:	b29a      	uxth	r2, r3
 8015658:	4b0a      	ldr	r3, [pc, #40]	; (8015684 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801565a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801565c:	4b08      	ldr	r3, [pc, #32]	; (8015680 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801565e:	881a      	ldrh	r2, [r3, #0]
 8015660:	4b06      	ldr	r3, [pc, #24]	; (801567c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015662:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015664:	4b05      	ldr	r3, [pc, #20]	; (801567c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015668:	4a04      	ldr	r2, [pc, #16]	; (801567c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801566a:	f043 0301 	orr.w	r3, r3, #1
 801566e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015670:	bf00      	nop
 8015672:	370c      	adds	r7, #12
 8015674:	46bd      	mov	sp, r7
 8015676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567a:	4770      	bx	lr
 801567c:	40016800 	.word	0x40016800
 8015680:	2000c554 	.word	0x2000c554
 8015684:	2000c556 	.word	0x2000c556

08015688 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015688:	b480      	push	{r7}
 801568a:	b083      	sub	sp, #12
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015690:	4b03      	ldr	r3, [pc, #12]	; (80156a0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8015692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015694:	4618      	mov	r0, r3
 8015696:	370c      	adds	r7, #12
 8015698:	46bd      	mov	sp, r7
 801569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569e:	4770      	bx	lr
 80156a0:	40016884 	.word	0x40016884

080156a4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80156a4:	b480      	push	{r7}
 80156a6:	b083      	sub	sp, #12
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
 80156ac:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80156ae:	4a06      	ldr	r2, [pc, #24]	; (80156c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80156b4:	4b05      	ldr	r3, [pc, #20]	; (80156cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80156b6:	2201      	movs	r2, #1
 80156b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80156ba:	bf00      	nop
 80156bc:	370c      	adds	r7, #12
 80156be:	46bd      	mov	sp, r7
 80156c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c4:	4770      	bx	lr
 80156c6:	bf00      	nop
 80156c8:	40016884 	.word	0x40016884
 80156cc:	40016800 	.word	0x40016800

080156d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	6839      	ldr	r1, [r7, #0]
 80156de:	4618      	mov	r0, r3
 80156e0:	f000 fe44 	bl	801636c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80156e4:	bf00      	nop
 80156e6:	3708      	adds	r7, #8
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}

080156ec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80156ec:	b480      	push	{r7}
 80156ee:	b085      	sub	sp, #20
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80156f4:	4b0d      	ldr	r3, [pc, #52]	; (801572c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80156f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156f8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80156fa:	4b0c      	ldr	r3, [pc, #48]	; (801572c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80156fc:	68db      	ldr	r3, [r3, #12]
 80156fe:	b29b      	uxth	r3, r3
 8015700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015704:	b29b      	uxth	r3, r3
 8015706:	3301      	adds	r3, #1
 8015708:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801570a:	89fa      	ldrh	r2, [r7, #14]
 801570c:	89bb      	ldrh	r3, [r7, #12]
 801570e:	429a      	cmp	r2, r3
 8015710:	d201      	bcs.n	8015716 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8015712:	2300      	movs	r3, #0
 8015714:	e003      	b.n	801571e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8015716:	89fa      	ldrh	r2, [r7, #14]
 8015718:	89bb      	ldrh	r3, [r7, #12]
 801571a:	1ad3      	subs	r3, r2, r3
 801571c:	b29b      	uxth	r3, r3
    }
}
 801571e:	4618      	mov	r0, r3
 8015720:	3714      	adds	r7, #20
 8015722:	46bd      	mov	sp, r7
 8015724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015728:	4770      	bx	lr
 801572a:	bf00      	nop
 801572c:	40016800 	.word	0x40016800

08015730 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8015738:	4b1a      	ldr	r3, [pc, #104]	; (80157a4 <HAL_LTDC_LineEventCallback+0x74>)
 801573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801573c:	4a1a      	ldr	r2, [pc, #104]	; (80157a8 <HAL_LTDC_LineEventCallback+0x78>)
 801573e:	8812      	ldrh	r2, [r2, #0]
 8015740:	4293      	cmp	r3, r2
 8015742:	bf0c      	ite	eq
 8015744:	2301      	moveq	r3, #1
 8015746:	2300      	movne	r3, #0
 8015748:	b2db      	uxtb	r3, r3
 801574a:	2b00      	cmp	r3, #0
 801574c:	d017      	beq.n	801577e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801574e:	4b17      	ldr	r3, [pc, #92]	; (80157ac <HAL_LTDC_LineEventCallback+0x7c>)
 8015750:	881b      	ldrh	r3, [r3, #0]
 8015752:	4619      	mov	r1, r3
 8015754:	6878      	ldr	r0, [r7, #4]
 8015756:	f7f0 fd47 	bl	80061e8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801575a:	f7fa fb09 	bl	800fd70 <_ZN8touchgfx3HAL11getInstanceEv>
 801575e:	4603      	mov	r3, r0
 8015760:	4618      	mov	r0, r3
 8015762:	f7ff fe38 	bl	80153d6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015766:	f7fe fcd3 	bl	8014110 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801576a:	f7fa fb01 	bl	800fd70 <_ZN8touchgfx3HAL11getInstanceEv>
 801576e:	4603      	mov	r3, r0
 8015770:	4618      	mov	r0, r3
 8015772:	f001 fb73 	bl	8016e5c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015776:	2000      	movs	r0, #0
 8015778:	f7fe fa02 	bl	8013b80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 801577c:	e00e      	b.n	801579c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801577e:	4b0a      	ldr	r3, [pc, #40]	; (80157a8 <HAL_LTDC_LineEventCallback+0x78>)
 8015780:	881b      	ldrh	r3, [r3, #0]
 8015782:	4619      	mov	r1, r3
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	f7f0 fd2f 	bl	80061e8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801578a:	2000      	movs	r0, #0
 801578c:	f7fe fa03 	bl	8013b96 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015790:	f7fa faee 	bl	800fd70 <_ZN8touchgfx3HAL11getInstanceEv>
 8015794:	4603      	mov	r3, r0
 8015796:	4618      	mov	r0, r3
 8015798:	f7ff fdff 	bl	801539a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 801579c:	bf00      	nop
 801579e:	3708      	adds	r7, #8
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}
 80157a4:	40016800 	.word	0x40016800
 80157a8:	2000c554 	.word	0x2000c554
 80157ac:	2000c556 	.word	0x2000c556

080157b0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80157b0:	8880      	ldrh	r0, [r0, #4]
 80157b2:	4770      	bx	lr

080157b4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80157b4:	2300      	movs	r3, #0
 80157b6:	8083      	strh	r3, [r0, #4]
 80157b8:	4770      	bx	lr
	...

080157bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80157bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157be:	6803      	ldr	r3, [r0, #0]
 80157c0:	460e      	mov	r6, r1
 80157c2:	2100      	movs	r1, #0
 80157c4:	4605      	mov	r5, r0
 80157c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157c8:	4798      	blx	r3
 80157ca:	4604      	mov	r4, r0
 80157cc:	682b      	ldr	r3, [r5, #0]
 80157ce:	4628      	mov	r0, r5
 80157d0:	1b34      	subs	r4, r6, r4
 80157d2:	6a1b      	ldr	r3, [r3, #32]
 80157d4:	b2a4      	uxth	r4, r4
 80157d6:	4798      	blx	r3
 80157d8:	88ab      	ldrh	r3, [r5, #4]
 80157da:	fbb4 f4f0 	udiv	r4, r4, r0
 80157de:	42a3      	cmp	r3, r4
 80157e0:	d805      	bhi.n	80157ee <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80157e2:	4b0e      	ldr	r3, [pc, #56]	; (801581c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80157e4:	211e      	movs	r1, #30
 80157e6:	4a0e      	ldr	r2, [pc, #56]	; (8015820 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80157e8:	480e      	ldr	r0, [pc, #56]	; (8015824 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80157ea:	f00f fe07 	bl	80253fc <__assert_func>
 80157ee:	682b      	ldr	r3, [r5, #0]
 80157f0:	2100      	movs	r1, #0
 80157f2:	4628      	mov	r0, r5
 80157f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157f6:	4798      	blx	r3
 80157f8:	682b      	ldr	r3, [r5, #0]
 80157fa:	4607      	mov	r7, r0
 80157fc:	4628      	mov	r0, r5
 80157fe:	6a1b      	ldr	r3, [r3, #32]
 8015800:	4798      	blx	r3
 8015802:	1bf3      	subs	r3, r6, r7
 8015804:	b29b      	uxth	r3, r3
 8015806:	fbb3 f2f0 	udiv	r2, r3, r0
 801580a:	fb02 3010 	mls	r0, r2, r0, r3
 801580e:	b118      	cbz	r0, 8015818 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8015810:	4b05      	ldr	r3, [pc, #20]	; (8015828 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8015812:	211f      	movs	r1, #31
 8015814:	4a02      	ldr	r2, [pc, #8]	; (8015820 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015816:	e7e7      	b.n	80157e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8015818:	4620      	mov	r0, r4
 801581a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801581c:	080275e8 	.word	0x080275e8
 8015820:	08027756 	.word	0x08027756
 8015824:	080275fd 	.word	0x080275fd
 8015828:	0802762b 	.word	0x0802762b

0801582c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801582c:	b538      	push	{r3, r4, r5, lr}
 801582e:	6803      	ldr	r3, [r0, #0]
 8015830:	460d      	mov	r5, r1
 8015832:	4604      	mov	r4, r0
 8015834:	6a1b      	ldr	r3, [r3, #32]
 8015836:	4798      	blx	r3
 8015838:	4285      	cmp	r5, r0
 801583a:	d905      	bls.n	8015848 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801583c:	4b0c      	ldr	r3, [pc, #48]	; (8015870 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801583e:	212f      	movs	r1, #47	; 0x2f
 8015840:	4a0c      	ldr	r2, [pc, #48]	; (8015874 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015842:	480d      	ldr	r0, [pc, #52]	; (8015878 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015844:	f00f fdda 	bl	80253fc <__assert_func>
 8015848:	6823      	ldr	r3, [r4, #0]
 801584a:	4620      	mov	r0, r4
 801584c:	88a5      	ldrh	r5, [r4, #4]
 801584e:	69db      	ldr	r3, [r3, #28]
 8015850:	4798      	blx	r3
 8015852:	4285      	cmp	r5, r0
 8015854:	d303      	bcc.n	801585e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8015856:	4b09      	ldr	r3, [pc, #36]	; (801587c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015858:	2130      	movs	r1, #48	; 0x30
 801585a:	4a06      	ldr	r2, [pc, #24]	; (8015874 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801585c:	e7f1      	b.n	8015842 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801585e:	6823      	ldr	r3, [r4, #0]
 8015860:	4620      	mov	r0, r4
 8015862:	88a1      	ldrh	r1, [r4, #4]
 8015864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015866:	4798      	blx	r3
 8015868:	88a3      	ldrh	r3, [r4, #4]
 801586a:	3301      	adds	r3, #1
 801586c:	80a3      	strh	r3, [r4, #4]
 801586e:	bd38      	pop	{r3, r4, r5, pc}
 8015870:	080276a5 	.word	0x080276a5
 8015874:	08027799 	.word	0x08027799
 8015878:	080275fd 	.word	0x080275fd
 801587c:	080276bc 	.word	0x080276bc

08015880 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015880:	b570      	push	{r4, r5, r6, lr}
 8015882:	6803      	ldr	r3, [r0, #0]
 8015884:	4616      	mov	r6, r2
 8015886:	4604      	mov	r4, r0
 8015888:	460d      	mov	r5, r1
 801588a:	6a1b      	ldr	r3, [r3, #32]
 801588c:	4798      	blx	r3
 801588e:	4286      	cmp	r6, r0
 8015890:	d905      	bls.n	801589e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015892:	4b06      	ldr	r3, [pc, #24]	; (80158ac <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015894:	2139      	movs	r1, #57	; 0x39
 8015896:	4a06      	ldr	r2, [pc, #24]	; (80158b0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015898:	4806      	ldr	r0, [pc, #24]	; (80158b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801589a:	f00f fdaf 	bl	80253fc <__assert_func>
 801589e:	6823      	ldr	r3, [r4, #0]
 80158a0:	4629      	mov	r1, r5
 80158a2:	4620      	mov	r0, r4
 80158a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158aa:	4718      	bx	r3
 80158ac:	080276a5 	.word	0x080276a5
 80158b0:	0802770c 	.word	0x0802770c
 80158b4:	080275fd 	.word	0x080275fd

080158b8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80158b8:	4770      	bx	lr
	...

080158bc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80158bc:	4a02      	ldr	r2, [pc, #8]	; (80158c8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80158be:	6002      	str	r2, [r0, #0]
 80158c0:	2200      	movs	r2, #0
 80158c2:	8082      	strh	r2, [r0, #4]
 80158c4:	4770      	bx	lr
 80158c6:	bf00      	nop
 80158c8:	080276e0 	.word	0x080276e0

080158cc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 80158cc:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 80158d0:	4770      	bx	lr

080158d2 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 80158d2:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80158d6:	4770      	bx	lr

080158d8 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 80158d8:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 80158dc:	4770      	bx	lr

080158de <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 80158de:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 80158e2:	4770      	bx	lr

080158e4 <_ZN8touchgfx11BoxProgressD1Ev>:
 80158e4:	4b03      	ldr	r3, [pc, #12]	; (80158f4 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 80158e6:	b510      	push	{r4, lr}
 80158e8:	4604      	mov	r4, r0
 80158ea:	6003      	str	r3, [r0, #0]
 80158ec:	f000 f8b6 	bl	8015a5c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80158f0:	4620      	mov	r0, r4
 80158f2:	bd10      	pop	{r4, pc}
 80158f4:	080277e0 	.word	0x080277e0

080158f8 <_ZN8touchgfx11BoxProgressD0Ev>:
 80158f8:	b510      	push	{r4, lr}
 80158fa:	4604      	mov	r4, r0
 80158fc:	f7ff fff2 	bl	80158e4 <_ZN8touchgfx11BoxProgressD1Ev>
 8015900:	21c0      	movs	r1, #192	; 0xc0
 8015902:	4620      	mov	r0, r4
 8015904:	f00f fd4c 	bl	80253a0 <_ZdlPvj>
 8015908:	4620      	mov	r0, r4
 801590a:	bd10      	pop	{r4, pc}

0801590c <_ZN8touchgfx11BoxProgressC1Ev>:
 801590c:	b510      	push	{r4, lr}
 801590e:	4604      	mov	r4, r0
 8015910:	f000 f8b8 	bl	8015a84 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8015914:	2201      	movs	r2, #1
 8015916:	4b16      	ldr	r3, [pc, #88]	; (8015970 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8015918:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801591c:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8015920:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8015924:	4a13      	ldr	r2, [pc, #76]	; (8015974 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8015926:	6023      	str	r3, [r4, #0]
 8015928:	2300      	movs	r3, #0
 801592a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801592e:	22ff      	movs	r2, #255	; 0xff
 8015930:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8015934:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8015938:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 801593c:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8015940:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8015944:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8015948:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 801594c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8015950:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8015954:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8015958:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 801595c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8015960:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8015964:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8015968:	f000 fbb8 	bl	80160dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801596c:	4620      	mov	r0, r4
 801596e:	bd10      	pop	{r4, pc}
 8015970:	080277e0 	.word	0x080277e0
 8015974:	08028a98 	.word	0x08028a98

08015978 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8015978:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801597c:	4617      	mov	r7, r2
 801597e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8015982:	2200      	movs	r2, #0
 8015984:	4604      	mov	r4, r0
 8015986:	460e      	mov	r6, r1
 8015988:	4698      	mov	r8, r3
 801598a:	4611      	mov	r1, r2
 801598c:	9500      	str	r5, [sp, #0]
 801598e:	3090      	adds	r0, #144	; 0x90
 8015990:	f7fa feac 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015994:	4643      	mov	r3, r8
 8015996:	463a      	mov	r2, r7
 8015998:	4631      	mov	r1, r6
 801599a:	4620      	mov	r0, r4
 801599c:	9508      	str	r5, [sp, #32]
 801599e:	b002      	add	sp, #8
 80159a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159a4:	f000 b9fa 	b.w	8015d9c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080159a8 <_ZN8touchgfx11BoxProgress8setValueEi>:
 80159a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159aa:	4604      	mov	r4, r0
 80159ac:	f000 fa40 	bl	8015e30 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80159b0:	f104 0590 	add.w	r5, r4, #144	; 0x90
 80159b4:	4628      	mov	r0, r5
 80159b6:	f004 f95b 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
 80159ba:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80159be:	2b03      	cmp	r3, #3
 80159c0:	d814      	bhi.n	80159ec <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 80159c2:	e8df f003 	tbb	[pc, r3]
 80159c6:	0202      	.short	0x0202
 80159c8:	1010      	.short	0x1010
 80159ca:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80159ce:	4620      	mov	r0, r4
 80159d0:	f000 fa88 	bl	8015ee4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80159d4:	b200      	sxth	r0, r0
 80159d6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80159da:	2b03      	cmp	r3, #3
 80159dc:	d81a      	bhi.n	8015a14 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 80159de:	e8df f003 	tbb	[pc, r3]
 80159e2:	0e07      	.short	0x0e07
 80159e4:	231f      	.short	0x231f
 80159e6:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 80159ea:	e7f0      	b.n	80159ce <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 80159ec:	2000      	movs	r0, #0
 80159ee:	e7f2      	b.n	80159d6 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 80159f0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80159f4:	9300      	str	r3, [sp, #0]
 80159f6:	4603      	mov	r3, r0
 80159f8:	2200      	movs	r2, #0
 80159fa:	2100      	movs	r1, #0
 80159fc:	e007      	b.n	8015a0e <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 80159fe:	8921      	ldrh	r1, [r4, #8]
 8015a00:	2200      	movs	r2, #0
 8015a02:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015a06:	1a09      	subs	r1, r1, r0
 8015a08:	9300      	str	r3, [sp, #0]
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	b209      	sxth	r1, r1
 8015a0e:	4628      	mov	r0, r5
 8015a10:	f7fa fe6c 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015a14:	4628      	mov	r0, r5
 8015a16:	b003      	add	sp, #12
 8015a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a1c:	f004 b928 	b.w	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015a20:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015a24:	9000      	str	r0, [sp, #0]
 8015a26:	e7e7      	b.n	80159f8 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8015a28:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015a2c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015a30:	1a12      	subs	r2, r2, r0
 8015a32:	9000      	str	r0, [sp, #0]
 8015a34:	b212      	sxth	r2, r2
 8015a36:	e7e0      	b.n	80159fa <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08015a38 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8015a38:	b570      	push	{r4, r5, r6, lr}
 8015a3a:	6803      	ldr	r3, [r0, #0]
 8015a3c:	4604      	mov	r4, r0
 8015a3e:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8015a42:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8015a46:	4798      	blx	r3
 8015a48:	4601      	mov	r1, r0
 8015a4a:	462b      	mov	r3, r5
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a52:	4718      	bx	r3

08015a54 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8015a54:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8015a58:	4770      	bx	lr
	...

08015a5c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8015a5c:	4b03      	ldr	r3, [pc, #12]	; (8015a6c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8015a5e:	b510      	push	{r4, lr}
 8015a60:	4604      	mov	r4, r0
 8015a62:	6003      	str	r3, [r0, #0]
 8015a64:	f000 f999 	bl	8015d9a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8015a68:	4620      	mov	r0, r4
 8015a6a:	bd10      	pop	{r4, pc}
 8015a6c:	080278b8 	.word	0x080278b8

08015a70 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8015a70:	b510      	push	{r4, lr}
 8015a72:	4604      	mov	r4, r0
 8015a74:	f7ff fff2 	bl	8015a5c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8015a78:	2190      	movs	r1, #144	; 0x90
 8015a7a:	4620      	mov	r0, r4
 8015a7c:	f00f fc90 	bl	80253a0 <_ZdlPvj>
 8015a80:	4620      	mov	r0, r4
 8015a82:	bd10      	pop	{r4, pc}

08015a84 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8015a84:	b510      	push	{r4, lr}
 8015a86:	4604      	mov	r4, r0
 8015a88:	f000 fa4c 	bl	8015f24 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8015a8c:	4b03      	ldr	r3, [pc, #12]	; (8015a9c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8015a8e:	2100      	movs	r1, #0
 8015a90:	4620      	mov	r0, r4
 8015a92:	6023      	str	r3, [r4, #0]
 8015a94:	f7ff ffd0 	bl	8015a38 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8015a98:	4620      	mov	r0, r4
 8015a9a:	bd10      	pop	{r4, pc}
 8015a9c:	080278b8 	.word	0x080278b8

08015aa0 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8015aa0:	b570      	push	{r4, r5, r6, lr}
 8015aa2:	6803      	ldr	r3, [r0, #0]
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8015aaa:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8015aae:	4798      	blx	r3
 8015ab0:	4601      	mov	r1, r0
 8015ab2:	462b      	mov	r3, r5
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015aba:	4718      	bx	r3

08015abc <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8015abc:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8015ac0:	4770      	bx	lr

08015ac2 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8015ac2:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8015ac6:	4770      	bx	lr

08015ac8 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8015ac8:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8015acc:	4770      	bx	lr

08015ace <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8015ace:	b507      	push	{r0, r1, r2, lr}
 8015ad0:	ab02      	add	r3, sp, #8
 8015ad2:	30bc      	adds	r0, #188	; 0xbc
 8015ad4:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8015ad8:	4619      	mov	r1, r3
 8015ada:	f002 f9a9 	bl	8017e30 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8015ade:	b003      	add	sp, #12
 8015ae0:	f85d fb04 	ldr.w	pc, [sp], #4

08015ae4 <_ZN8touchgfx13ImageProgressD1Ev>:
 8015ae4:	4b03      	ldr	r3, [pc, #12]	; (8015af4 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8015ae6:	b510      	push	{r4, lr}
 8015ae8:	4604      	mov	r4, r0
 8015aea:	6003      	str	r3, [r0, #0]
 8015aec:	f7ff ffb6 	bl	8015a5c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8015af0:	4620      	mov	r0, r4
 8015af2:	bd10      	pop	{r4, pc}
 8015af4:	080279e4 	.word	0x080279e4

08015af8 <_ZN8touchgfx13ImageProgressD0Ev>:
 8015af8:	b510      	push	{r4, lr}
 8015afa:	4604      	mov	r4, r0
 8015afc:	f7ff fff2 	bl	8015ae4 <_ZN8touchgfx13ImageProgressD1Ev>
 8015b00:	21f0      	movs	r1, #240	; 0xf0
 8015b02:	4620      	mov	r0, r4
 8015b04:	f00f fc4c 	bl	80253a0 <_ZdlPvj>
 8015b08:	4620      	mov	r0, r4
 8015b0a:	bd10      	pop	{r4, pc}

08015b0c <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8015b0c:	b508      	push	{r3, lr}
 8015b0e:	4b06      	ldr	r3, [pc, #24]	; (8015b28 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	b92b      	cbnz	r3, 8015b20 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8015b14:	4b05      	ldr	r3, [pc, #20]	; (8015b2c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8015b16:	21b8      	movs	r1, #184	; 0xb8
 8015b18:	4a05      	ldr	r2, [pc, #20]	; (8015b30 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8015b1a:	4806      	ldr	r0, [pc, #24]	; (8015b34 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8015b1c:	f00f fc6e 	bl	80253fc <__assert_func>
 8015b20:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8015b24:	bd08      	pop	{r3, pc}
 8015b26:	bf00      	nop
 8015b28:	2000c62c 	.word	0x2000c62c
 8015b2c:	08027978 	.word	0x08027978
 8015b30:	08027abc 	.word	0x08027abc
 8015b34:	080279b4 	.word	0x080279b4

08015b38 <_ZN8touchgfx13ImageProgressC1Ev>:
 8015b38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015b3c:	4604      	mov	r4, r0
 8015b3e:	f7ff ffa1 	bl	8015a84 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8015b42:	4b31      	ldr	r3, [pc, #196]	; (8015c08 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8015b44:	a902      	add	r1, sp, #8
 8015b46:	4626      	mov	r6, r4
 8015b48:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8015b4c:	2500      	movs	r5, #0
 8015b4e:	4a2f      	ldr	r2, [pc, #188]	; (8015c0c <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8015b50:	f846 3b90 	str.w	r3, [r6], #144
 8015b54:	2701      	movs	r7, #1
 8015b56:	4b2e      	ldr	r3, [pc, #184]	; (8015c10 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8015b58:	4640      	mov	r0, r8
 8015b5a:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8015b5e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8015b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b66:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8015b6a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8015b6e:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8015b72:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8015b76:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8015b7a:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8015b7e:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8015b82:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8015b86:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8015b8a:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8015b8e:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8015b92:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8015b96:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8015b9a:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8015b9e:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8015ba2:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8015ba6:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8015baa:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8015bae:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8015bb2:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8015bb6:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8015bba:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8015bbe:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8015bc2:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8015bc6:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8015bca:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8015bce:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8015bd2:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8015bd6:	f002 fb6f 	bl	80182b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015bda:	4b0e      	ldr	r3, [pc, #56]	; (8015c14 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8015bdc:	4641      	mov	r1, r8
 8015bde:	4630      	mov	r0, r6
 8015be0:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8015be4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8015be8:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8015bec:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8015bf0:	f000 fa74 	bl	80160dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015bf4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015bf8:	4631      	mov	r1, r6
 8015bfa:	f000 fa6f 	bl	80160dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015bfe:	4620      	mov	r0, r4
 8015c00:	b002      	add	sp, #8
 8015c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c06:	bf00      	nop
 8015c08:	080279e4 	.word	0x080279e4
 8015c0c:	08028c00 	.word	0x08028c00
 8015c10:	08027d60 	.word	0x08027d60
 8015c14:	08028b00 	.word	0x08028b00

08015c18 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8015c18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015c1c:	4617      	mov	r7, r2
 8015c1e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8015c22:	2200      	movs	r2, #0
 8015c24:	4604      	mov	r4, r0
 8015c26:	460e      	mov	r6, r1
 8015c28:	4698      	mov	r8, r3
 8015c2a:	4611      	mov	r1, r2
 8015c2c:	9500      	str	r5, [sp, #0]
 8015c2e:	3090      	adds	r0, #144	; 0x90
 8015c30:	f7fa fd5c 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015c34:	4643      	mov	r3, r8
 8015c36:	463a      	mov	r2, r7
 8015c38:	4631      	mov	r1, r6
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	9508      	str	r5, [sp, #32]
 8015c3e:	b002      	add	sp, #8
 8015c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c44:	f000 b8aa 	b.w	8015d9c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08015c48 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8015c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	f000 f8f0 	bl	8015e30 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8015c50:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8015c54:	4638      	mov	r0, r7
 8015c56:	f004 f80b 	bl	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015c5a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8015c5e:	4620      	mov	r0, r4
 8015c60:	2b01      	cmp	r3, #1
 8015c62:	bf94      	ite	ls
 8015c64:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8015c68:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8015c6c:	f000 f93a 	bl	8015ee4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8015c70:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8015c74:	4606      	mov	r6, r0
 8015c76:	b205      	sxth	r5, r0
 8015c78:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8015c7c:	2a00      	cmp	r2, #0
 8015c7e:	d056      	beq.n	8015d2e <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8015c80:	2b03      	cmp	r3, #3
 8015c82:	d82c      	bhi.n	8015cde <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8015c84:	e8df f003 	tbb	[pc, r3]
 8015c88:	3d311202 	.word	0x3d311202
 8015c8c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015c90:	2200      	movs	r2, #0
 8015c92:	9300      	str	r3, [sp, #0]
 8015c94:	4611      	mov	r1, r2
 8015c96:	462b      	mov	r3, r5
 8015c98:	4638      	mov	r0, r7
 8015c9a:	f7fa fd27 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015c9e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015ca2:	9300      	str	r3, [sp, #0]
 8015ca4:	462b      	mov	r3, r5
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	4611      	mov	r1, r2
 8015caa:	e014      	b.n	8015cd6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8015cac:	8921      	ldrh	r1, [r4, #8]
 8015cae:	2200      	movs	r2, #0
 8015cb0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015cb4:	1a09      	subs	r1, r1, r0
 8015cb6:	4638      	mov	r0, r7
 8015cb8:	9300      	str	r3, [sp, #0]
 8015cba:	462b      	mov	r3, r5
 8015cbc:	b209      	sxth	r1, r1
 8015cbe:	f7fa fd15 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015cc2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8015cc6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015cca:	4249      	negs	r1, r1
 8015ccc:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8015cd0:	9200      	str	r2, [sp, #0]
 8015cd2:	b209      	sxth	r1, r1
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8015cda:	f7fa fd07 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015cde:	4638      	mov	r0, r7
 8015ce0:	b003      	add	sp, #12
 8015ce2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015ce6:	f003 bfc3 	b.w	8019c70 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015cea:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015cee:	2200      	movs	r2, #0
 8015cf0:	9500      	str	r5, [sp, #0]
 8015cf2:	2100      	movs	r1, #0
 8015cf4:	4638      	mov	r0, r7
 8015cf6:	f7fa fcf9 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015cfa:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015cfe:	9500      	str	r5, [sp, #0]
 8015d00:	e7d1      	b.n	8015ca6 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8015d02:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015d06:	2100      	movs	r1, #0
 8015d08:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015d0c:	1a12      	subs	r2, r2, r0
 8015d0e:	9500      	str	r5, [sp, #0]
 8015d10:	4638      	mov	r0, r7
 8015d12:	b212      	sxth	r2, r2
 8015d14:	f7fa fcea 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015d18:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8015d1c:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8015d20:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015d24:	4252      	negs	r2, r2
 8015d26:	9100      	str	r1, [sp, #0]
 8015d28:	b212      	sxth	r2, r2
 8015d2a:	2100      	movs	r1, #0
 8015d2c:	e7d3      	b.n	8015cd6 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8015d2e:	2b03      	cmp	r3, #3
 8015d30:	d8d5      	bhi.n	8015cde <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8015d32:	e8df f003 	tbb	[pc, r3]
 8015d36:	1102      	.short	0x1102
 8015d38:	2a1b      	.short	0x2a1b
 8015d3a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	4638      	mov	r0, r7
 8015d42:	4611      	mov	r1, r2
 8015d44:	9300      	str	r3, [sp, #0]
 8015d46:	462b      	mov	r3, r5
 8015d48:	f7fa fcd0 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015d4c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015d50:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015d54:	1af1      	subs	r1, r6, r3
 8015d56:	e7bb      	b.n	8015cd0 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8015d58:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015d62:	1a09      	subs	r1, r1, r0
 8015d64:	9300      	str	r3, [sp, #0]
 8015d66:	462b      	mov	r3, r5
 8015d68:	b209      	sxth	r1, r1
 8015d6a:	e795      	b.n	8015c98 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015d72:	4638      	mov	r0, r7
 8015d74:	9500      	str	r5, [sp, #0]
 8015d76:	4611      	mov	r1, r2
 8015d78:	f7fa fcb8 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015d7c:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8015d80:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015d84:	1a32      	subs	r2, r6, r0
 8015d86:	9000      	str	r0, [sp, #0]
 8015d88:	e7ce      	b.n	8015d28 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8015d8a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8015d8e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015d92:	1a12      	subs	r2, r2, r0
 8015d94:	9500      	str	r5, [sp, #0]
 8015d96:	b212      	sxth	r2, r2
 8015d98:	e7ab      	b.n	8015cf2 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08015d9a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8015d9a:	4770      	bx	lr

08015d9c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8015d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015da0:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8015da4:	4604      	mov	r4, r0
 8015da6:	460e      	mov	r6, r1
 8015da8:	4698      	mov	r8, r3
 8015daa:	9700      	str	r7, [sp, #0]
 8015dac:	3058      	adds	r0, #88	; 0x58
 8015dae:	4615      	mov	r5, r2
 8015db0:	f7fa fc9c 	bl	80106ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8015db4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015db8:	eb06 0308 	add.w	r3, r6, r8
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	eb05 0207 	add.w	r2, r5, r7
 8015dc2:	bfb8      	it	lt
 8015dc4:	8123      	strhlt	r3, [r4, #8]
 8015dc6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015dca:	4293      	cmp	r3, r2
 8015dcc:	bfb8      	it	lt
 8015dce:	8162      	strhlt	r2, [r4, #10]
 8015dd0:	b002      	add	sp, #8
 8015dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015dd6 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8015dd6:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8015dda:	4770      	bx	lr

08015ddc <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8015ddc:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8015de0:	4770      	bx	lr

08015de2 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8015de2:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8015de6:	4770      	bx	lr

08015de8 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8015de8:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8015dec:	4770      	bx	lr

08015dee <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8015dee:	b510      	push	{r4, lr}
 8015df0:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015df4:	800c      	strh	r4, [r1, #0]
 8015df6:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8015dfa:	8011      	strh	r1, [r2, #0]
 8015dfc:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015e00:	801a      	strh	r2, [r3, #0]
 8015e02:	9b02      	ldr	r3, [sp, #8]
 8015e04:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8015e08:	801a      	strh	r2, [r3, #0]
 8015e0a:	bd10      	pop	{r4, pc}

08015e0c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8015e0c:	b510      	push	{r4, lr}
 8015e0e:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8015e12:	800c      	strh	r4, [r1, #0]
 8015e14:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8015e18:	8011      	strh	r1, [r2, #0]
 8015e1a:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8015e1e:	801a      	strh	r2, [r3, #0]
 8015e20:	bd10      	pop	{r4, pc}

08015e22 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8015e22:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015e26:	800b      	strh	r3, [r1, #0]
 8015e28:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015e2c:	8013      	strh	r3, [r2, #0]
 8015e2e:	4770      	bx	lr

08015e30 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8015e30:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8015e34:	4299      	cmp	r1, r3
 8015e36:	bfb8      	it	lt
 8015e38:	4619      	movlt	r1, r3
 8015e3a:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8015e3e:	4299      	cmp	r1, r3
 8015e40:	bfa8      	it	ge
 8015e42:	4619      	movge	r1, r3
 8015e44:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8015e48:	4770      	bx	lr

08015e4a <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8015e4a:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8015e4e:	4770      	bx	lr

08015e50 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8015e50:	b510      	push	{r4, lr}
 8015e52:	4604      	mov	r4, r0
 8015e54:	2190      	movs	r1, #144	; 0x90
 8015e56:	f00f faa3 	bl	80253a0 <_ZdlPvj>
 8015e5a:	4620      	mov	r0, r4
 8015e5c:	bd10      	pop	{r4, pc}

08015e5e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8015e5e:	b510      	push	{r4, lr}
 8015e60:	4604      	mov	r4, r0
 8015e62:	302c      	adds	r0, #44	; 0x2c
 8015e64:	f002 fa28 	bl	80182b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015e68:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015e6a:	8123      	strh	r3, [r4, #8]
 8015e6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015e6e:	8163      	strh	r3, [r4, #10]
 8015e70:	bd10      	pop	{r4, pc}
	...

08015e74 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8015e74:	4291      	cmp	r1, r2
 8015e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	460e      	mov	r6, r1
 8015e7e:	4615      	mov	r5, r2
 8015e80:	4698      	mov	r8, r3
 8015e82:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8015e86:	db05      	blt.n	8015e94 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8015e88:	4b12      	ldr	r3, [pc, #72]	; (8015ed4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8015e8a:	214d      	movs	r1, #77	; 0x4d
 8015e8c:	4a12      	ldr	r2, [pc, #72]	; (8015ed8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8015e8e:	4813      	ldr	r0, [pc, #76]	; (8015edc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8015e90:	f00f fab4 	bl	80253fc <__assert_func>
 8015e94:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8015e98:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8015e9c:	6803      	ldr	r3, [r0, #0]
 8015e9e:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8015ea2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015ea6:	4798      	blx	r3
 8015ea8:	f1b8 0f00 	cmp.w	r8, #0
 8015eac:	d10c      	bne.n	8015ec8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8015eae:	1bad      	subs	r5, r5, r6
 8015eb0:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8015eb4:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8015eb8:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8015ebc:	42bb      	cmp	r3, r7
 8015ebe:	d806      	bhi.n	8015ece <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8015ec0:	4b07      	ldr	r3, [pc, #28]	; (8015ee0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8015ec2:	215a      	movs	r1, #90	; 0x5a
 8015ec4:	4a04      	ldr	r2, [pc, #16]	; (8015ed8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8015ec6:	e7e2      	b.n	8015e8e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8015ec8:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8015ecc:	e7f2      	b.n	8015eb4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8015ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ed2:	bf00      	nop
 8015ed4:	08027aef 	.word	0x08027aef
 8015ed8:	08027c2c 	.word	0x08027c2c
 8015edc:	08027af9 	.word	0x08027af9
 8015ee0:	08027b50 	.word	0x08027b50

08015ee4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8015ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ee6:	4604      	mov	r4, r0
 8015ee8:	460d      	mov	r5, r1
 8015eea:	b1b9      	cbz	r1, 8015f1c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8015eec:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8015ef0:	ab01      	add	r3, sp, #4
 8015ef2:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8015ef6:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8015efa:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8015efe:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8015f02:	1a12      	subs	r2, r2, r0
 8015f04:	1b89      	subs	r1, r1, r6
 8015f06:	1a38      	subs	r0, r7, r0
 8015f08:	f003 fff3 	bl	8019ef2 <_ZN8touchgfx6muldivElllRl>
 8015f0c:	4629      	mov	r1, r5
 8015f0e:	ab01      	add	r3, sp, #4
 8015f10:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8015f14:	4430      	add	r0, r6
 8015f16:	f003 ffec 	bl	8019ef2 <_ZN8touchgfx6muldivElllRl>
 8015f1a:	b285      	uxth	r5, r0
 8015f1c:	4628      	mov	r0, r5
 8015f1e:	b003      	add	sp, #12
 8015f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015f24 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8015f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015f28:	4604      	mov	r4, r0
 8015f2a:	2600      	movs	r6, #0
 8015f2c:	f7fa fb90 	bl	8010650 <_ZN8touchgfx8DrawableC1Ev>
 8015f30:	4b1b      	ldr	r3, [pc, #108]	; (8015fa0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 8015f32:	4625      	mov	r5, r4
 8015f34:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8015f38:	af02      	add	r7, sp, #8
 8015f3a:	62a6      	str	r6, [r4, #40]	; 0x28
 8015f3c:	f845 3b2c 	str.w	r3, [r5], #44
 8015f40:	4628      	mov	r0, r5
 8015f42:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8015f46:	f7fa fb83 	bl	8010650 <_ZN8touchgfx8DrawableC1Ev>
 8015f4a:	4b16      	ldr	r3, [pc, #88]	; (8015fa4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 8015f4c:	4639      	mov	r1, r7
 8015f4e:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8015f52:	4628      	mov	r0, r5
 8015f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f56:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8015f5a:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8015f5e:	f002 f9ab 	bl	80182b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015f62:	4638      	mov	r0, r7
 8015f64:	f7fa fb74 	bl	8010650 <_ZN8touchgfx8DrawableC1Ev>
 8015f68:	4b0f      	ldr	r3, [pc, #60]	; (8015fa8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8015f6a:	4632      	mov	r2, r6
 8015f6c:	4631      	mov	r1, r6
 8015f6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015f70:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8015f74:	4628      	mov	r0, r5
 8015f76:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8015f7a:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 8015f7e:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8015f82:	f7fa fbfe 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
 8015f86:	4629      	mov	r1, r5
 8015f88:	4620      	mov	r0, r4
 8015f8a:	f000 f8a7 	bl	80160dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015f8e:	4620      	mov	r0, r4
 8015f90:	4639      	mov	r1, r7
 8015f92:	f000 f8a3 	bl	80160dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015f96:	4620      	mov	r0, r4
 8015f98:	b002      	add	sp, #8
 8015f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f9e:	bf00      	nop
 8015fa0:	08027b74 	.word	0x08027b74
 8015fa4:	08028c00 	.word	0x08028c00
 8015fa8:	08027d60 	.word	0x08027d60

08015fac <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015fac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015fae:	2000      	movs	r0, #0
 8015fb0:	b12b      	cbz	r3, 8015fbe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015fb2:	b920      	cbnz	r0, 8015fbe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8015fb4:	1a5a      	subs	r2, r3, r1
 8015fb6:	699b      	ldr	r3, [r3, #24]
 8015fb8:	4250      	negs	r0, r2
 8015fba:	4150      	adcs	r0, r2
 8015fbc:	e7f8      	b.n	8015fb0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015fbe:	4770      	bx	lr

08015fc0 <_ZN8touchgfx9Container9removeAllEv>:
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015fc4:	b123      	cbz	r3, 8015fd0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8015fc6:	6999      	ldr	r1, [r3, #24]
 8015fc8:	6281      	str	r1, [r0, #40]	; 0x28
 8015fca:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8015fce:	e7f8      	b.n	8015fc2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8015fd0:	4770      	bx	lr

08015fd2 <_ZN8touchgfx9Container6unlinkEv>:
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	6283      	str	r3, [r0, #40]	; 0x28
 8015fd6:	4770      	bx	lr

08015fd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fdc:	461f      	mov	r7, r3
 8015fde:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8015fe2:	460d      	mov	r5, r1
 8015fe4:	4616      	mov	r6, r2
 8015fe6:	b103      	cbz	r3, 8015fea <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015fe8:	6038      	str	r0, [r7, #0]
 8015fea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015fec:	b314      	cbz	r4, 8016034 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015fee:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015ff2:	b1eb      	cbz	r3, 8016030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ff4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015ff8:	428d      	cmp	r5, r1
 8015ffa:	db19      	blt.n	8016030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8015ffc:	b289      	uxth	r1, r1
 8015ffe:	8923      	ldrh	r3, [r4, #8]
 8016000:	440b      	add	r3, r1
 8016002:	b21b      	sxth	r3, r3
 8016004:	429d      	cmp	r5, r3
 8016006:	da13      	bge.n	8016030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016008:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801600c:	4296      	cmp	r6, r2
 801600e:	db0f      	blt.n	8016030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016010:	b292      	uxth	r2, r2
 8016012:	8963      	ldrh	r3, [r4, #10]
 8016014:	4413      	add	r3, r2
 8016016:	b21b      	sxth	r3, r3
 8016018:	429e      	cmp	r6, r3
 801601a:	da09      	bge.n	8016030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801601c:	6823      	ldr	r3, [r4, #0]
 801601e:	1ab2      	subs	r2, r6, r2
 8016020:	1a69      	subs	r1, r5, r1
 8016022:	4620      	mov	r0, r4
 8016024:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8016028:	b212      	sxth	r2, r2
 801602a:	463b      	mov	r3, r7
 801602c:	b209      	sxth	r1, r1
 801602e:	47c0      	blx	r8
 8016030:	69a4      	ldr	r4, [r4, #24]
 8016032:	e7db      	b.n	8015fec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016038 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016038:	2200      	movs	r2, #0
 801603a:	8002      	strh	r2, [r0, #0]
 801603c:	8042      	strh	r2, [r0, #2]
 801603e:	8082      	strh	r2, [r0, #4]
 8016040:	80c2      	strh	r2, [r0, #6]
 8016042:	4770      	bx	lr

08016044 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016044:	b570      	push	{r4, r5, r6, lr}
 8016046:	460d      	mov	r5, r1
 8016048:	4616      	mov	r6, r2
 801604a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801604c:	b13c      	cbz	r4, 801605e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801604e:	6823      	ldr	r3, [r4, #0]
 8016050:	4620      	mov	r0, r4
 8016052:	4632      	mov	r2, r6
 8016054:	4629      	mov	r1, r5
 8016056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016058:	4798      	blx	r3
 801605a:	69a4      	ldr	r4, [r4, #24]
 801605c:	e7f6      	b.n	801604c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801605e:	bd70      	pop	{r4, r5, r6, pc}

08016060 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016060:	b538      	push	{r3, r4, r5, lr}
 8016062:	460d      	mov	r5, r1
 8016064:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016066:	b134      	cbz	r4, 8016076 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016068:	682b      	ldr	r3, [r5, #0]
 801606a:	4621      	mov	r1, r4
 801606c:	4628      	mov	r0, r5
 801606e:	689b      	ldr	r3, [r3, #8]
 8016070:	4798      	blx	r3
 8016072:	69a4      	ldr	r4, [r4, #24]
 8016074:	e7f7      	b.n	8016066 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016076:	bd38      	pop	{r3, r4, r5, pc}

08016078 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016078:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801607a:	b19b      	cbz	r3, 80160a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801607c:	428b      	cmp	r3, r1
 801607e:	d109      	bne.n	8016094 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016080:	699a      	ldr	r2, [r3, #24]
 8016082:	2100      	movs	r1, #0
 8016084:	6159      	str	r1, [r3, #20]
 8016086:	6282      	str	r2, [r0, #40]	; 0x28
 8016088:	b902      	cbnz	r2, 801608c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801608a:	4770      	bx	lr
 801608c:	6199      	str	r1, [r3, #24]
 801608e:	4770      	bx	lr
 8016090:	4613      	mov	r3, r2
 8016092:	b13a      	cbz	r2, 80160a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016094:	699a      	ldr	r2, [r3, #24]
 8016096:	428a      	cmp	r2, r1
 8016098:	d1fa      	bne.n	8016090 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801609a:	698a      	ldr	r2, [r1, #24]
 801609c:	619a      	str	r2, [r3, #24]
 801609e:	2300      	movs	r3, #0
 80160a0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80160a4:	4770      	bx	lr

080160a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80160a6:	b410      	push	{r4}
 80160a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80160aa:	4604      	mov	r4, r0
 80160ac:	b92b      	cbnz	r3, 80160ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80160ae:	6803      	ldr	r3, [r0, #0]
 80160b0:	4611      	mov	r1, r2
 80160b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160b8:	4718      	bx	r3
 80160ba:	b941      	cbnz	r1, 80160ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80160bc:	6193      	str	r3, [r2, #24]
 80160be:	6282      	str	r2, [r0, #40]	; 0x28
 80160c0:	6154      	str	r4, [r2, #20]
 80160c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160c6:	4770      	bx	lr
 80160c8:	4603      	mov	r3, r0
 80160ca:	2800      	cmp	r0, #0
 80160cc:	d0f9      	beq.n	80160c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80160ce:	4299      	cmp	r1, r3
 80160d0:	6998      	ldr	r0, [r3, #24]
 80160d2:	d1f9      	bne.n	80160c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80160d4:	6190      	str	r0, [r2, #24]
 80160d6:	618a      	str	r2, [r1, #24]
 80160d8:	e7f2      	b.n	80160c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080160dc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80160dc:	4288      	cmp	r0, r1
 80160de:	b508      	push	{r3, lr}
 80160e0:	d105      	bne.n	80160ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80160e2:	4b11      	ldr	r3, [pc, #68]	; (8016128 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80160e4:	2123      	movs	r1, #35	; 0x23
 80160e6:	4a11      	ldr	r2, [pc, #68]	; (801612c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80160e8:	4811      	ldr	r0, [pc, #68]	; (8016130 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80160ea:	f00f f987 	bl	80253fc <__assert_func>
 80160ee:	694b      	ldr	r3, [r1, #20]
 80160f0:	b11b      	cbz	r3, 80160fa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80160f2:	4b10      	ldr	r3, [pc, #64]	; (8016134 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80160f4:	2124      	movs	r1, #36	; 0x24
 80160f6:	4a0d      	ldr	r2, [pc, #52]	; (801612c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80160f8:	e7f6      	b.n	80160e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80160fa:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80160fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016100:	b913      	cbnz	r3, 8016108 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8016102:	6281      	str	r1, [r0, #40]	; 0x28
 8016104:	bd08      	pop	{r3, pc}
 8016106:	4613      	mov	r3, r2
 8016108:	699a      	ldr	r2, [r3, #24]
 801610a:	b12a      	cbz	r2, 8016118 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801610c:	428b      	cmp	r3, r1
 801610e:	d1fa      	bne.n	8016106 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8016110:	4b09      	ldr	r3, [pc, #36]	; (8016138 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016112:	2135      	movs	r1, #53	; 0x35
 8016114:	4a05      	ldr	r2, [pc, #20]	; (801612c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016116:	e7e7      	b.n	80160e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016118:	428b      	cmp	r3, r1
 801611a:	d103      	bne.n	8016124 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801611c:	4b06      	ldr	r3, [pc, #24]	; (8016138 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801611e:	2138      	movs	r1, #56	; 0x38
 8016120:	4a02      	ldr	r2, [pc, #8]	; (801612c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016122:	e7e1      	b.n	80160e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016124:	6199      	str	r1, [r3, #24]
 8016126:	e7ed      	b.n	8016104 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8016128:	08027c8d 	.word	0x08027c8d
 801612c:	08027de4 	.word	0x08027de4
 8016130:	08027cb9 	.word	0x08027cb9
 8016134:	08027cec 	.word	0x08027cec
 8016138:	08027d22 	.word	0x08027d22

0801613c <_ZN8touchgfx4RectaNERKS0_>:
 801613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016140:	888b      	ldrh	r3, [r1, #4]
 8016142:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016146:	f9b0 a000 	ldrsh.w	sl, [r0]
 801614a:	444b      	add	r3, r9
 801614c:	b29b      	uxth	r3, r3
 801614e:	fa0f f883 	sxth.w	r8, r3
 8016152:	45c2      	cmp	sl, r8
 8016154:	da30      	bge.n	80161b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8016156:	8882      	ldrh	r2, [r0, #4]
 8016158:	4452      	add	r2, sl
 801615a:	b292      	uxth	r2, r2
 801615c:	fa0f fe82 	sxth.w	lr, r2
 8016160:	45f1      	cmp	r9, lr
 8016162:	da29      	bge.n	80161b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8016164:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016168:	88cc      	ldrh	r4, [r1, #6]
 801616a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801616e:	442c      	add	r4, r5
 8016170:	b224      	sxth	r4, r4
 8016172:	42a6      	cmp	r6, r4
 8016174:	da20      	bge.n	80161b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8016176:	88c7      	ldrh	r7, [r0, #6]
 8016178:	4437      	add	r7, r6
 801617a:	b2bf      	uxth	r7, r7
 801617c:	fa0f fc87 	sxth.w	ip, r7
 8016180:	4565      	cmp	r5, ip
 8016182:	da19      	bge.n	80161b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8016184:	45ca      	cmp	sl, r9
 8016186:	4654      	mov	r4, sl
 8016188:	bfb8      	it	lt
 801618a:	464c      	movlt	r4, r9
 801618c:	42b5      	cmp	r5, r6
 801618e:	bfb8      	it	lt
 8016190:	4635      	movlt	r5, r6
 8016192:	45f0      	cmp	r8, lr
 8016194:	bfc8      	it	gt
 8016196:	4613      	movgt	r3, r2
 8016198:	1b1b      	subs	r3, r3, r4
 801619a:	8083      	strh	r3, [r0, #4]
 801619c:	88ca      	ldrh	r2, [r1, #6]
 801619e:	884b      	ldrh	r3, [r1, #2]
 80161a0:	8004      	strh	r4, [r0, #0]
 80161a2:	4413      	add	r3, r2
 80161a4:	8045      	strh	r5, [r0, #2]
 80161a6:	b29b      	uxth	r3, r3
 80161a8:	b21a      	sxth	r2, r3
 80161aa:	4594      	cmp	ip, r2
 80161ac:	bfb8      	it	lt
 80161ae:	463b      	movlt	r3, r7
 80161b0:	1b5b      	subs	r3, r3, r5
 80161b2:	80c3      	strh	r3, [r0, #6]
 80161b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161b8:	2300      	movs	r3, #0
 80161ba:	8003      	strh	r3, [r0, #0]
 80161bc:	8043      	strh	r3, [r0, #2]
 80161be:	8083      	strh	r3, [r0, #4]
 80161c0:	80c3      	strh	r3, [r0, #6]
 80161c2:	e7f7      	b.n	80161b4 <_ZN8touchgfx4RectaNERKS0_+0x78>

080161c4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80161c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80161c8:	b12b      	cbz	r3, 80161d6 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80161ca:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80161ce:	fab0 f080 	clz	r0, r0
 80161d2:	0940      	lsrs	r0, r0, #5
 80161d4:	4770      	bx	lr
 80161d6:	2001      	movs	r0, #1
 80161d8:	4770      	bx	lr

080161da <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80161da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161de:	2300      	movs	r3, #0
 80161e0:	4604      	mov	r4, r0
 80161e2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80161e4:	8003      	strh	r3, [r0, #0]
 80161e6:	8043      	strh	r3, [r0, #2]
 80161e8:	8083      	strh	r3, [r0, #4]
 80161ea:	80c3      	strh	r3, [r0, #6]
 80161ec:	2d00      	cmp	r5, #0
 80161ee:	d040      	beq.n	8016272 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80161f0:	1d28      	adds	r0, r5, #4
 80161f2:	f7ff ffe7 	bl	80161c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80161f6:	b988      	cbnz	r0, 801621c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80161f8:	4620      	mov	r0, r4
 80161fa:	f7ff ffe3 	bl	80161c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80161fe:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016202:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016206:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801620a:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801620e:	b138      	cbz	r0, 8016220 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016210:	8022      	strh	r2, [r4, #0]
 8016212:	8063      	strh	r3, [r4, #2]
 8016214:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016218:	f8a4 c006 	strh.w	ip, [r4, #6]
 801621c:	69ad      	ldr	r5, [r5, #24]
 801621e:	e7e5      	b.n	80161ec <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016220:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016224:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016228:	4290      	cmp	r0, r2
 801622a:	4607      	mov	r7, r0
 801622c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016230:	460e      	mov	r6, r1
 8016232:	bfa8      	it	ge
 8016234:	4617      	movge	r7, r2
 8016236:	4299      	cmp	r1, r3
 8016238:	4472      	add	r2, lr
 801623a:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801623e:	bfa8      	it	ge
 8016240:	461e      	movge	r6, r3
 8016242:	4440      	add	r0, r8
 8016244:	4471      	add	r1, lr
 8016246:	4463      	add	r3, ip
 8016248:	b200      	sxth	r0, r0
 801624a:	8027      	strh	r7, [r4, #0]
 801624c:	b212      	sxth	r2, r2
 801624e:	8066      	strh	r6, [r4, #2]
 8016250:	b209      	sxth	r1, r1
 8016252:	b21b      	sxth	r3, r3
 8016254:	4290      	cmp	r0, r2
 8016256:	bfac      	ite	ge
 8016258:	ebc7 0200 	rsbge	r2, r7, r0
 801625c:	ebc7 0202 	rsblt	r2, r7, r2
 8016260:	4299      	cmp	r1, r3
 8016262:	bfac      	ite	ge
 8016264:	ebc6 0301 	rsbge	r3, r6, r1
 8016268:	ebc6 0303 	rsblt	r3, r6, r3
 801626c:	80a2      	strh	r2, [r4, #4]
 801626e:	80e3      	strh	r3, [r4, #6]
 8016270:	e7d4      	b.n	801621c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016272:	4620      	mov	r0, r4
 8016274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016278 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016278:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801627c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016280:	b383      	cbz	r3, 80162e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016282:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016284:	b374      	cbz	r4, 80162e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016286:	f9b1 5000 	ldrsh.w	r5, [r1]
 801628a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801628e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016292:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016296:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801629a:	b303      	cbz	r3, 80162de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801629c:	4668      	mov	r0, sp
 801629e:	1d21      	adds	r1, r4, #4
 80162a0:	f8ad 5000 	strh.w	r5, [sp]
 80162a4:	f8ad 6002 	strh.w	r6, [sp, #2]
 80162a8:	f8ad 7004 	strh.w	r7, [sp, #4]
 80162ac:	f8ad 8006 	strh.w	r8, [sp, #6]
 80162b0:	f7ff ff44 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 80162b4:	4668      	mov	r0, sp
 80162b6:	f7ff ff85 	bl	80161c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80162ba:	b980      	cbnz	r0, 80162de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80162bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80162c0:	4669      	mov	r1, sp
 80162c2:	88a2      	ldrh	r2, [r4, #4]
 80162c4:	4620      	mov	r0, r4
 80162c6:	1a9b      	subs	r3, r3, r2
 80162c8:	88e2      	ldrh	r2, [r4, #6]
 80162ca:	f8ad 3000 	strh.w	r3, [sp]
 80162ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80162d2:	1a9b      	subs	r3, r3, r2
 80162d4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80162d8:	6823      	ldr	r3, [r4, #0]
 80162da:	689b      	ldr	r3, [r3, #8]
 80162dc:	4798      	blx	r3
 80162de:	69a4      	ldr	r4, [r4, #24]
 80162e0:	2c00      	cmp	r4, #0
 80162e2:	d1d8      	bne.n	8016296 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80162e4:	b002      	add	sp, #8
 80162e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80162ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80162ec:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80162f0:	460d      	mov	r5, r1
 80162f2:	4616      	mov	r6, r2
 80162f4:	b323      	cbz	r3, 8016340 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80162f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80162f8:	b314      	cbz	r4, 8016340 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80162fa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80162fe:	b1eb      	cbz	r3, 801633c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016300:	6828      	ldr	r0, [r5, #0]
 8016302:	466b      	mov	r3, sp
 8016304:	6869      	ldr	r1, [r5, #4]
 8016306:	c303      	stmia	r3!, {r0, r1}
 8016308:	4668      	mov	r0, sp
 801630a:	1d21      	adds	r1, r4, #4
 801630c:	f7ff ff16 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 8016310:	4668      	mov	r0, sp
 8016312:	f7ff ff57 	bl	80161c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016316:	b988      	cbnz	r0, 801633c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016318:	f8bd 3000 	ldrh.w	r3, [sp]
 801631c:	4669      	mov	r1, sp
 801631e:	88a2      	ldrh	r2, [r4, #4]
 8016320:	4620      	mov	r0, r4
 8016322:	1a9b      	subs	r3, r3, r2
 8016324:	88e2      	ldrh	r2, [r4, #6]
 8016326:	f8ad 3000 	strh.w	r3, [sp]
 801632a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801632e:	1a9b      	subs	r3, r3, r2
 8016330:	4632      	mov	r2, r6
 8016332:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016336:	6823      	ldr	r3, [r4, #0]
 8016338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801633a:	4798      	blx	r3
 801633c:	69a4      	ldr	r4, [r4, #24]
 801633e:	e7db      	b.n	80162f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8016340:	b002      	add	sp, #8
 8016342:	bd70      	pop	{r4, r5, r6, pc}

08016344 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8016344:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016348:	4770      	bx	lr

0801634a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801634a:	6803      	ldr	r3, [r0, #0]
 801634c:	b513      	push	{r0, r1, r4, lr}
 801634e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8016352:	2300      	movs	r3, #0
 8016354:	e9cd 3300 	strd	r3, r3, [sp]
 8016358:	466b      	mov	r3, sp
 801635a:	47a0      	blx	r4
 801635c:	b002      	add	sp, #8
 801635e:	bd10      	pop	{r4, pc}

08016360 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016360:	2301      	movs	r3, #1
 8016362:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016366:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801636a:	4770      	bx	lr

0801636c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801636c:	2301      	movs	r3, #1
 801636e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016372:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016376:	4770      	bx	lr

08016378 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016378:	6843      	ldr	r3, [r0, #4]
 801637a:	2201      	movs	r2, #1
 801637c:	725a      	strb	r2, [r3, #9]
 801637e:	6840      	ldr	r0, [r0, #4]
 8016380:	6803      	ldr	r3, [r0, #0]
 8016382:	691b      	ldr	r3, [r3, #16]
 8016384:	4718      	bx	r3

08016386 <_ZN8touchgfx3HAL8flushDMAEv>:
 8016386:	6840      	ldr	r0, [r0, #4]
 8016388:	6803      	ldr	r3, [r0, #0]
 801638a:	689b      	ldr	r3, [r3, #8]
 801638c:	4718      	bx	r3
	...

08016390 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016390:	4b04      	ldr	r3, [pc, #16]	; (80163a4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8016392:	781b      	ldrb	r3, [r3, #0]
 8016394:	b123      	cbz	r3, 80163a0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8016396:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801639a:	f080 0001 	eor.w	r0, r0, #1
 801639e:	4770      	bx	lr
 80163a0:	2001      	movs	r0, #1
 80163a2:	4770      	bx	lr
 80163a4:	2000c562 	.word	0x2000c562

080163a8 <_ZN8touchgfx3HAL8endFrameEv>:
 80163a8:	b510      	push	{r4, lr}
 80163aa:	4604      	mov	r4, r0
 80163ac:	6840      	ldr	r0, [r0, #4]
 80163ae:	6803      	ldr	r3, [r0, #0]
 80163b0:	689b      	ldr	r3, [r3, #8]
 80163b2:	4798      	blx	r3
 80163b4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80163b8:	b113      	cbz	r3, 80163c0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80163ba:	2301      	movs	r3, #1
 80163bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80163c0:	bd10      	pop	{r4, pc}

080163c2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80163c2:	b508      	push	{r3, lr}
 80163c4:	6803      	ldr	r3, [r0, #0]
 80163c6:	4604      	mov	r4, r0
 80163c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80163ca:	4798      	blx	r3
 80163cc:	6823      	ldr	r3, [r4, #0]
 80163ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80163d0:	4620      	mov	r0, r4
 80163d2:	4798      	blx	r3
 80163d4:	f7fd fec2 	bl	801415c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80163d8:	6823      	ldr	r3, [r4, #0]
 80163da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163dc:	e7f8      	b.n	80163d0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080163e0 <_ZN8touchgfx3HAL4tickEv>:
 80163e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80163e2:	6803      	ldr	r3, [r0, #0]
 80163e4:	4604      	mov	r4, r0
 80163e6:	4d5c      	ldr	r5, [pc, #368]	; (8016558 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80163e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80163ec:	4798      	blx	r3
 80163ee:	2800      	cmp	r0, #0
 80163f0:	f000 8097 	beq.w	8016522 <_ZN8touchgfx3HAL4tickEv+0x142>
 80163f4:	2001      	movs	r0, #1
 80163f6:	2600      	movs	r6, #0
 80163f8:	f7fd fbc2 	bl	8013b80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80163fc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8016400:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016404:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016408:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801640c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016410:	b133      	cbz	r3, 8016420 <_ZN8touchgfx3HAL4tickEv+0x40>
 8016412:	6823      	ldr	r3, [r4, #0]
 8016414:	4620      	mov	r0, r4
 8016416:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801641a:	4798      	blx	r3
 801641c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8016420:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016424:	2601      	movs	r6, #1
 8016426:	6862      	ldr	r2, [r4, #4]
 8016428:	f083 0301 	eor.w	r3, r3, #1
 801642c:	702e      	strb	r6, [r5, #0]
 801642e:	7253      	strb	r3, [r2, #9]
 8016430:	f002 fff0 	bl	8019414 <_ZN8touchgfx11Application11getInstanceEv>
 8016434:	6803      	ldr	r3, [r0, #0]
 8016436:	4631      	mov	r1, r6
 8016438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801643a:	4798      	blx	r3
 801643c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016440:	b90b      	cbnz	r3, 8016446 <_ZN8touchgfx3HAL4tickEv+0x66>
 8016442:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016446:	f002 ffe5 	bl	8019414 <_ZN8touchgfx11Application11getInstanceEv>
 801644a:	6803      	ldr	r3, [r0, #0]
 801644c:	695b      	ldr	r3, [r3, #20]
 801644e:	4798      	blx	r3
 8016450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016452:	6803      	ldr	r3, [r0, #0]
 8016454:	691b      	ldr	r3, [r3, #16]
 8016456:	4798      	blx	r3
 8016458:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801645c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8016460:	3b01      	subs	r3, #1
 8016462:	b2db      	uxtb	r3, r3
 8016464:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016468:	b10a      	cbz	r2, 801646e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801646a:	2b00      	cmp	r3, #0
 801646c:	d1eb      	bne.n	8016446 <_ZN8touchgfx3HAL4tickEv+0x66>
 801646e:	4a3b      	ldr	r2, [pc, #236]	; (801655c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016470:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016474:	7813      	ldrb	r3, [r2, #0]
 8016476:	3301      	adds	r3, #1
 8016478:	b25b      	sxtb	r3, r3
 801647a:	4299      	cmp	r1, r3
 801647c:	7013      	strb	r3, [r2, #0]
 801647e:	dc10      	bgt.n	80164a2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016480:	2300      	movs	r3, #0
 8016482:	68e0      	ldr	r0, [r4, #12]
 8016484:	a902      	add	r1, sp, #8
 8016486:	7013      	strb	r3, [r2, #0]
 8016488:	aa03      	add	r2, sp, #12
 801648a:	6803      	ldr	r3, [r0, #0]
 801648c:	68db      	ldr	r3, [r3, #12]
 801648e:	4798      	blx	r3
 8016490:	6823      	ldr	r3, [r4, #0]
 8016492:	2800      	cmp	r0, #0
 8016494:	d051      	beq.n	801653a <_ZN8touchgfx3HAL4tickEv+0x15a>
 8016496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801649a:	4620      	mov	r0, r4
 801649c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80164a0:	4798      	blx	r3
 80164a2:	2300      	movs	r3, #0
 80164a4:	6960      	ldr	r0, [r4, #20]
 80164a6:	f88d 3007 	strb.w	r3, [sp, #7]
 80164aa:	b158      	cbz	r0, 80164c4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80164ac:	6803      	ldr	r3, [r0, #0]
 80164ae:	f10d 0107 	add.w	r1, sp, #7
 80164b2:	68db      	ldr	r3, [r3, #12]
 80164b4:	4798      	blx	r3
 80164b6:	b128      	cbz	r0, 80164c4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80164b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80164ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80164be:	6803      	ldr	r3, [r0, #0]
 80164c0:	68db      	ldr	r3, [r3, #12]
 80164c2:	4798      	blx	r3
 80164c4:	f104 001c 	add.w	r0, r4, #28
 80164c8:	f00d facc 	bl	8023a64 <_ZN8touchgfx8Gestures4tickEv>
 80164cc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80164d0:	b30b      	cbz	r3, 8016516 <_ZN8touchgfx3HAL4tickEv+0x136>
 80164d2:	6920      	ldr	r0, [r4, #16]
 80164d4:	6803      	ldr	r3, [r0, #0]
 80164d6:	691b      	ldr	r3, [r3, #16]
 80164d8:	4798      	blx	r3
 80164da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80164dc:	4606      	mov	r6, r0
 80164de:	b903      	cbnz	r3, 80164e2 <_ZN8touchgfx3HAL4tickEv+0x102>
 80164e0:	6720      	str	r0, [r4, #112]	; 0x70
 80164e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80164e4:	4a1e      	ldr	r2, [pc, #120]	; (8016560 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80164e6:	1af3      	subs	r3, r6, r3
 80164e8:	4293      	cmp	r3, r2
 80164ea:	d914      	bls.n	8016516 <_ZN8touchgfx3HAL4tickEv+0x136>
 80164ec:	6920      	ldr	r0, [r4, #16]
 80164ee:	6803      	ldr	r3, [r0, #0]
 80164f0:	699b      	ldr	r3, [r3, #24]
 80164f2:	4798      	blx	r3
 80164f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80164f6:	2264      	movs	r2, #100	; 0x64
 80164f8:	1af3      	subs	r3, r6, r3
 80164fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80164fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8016502:	2800      	cmp	r0, #0
 8016504:	dc1e      	bgt.n	8016544 <_ZN8touchgfx3HAL4tickEv+0x164>
 8016506:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801650a:	6920      	ldr	r0, [r4, #16]
 801650c:	2100      	movs	r1, #0
 801650e:	6803      	ldr	r3, [r0, #0]
 8016510:	69db      	ldr	r3, [r3, #28]
 8016512:	4798      	blx	r3
 8016514:	6726      	str	r6, [r4, #112]	; 0x70
 8016516:	f002 ff7d 	bl	8019414 <_ZN8touchgfx11Application11getInstanceEv>
 801651a:	6803      	ldr	r3, [r0, #0]
 801651c:	2100      	movs	r1, #0
 801651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016520:	4798      	blx	r3
 8016522:	6823      	ldr	r3, [r4, #0]
 8016524:	4620      	mov	r0, r4
 8016526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801652a:	4798      	blx	r3
 801652c:	2001      	movs	r0, #1
 801652e:	f7fd fb32 	bl	8013b96 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016532:	2300      	movs	r3, #0
 8016534:	702b      	strb	r3, [r5, #0]
 8016536:	b004      	add	sp, #16
 8016538:	bd70      	pop	{r4, r5, r6, pc}
 801653a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801653e:	4620      	mov	r0, r4
 8016540:	4798      	blx	r3
 8016542:	e7ae      	b.n	80164a2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016544:	2863      	cmp	r0, #99	; 0x63
 8016546:	bfcb      	itete	gt
 8016548:	2300      	movgt	r3, #0
 801654a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801654e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8016552:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016556:	e7d8      	b.n	801650a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8016558:	2000c568 	.word	0x2000c568
 801655c:	2000c569 	.word	0x2000c569
 8016560:	05f5e100 	.word	0x05f5e100

08016564 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016564:	f7fd bd9a 	b.w	801409c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016568 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016568:	6581      	str	r1, [r0, #88]	; 0x58
 801656a:	301c      	adds	r0, #28
 801656c:	f00d ba78 	b.w	8023a60 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016570 <_ZN8touchgfx3HAL5touchEll>:
 8016570:	b530      	push	{r4, r5, lr}
 8016572:	b087      	sub	sp, #28
 8016574:	4604      	mov	r4, r0
 8016576:	a804      	add	r0, sp, #16
 8016578:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801657c:	f002 fd4e 	bl	801901c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016580:	9b04      	ldr	r3, [sp, #16]
 8016582:	a906      	add	r1, sp, #24
 8016584:	a803      	add	r0, sp, #12
 8016586:	f8ad 300c 	strh.w	r3, [sp, #12]
 801658a:	9b05      	ldr	r3, [sp, #20]
 801658c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016590:	f002 fd92 	bl	80190b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016594:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016598:	f104 001c 	add.w	r0, r4, #28
 801659c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80165a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80165a4:	b189      	cbz	r1, 80165ca <_ZN8touchgfx3HAL5touchEll+0x5a>
 80165a6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80165aa:	9300      	str	r3, [sp, #0]
 80165ac:	4613      	mov	r3, r2
 80165ae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80165b2:	462a      	mov	r2, r5
 80165b4:	f00d fa64 	bl	8023a80 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80165b8:	b128      	cbz	r0, 80165c6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80165ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80165be:	65e3      	str	r3, [r4, #92]	; 0x5c
 80165c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80165c4:	6623      	str	r3, [r4, #96]	; 0x60
 80165c6:	b007      	add	sp, #28
 80165c8:	bd30      	pop	{r4, r5, pc}
 80165ca:	f00d fa9d 	bl	8023b08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80165ce:	2301      	movs	r3, #1
 80165d0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80165d4:	e7f1      	b.n	80165ba <_ZN8touchgfx3HAL5touchEll+0x4a>

080165d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80165d6:	b570      	push	{r4, r5, r6, lr}
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d050      	beq.n	801667e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80165dc:	ea81 0002 	eor.w	r0, r1, r2
 80165e0:	07c6      	lsls	r6, r0, #31
 80165e2:	d508      	bpl.n	80165f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80165e4:	3a01      	subs	r2, #1
 80165e6:	18cc      	adds	r4, r1, r3
 80165e8:	42a1      	cmp	r1, r4
 80165ea:	d048      	beq.n	801667e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80165ec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80165f0:	f801 0b01 	strb.w	r0, [r1], #1
 80165f4:	e7f8      	b.n	80165e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80165f6:	07d5      	lsls	r5, r2, #31
 80165f8:	bf42      	ittt	mi
 80165fa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80165fe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016602:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016606:	2b01      	cmp	r3, #1
 8016608:	d915      	bls.n	8016636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801660a:	ea82 0001 	eor.w	r0, r2, r1
 801660e:	0784      	lsls	r4, r0, #30
 8016610:	d02d      	beq.n	801666e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8016612:	1e94      	subs	r4, r2, #2
 8016614:	4608      	mov	r0, r1
 8016616:	18ce      	adds	r6, r1, r3
 8016618:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801661c:	f820 5b02 	strh.w	r5, [r0], #2
 8016620:	1a35      	subs	r5, r6, r0
 8016622:	2d01      	cmp	r5, #1
 8016624:	d8f8      	bhi.n	8016618 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8016626:	1e98      	subs	r0, r3, #2
 8016628:	f003 0301 	and.w	r3, r3, #1
 801662c:	f020 0001 	bic.w	r0, r0, #1
 8016630:	3002      	adds	r0, #2
 8016632:	4401      	add	r1, r0
 8016634:	4402      	add	r2, r0
 8016636:	1f14      	subs	r4, r2, #4
 8016638:	4608      	mov	r0, r1
 801663a:	18ce      	adds	r6, r1, r3
 801663c:	1a35      	subs	r5, r6, r0
 801663e:	2d03      	cmp	r5, #3
 8016640:	d810      	bhi.n	8016664 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8016642:	089c      	lsrs	r4, r3, #2
 8016644:	00a0      	lsls	r0, r4, #2
 8016646:	4401      	add	r1, r0
 8016648:	3801      	subs	r0, #1
 801664a:	4402      	add	r2, r0
 801664c:	f06f 0003 	mvn.w	r0, #3
 8016650:	fb00 3404 	mla	r4, r0, r4, r3
 8016654:	440c      	add	r4, r1
 8016656:	42a1      	cmp	r1, r4
 8016658:	d011      	beq.n	801667e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801665a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801665e:	f801 3b01 	strb.w	r3, [r1], #1
 8016662:	e7f8      	b.n	8016656 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8016664:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8016668:	f840 5b04 	str.w	r5, [r0], #4
 801666c:	e7e6      	b.n	801663c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801666e:	0790      	lsls	r0, r2, #30
 8016670:	d0e1      	beq.n	8016636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016672:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016676:	3b02      	subs	r3, #2
 8016678:	f821 0b02 	strh.w	r0, [r1], #2
 801667c:	e7db      	b.n	8016636 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801667e:	2001      	movs	r0, #1
 8016680:	bd70      	pop	{r4, r5, r6, pc}

08016682 <_ZN8touchgfx3HAL7noTouchEv>:
 8016682:	b510      	push	{r4, lr}
 8016684:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016688:	4604      	mov	r4, r0
 801668a:	b153      	cbz	r3, 80166a2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801668c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016690:	2101      	movs	r1, #1
 8016692:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016696:	301c      	adds	r0, #28
 8016698:	f00d fa36 	bl	8023b08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801669c:	2300      	movs	r3, #0
 801669e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80166a2:	bd10      	pop	{r4, pc}

080166a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80166a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166a8:	4605      	mov	r5, r0
 80166aa:	6980      	ldr	r0, [r0, #24]
 80166ac:	b085      	sub	sp, #20
 80166ae:	460f      	mov	r7, r1
 80166b0:	4690      	mov	r8, r2
 80166b2:	4699      	mov	r9, r3
 80166b4:	b930      	cbnz	r0, 80166c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80166b6:	4b1f      	ldr	r3, [pc, #124]	; (8016734 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80166b8:	f44f 7198 	mov.w	r1, #304	; 0x130
 80166bc:	4a1e      	ldr	r2, [pc, #120]	; (8016738 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80166be:	481f      	ldr	r0, [pc, #124]	; (801673c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80166c0:	f00e fe9c 	bl	80253fc <__assert_func>
 80166c4:	ac04      	add	r4, sp, #16
 80166c6:	2600      	movs	r6, #0
 80166c8:	f844 6d04 	str.w	r6, [r4, #-4]!
 80166cc:	6806      	ldr	r6, [r0, #0]
 80166ce:	9401      	str	r4, [sp, #4]
 80166d0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80166d4:	9400      	str	r4, [sp, #0]
 80166d6:	6834      	ldr	r4, [r6, #0]
 80166d8:	47a0      	blx	r4
 80166da:	4c19      	ldr	r4, [pc, #100]	; (8016740 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80166dc:	4606      	mov	r6, r0
 80166de:	f8a4 9000 	strh.w	r9, [r4]
 80166e2:	f7f9 fb51 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 80166e6:	6803      	ldr	r3, [r0, #0]
 80166e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166ea:	4798      	blx	r3
 80166ec:	280c      	cmp	r0, #12
 80166ee:	d80f      	bhi.n	8016710 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80166f0:	e8df f000 	tbb	[pc, r0]
 80166f4:	1b1b1207 	.word	0x1b1b1207
 80166f8:	1b1b1b1b 	.word	0x1b1b1b1b
 80166fc:	1b1b1b1b 	.word	0x1b1b1b1b
 8016700:	1b          	.byte	0x1b
 8016701:	00          	.byte	0x00
 8016702:	8823      	ldrh	r3, [r4, #0]
 8016704:	fb08 7203 	mla	r2, r8, r3, r7
 8016708:	9b03      	ldr	r3, [sp, #12]
 801670a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801670e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016710:	4630      	mov	r0, r6
 8016712:	b005      	add	sp, #20
 8016714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016718:	8822      	ldrh	r2, [r4, #0]
 801671a:	9b03      	ldr	r3, [sp, #12]
 801671c:	fb08 7202 	mla	r2, r8, r2, r7
 8016720:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016724:	1a9a      	subs	r2, r3, r2
 8016726:	63ea      	str	r2, [r5, #60]	; 0x3c
 8016728:	e7f2      	b.n	8016710 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801672a:	4b06      	ldr	r3, [pc, #24]	; (8016744 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801672c:	f240 114d 	movw	r1, #333	; 0x14d
 8016730:	4a01      	ldr	r2, [pc, #4]	; (8016738 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016732:	e7c4      	b.n	80166be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016734:	08027e8d 	.word	0x08027e8d
 8016738:	0802819e 	.word	0x0802819e
 801673c:	08027ed2 	.word	0x08027ed2
 8016740:	2000c55e 	.word	0x2000c55e
 8016744:	08027ef8 	.word	0x08027ef8

08016748 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8016748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801674c:	4698      	mov	r8, r3
 801674e:	6803      	ldr	r3, [r0, #0]
 8016750:	b087      	sub	sp, #28
 8016752:	460e      	mov	r6, r1
 8016754:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8016756:	4617      	mov	r7, r2
 8016758:	4b0d      	ldr	r3, [pc, #52]	; (8016790 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801675a:	4604      	mov	r4, r0
 801675c:	f8b3 9000 	ldrh.w	r9, [r3]
 8016760:	f7f9 fb12 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8016764:	6803      	ldr	r3, [r0, #0]
 8016766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016768:	4798      	blx	r3
 801676a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801676e:	463a      	mov	r2, r7
 8016770:	4631      	mov	r1, r6
 8016772:	9302      	str	r3, [sp, #8]
 8016774:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016778:	9301      	str	r3, [sp, #4]
 801677a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801677e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8016782:	9300      	str	r3, [sp, #0]
 8016784:	4620      	mov	r0, r4
 8016786:	4643      	mov	r3, r8
 8016788:	47a8      	blx	r5
 801678a:	b007      	add	sp, #28
 801678c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016790:	2000c55e 	.word	0x2000c55e

08016794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016798:	4606      	mov	r6, r0
 801679a:	b089      	sub	sp, #36	; 0x24
 801679c:	4610      	mov	r0, r2
 801679e:	460c      	mov	r4, r1
 80167a0:	4691      	mov	r9, r2
 80167a2:	4698      	mov	r8, r3
 80167a4:	f005 f818 	bl	801b7d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80167a8:	2800      	cmp	r0, #0
 80167aa:	f000 8092 	beq.w	80168d2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 80167ae:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80168ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80167b2:	ad08      	add	r5, sp, #32
 80167b4:	f8df b138 	ldr.w	fp, [pc, #312]	; 80168f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80167b8:	f8da 0000 	ldr.w	r0, [sl]
 80167bc:	4f4a      	ldr	r7, [pc, #296]	; (80168e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80167be:	6802      	ldr	r2, [r0, #0]
 80167c0:	6a12      	ldr	r2, [r2, #32]
 80167c2:	4790      	blx	r2
 80167c4:	f8da 0000 	ldr.w	r0, [sl]
 80167c8:	6802      	ldr	r2, [r0, #0]
 80167ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80167cc:	4790      	blx	r2
 80167ce:	f8bb 3000 	ldrh.w	r3, [fp]
 80167d2:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80167d6:	4628      	mov	r0, r5
 80167d8:	9300      	str	r3, [sp, #0]
 80167da:	883b      	ldrh	r3, [r7, #0]
 80167dc:	9301      	str	r3, [sp, #4]
 80167de:	f005 f8bb 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80167e2:	f8ab 0000 	strh.w	r0, [fp]
 80167e6:	4628      	mov	r0, r5
 80167e8:	f005 f8f0 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80167ec:	f8da b000 	ldr.w	fp, [sl]
 80167f0:	8038      	strh	r0, [r7, #0]
 80167f2:	4648      	mov	r0, r9
 80167f4:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80167f8:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80167fc:	9302      	str	r3, [sp, #8]
 80167fe:	f004 ffeb 	bl	801b7d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016802:	f8da 2000 	ldr.w	r2, [sl]
 8016806:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801680a:	63d0      	str	r0, [r2, #60]	; 0x3c
 801680c:	4620      	mov	r0, r4
 801680e:	6822      	ldr	r2, [r4, #0]
 8016810:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8016814:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8016816:	2200      	movs	r2, #0
 8016818:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801681c:	4611      	mov	r1, r2
 801681e:	4798      	blx	r3
 8016820:	2201      	movs	r2, #1
 8016822:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8016826:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801682a:	1d22      	adds	r2, r4, #4
 801682c:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8016830:	2900      	cmp	r1, #0
 8016832:	d051      	beq.n	80168d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8016834:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8016838:	2900      	cmp	r1, #0
 801683a:	d04d      	beq.n	80168d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801683c:	6810      	ldr	r0, [r2, #0]
 801683e:	f10d 0c18 	add.w	ip, sp, #24
 8016842:	6851      	ldr	r1, [r2, #4]
 8016844:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016848:	4641      	mov	r1, r8
 801684a:	a806      	add	r0, sp, #24
 801684c:	f7ff fc76 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 8016850:	4628      	mov	r0, r5
 8016852:	f005 fa0d 	bl	801bc70 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016856:	4680      	mov	r8, r0
 8016858:	f7f9 fa96 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 801685c:	6802      	ldr	r2, [r0, #0]
 801685e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016860:	4790      	blx	r2
 8016862:	4580      	cmp	r8, r0
 8016864:	d03d      	beq.n	80168e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8016866:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016868:	b150      	cbz	r0, 8016880 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801686a:	4628      	mov	r0, r5
 801686c:	f005 fa00 	bl	801bc70 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016870:	4605      	mov	r5, r0
 8016872:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016874:	6803      	ldr	r3, [r0, #0]
 8016876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016878:	4798      	blx	r3
 801687a:	1a2b      	subs	r3, r5, r0
 801687c:	4258      	negs	r0, r3
 801687e:	4158      	adcs	r0, r3
 8016880:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8016884:	2500      	movs	r5, #0
 8016886:	6963      	ldr	r3, [r4, #20]
 8016888:	4620      	mov	r0, r4
 801688a:	6822      	ldr	r2, [r4, #0]
 801688c:	a906      	add	r1, sp, #24
 801688e:	6165      	str	r5, [r4, #20]
 8016890:	9303      	str	r3, [sp, #12]
 8016892:	6892      	ldr	r2, [r2, #8]
 8016894:	4790      	blx	r2
 8016896:	9b03      	ldr	r3, [sp, #12]
 8016898:	4620      	mov	r0, r4
 801689a:	4652      	mov	r2, sl
 801689c:	6163      	str	r3, [r4, #20]
 801689e:	4649      	mov	r1, r9
 80168a0:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 80168a4:	6823      	ldr	r3, [r4, #0]
 80168a6:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 80168aa:	4c10      	ldr	r4, [pc, #64]	; (80168ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80168ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168ae:	4798      	blx	r3
 80168b0:	6820      	ldr	r0, [r4, #0]
 80168b2:	9b02      	ldr	r3, [sp, #8]
 80168b4:	9a00      	ldr	r2, [sp, #0]
 80168b6:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80168ba:	4b0d      	ldr	r3, [pc, #52]	; (80168f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80168bc:	801a      	strh	r2, [r3, #0]
 80168be:	4b0a      	ldr	r3, [pc, #40]	; (80168e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80168c0:	9a01      	ldr	r2, [sp, #4]
 80168c2:	801a      	strh	r2, [r3, #0]
 80168c4:	6803      	ldr	r3, [r0, #0]
 80168c6:	6a1b      	ldr	r3, [r3, #32]
 80168c8:	4798      	blx	r3
 80168ca:	6820      	ldr	r0, [r4, #0]
 80168cc:	6803      	ldr	r3, [r0, #0]
 80168ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d0:	4798      	blx	r3
 80168d2:	b009      	add	sp, #36	; 0x24
 80168d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168d8:	ab06      	add	r3, sp, #24
 80168da:	6810      	ldr	r0, [r2, #0]
 80168dc:	6851      	ldr	r1, [r2, #4]
 80168de:	c303      	stmia	r3!, {r0, r1}
 80168e0:	e7b6      	b.n	8016850 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80168e2:	2000      	movs	r0, #0
 80168e4:	e7cc      	b.n	8016880 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80168e6:	bf00      	nop
 80168e8:	2000c560 	.word	0x2000c560
 80168ec:	2000c564 	.word	0x2000c564
 80168f0:	2000c55e 	.word	0x2000c55e

080168f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80168f4:	4b07      	ldr	r3, [pc, #28]	; (8016914 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80168f6:	b510      	push	{r4, lr}
 80168f8:	781b      	ldrb	r3, [r3, #0]
 80168fa:	4604      	mov	r4, r0
 80168fc:	b13b      	cbz	r3, 801690e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80168fe:	6803      	ldr	r3, [r0, #0]
 8016900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016902:	4798      	blx	r3
 8016904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016906:	4283      	cmp	r3, r0
 8016908:	d101      	bne.n	801690e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801690a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801690c:	bd10      	pop	{r4, pc}
 801690e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016910:	e7fc      	b.n	801690c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8016912:	bf00      	nop
 8016914:	2000c562 	.word	0x2000c562

08016918 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016918:	4b0b      	ldr	r3, [pc, #44]	; (8016948 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801691a:	b510      	push	{r4, lr}
 801691c:	781b      	ldrb	r3, [r3, #0]
 801691e:	4604      	mov	r4, r0
 8016920:	b95b      	cbnz	r3, 801693a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016922:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016926:	2b02      	cmp	r3, #2
 8016928:	d007      	beq.n	801693a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801692a:	6840      	ldr	r0, [r0, #4]
 801692c:	f000 fbc8 	bl	80170c0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016930:	b118      	cbz	r0, 801693a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016932:	6862      	ldr	r2, [r4, #4]
 8016934:	7a53      	ldrb	r3, [r2, #9]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d0fc      	beq.n	8016934 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801693a:	f7fd fba1 	bl	8014080 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801693e:	4620      	mov	r0, r4
 8016940:	f7ff ffd8 	bl	80168f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016944:	bd10      	pop	{r4, pc}
 8016946:	bf00      	nop
 8016948:	2000c562 	.word	0x2000c562

0801694c <_ZN8touchgfx3HAL10initializeEv>:
 801694c:	b510      	push	{r4, lr}
 801694e:	4604      	mov	r4, r0
 8016950:	f7fd fb72 	bl	8014038 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016954:	6860      	ldr	r0, [r4, #4]
 8016956:	6803      	ldr	r3, [r0, #0]
 8016958:	68db      	ldr	r3, [r3, #12]
 801695a:	4798      	blx	r3
 801695c:	68e0      	ldr	r0, [r4, #12]
 801695e:	6803      	ldr	r3, [r0, #0]
 8016960:	689b      	ldr	r3, [r3, #8]
 8016962:	4798      	blx	r3
 8016964:	6823      	ldr	r3, [r4, #0]
 8016966:	4620      	mov	r0, r4
 8016968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801696a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801696e:	4718      	bx	r3

08016970 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016970:	b508      	push	{r3, lr}
 8016972:	290c      	cmp	r1, #12
 8016974:	d817      	bhi.n	80169a6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8016976:	e8df f001 	tbb	[pc, r1]
 801697a:	090b      	.short	0x090b
 801697c:	0d0d0d07 	.word	0x0d0d0d07
 8016980:	1414140d 	.word	0x1414140d
 8016984:	1414      	.short	0x1414
 8016986:	0d          	.byte	0x0d
 8016987:	00          	.byte	0x00
 8016988:	2020      	movs	r0, #32
 801698a:	bd08      	pop	{r3, pc}
 801698c:	2018      	movs	r0, #24
 801698e:	e7fc      	b.n	801698a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016990:	2010      	movs	r0, #16
 8016992:	e7fa      	b.n	801698a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016994:	4b05      	ldr	r3, [pc, #20]	; (80169ac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8016996:	f44f 710c 	mov.w	r1, #560	; 0x230
 801699a:	4a05      	ldr	r2, [pc, #20]	; (80169b0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801699c:	4805      	ldr	r0, [pc, #20]	; (80169b4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801699e:	f00e fd2d 	bl	80253fc <__assert_func>
 80169a2:	2008      	movs	r0, #8
 80169a4:	e7f1      	b.n	801698a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80169a6:	2000      	movs	r0, #0
 80169a8:	e7ef      	b.n	801698a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80169aa:	bf00      	nop
 80169ac:	08027fcb 	.word	0x08027fcb
 80169b0:	08028360 	.word	0x08028360
 80169b4:	08027ed2 	.word	0x08027ed2

080169b8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80169b8:	b570      	push	{r4, r5, r6, lr}
 80169ba:	460d      	mov	r5, r1
 80169bc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80169c0:	4616      	mov	r6, r2
 80169c2:	461c      	mov	r4, r3
 80169c4:	f7ff ffd4 	bl	8016970 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80169c8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80169cc:	10c0      	asrs	r0, r0, #3
 80169ce:	fb06 5101 	mla	r1, r6, r1, r5
 80169d2:	fb00 4001 	mla	r0, r0, r1, r4
 80169d6:	bd70      	pop	{r4, r5, r6, pc}

080169d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80169d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169dc:	b08a      	sub	sp, #40	; 0x28
 80169de:	f04f 0c00 	mov.w	ip, #0
 80169e2:	4604      	mov	r4, r0
 80169e4:	469a      	mov	sl, r3
 80169e6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80169ea:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80169ee:	f1b8 0f02 	cmp.w	r8, #2
 80169f2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80169f6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80169fa:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80169fe:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8016a02:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8016a06:	f8cd c020 	str.w	ip, [sp, #32]
 8016a0a:	d030      	beq.n	8016a6e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8016a0c:	2bff      	cmp	r3, #255	; 0xff
 8016a0e:	d12c      	bne.n	8016a6a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8016a10:	4560      	cmp	r0, ip
 8016a12:	bf14      	ite	ne
 8016a14:	2004      	movne	r0, #4
 8016a16:	2001      	moveq	r0, #1
 8016a18:	9204      	str	r2, [sp, #16]
 8016a1a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016a1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016a22:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016a26:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016a2a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a32:	4620      	mov	r0, r4
 8016a34:	f7ff ff5e 	bl	80168f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016a38:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	4651      	mov	r1, sl
 8016a40:	4620      	mov	r0, r4
 8016a42:	e9cd 9700 	strd	r9, r7, [sp]
 8016a46:	f7ff ffb7 	bl	80169b8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016a4a:	f8ad 901e 	strh.w	r9, [sp, #30]
 8016a4e:	9005      	str	r0, [sp, #20]
 8016a50:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8016a54:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8016a58:	b106      	cbz	r6, 8016a5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8016a5a:	b98d      	cbnz	r5, 8016a80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016a5c:	4b12      	ldr	r3, [pc, #72]	; (8016aa8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8016a5e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8016a62:	4a12      	ldr	r2, [pc, #72]	; (8016aac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016a64:	4812      	ldr	r0, [pc, #72]	; (8016ab0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016a66:	f00e fcc9 	bl	80253fc <__assert_func>
 8016a6a:	2004      	movs	r0, #4
 8016a6c:	e7d4      	b.n	8016a18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016a6e:	2bff      	cmp	r3, #255	; 0xff
 8016a70:	d104      	bne.n	8016a7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8016a72:	2800      	cmp	r0, #0
 8016a74:	bf14      	ite	ne
 8016a76:	2040      	movne	r0, #64	; 0x40
 8016a78:	2020      	moveq	r0, #32
 8016a7a:	e7cd      	b.n	8016a18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016a7c:	2040      	movs	r0, #64	; 0x40
 8016a7e:	e7cb      	b.n	8016a18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016a80:	6823      	ldr	r3, [r4, #0]
 8016a82:	4620      	mov	r0, r4
 8016a84:	9d02      	ldr	r5, [sp, #8]
 8016a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a88:	4798      	blx	r3
 8016a8a:	4228      	tst	r0, r5
 8016a8c:	d104      	bne.n	8016a98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8016a8e:	4b09      	ldr	r3, [pc, #36]	; (8016ab4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016a90:	f240 11b1 	movw	r1, #433	; 0x1b1
 8016a94:	4a05      	ldr	r2, [pc, #20]	; (8016aac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016a96:	e7e5      	b.n	8016a64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8016a98:	6860      	ldr	r0, [r4, #4]
 8016a9a:	a902      	add	r1, sp, #8
 8016a9c:	6803      	ldr	r3, [r0, #0]
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	4798      	blx	r3
 8016aa2:	b00a      	add	sp, #40	; 0x28
 8016aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aa8:	08027f4e 	.word	0x08027f4e
 8016aac:	08028202 	.word	0x08028202
 8016ab0:	08027ed2 	.word	0x08027ed2
 8016ab4:	08027f86 	.word	0x08027f86

08016ab8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8016ab8:	b510      	push	{r4, lr}
 8016aba:	b08a      	sub	sp, #40	; 0x28
 8016abc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016ac0:	9408      	str	r4, [sp, #32]
 8016ac2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8016ac6:	9407      	str	r4, [sp, #28]
 8016ac8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8016acc:	9406      	str	r4, [sp, #24]
 8016ace:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8016ad2:	9405      	str	r4, [sp, #20]
 8016ad4:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8016ad8:	9404      	str	r4, [sp, #16]
 8016ada:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8016ade:	9403      	str	r4, [sp, #12]
 8016ae0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8016ae4:	9402      	str	r4, [sp, #8]
 8016ae6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8016aea:	e9cd 3400 	strd	r3, r4, [sp]
 8016aee:	4613      	mov	r3, r2
 8016af0:	2200      	movs	r2, #0
 8016af2:	f7ff ff71 	bl	80169d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016af6:	b00a      	add	sp, #40	; 0x28
 8016af8:	bd10      	pop	{r4, pc}
	...

08016afc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016afe:	b08b      	sub	sp, #44	; 0x2c
 8016b00:	4616      	mov	r6, r2
 8016b02:	460d      	mov	r5, r1
 8016b04:	461f      	mov	r7, r3
 8016b06:	4604      	mov	r4, r0
 8016b08:	f7f9 f93e 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8016b0c:	6803      	ldr	r3, [r0, #0]
 8016b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b10:	4798      	blx	r3
 8016b12:	4b0e      	ldr	r3, [pc, #56]	; (8016b4c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8016b14:	2200      	movs	r2, #0
 8016b16:	4629      	mov	r1, r5
 8016b18:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016b1c:	881b      	ldrh	r3, [r3, #0]
 8016b1e:	4620      	mov	r0, r4
 8016b20:	9306      	str	r3, [sp, #24]
 8016b22:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016b26:	9305      	str	r3, [sp, #20]
 8016b28:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016b2c:	9304      	str	r3, [sp, #16]
 8016b2e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016b32:	9303      	str	r3, [sp, #12]
 8016b34:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016b38:	9302      	str	r3, [sp, #8]
 8016b3a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016b3e:	e9cd 7300 	strd	r7, r3, [sp]
 8016b42:	4633      	mov	r3, r6
 8016b44:	f7ff ff48 	bl	80169d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016b48:	b00b      	add	sp, #44	; 0x2c
 8016b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b4c:	2000c55e 	.word	0x2000c55e

08016b50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8016b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b54:	461f      	mov	r7, r3
 8016b56:	4b14      	ldr	r3, [pc, #80]	; (8016ba8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8016b58:	b08a      	sub	sp, #40	; 0x28
 8016b5a:	4616      	mov	r6, r2
 8016b5c:	f8b3 8000 	ldrh.w	r8, [r3]
 8016b60:	460d      	mov	r5, r1
 8016b62:	4604      	mov	r4, r0
 8016b64:	f7f9 f910 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8016b68:	6803      	ldr	r3, [r0, #0]
 8016b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b6c:	4798      	blx	r3
 8016b6e:	2302      	movs	r3, #2
 8016b70:	9008      	str	r0, [sp, #32]
 8016b72:	2200      	movs	r2, #0
 8016b74:	4629      	mov	r1, r5
 8016b76:	4620      	mov	r0, r4
 8016b78:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	9305      	str	r3, [sp, #20]
 8016b80:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016b84:	9304      	str	r3, [sp, #16]
 8016b86:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016b8a:	9303      	str	r3, [sp, #12]
 8016b8c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016b90:	9302      	str	r3, [sp, #8]
 8016b92:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016b96:	e9cd 7300 	strd	r7, r3, [sp]
 8016b9a:	4633      	mov	r3, r6
 8016b9c:	f7ff ff1c 	bl	80169d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016ba0:	b00a      	add	sp, #40	; 0x28
 8016ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ba6:	bf00      	nop
 8016ba8:	2000c55e 	.word	0x2000c55e

08016bac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8016bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bb0:	b08b      	sub	sp, #44	; 0x2c
 8016bb2:	469b      	mov	fp, r3
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	4692      	mov	sl, r2
 8016bb8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016bbc:	2600      	movs	r6, #0
 8016bbe:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8016bc2:	4689      	mov	r9, r1
 8016bc4:	2fff      	cmp	r7, #255	; 0xff
 8016bc6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8016bca:	9608      	str	r6, [sp, #32]
 8016bcc:	bf14      	ite	ne
 8016bce:	2308      	movne	r3, #8
 8016bd0:	2302      	moveq	r3, #2
 8016bd2:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8016bd6:	f7ff fe8d 	bl	80168f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016bda:	465a      	mov	r2, fp
 8016bdc:	4603      	mov	r3, r0
 8016bde:	4651      	mov	r1, sl
 8016be0:	4620      	mov	r0, r4
 8016be2:	e9cd 8500 	strd	r8, r5, [sp]
 8016be6:	f7ff fee7 	bl	80169b8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016bea:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016bee:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8016bf2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016bf6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016bfa:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8016bfe:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016c02:	6823      	ldr	r3, [r4, #0]
 8016c04:	9d02      	ldr	r5, [sp, #8]
 8016c06:	9005      	str	r0, [sp, #20]
 8016c08:	4620      	mov	r0, r4
 8016c0a:	f8ad 601c 	strh.w	r6, [sp, #28]
 8016c0e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8016c12:	f8cd 9020 	str.w	r9, [sp, #32]
 8016c16:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8016c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c1c:	4798      	blx	r3
 8016c1e:	4228      	tst	r0, r5
 8016c20:	d106      	bne.n	8016c30 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8016c22:	4b07      	ldr	r3, [pc, #28]	; (8016c40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8016c24:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8016c28:	4a06      	ldr	r2, [pc, #24]	; (8016c44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8016c2a:	4807      	ldr	r0, [pc, #28]	; (8016c48 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8016c2c:	f00e fbe6 	bl	80253fc <__assert_func>
 8016c30:	6860      	ldr	r0, [r4, #4]
 8016c32:	a902      	add	r1, sp, #8
 8016c34:	6803      	ldr	r3, [r0, #0]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	4798      	blx	r3
 8016c3a:	b00b      	add	sp, #44	; 0x2c
 8016c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c40:	08027f86 	.word	0x08027f86
 8016c44:	080282cb 	.word	0x080282cb
 8016c48:	08027ed2 	.word	0x08027ed2

08016c4c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016c4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016c50:	461f      	mov	r7, r3
 8016c52:	4b0b      	ldr	r3, [pc, #44]	; (8016c80 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016c54:	460d      	mov	r5, r1
 8016c56:	4616      	mov	r6, r2
 8016c58:	f8b3 8000 	ldrh.w	r8, [r3]
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	f7f9 f893 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8016c62:	6803      	ldr	r3, [r0, #0]
 8016c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c66:	4798      	blx	r3
 8016c68:	463b      	mov	r3, r7
 8016c6a:	4632      	mov	r2, r6
 8016c6c:	4629      	mov	r1, r5
 8016c6e:	e9cd 8000 	strd	r8, r0, [sp]
 8016c72:	4620      	mov	r0, r4
 8016c74:	f7ff fea0 	bl	80169b8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016c78:	b002      	add	sp, #8
 8016c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c7e:	bf00      	nop
 8016c80:	2000c55e 	.word	0x2000c55e

08016c84 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8016c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c88:	4698      	mov	r8, r3
 8016c8a:	b088      	sub	sp, #32
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	4617      	mov	r7, r2
 8016c90:	4604      	mov	r4, r0
 8016c92:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8016c96:	9306      	str	r3, [sp, #24]
 8016c98:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016c9c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016ca0:	f8ad 6010 	strh.w	r6, [sp, #16]
 8016ca4:	f8ad 5012 	strh.w	r5, [sp, #18]
 8016ca8:	e9cd 3100 	strd	r3, r1, [sp]
 8016cac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016cb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016cb4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8016cb8:	f88d 301c 	strb.w	r3, [sp, #28]
 8016cbc:	f7ff fe1a 	bl	80168f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016cc0:	4642      	mov	r2, r8
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	4639      	mov	r1, r7
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	f7ff ffc0 	bl	8016c4c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016ccc:	4b16      	ldr	r3, [pc, #88]	; (8016d28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8016cce:	9003      	str	r0, [sp, #12]
 8016cd0:	881b      	ldrh	r3, [r3, #0]
 8016cd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016cd6:	f7f9 f857 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8016cda:	6803      	ldr	r3, [r0, #0]
 8016cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cde:	4798      	blx	r3
 8016ce0:	f88d 001e 	strb.w	r0, [sp, #30]
 8016ce4:	f88d 001d 	strb.w	r0, [sp, #29]
 8016ce8:	b106      	cbz	r6, 8016cec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8016cea:	b935      	cbnz	r5, 8016cfa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8016cec:	4b0f      	ldr	r3, [pc, #60]	; (8016d2c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8016cee:	f240 11cd 	movw	r1, #461	; 0x1cd
 8016cf2:	4a0f      	ldr	r2, [pc, #60]	; (8016d30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016cf4:	480f      	ldr	r0, [pc, #60]	; (8016d34 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8016cf6:	f00e fb81 	bl	80253fc <__assert_func>
 8016cfa:	6823      	ldr	r3, [r4, #0]
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	9d00      	ldr	r5, [sp, #0]
 8016d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d02:	4798      	blx	r3
 8016d04:	4228      	tst	r0, r5
 8016d06:	d104      	bne.n	8016d12 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8016d08:	4b0b      	ldr	r3, [pc, #44]	; (8016d38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8016d0a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8016d0e:	4a08      	ldr	r2, [pc, #32]	; (8016d30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8016d10:	e7f0      	b.n	8016cf4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8016d12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d14:	4669      	mov	r1, sp
 8016d16:	6860      	ldr	r0, [r4, #4]
 8016d18:	9306      	str	r3, [sp, #24]
 8016d1a:	6803      	ldr	r3, [r0, #0]
 8016d1c:	685b      	ldr	r3, [r3, #4]
 8016d1e:	4798      	blx	r3
 8016d20:	b008      	add	sp, #32
 8016d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d26:	bf00      	nop
 8016d28:	2000c55e 	.word	0x2000c55e
 8016d2c:	08027f4e 	.word	0x08027f4e
 8016d30:	080280b4 	.word	0x080280b4
 8016d34:	08027ed2 	.word	0x08027ed2
 8016d38:	08027f86 	.word	0x08027f86

08016d3c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016d3c:	b570      	push	{r4, r5, r6, lr}
 8016d3e:	b08a      	sub	sp, #40	; 0x28
 8016d40:	4604      	mov	r4, r0
 8016d42:	466b      	mov	r3, sp
 8016d44:	e883 0006 	stmia.w	r3, {r1, r2}
 8016d48:	4b1f      	ldr	r3, [pc, #124]	; (8016dc8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8016d4a:	781b      	ldrb	r3, [r3, #0]
 8016d4c:	b933      	cbnz	r3, 8016d5c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8016d4e:	4b1f      	ldr	r3, [pc, #124]	; (8016dcc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8016d50:	f240 11f9 	movw	r1, #505	; 0x1f9
 8016d54:	4a1e      	ldr	r2, [pc, #120]	; (8016dd0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8016d56:	481f      	ldr	r0, [pc, #124]	; (8016dd4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8016d58:	f00e fb50 	bl	80253fc <__assert_func>
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	f8bd 5000 	ldrh.w	r5, [sp]
 8016d62:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8016d66:	9308      	str	r3, [sp, #32]
 8016d68:	2301      	movs	r3, #1
 8016d6a:	9302      	str	r3, [sp, #8]
 8016d6c:	6803      	ldr	r3, [r0, #0]
 8016d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d70:	4798      	blx	r3
 8016d72:	4632      	mov	r2, r6
 8016d74:	4629      	mov	r1, r5
 8016d76:	4603      	mov	r3, r0
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f7ff ff67 	bl	8016c4c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016d7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016d80:	9003      	str	r0, [sp, #12]
 8016d82:	9305      	str	r3, [sp, #20]
 8016d84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016d88:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016d8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016d90:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016d94:	4b10      	ldr	r3, [pc, #64]	; (8016dd8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8016d96:	881b      	ldrh	r3, [r3, #0]
 8016d98:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016d9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016da0:	f7f8 fff2 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8016da4:	6803      	ldr	r3, [r0, #0]
 8016da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016da8:	4798      	blx	r3
 8016daa:	23ff      	movs	r3, #255	; 0xff
 8016dac:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016db0:	a902      	add	r1, sp, #8
 8016db2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016db6:	6860      	ldr	r0, [r4, #4]
 8016db8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016dbc:	6803      	ldr	r3, [r0, #0]
 8016dbe:	685b      	ldr	r3, [r3, #4]
 8016dc0:	4798      	blx	r3
 8016dc2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016dc4:	b00a      	add	sp, #40	; 0x28
 8016dc6:	bd70      	pop	{r4, r5, r6, pc}
 8016dc8:	2000c563 	.word	0x2000c563
 8016dcc:	08027e1f 	.word	0x08027e1f
 8016dd0:	08028158 	.word	0x08028158
 8016dd4:	08027ed2 	.word	0x08027ed2
 8016dd8:	2000c55e 	.word	0x2000c55e

08016ddc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dde:	b08b      	sub	sp, #44	; 0x2c
 8016de0:	4604      	mov	r4, r0
 8016de2:	466d      	mov	r5, sp
 8016de4:	e885 0006 	stmia.w	r5, {r1, r2}
 8016de8:	461d      	mov	r5, r3
 8016dea:	2300      	movs	r3, #0
 8016dec:	f8bd 6000 	ldrh.w	r6, [sp]
 8016df0:	9308      	str	r3, [sp, #32]
 8016df2:	2301      	movs	r3, #1
 8016df4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016df8:	9302      	str	r3, [sp, #8]
 8016dfa:	6803      	ldr	r3, [r0, #0]
 8016dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dfe:	4798      	blx	r3
 8016e00:	463a      	mov	r2, r7
 8016e02:	4631      	mov	r1, r6
 8016e04:	4603      	mov	r3, r0
 8016e06:	4620      	mov	r0, r4
 8016e08:	f7ff ff20 	bl	8016c4c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016e0c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016e10:	9003      	str	r0, [sp, #12]
 8016e12:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016e16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016e1a:	9505      	str	r5, [sp, #20]
 8016e1c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016e20:	4b0d      	ldr	r3, [pc, #52]	; (8016e58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8016e22:	881b      	ldrh	r3, [r3, #0]
 8016e24:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016e28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016e2e:	f7f8 ffab 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8016e32:	6803      	ldr	r3, [r0, #0]
 8016e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e36:	4798      	blx	r3
 8016e38:	23ff      	movs	r3, #255	; 0xff
 8016e3a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8016e3e:	a902      	add	r1, sp, #8
 8016e40:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8016e44:	6860      	ldr	r0, [r4, #4]
 8016e46:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016e4a:	6803      	ldr	r3, [r0, #0]
 8016e4c:	685b      	ldr	r3, [r3, #4]
 8016e4e:	4798      	blx	r3
 8016e50:	4628      	mov	r0, r5
 8016e52:	b00b      	add	sp, #44	; 0x2c
 8016e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e56:	bf00      	nop
 8016e58:	2000c55e 	.word	0x2000c55e

08016e5c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016e5c:	b570      	push	{r4, r5, r6, lr}
 8016e5e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016e62:	4604      	mov	r4, r0
 8016e64:	b19b      	cbz	r3, 8016e8e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016e66:	2002      	movs	r0, #2
 8016e68:	f7fc fea0 	bl	8013bac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	4620      	mov	r0, r4
 8016e70:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016e74:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016e78:	6823      	ldr	r3, [r4, #0]
 8016e7a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8016e7e:	f7ff fd39 	bl	80168f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016e82:	4601      	mov	r1, r0
 8016e84:	4620      	mov	r0, r4
 8016e86:	462b      	mov	r3, r5
 8016e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e8c:	4718      	bx	r3
 8016e8e:	bd70      	pop	{r4, r5, r6, pc}

08016e90 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8016e90:	4770      	bx	lr

08016e92 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016e92:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016e96:	1a13      	subs	r3, r2, r0
 8016e98:	4258      	negs	r0, r3
 8016e9a:	4158      	adcs	r0, r3
 8016e9c:	4770      	bx	lr

08016e9e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016e9e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016ea2:	1a9b      	subs	r3, r3, r2
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	bfdc      	itt	le
 8016ea8:	6882      	ldrle	r2, [r0, #8]
 8016eaa:	189b      	addle	r3, r3, r2
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	bfcc      	ite	gt
 8016eb0:	2000      	movgt	r0, #0
 8016eb2:	2001      	movle	r0, #1
 8016eb4:	4770      	bx	lr

08016eb6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016eb6:	6902      	ldr	r2, [r0, #16]
 8016eb8:	6840      	ldr	r0, [r0, #4]
 8016eba:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8016ebe:	4770      	bx	lr

08016ec0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016ec0:	6803      	ldr	r3, [r0, #0]
 8016ec2:	691b      	ldr	r3, [r3, #16]
 8016ec4:	4718      	bx	r3

08016ec6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016ec6:	4770      	bx	lr

08016ec8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016ec8:	4770      	bx	lr
	...

08016ecc <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016ecc:	2301      	movs	r3, #1
 8016ece:	b570      	push	{r4, r5, r6, lr}
 8016ed0:	7203      	strb	r3, [r0, #8]
 8016ed2:	4604      	mov	r4, r0
 8016ed4:	6840      	ldr	r0, [r0, #4]
 8016ed6:	6803      	ldr	r3, [r0, #0]
 8016ed8:	699b      	ldr	r3, [r3, #24]
 8016eda:	4798      	blx	r3
 8016edc:	6803      	ldr	r3, [r0, #0]
 8016ede:	4605      	mov	r5, r0
 8016ee0:	2b08      	cmp	r3, #8
 8016ee2:	d01e      	beq.n	8016f22 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8016ee4:	d80b      	bhi.n	8016efe <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016ee6:	2b02      	cmp	r3, #2
 8016ee8:	d027      	beq.n	8016f3a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016eea:	2b04      	cmp	r3, #4
 8016eec:	d011      	beq.n	8016f12 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8016eee:	2b01      	cmp	r3, #1
 8016ef0:	d028      	beq.n	8016f44 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016ef2:	4b17      	ldr	r3, [pc, #92]	; (8016f50 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8016ef4:	218b      	movs	r1, #139	; 0x8b
 8016ef6:	4a17      	ldr	r2, [pc, #92]	; (8016f54 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8016ef8:	4817      	ldr	r0, [pc, #92]	; (8016f58 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8016efa:	f00e fa7f 	bl	80253fc <__assert_func>
 8016efe:	2b40      	cmp	r3, #64	; 0x40
 8016f00:	d020      	beq.n	8016f44 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016f02:	d801      	bhi.n	8016f08 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016f04:	2b20      	cmp	r3, #32
 8016f06:	e7f3      	b.n	8016ef0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016f08:	2b80      	cmp	r3, #128	; 0x80
 8016f0a:	d01b      	beq.n	8016f44 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f10:	e7ee      	b.n	8016ef0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8016f12:	6823      	ldr	r3, [r4, #0]
 8016f14:	7f01      	ldrb	r1, [r0, #28]
 8016f16:	4620      	mov	r0, r4
 8016f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f1a:	4798      	blx	r3
 8016f1c:	6823      	ldr	r3, [r4, #0]
 8016f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f20:	e006      	b.n	8016f30 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016f22:	6823      	ldr	r3, [r4, #0]
 8016f24:	7f01      	ldrb	r1, [r0, #28]
 8016f26:	4620      	mov	r0, r4
 8016f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f2a:	4798      	blx	r3
 8016f2c:	6823      	ldr	r3, [r4, #0]
 8016f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f30:	4629      	mov	r1, r5
 8016f32:	4620      	mov	r0, r4
 8016f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f38:	4718      	bx	r3
 8016f3a:	6823      	ldr	r3, [r4, #0]
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f40:	4798      	blx	r3
 8016f42:	e7f3      	b.n	8016f2c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8016f44:	6823      	ldr	r3, [r4, #0]
 8016f46:	4620      	mov	r0, r4
 8016f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f4a:	4798      	blx	r3
 8016f4c:	e7e6      	b.n	8016f1c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8016f4e:	bf00      	nop
 8016f50:	080283a9 	.word	0x080283a9
 8016f54:	080284b8 	.word	0x080284b8
 8016f58:	080283ce 	.word	0x080283ce

08016f5c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016f5c:	b570      	push	{r4, r5, r6, lr}
 8016f5e:	4604      	mov	r4, r0
 8016f60:	460e      	mov	r6, r1
 8016f62:	6860      	ldr	r0, [r4, #4]
 8016f64:	6803      	ldr	r3, [r0, #0]
 8016f66:	685b      	ldr	r3, [r3, #4]
 8016f68:	4798      	blx	r3
 8016f6a:	2800      	cmp	r0, #0
 8016f6c:	d1f9      	bne.n	8016f62 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016f6e:	4d0b      	ldr	r5, [pc, #44]	; (8016f9c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8016f70:	6828      	ldr	r0, [r5, #0]
 8016f72:	6803      	ldr	r3, [r0, #0]
 8016f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f76:	4798      	blx	r3
 8016f78:	f7fd f89e 	bl	80140b8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016f7c:	6860      	ldr	r0, [r4, #4]
 8016f7e:	4631      	mov	r1, r6
 8016f80:	6803      	ldr	r3, [r0, #0]
 8016f82:	689b      	ldr	r3, [r3, #8]
 8016f84:	4798      	blx	r3
 8016f86:	6823      	ldr	r3, [r4, #0]
 8016f88:	4620      	mov	r0, r4
 8016f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f8c:	4798      	blx	r3
 8016f8e:	6828      	ldr	r0, [r5, #0]
 8016f90:	6803      	ldr	r3, [r0, #0]
 8016f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f98:	4718      	bx	r3
 8016f9a:	bf00      	nop
 8016f9c:	2000c564 	.word	0x2000c564

08016fa0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016fa0:	b508      	push	{r3, lr}
 8016fa2:	f7fd f86d 	bl	8014080 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016faa:	f7fd b877 	b.w	801409c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016fae <_ZN8touchgfx13DMA_Interface5startEv>:
 8016fae:	b510      	push	{r4, lr}
 8016fb0:	4604      	mov	r4, r0
 8016fb2:	6840      	ldr	r0, [r0, #4]
 8016fb4:	6803      	ldr	r3, [r0, #0]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	4798      	blx	r3
 8016fba:	b948      	cbnz	r0, 8016fd0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016fbc:	7a63      	ldrb	r3, [r4, #9]
 8016fbe:	b13b      	cbz	r3, 8016fd0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016fc0:	7a23      	ldrb	r3, [r4, #8]
 8016fc2:	b92b      	cbnz	r3, 8016fd0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016fc4:	6823      	ldr	r3, [r4, #0]
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fce:	4718      	bx	r3
 8016fd0:	bd10      	pop	{r4, pc}
	...

08016fd4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016fd4:	b510      	push	{r4, lr}
 8016fd6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016fda:	1b12      	subs	r2, r2, r4
 8016fdc:	2a00      	cmp	r2, #0
 8016fde:	bfdc      	itt	le
 8016fe0:	6883      	ldrle	r3, [r0, #8]
 8016fe2:	18d2      	addle	r2, r2, r3
 8016fe4:	2a01      	cmp	r2, #1
 8016fe6:	dd18      	ble.n	801701a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016fe8:	6843      	ldr	r3, [r0, #4]
 8016fea:	f101 021c 	add.w	r2, r1, #28
 8016fee:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8016ff2:	f851 4b04 	ldr.w	r4, [r1], #4
 8016ff6:	4291      	cmp	r1, r2
 8016ff8:	f843 4b04 	str.w	r4, [r3], #4
 8016ffc:	d1f9      	bne.n	8016ff2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8016ffe:	880a      	ldrh	r2, [r1, #0]
 8017000:	801a      	strh	r2, [r3, #0]
 8017002:	788a      	ldrb	r2, [r1, #2]
 8017004:	709a      	strb	r2, [r3, #2]
 8017006:	68c3      	ldr	r3, [r0, #12]
 8017008:	6882      	ldr	r2, [r0, #8]
 801700a:	f3bf 8f5b 	dmb	ish
 801700e:	3301      	adds	r3, #1
 8017010:	429a      	cmp	r2, r3
 8017012:	bfd8      	it	le
 8017014:	1a9b      	suble	r3, r3, r2
 8017016:	60c3      	str	r3, [r0, #12]
 8017018:	bd10      	pop	{r4, pc}
 801701a:	4b03      	ldr	r3, [pc, #12]	; (8017028 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801701c:	2139      	movs	r1, #57	; 0x39
 801701e:	4a03      	ldr	r2, [pc, #12]	; (801702c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8017020:	4803      	ldr	r0, [pc, #12]	; (8017030 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8017022:	f00e f9eb 	bl	80253fc <__assert_func>
 8017026:	bf00      	nop
 8017028:	080283f4 	.word	0x080283f4
 801702c:	080284e8 	.word	0x080284e8
 8017030:	080283ce 	.word	0x080283ce

08017034 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017034:	b510      	push	{r4, lr}
 8017036:	6803      	ldr	r3, [r0, #0]
 8017038:	4604      	mov	r4, r0
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	4798      	blx	r3
 801703e:	b128      	cbz	r0, 801704c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8017040:	4b07      	ldr	r3, [pc, #28]	; (8017060 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8017042:	213f      	movs	r1, #63	; 0x3f
 8017044:	4a07      	ldr	r2, [pc, #28]	; (8017064 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8017046:	4808      	ldr	r0, [pc, #32]	; (8017068 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8017048:	f00e f9d8 	bl	80253fc <__assert_func>
 801704c:	6923      	ldr	r3, [r4, #16]
 801704e:	68a2      	ldr	r2, [r4, #8]
 8017050:	f3bf 8f5b 	dmb	ish
 8017054:	3301      	adds	r3, #1
 8017056:	429a      	cmp	r2, r3
 8017058:	bfd8      	it	le
 801705a:	1a9b      	suble	r3, r3, r2
 801705c:	6123      	str	r3, [r4, #16]
 801705e:	bd10      	pop	{r4, pc}
 8017060:	08028417 	.word	0x08028417
 8017064:	08028536 	.word	0x08028536
 8017068:	080283ce 	.word	0x080283ce

0801706c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801706c:	b570      	push	{r4, r5, r6, lr}
 801706e:	4604      	mov	r4, r0
 8017070:	6840      	ldr	r0, [r0, #4]
 8017072:	6803      	ldr	r3, [r0, #0]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	4798      	blx	r3
 8017078:	4605      	mov	r5, r0
 801707a:	b930      	cbnz	r0, 801708a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801707c:	7a23      	ldrb	r3, [r4, #8]
 801707e:	b123      	cbz	r3, 801708a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017080:	6860      	ldr	r0, [r4, #4]
 8017082:	6803      	ldr	r3, [r0, #0]
 8017084:	695b      	ldr	r3, [r3, #20]
 8017086:	4798      	blx	r3
 8017088:	7225      	strb	r5, [r4, #8]
 801708a:	6860      	ldr	r0, [r4, #4]
 801708c:	6803      	ldr	r3, [r0, #0]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	4798      	blx	r3
 8017092:	b928      	cbnz	r0, 80170a0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017094:	6823      	ldr	r3, [r4, #0]
 8017096:	4620      	mov	r0, r4
 8017098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801709a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801709e:	4718      	bx	r3
 80170a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170a4:	f7fd b814 	b.w	80140d0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080170a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80170a8:	b510      	push	{r4, lr}
 80170aa:	6082      	str	r2, [r0, #8]
 80170ac:	2200      	movs	r2, #0
 80170ae:	4c03      	ldr	r4, [pc, #12]	; (80170bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80170b0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80170b4:	e9c0 4100 	strd	r4, r1, [r0]
 80170b8:	bd10      	pop	{r4, pc}
 80170ba:	bf00      	nop
 80170bc:	0802849c 	.word	0x0802849c

080170c0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80170c0:	6840      	ldr	r0, [r0, #4]
 80170c2:	6803      	ldr	r3, [r0, #0]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	4718      	bx	r3

080170c8 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 80170c8:	2001      	movs	r0, #1
 80170ca:	4770      	bx	lr

080170cc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 80170cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170d0:	460d      	mov	r5, r1
 80170d2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80170d6:	b085      	sub	sp, #20
 80170d8:	4690      	mov	r8, r2
 80170da:	4411      	add	r1, r2
 80170dc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80170e0:	4699      	mov	r9, r3
 80170e2:	6803      	ldr	r3, [r0, #0]
 80170e4:	60c1      	str	r1, [r0, #12]
 80170e6:	4604      	mov	r4, r0
 80170e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80170ea:	440a      	add	r2, r1
 80170ec:	6102      	str	r2, [r0, #16]
 80170ee:	68db      	ldr	r3, [r3, #12]
 80170f0:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80170f4:	4798      	blx	r3
 80170f6:	2800      	cmp	r0, #0
 80170f8:	d039      	beq.n	801716e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80170fa:	44c8      	add	r8, r9
 80170fc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017100:	4445      	add	r5, r8
 8017102:	6823      	ldr	r3, [r4, #0]
 8017104:	f10d 020f 	add.w	r2, sp, #15
 8017108:	a903      	add	r1, sp, #12
 801710a:	4620      	mov	r0, r4
 801710c:	9200      	str	r2, [sp, #0]
 801710e:	f10d 020d 	add.w	r2, sp, #13
 8017112:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8017116:	f10d 030e 	add.w	r3, sp, #14
 801711a:	47c0      	blx	r8
 801711c:	b1f8      	cbz	r0, 801715e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801711e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8017122:	7a20      	ldrb	r0, [r4, #8]
 8017124:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8017128:	4358      	muls	r0, r3
 801712a:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801712e:	1c43      	adds	r3, r0, #1
 8017130:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8017134:	f817 0b01 	ldrb.w	r0, [r7], #1
 8017138:	121b      	asrs	r3, r3, #8
 801713a:	fb10 f003 	smulbb	r0, r0, r3
 801713e:	b283      	uxth	r3, r0
 8017140:	1c58      	adds	r0, r3, #1
 8017142:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017146:	6823      	ldr	r3, [r4, #0]
 8017148:	1200      	asrs	r0, r0, #8
 801714a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801714e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8017152:	28ff      	cmp	r0, #255	; 0xff
 8017154:	d10e      	bne.n	8017174 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8017156:	9100      	str	r1, [sp, #0]
 8017158:	4629      	mov	r1, r5
 801715a:	4620      	mov	r0, r4
 801715c:	47c0      	blx	r8
 801715e:	68e3      	ldr	r3, [r4, #12]
 8017160:	3e01      	subs	r6, #1
 8017162:	f105 0503 	add.w	r5, r5, #3
 8017166:	f103 0301 	add.w	r3, r3, #1
 801716a:	60e3      	str	r3, [r4, #12]
 801716c:	d1c9      	bne.n	8017102 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801716e:	b005      	add	sp, #20
 8017170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017174:	fa1f fc80 	uxth.w	ip, r0
 8017178:	43c0      	mvns	r0, r0
 801717a:	f895 e002 	ldrb.w	lr, [r5, #2]
 801717e:	fb12 f20c 	smulbb	r2, r2, ip
 8017182:	b2c0      	uxtb	r0, r0
 8017184:	fb13 f30c 	smulbb	r3, r3, ip
 8017188:	fb0e 2200 	mla	r2, lr, r0, r2
 801718c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8017190:	fb11 f10c 	smulbb	r1, r1, ip
 8017194:	fb0e 3300 	mla	r3, lr, r0, r3
 8017198:	f895 e000 	ldrb.w	lr, [r5]
 801719c:	b292      	uxth	r2, r2
 801719e:	b29b      	uxth	r3, r3
 80171a0:	fb0e 1000 	mla	r0, lr, r0, r1
 80171a4:	1c59      	adds	r1, r3, #1
 80171a6:	b280      	uxth	r0, r0
 80171a8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80171ac:	1c51      	adds	r1, r2, #1
 80171ae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80171b2:	1c41      	adds	r1, r0, #1
 80171b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80171b8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80171bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80171c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80171c4:	9000      	str	r0, [sp, #0]
 80171c6:	e7c7      	b.n	8017158 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

080171c8 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 80171c8:	f89d 0000 	ldrb.w	r0, [sp]
 80171cc:	704b      	strb	r3, [r1, #1]
 80171ce:	7008      	strb	r0, [r1, #0]
 80171d0:	708a      	strb	r2, [r1, #2]
 80171d2:	4770      	bx	lr

080171d4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 80171d4:	4413      	add	r3, r2
 80171d6:	7dc2      	ldrb	r2, [r0, #23]
 80171d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80171dc:	4419      	add	r1, r3
 80171de:	7a03      	ldrb	r3, [r0, #8]
 80171e0:	435a      	muls	r2, r3
 80171e2:	1c53      	adds	r3, r2, #1
 80171e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80171e8:	121b      	asrs	r3, r3, #8
 80171ea:	2bff      	cmp	r3, #255	; 0xff
 80171ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171ee:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 80171f2:	d13e      	bne.n	8017272 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 80171f4:	4427      	add	r7, r4
 80171f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80171fa:	3103      	adds	r1, #3
 80171fc:	7d86      	ldrb	r6, [r0, #22]
 80171fe:	2bff      	cmp	r3, #255	; 0xff
 8017200:	d10a      	bne.n	8017218 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8017202:	f801 6c03 	strb.w	r6, [r1, #-3]
 8017206:	7d43      	ldrb	r3, [r0, #21]
 8017208:	f801 3c02 	strb.w	r3, [r1, #-2]
 801720c:	7d03      	ldrb	r3, [r0, #20]
 801720e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8017212:	42a7      	cmp	r7, r4
 8017214:	d1ef      	bne.n	80171f6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8017216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017218:	b29a      	uxth	r2, r3
 801721a:	43db      	mvns	r3, r3
 801721c:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8017220:	fb16 f602 	smulbb	r6, r6, r2
 8017224:	b2db      	uxtb	r3, r3
 8017226:	fb05 6503 	mla	r5, r5, r3, r6
 801722a:	b2ad      	uxth	r5, r5
 801722c:	1c6e      	adds	r6, r5, #1
 801722e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8017232:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8017236:	fb16 f603 	smulbb	r6, r6, r3
 801723a:	122d      	asrs	r5, r5, #8
 801723c:	f801 5c03 	strb.w	r5, [r1, #-3]
 8017240:	7d45      	ldrb	r5, [r0, #21]
 8017242:	fb05 6502 	mla	r5, r5, r2, r6
 8017246:	b2ad      	uxth	r5, r5
 8017248:	1c6e      	adds	r6, r5, #1
 801724a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801724e:	122d      	asrs	r5, r5, #8
 8017250:	f801 5c02 	strb.w	r5, [r1, #-2]
 8017254:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017258:	7d06      	ldrb	r6, [r0, #20]
 801725a:	fb15 f303 	smulbb	r3, r5, r3
 801725e:	fb06 3202 	mla	r2, r6, r2, r3
 8017262:	b292      	uxth	r2, r2
 8017264:	1c53      	adds	r3, r2, #1
 8017266:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801726a:	1212      	asrs	r2, r2, #8
 801726c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8017270:	e7cf      	b.n	8017212 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8017272:	b2de      	uxtb	r6, r3
 8017274:	2b00      	cmp	r3, #0
 8017276:	d0ce      	beq.n	8017216 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8017278:	3103      	adds	r1, #3
 801727a:	4427      	add	r7, r4
 801727c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8017280:	3103      	adds	r1, #3
 8017282:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8017286:	fb02 f306 	mul.w	r3, r2, r6
 801728a:	42bc      	cmp	r4, r7
 801728c:	f103 0201 	add.w	r2, r3, #1
 8017290:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017294:	ea4f 2222 	mov.w	r2, r2, asr #8
 8017298:	b295      	uxth	r5, r2
 801729a:	ea6f 0202 	mvn.w	r2, r2
 801729e:	b2d3      	uxtb	r3, r2
 80172a0:	7d82      	ldrb	r2, [r0, #22]
 80172a2:	fb1c fc03 	smulbb	ip, ip, r3
 80172a6:	fb02 c205 	mla	r2, r2, r5, ip
 80172aa:	b292      	uxth	r2, r2
 80172ac:	f102 0c01 	add.w	ip, r2, #1
 80172b0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80172b4:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 80172b8:	fb1c fc03 	smulbb	ip, ip, r3
 80172bc:	ea4f 2222 	mov.w	r2, r2, asr #8
 80172c0:	f801 2c06 	strb.w	r2, [r1, #-6]
 80172c4:	7d42      	ldrb	r2, [r0, #21]
 80172c6:	fb02 c205 	mla	r2, r2, r5, ip
 80172ca:	b292      	uxth	r2, r2
 80172cc:	f102 0c01 	add.w	ip, r2, #1
 80172d0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80172d4:	ea4f 2222 	mov.w	r2, r2, asr #8
 80172d8:	f801 2c05 	strb.w	r2, [r1, #-5]
 80172dc:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80172e0:	f890 c014 	ldrb.w	ip, [r0, #20]
 80172e4:	fb12 f303 	smulbb	r3, r2, r3
 80172e8:	fb0c 3305 	mla	r3, ip, r5, r3
 80172ec:	b29b      	uxth	r3, r3
 80172ee:	f103 0201 	add.w	r2, r3, #1
 80172f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80172f6:	ea4f 2323 	mov.w	r3, r3, asr #8
 80172fa:	f801 3c04 	strb.w	r3, [r1, #-4]
 80172fe:	d1bd      	bne.n	801727c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8017300:	e789      	b.n	8017216 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08017302 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8017302:	b510      	push	{r4, lr}
 8017304:	7d04      	ldrb	r4, [r0, #20]
 8017306:	700c      	strb	r4, [r1, #0]
 8017308:	7d41      	ldrb	r1, [r0, #21]
 801730a:	7011      	strb	r1, [r2, #0]
 801730c:	7d82      	ldrb	r2, [r0, #22]
 801730e:	701a      	strb	r2, [r3, #0]
 8017310:	9b02      	ldr	r3, [sp, #8]
 8017312:	7dc2      	ldrb	r2, [r0, #23]
 8017314:	2001      	movs	r0, #1
 8017316:	701a      	strb	r2, [r3, #0]
 8017318:	bd10      	pop	{r4, pc}

0801731a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801731a:	b570      	push	{r4, r5, r6, lr}
 801731c:	4616      	mov	r6, r2
 801731e:	4604      	mov	r4, r0
 8017320:	460d      	mov	r5, r1
 8017322:	f7f8 fd31 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8017326:	6803      	ldr	r3, [r0, #0]
 8017328:	4629      	mov	r1, r5
 801732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801732c:	4798      	blx	r3
 801732e:	7520      	strb	r0, [r4, #20]
 8017330:	f7f8 fd2a 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8017334:	6803      	ldr	r3, [r0, #0]
 8017336:	4629      	mov	r1, r5
 8017338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801733a:	4798      	blx	r3
 801733c:	7560      	strb	r0, [r4, #21]
 801733e:	f7f8 fd23 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8017342:	6803      	ldr	r3, [r0, #0]
 8017344:	4629      	mov	r1, r5
 8017346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017348:	4798      	blx	r3
 801734a:	75e6      	strb	r6, [r4, #23]
 801734c:	75a0      	strb	r0, [r4, #22]
 801734e:	bd70      	pop	{r4, r5, r6, pc}

08017350 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8017350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017352:	460e      	mov	r6, r1
 8017354:	4617      	mov	r7, r2
 8017356:	4604      	mov	r4, r0
 8017358:	f000 f832 	bl	80173c0 <_ZN8touchgfx15AbstractPainterC1Ev>
 801735c:	4b12      	ldr	r3, [pc, #72]	; (80173a8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801735e:	6023      	str	r3, [r4, #0]
 8017360:	f7f8 fd12 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8017364:	6803      	ldr	r3, [r0, #0]
 8017366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017368:	4798      	blx	r3
 801736a:	1e43      	subs	r3, r0, #1
 801736c:	425d      	negs	r5, r3
 801736e:	415d      	adcs	r5, r3
 8017370:	4b0e      	ldr	r3, [pc, #56]	; (80173ac <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017376:	b130      	cbz	r0, 8017386 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8017378:	6803      	ldr	r3, [r0, #0]
 801737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801737c:	4798      	blx	r3
 801737e:	2801      	cmp	r0, #1
 8017380:	bf08      	it	eq
 8017382:	f045 0501 	orreq.w	r5, r5, #1
 8017386:	b92d      	cbnz	r5, 8017394 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8017388:	4b09      	ldr	r3, [pc, #36]	; (80173b0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801738a:	2129      	movs	r1, #41	; 0x29
 801738c:	4a09      	ldr	r2, [pc, #36]	; (80173b4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801738e:	480a      	ldr	r0, [pc, #40]	; (80173b8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8017390:	f00e f834 	bl	80253fc <__assert_func>
 8017394:	4b09      	ldr	r3, [pc, #36]	; (80173bc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8017396:	4620      	mov	r0, r4
 8017398:	463a      	mov	r2, r7
 801739a:	4631      	mov	r1, r6
 801739c:	6023      	str	r3, [r4, #0]
 801739e:	f7ff ffbc 	bl	801731a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 80173a2:	4620      	mov	r0, r4
 80173a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173a6:	bf00      	nop
 80173a8:	08028570 	.word	0x08028570
 80173ac:	2000c564 	.word	0x2000c564
 80173b0:	08028588 	.word	0x08028588
 80173b4:	0802864c 	.word	0x0802864c
 80173b8:	080285e6 	.word	0x080285e6
 80173bc:	08028634 	.word	0x08028634

080173c0 <_ZN8touchgfx15AbstractPainterC1Ev>:
 80173c0:	4a03      	ldr	r2, [pc, #12]	; (80173d0 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 80173c2:	6002      	str	r2, [r0, #0]
 80173c4:	2200      	movs	r2, #0
 80173c6:	6042      	str	r2, [r0, #4]
 80173c8:	22ff      	movs	r2, #255	; 0xff
 80173ca:	7202      	strb	r2, [r0, #8]
 80173cc:	4770      	bx	lr
 80173ce:	bf00      	nop
 80173d0:	08028690 	.word	0x08028690

080173d4 <_ZN8touchgfx15AbstractPainterD1Ev>:
 80173d4:	4770      	bx	lr

080173d6 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 80173d6:	8081      	strh	r1, [r0, #4]
 80173d8:	80c2      	strh	r2, [r0, #6]
 80173da:	4770      	bx	lr

080173dc <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 80173dc:	7201      	strb	r1, [r0, #8]
 80173de:	4770      	bx	lr

080173e0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80173e0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80173e4:	4770      	bx	lr

080173e6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80173e6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80173ea:	4770      	bx	lr

080173ec <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80173ec:	6281      	str	r1, [r0, #40]	; 0x28
 80173ee:	4770      	bx	lr

080173f0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80173f0:	b513      	push	{r0, r1, r4, lr}
 80173f2:	6803      	ldr	r3, [r0, #0]
 80173f4:	4604      	mov	r4, r0
 80173f6:	4601      	mov	r1, r0
 80173f8:	4668      	mov	r0, sp
 80173fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173fc:	4798      	blx	r3
 80173fe:	6823      	ldr	r3, [r4, #0]
 8017400:	4669      	mov	r1, sp
 8017402:	4620      	mov	r0, r4
 8017404:	691b      	ldr	r3, [r3, #16]
 8017406:	4798      	blx	r3
 8017408:	b002      	add	sp, #8
 801740a:	bd10      	pop	{r4, pc}

0801740c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801740c:	b510      	push	{r4, lr}
 801740e:	2200      	movs	r2, #0
 8017410:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8017414:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8017418:	8002      	strh	r2, [r0, #0]
 801741a:	8042      	strh	r2, [r0, #2]
 801741c:	8084      	strh	r4, [r0, #4]
 801741e:	80c1      	strh	r1, [r0, #6]
 8017420:	bd10      	pop	{r4, pc}

08017422 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8017422:	2200      	movs	r2, #0
 8017424:	8002      	strh	r2, [r0, #0]
 8017426:	8042      	strh	r2, [r0, #2]
 8017428:	8082      	strh	r2, [r0, #4]
 801742a:	80c2      	strh	r2, [r0, #6]
 801742c:	4770      	bx	lr
	...

08017430 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8017430:	b508      	push	{r3, lr}
 8017432:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017434:	b928      	cbnz	r0, 8017442 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8017436:	4b03      	ldr	r3, [pc, #12]	; (8017444 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8017438:	2127      	movs	r1, #39	; 0x27
 801743a:	4a03      	ldr	r2, [pc, #12]	; (8017448 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801743c:	4803      	ldr	r0, [pc, #12]	; (801744c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801743e:	f00d ffdd 	bl	80253fc <__assert_func>
 8017442:	bd08      	pop	{r3, pc}
 8017444:	0802869c 	.word	0x0802869c
 8017448:	08028780 	.word	0x08028780
 801744c:	080286c3 	.word	0x080286c3

08017450 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8017450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017454:	b089      	sub	sp, #36	; 0x24
 8017456:	4604      	mov	r4, r0
 8017458:	6808      	ldr	r0, [r1, #0]
 801745a:	f04f 0a00 	mov.w	sl, #0
 801745e:	6849      	ldr	r1, [r1, #4]
 8017460:	ab02      	add	r3, sp, #8
 8017462:	f04f 0b01 	mov.w	fp, #1
 8017466:	c303      	stmia	r3!, {r0, r1}
 8017468:	4b3f      	ldr	r3, [pc, #252]	; (8017568 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801746a:	4621      	mov	r1, r4
 801746c:	a804      	add	r0, sp, #16
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	2b01      	cmp	r3, #1
 8017472:	6823      	ldr	r3, [r4, #0]
 8017474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017476:	bf1f      	itttt	ne
 8017478:	f10d 0906 	addne.w	r9, sp, #6
 801747c:	ae03      	addne	r6, sp, #12
 801747e:	f10d 050e 	addne.w	r5, sp, #14
 8017482:	f10d 080a 	addne.w	r8, sp, #10
 8017486:	bf01      	itttt	eq
 8017488:	f10d 090e 	addeq.w	r9, sp, #14
 801748c:	f10d 0606 	addeq.w	r6, sp, #6
 8017490:	ad03      	addeq	r5, sp, #12
 8017492:	f10d 0808 	addeq.w	r8, sp, #8
 8017496:	4798      	blx	r3
 8017498:	f9b5 3000 	ldrsh.w	r3, [r5]
 801749c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d056      	beq.n	8017552 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80174a4:	4293      	cmp	r3, r2
 80174a6:	bfa8      	it	ge
 80174a8:	4613      	movge	r3, r2
 80174aa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80174ae:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80174b2:	2f00      	cmp	r7, #0
 80174b4:	dd34      	ble.n	8017520 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80174b6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80174ba:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80174be:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80174c2:	4484      	add	ip, r0
 80174c4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80174c8:	f9b6 e000 	ldrsh.w	lr, [r6]
 80174cc:	fa0f fc8c 	sxth.w	ip, ip
 80174d0:	f9b9 1000 	ldrsh.w	r1, [r9]
 80174d4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80174d8:	4562      	cmp	r2, ip
 80174da:	f8ad 301a 	strh.w	r3, [sp, #26]
 80174de:	f8ad e01c 	strh.w	lr, [sp, #28]
 80174e2:	f8ad 101e 	strh.w	r1, [sp, #30]
 80174e6:	da29      	bge.n	801753c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174e8:	4472      	add	r2, lr
 80174ea:	b212      	sxth	r2, r2
 80174ec:	4290      	cmp	r0, r2
 80174ee:	da25      	bge.n	801753c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80174f0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80174f4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80174f8:	4402      	add	r2, r0
 80174fa:	b212      	sxth	r2, r2
 80174fc:	4293      	cmp	r3, r2
 80174fe:	da1d      	bge.n	801753c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017500:	440b      	add	r3, r1
 8017502:	b21b      	sxth	r3, r3
 8017504:	4298      	cmp	r0, r3
 8017506:	da19      	bge.n	801753c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017508:	6823      	ldr	r3, [r4, #0]
 801750a:	a906      	add	r1, sp, #24
 801750c:	4620      	mov	r0, r4
 801750e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017510:	4798      	blx	r3
 8017512:	b998      	cbnz	r0, 801753c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017514:	107f      	asrs	r7, r7, #1
 8017516:	f04f 0a01 	mov.w	sl, #1
 801751a:	f8ad 7006 	strh.w	r7, [sp, #6]
 801751e:	e7c6      	b.n	80174ae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017520:	d10c      	bne.n	801753c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8017522:	f8ad b006 	strh.w	fp, [sp, #6]
 8017526:	f8b8 2000 	ldrh.w	r2, [r8]
 801752a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801752e:	440a      	add	r2, r1
 8017530:	f8a8 2000 	strh.w	r2, [r8]
 8017534:	882b      	ldrh	r3, [r5, #0]
 8017536:	1a5b      	subs	r3, r3, r1
 8017538:	802b      	strh	r3, [r5, #0]
 801753a:	e7ad      	b.n	8017498 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801753c:	f1ba 0f00 	cmp.w	sl, #0
 8017540:	d0f1      	beq.n	8017526 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8017542:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017546:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801754a:	429a      	cmp	r2, r3
 801754c:	bf08      	it	eq
 801754e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8017550:	e7e9      	b.n	8017526 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8017552:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017556:	429a      	cmp	r2, r3
 8017558:	bf04      	itt	eq
 801755a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801755e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8017560:	b009      	add	sp, #36	; 0x24
 8017562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017566:	bf00      	nop
 8017568:	2000c55c 	.word	0x2000c55c

0801756c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801756c:	2200      	movs	r2, #0
 801756e:	2101      	movs	r1, #1
 8017570:	8082      	strh	r2, [r0, #4]
 8017572:	80c2      	strh	r2, [r0, #6]
 8017574:	8102      	strh	r2, [r0, #8]
 8017576:	8142      	strh	r2, [r0, #10]
 8017578:	8182      	strh	r2, [r0, #12]
 801757a:	81c2      	strh	r2, [r0, #14]
 801757c:	8202      	strh	r2, [r0, #16]
 801757e:	8242      	strh	r2, [r0, #18]
 8017580:	61c2      	str	r2, [r0, #28]
 8017582:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017586:	6282      	str	r2, [r0, #40]	; 0x28
 8017588:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801758c:	4905      	ldr	r1, [pc, #20]	; (80175a4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801758e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017592:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017596:	6001      	str	r1, [r0, #0]
 8017598:	8582      	strh	r2, [r0, #44]	; 0x2c
 801759a:	22ff      	movs	r2, #255	; 0xff
 801759c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80175a0:	4770      	bx	lr
 80175a2:	bf00      	nop
 80175a4:	08028708 	.word	0x08028708

080175a8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 80175a8:	4770      	bx	lr

080175aa <_ZNK8touchgfx4Line14getMinimalRectEv>:
 80175aa:	f101 0368 	add.w	r3, r1, #104	; 0x68
 80175ae:	4602      	mov	r2, r0
 80175b0:	cb03      	ldmia	r3!, {r0, r1}
 80175b2:	6010      	str	r0, [r2, #0]
 80175b4:	4610      	mov	r0, r2
 80175b6:	6051      	str	r1, [r2, #4]
 80175b8:	4770      	bx	lr

080175ba <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80175ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175be:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 80175c2:	b395      	cbz	r5, 801762a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80175c4:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 80175c8:	f1bc 0f00 	cmp.w	ip, #0
 80175cc:	d02d      	beq.n	801762a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 80175ce:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80175d2:	f9b1 e000 	ldrsh.w	lr, [r1]
 80175d6:	b354      	cbz	r4, 801762e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80175d8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80175dc:	b33f      	cbz	r7, 801762e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 80175de:	f9b0 8000 	ldrsh.w	r8, [r0]
 80175e2:	4475      	add	r5, lr
 80175e4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80175e8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80175ec:	45f0      	cmp	r8, lr
 80175ee:	4646      	mov	r6, r8
 80175f0:	4444      	add	r4, r8
 80175f2:	bfa8      	it	ge
 80175f4:	4676      	movge	r6, lr
 80175f6:	4293      	cmp	r3, r2
 80175f8:	4619      	mov	r1, r3
 80175fa:	443b      	add	r3, r7
 80175fc:	bfa8      	it	ge
 80175fe:	4611      	movge	r1, r2
 8017600:	4462      	add	r2, ip
 8017602:	b22d      	sxth	r5, r5
 8017604:	8006      	strh	r6, [r0, #0]
 8017606:	b224      	sxth	r4, r4
 8017608:	8041      	strh	r1, [r0, #2]
 801760a:	b212      	sxth	r2, r2
 801760c:	b21b      	sxth	r3, r3
 801760e:	42a5      	cmp	r5, r4
 8017610:	bfac      	ite	ge
 8017612:	ebc6 0405 	rsbge	r4, r6, r5
 8017616:	ebc6 0404 	rsblt	r4, r6, r4
 801761a:	429a      	cmp	r2, r3
 801761c:	bfac      	ite	ge
 801761e:	ebc1 0302 	rsbge	r3, r1, r2
 8017622:	ebc1 0303 	rsblt	r3, r1, r3
 8017626:	8084      	strh	r4, [r0, #4]
 8017628:	80c3      	strh	r3, [r0, #6]
 801762a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801762e:	f8a0 e000 	strh.w	lr, [r0]
 8017632:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017636:	8043      	strh	r3, [r0, #2]
 8017638:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801763c:	8083      	strh	r3, [r0, #4]
 801763e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017642:	e7f1      	b.n	8017628 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08017644 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8017644:	b507      	push	{r0, r1, r2, lr}
 8017646:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801764a:	ab01      	add	r3, sp, #4
 801764c:	6809      	ldr	r1, [r1, #0]
 801764e:	6800      	ldr	r0, [r0, #0]
 8017650:	f002 fc4f 	bl	8019ef2 <_ZN8touchgfx6muldivElllRl>
 8017654:	b003      	add	sp, #12
 8017656:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801765c <_ZN8touchgfx7CWRUtil4sineEi>:
 801765c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017660:	fb90 f3f2 	sdiv	r3, r0, r2
 8017664:	fb03 0312 	mls	r3, r3, r2, r0
 8017668:	4413      	add	r3, r2
 801766a:	fb93 f0f2 	sdiv	r0, r3, r2
 801766e:	fb02 3010 	mls	r0, r2, r0, r3
 8017672:	4b0a      	ldr	r3, [pc, #40]	; (801769c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8017674:	285a      	cmp	r0, #90	; 0x5a
 8017676:	dc02      	bgt.n	801767e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8017678:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801767c:	4770      	bx	lr
 801767e:	28b4      	cmp	r0, #180	; 0xb4
 8017680:	dc02      	bgt.n	8017688 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8017682:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8017686:	e7f7      	b.n	8017678 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8017688:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801768c:	bfd4      	ite	le
 801768e:	38b4      	suble	r0, #180	; 0xb4
 8017690:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8017694:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017698:	4240      	negs	r0, r0
 801769a:	4770      	bx	lr
 801769c:	0802882a 	.word	0x0802882a

080176a0 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80176a0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80176a4:	f04f 0300 	mov.w	r3, #0
 80176a8:	bf2c      	ite	cs
 80176aa:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80176ae:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80176b2:	1899      	adds	r1, r3, r2
 80176b4:	4288      	cmp	r0, r1
 80176b6:	bf24      	itt	cs
 80176b8:	1853      	addcs	r3, r2, r1
 80176ba:	1a40      	subcs	r0, r0, r1
 80176bc:	0892      	lsrs	r2, r2, #2
 80176be:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80176c2:	d1f6      	bne.n	80176b2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 80176c4:	4618      	mov	r0, r3
 80176c6:	4770      	bx	lr

080176c8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 80176c8:	2800      	cmp	r0, #0
 80176ca:	b508      	push	{r3, lr}
 80176cc:	da05      	bge.n	80176da <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 80176ce:	4240      	negs	r0, r0
 80176d0:	f7ff fffa 	bl	80176c8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80176d4:	4240      	negs	r0, r0
 80176d6:	b240      	sxtb	r0, r0
 80176d8:	bd08      	pop	{r3, pc}
 80176da:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80176de:	dc11      	bgt.n	8017704 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80176e0:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80176e4:	dd09      	ble.n	80176fa <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80176e6:	4340      	muls	r0, r0
 80176e8:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80176ec:	f7ff ffd8 	bl	80176a0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80176f0:	f7ff ffea 	bl	80176c8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80176f4:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80176f8:	e7ed      	b.n	80176d6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 80176fa:	3003      	adds	r0, #3
 80176fc:	4b02      	ldr	r3, [pc, #8]	; (8017708 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 80176fe:	10c0      	asrs	r0, r0, #3
 8017700:	5618      	ldrsb	r0, [r3, r0]
 8017702:	e7e9      	b.n	80176d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017704:	2000      	movs	r0, #0
 8017706:	e7e7      	b.n	80176d8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017708:	080287ce 	.word	0x080287ce

0801770c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801770c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801770e:	460c      	mov	r4, r1
 8017710:	1e01      	subs	r1, r0, #0
 8017712:	4615      	mov	r5, r2
 8017714:	db01      	blt.n	801771a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8017716:	2c00      	cmp	r4, #0
 8017718:	da06      	bge.n	8017728 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801771a:	4b11      	ldr	r3, [pc, #68]	; (8017760 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801771c:	f240 3197 	movw	r1, #919	; 0x397
 8017720:	4a10      	ldr	r2, [pc, #64]	; (8017764 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8017722:	4811      	ldr	r0, [pc, #68]	; (8017768 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8017724:	f00d fe6a 	bl	80253fc <__assert_func>
 8017728:	428c      	cmp	r4, r1
 801772a:	dd06      	ble.n	801773a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801772c:	4620      	mov	r0, r4
 801772e:	f7ff ffed 	bl	801770c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017732:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017736:	b003      	add	sp, #12
 8017738:	bd30      	pop	{r4, r5, pc}
 801773a:	4349      	muls	r1, r1
 801773c:	fb04 1004 	mla	r0, r4, r4, r1
 8017740:	f7ff ffae 	bl	80176a0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017744:	6028      	str	r0, [r5, #0]
 8017746:	2800      	cmp	r0, #0
 8017748:	d0f5      	beq.n	8017736 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801774a:	4602      	mov	r2, r0
 801774c:	ab01      	add	r3, sp, #4
 801774e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017752:	4620      	mov	r0, r4
 8017754:	f002 fbcd 	bl	8019ef2 <_ZN8touchgfx6muldivElllRl>
 8017758:	f7ff ffb6 	bl	80176c8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801775c:	e7eb      	b.n	8017736 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801775e:	bf00      	nop
 8017760:	080288e0 	.word	0x080288e0
 8017764:	080289a8 	.word	0x080289a8
 8017768:	080288f1 	.word	0x080288f1

0801776c <_ZN8touchgfx4LineC1Ev>:
 801776c:	b510      	push	{r4, lr}
 801776e:	4604      	mov	r4, r0
 8017770:	f7ff fefc 	bl	801756c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017774:	4b0c      	ldr	r3, [pc, #48]	; (80177a8 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8017776:	2220      	movs	r2, #32
 8017778:	4620      	mov	r0, r4
 801777a:	6023      	str	r3, [r4, #0]
 801777c:	2300      	movs	r3, #0
 801777e:	6422      	str	r2, [r4, #64]	; 0x40
 8017780:	2212      	movs	r2, #18
 8017782:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8017786:	6722      	str	r2, [r4, #112]	; 0x70
 8017788:	60a3      	str	r3, [r4, #8]
 801778a:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801778e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8017792:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017796:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801779a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801779e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80177a2:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80177a6:	bd10      	pop	{r4, pc}
 80177a8:	08028930 	.word	0x08028930

080177ac <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80177ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177b0:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80177b2:	b085      	sub	sp, #20
 80177b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80177b6:	4604      	mov	r4, r0
 80177b8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80177ba:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80177bc:	1af6      	subs	r6, r6, r3
 80177be:	eba5 0502 	sub.w	r5, r5, r2
 80177c2:	f040 809b 	bne.w	80178fc <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 80177c6:	b955      	cbnz	r5, 80177de <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 80177c8:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80177cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80177d0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80177d4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80177d8:	b005      	add	sp, #20
 80177da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177de:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80177e2:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80177e6:	f04f 0802 	mov.w	r8, #2
 80177ea:	463a      	mov	r2, r7
 80177ec:	4629      	mov	r1, r5
 80177ee:	ab03      	add	r3, sp, #12
 80177f0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80177f2:	f002 fb7e 	bl	8019ef2 <_ZN8touchgfx6muldivElllRl>
 80177f6:	ab03      	add	r3, sp, #12
 80177f8:	463a      	mov	r2, r7
 80177fa:	4631      	mov	r1, r6
 80177fc:	fb90 f5f8 	sdiv	r5, r0, r8
 8017800:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017802:	f002 fb76 	bl	8019ef2 <_ZN8touchgfx6muldivElllRl>
 8017806:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801780a:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801780e:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8017812:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8017814:	fb90 f0f8 	sdiv	r0, r0, r8
 8017818:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801781c:	eba8 0305 	sub.w	r3, r8, r5
 8017820:	f1ba 0f00 	cmp.w	sl, #0
 8017824:	f040 80c3 	bne.w	80179ae <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8017828:	64a3      	str	r3, [r4, #72]	; 0x48
 801782a:	19c3      	adds	r3, r0, r7
 801782c:	65a3      	str	r3, [r4, #88]	; 0x58
 801782e:	ebae 0305 	sub.w	r3, lr, r5
 8017832:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017834:	eb00 030c 	add.w	r3, r0, ip
 8017838:	65e3      	str	r3, [r4, #92]	; 0x5c
 801783a:	eb05 030e 	add.w	r3, r5, lr
 801783e:	6523      	str	r3, [r4, #80]	; 0x50
 8017840:	ebac 0300 	sub.w	r3, ip, r0
 8017844:	6623      	str	r3, [r4, #96]	; 0x60
 8017846:	eb05 0308 	add.w	r3, r5, r8
 801784a:	6563      	str	r3, [r4, #84]	; 0x54
 801784c:	1a3b      	subs	r3, r7, r0
 801784e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8017850:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8017854:	6663      	str	r3, [r4, #100]	; 0x64
 8017856:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801785a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801785c:	4632      	mov	r2, r6
 801785e:	9301      	str	r3, [sp, #4]
 8017860:	9100      	str	r1, [sp, #0]
 8017862:	f859 bb04 	ldr.w	fp, [r9], #4
 8017866:	9b00      	ldr	r3, [sp, #0]
 8017868:	455e      	cmp	r6, fp
 801786a:	bfa8      	it	ge
 801786c:	465e      	movge	r6, fp
 801786e:	455a      	cmp	r2, fp
 8017870:	bfb8      	it	lt
 8017872:	465a      	movlt	r2, fp
 8017874:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8017878:	4559      	cmp	r1, fp
 801787a:	bfa8      	it	ge
 801787c:	4659      	movge	r1, fp
 801787e:	455b      	cmp	r3, fp
 8017880:	bfb8      	it	lt
 8017882:	465b      	movlt	r3, fp
 8017884:	9300      	str	r3, [sp, #0]
 8017886:	9b01      	ldr	r3, [sp, #4]
 8017888:	454b      	cmp	r3, r9
 801788a:	d1ea      	bne.n	8017862 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801788c:	f04f 0b20 	mov.w	fp, #32
 8017890:	b209      	sxth	r1, r1
 8017892:	b212      	sxth	r2, r2
 8017894:	f1ba 0f01 	cmp.w	sl, #1
 8017898:	b236      	sxth	r6, r6
 801789a:	fb91 f9fb 	sdiv	r9, r1, fp
 801789e:	f9bd 1000 	ldrsh.w	r1, [sp]
 80178a2:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 80178a6:	fb92 f2fb 	sdiv	r2, r2, fp
 80178aa:	fb91 f1fb 	sdiv	r1, r1, fp
 80178ae:	fb96 f6fb 	sdiv	r6, r6, fp
 80178b2:	f102 0201 	add.w	r2, r2, #1
 80178b6:	f101 0101 	add.w	r1, r1, #1
 80178ba:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 80178be:	eba1 0109 	sub.w	r1, r1, r9
 80178c2:	eba2 0606 	sub.w	r6, r2, r6
 80178c6:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 80178ca:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 80178ce:	d183      	bne.n	80177d8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 80178d0:	eba8 0305 	sub.w	r3, r8, r5
 80178d4:	64a3      	str	r3, [r4, #72]	; 0x48
 80178d6:	19c3      	adds	r3, r0, r7
 80178d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80178da:	ebae 0305 	sub.w	r3, lr, r5
 80178de:	64e3      	str	r3, [r4, #76]	; 0x4c
 80178e0:	eb00 030c 	add.w	r3, r0, ip
 80178e4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80178e6:	eb05 030e 	add.w	r3, r5, lr
 80178ea:	4445      	add	r5, r8
 80178ec:	6523      	str	r3, [r4, #80]	; 0x50
 80178ee:	ebac 0300 	sub.w	r3, ip, r0
 80178f2:	1a38      	subs	r0, r7, r0
 80178f4:	6565      	str	r5, [r4, #84]	; 0x54
 80178f6:	6623      	str	r3, [r4, #96]	; 0x60
 80178f8:	6660      	str	r0, [r4, #100]	; 0x64
 80178fa:	e76d      	b.n	80177d8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 80178fc:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8017900:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8017904:	2d00      	cmp	r5, #0
 8017906:	f43f af6e 	beq.w	80177e6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801790a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801790e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8017912:	fb93 f2f7 	sdiv	r2, r3, r7
 8017916:	fb07 3312 	mls	r3, r7, r2, r3
 801791a:	b34b      	cbz	r3, 8017970 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801791c:	fb97 f2f3 	sdiv	r2, r7, r3
 8017920:	fb03 7712 	mls	r7, r3, r2, r7
 8017924:	2f00      	cmp	r7, #0
 8017926:	d1f4      	bne.n	8017912 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8017928:	2b01      	cmp	r3, #1
 801792a:	f24b 5204 	movw	r2, #46340	; 0xb504
 801792e:	bf18      	it	ne
 8017930:	fb96 f6f3 	sdivne	r6, r6, r3
 8017934:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8017938:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801793c:	bf18      	it	ne
 801793e:	fb95 f5f3 	sdivne	r5, r5, r3
 8017942:	4291      	cmp	r1, r2
 8017944:	dd16      	ble.n	8017974 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 8017946:	2d00      	cmp	r5, #0
 8017948:	da4d      	bge.n	80179e6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801794a:	4b29      	ldr	r3, [pc, #164]	; (80179f0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801794c:	429d      	cmp	r5, r3
 801794e:	da27      	bge.n	80179a0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8017950:	426a      	negs	r2, r5
 8017952:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017956:	fb91 f1f3 	sdiv	r1, r1, r3
 801795a:	fb92 f3f3 	sdiv	r3, r2, r3
 801795e:	4299      	cmp	r1, r3
 8017960:	bfcc      	ite	gt
 8017962:	1c4b      	addgt	r3, r1, #1
 8017964:	3301      	addle	r3, #1
 8017966:	fb96 f6f3 	sdiv	r6, r6, r3
 801796a:	fb95 f5f3 	sdiv	r5, r5, r3
 801796e:	e00f      	b.n	8017990 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8017970:	463b      	mov	r3, r7
 8017972:	e7d9      	b.n	8017928 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8017974:	2d00      	cmp	r5, #0
 8017976:	fb92 f2f1 	sdiv	r2, r2, r1
 801797a:	da13      	bge.n	80179a4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801797c:	4269      	negs	r1, r5
 801797e:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017982:	fb93 f3f1 	sdiv	r3, r3, r1
 8017986:	429a      	cmp	r2, r3
 8017988:	bfa8      	it	ge
 801798a:	461a      	movge	r2, r3
 801798c:	4356      	muls	r6, r2
 801798e:	4355      	muls	r5, r2
 8017990:	fb05 f005 	mul.w	r0, r5, r5
 8017994:	fb06 0006 	mla	r0, r6, r6, r0
 8017998:	f7ff fe82 	bl	80176a0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801799c:	4607      	mov	r7, r0
 801799e:	e722      	b.n	80177e6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 80179a0:	2200      	movs	r2, #0
 80179a2:	e7eb      	b.n	801797c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 80179a4:	4629      	mov	r1, r5
 80179a6:	e7ea      	b.n	801797e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80179a8:	4629      	mov	r1, r5
 80179aa:	2200      	movs	r2, #0
 80179ac:	e7e7      	b.n	801797e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80179ae:	1a1b      	subs	r3, r3, r0
 80179b0:	64a3      	str	r3, [r4, #72]	; 0x48
 80179b2:	19c3      	adds	r3, r0, r7
 80179b4:	1b5b      	subs	r3, r3, r5
 80179b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80179b8:	ebae 0305 	sub.w	r3, lr, r5
 80179bc:	4403      	add	r3, r0
 80179be:	64e3      	str	r3, [r4, #76]	; 0x4c
 80179c0:	eb00 030c 	add.w	r3, r0, ip
 80179c4:	442b      	add	r3, r5
 80179c6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80179c8:	eb05 030e 	add.w	r3, r5, lr
 80179cc:	4403      	add	r3, r0
 80179ce:	6523      	str	r3, [r4, #80]	; 0x50
 80179d0:	ebac 0300 	sub.w	r3, ip, r0
 80179d4:	442b      	add	r3, r5
 80179d6:	6623      	str	r3, [r4, #96]	; 0x60
 80179d8:	eb05 0308 	add.w	r3, r5, r8
 80179dc:	1a1b      	subs	r3, r3, r0
 80179de:	6563      	str	r3, [r4, #84]	; 0x54
 80179e0:	1a3b      	subs	r3, r7, r0
 80179e2:	1b5b      	subs	r3, r3, r5
 80179e4:	e733      	b.n	801784e <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 80179e6:	4295      	cmp	r5, r2
 80179e8:	ddde      	ble.n	80179a8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 80179ea:	462a      	mov	r2, r5
 80179ec:	e7b1      	b.n	8017952 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 80179ee:	bf00      	nop
 80179f0:	ffff4afc 	.word	0xffff4afc

080179f4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 80179f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80179f6:	428b      	cmp	r3, r1
 80179f8:	d102      	bne.n	8017a00 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 80179fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80179fc:	4293      	cmp	r3, r2
 80179fe:	d003      	beq.n	8017a08 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8017a00:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8017a04:	f7ff bed2 	b.w	80177ac <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017a08:	4770      	bx	lr

08017a0a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8017a0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017a0c:	428b      	cmp	r3, r1
 8017a0e:	d102      	bne.n	8017a16 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8017a10:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8017a12:	4293      	cmp	r3, r2
 8017a14:	d003      	beq.n	8017a1e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8017a16:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 8017a1a:	f7ff bec7 	b.w	80177ac <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017a1e:	4770      	bx	lr

08017a20 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8017a20:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8017a24:	f7ff bec2 	b.w	80177ac <_ZN8touchgfx4Line17updateCachedShapeEv>

08017a28 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8017a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a2c:	b0b3      	sub	sp, #204	; 0xcc
 8017a2e:	4604      	mov	r4, r0
 8017a30:	460a      	mov	r2, r1
 8017a32:	4601      	mov	r1, r0
 8017a34:	a804      	add	r0, sp, #16
 8017a36:	ad32      	add	r5, sp, #200	; 0xc8
 8017a38:	f00c f914 	bl	8023c64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8017a40:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8017a44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017a46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017a48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017a4a:	1ac0      	subs	r0, r0, r3
 8017a4c:	eba1 0102 	sub.w	r1, r1, r2
 8017a50:	d43c      	bmi.n	8017acc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8017a52:	2900      	cmp	r1, #0
 8017a54:	462a      	mov	r2, r5
 8017a56:	db33      	blt.n	8017ac0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 8017a58:	f7ff fe58 	bl	801770c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017a5c:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8017a60:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017a62:	a804      	add	r0, sp, #16
 8017a64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017a66:	f00c fac6 	bl	8023ff6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017a6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017a6c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8017a6e:	a804      	add	r0, sp, #16
 8017a70:	f00c fa50 	bl	8023f14 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017a74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017a78:	2b01      	cmp	r3, #1
 8017a7a:	d137      	bne.n	8017aec <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017a7c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8017a7e:	2eb3      	cmp	r6, #179	; 0xb3
 8017a80:	dc34      	bgt.n	8017aec <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017a82:	eba7 0906 	sub.w	r9, r7, r6
 8017a86:	4648      	mov	r0, r9
 8017a88:	f7ff fde8 	bl	801765c <_ZN8touchgfx7CWRUtil4sineEi>
 8017a8c:	a902      	add	r1, sp, #8
 8017a8e:	9002      	str	r0, [sp, #8]
 8017a90:	4628      	mov	r0, r5
 8017a92:	f7ff fdd7 	bl	8017644 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017a96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017a98:	eb00 0801 	add.w	r8, r0, r1
 8017a9c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017aa0:	f7ff fddc 	bl	801765c <_ZN8touchgfx7CWRUtil4sineEi>
 8017aa4:	a903      	add	r1, sp, #12
 8017aa6:	9003      	str	r0, [sp, #12]
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	f7ff fdcb 	bl	8017644 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017aae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8017ab0:	4641      	mov	r1, r8
 8017ab2:	1a12      	subs	r2, r2, r0
 8017ab4:	a804      	add	r0, sp, #16
 8017ab6:	f00c fa2d 	bl	8023f14 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017aba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017abc:	441e      	add	r6, r3
 8017abe:	e7de      	b.n	8017a7e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 8017ac0:	4249      	negs	r1, r1
 8017ac2:	f7ff fe23 	bl	801770c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017ac6:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8017aca:	e7c9      	b.n	8017a60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017acc:	2900      	cmp	r1, #0
 8017ace:	f1c0 0000 	rsb	r0, r0, #0
 8017ad2:	462a      	mov	r2, r5
 8017ad4:	db04      	blt.n	8017ae0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8017ad6:	f7ff fe19 	bl	801770c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017ada:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8017ade:	e7bf      	b.n	8017a60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017ae0:	4249      	negs	r1, r1
 8017ae2:	f7ff fe13 	bl	801770c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017ae6:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8017aea:	e7b9      	b.n	8017a60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017aec:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8017aee:	a804      	add	r0, sp, #16
 8017af0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017af2:	f00c fa0f 	bl	8023f14 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017af8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8017afa:	a804      	add	r0, sp, #16
 8017afc:	f00c fa0a 	bl	8023f14 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017b00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017b04:	2b01      	cmp	r3, #1
 8017b06:	d123      	bne.n	8017b50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017b08:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8017b0a:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8017b0e:	2e00      	cmp	r6, #0
 8017b10:	dd1e      	ble.n	8017b50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017b12:	eb06 0907 	add.w	r9, r6, r7
 8017b16:	4648      	mov	r0, r9
 8017b18:	f7ff fda0 	bl	801765c <_ZN8touchgfx7CWRUtil4sineEi>
 8017b1c:	a902      	add	r1, sp, #8
 8017b1e:	9002      	str	r0, [sp, #8]
 8017b20:	4628      	mov	r0, r5
 8017b22:	f7ff fd8f 	bl	8017644 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017b26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017b28:	eb00 0801 	add.w	r8, r0, r1
 8017b2c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017b30:	f7ff fd94 	bl	801765c <_ZN8touchgfx7CWRUtil4sineEi>
 8017b34:	a903      	add	r1, sp, #12
 8017b36:	9003      	str	r0, [sp, #12]
 8017b38:	4628      	mov	r0, r5
 8017b3a:	f7ff fd83 	bl	8017644 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017b3e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017b40:	4641      	mov	r1, r8
 8017b42:	1a12      	subs	r2, r2, r0
 8017b44:	a804      	add	r0, sp, #16
 8017b46:	f00c f9e5 	bl	8023f14 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017b4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017b4c:	1af6      	subs	r6, r6, r3
 8017b4e:	e7de      	b.n	8017b0e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8017b50:	a804      	add	r0, sp, #16
 8017b52:	f00c fb54 	bl	80241fe <_ZN8touchgfx6Canvas6renderEv>
 8017b56:	4604      	mov	r4, r0
 8017b58:	a804      	add	r0, sp, #16
 8017b5a:	f00c fb91 	bl	8024280 <_ZN8touchgfx6CanvasD1Ev>
 8017b5e:	4620      	mov	r0, r4
 8017b60:	b033      	add	sp, #204	; 0xcc
 8017b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017b66 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017b66:	b570      	push	{r4, r5, r6, lr}
 8017b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b6c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017b6e:	4604      	mov	r4, r0
 8017b70:	429a      	cmp	r2, r3
 8017b72:	d00c      	beq.n	8017b8e <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8017b74:	f850 3b26 	ldr.w	r3, [r0], #38
 8017b78:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017b7a:	f7f9 f82d 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8017b7e:	2300      	movs	r3, #0
 8017b80:	4601      	mov	r1, r0
 8017b82:	46ac      	mov	ip, r5
 8017b84:	4620      	mov	r0, r4
 8017b86:	461a      	mov	r2, r3
 8017b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b8c:	4760      	bx	ip
 8017b8e:	2000      	movs	r0, #0
 8017b90:	bd70      	pop	{r4, r5, r6, pc}

08017b92 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b98:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017b9a:	429a      	cmp	r2, r3
 8017b9c:	d016      	beq.n	8017bcc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8017b9e:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	f7f7 fc92 	bl	800f4cc <_ZNK8touchgfx9TypedText7getFontEv>
 8017ba8:	6803      	ldr	r3, [r0, #0]
 8017baa:	4605      	mov	r5, r0
 8017bac:	4620      	mov	r0, r4
 8017bae:	69de      	ldr	r6, [r3, #28]
 8017bb0:	f7f7 fca8 	bl	800f504 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017bb4:	4607      	mov	r7, r0
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	f7f9 f80e 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	4602      	mov	r2, r0
 8017bc0:	4639      	mov	r1, r7
 8017bc2:	9300      	str	r3, [sp, #0]
 8017bc4:	4628      	mov	r0, r5
 8017bc6:	47b0      	blx	r6
 8017bc8:	b003      	add	sp, #12
 8017bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bcc:	2000      	movs	r0, #0
 8017bce:	e7fb      	b.n	8017bc8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08017bd0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017bd0:	b40e      	push	{r1, r2, r3}
 8017bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bda:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017bdc:	b09b      	sub	sp, #108	; 0x6c
 8017bde:	4604      	mov	r4, r0
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d03f      	beq.n	8017c64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8017be4:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8017be8:	ab22      	add	r3, sp, #136	; 0x88
 8017bea:	4638      	mov	r0, r7
 8017bec:	9303      	str	r3, [sp, #12]
 8017bee:	f7f7 fc6d 	bl	800f4cc <_ZNK8touchgfx9TypedText7getFontEv>
 8017bf2:	6803      	ldr	r3, [r0, #0]
 8017bf4:	4680      	mov	r8, r0
 8017bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bf8:	4798      	blx	r3
 8017bfa:	4606      	mov	r6, r0
 8017bfc:	b205      	sxth	r5, r0
 8017bfe:	a804      	add	r0, sp, #16
 8017c00:	f002 ff7e 	bl	801ab00 <_ZN8touchgfx12TextProviderC1Ev>
 8017c04:	f8d8 3000 	ldr.w	r3, [r8]
 8017c08:	4640      	mov	r0, r8
 8017c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c0c:	4798      	blx	r3
 8017c0e:	9a03      	ldr	r2, [sp, #12]
 8017c10:	4603      	mov	r3, r0
 8017c12:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017c14:	a804      	add	r0, sp, #16
 8017c16:	f002 ff90 	bl	801ab3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017c1a:	4638      	mov	r0, r7
 8017c1c:	f7f7 fc72 	bl	800f504 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017c20:	4680      	mov	r8, r0
 8017c22:	4638      	mov	r0, r7
 8017c24:	f7f7 fc52 	bl	800f4cc <_ZNK8touchgfx9TypedText7getFontEv>
 8017c28:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017c2c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8017c30:	4642      	mov	r2, r8
 8017c32:	9300      	str	r3, [sp, #0]
 8017c34:	4603      	mov	r3, r0
 8017c36:	a804      	add	r0, sp, #16
 8017c38:	f001 f815 	bl	8018c66 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017c3c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017c40:	b203      	sxth	r3, r0
 8017c42:	18a9      	adds	r1, r5, r2
 8017c44:	2900      	cmp	r1, #0
 8017c46:	dd0b      	ble.n	8017c60 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8017c48:	3b01      	subs	r3, #1
 8017c4a:	fb13 f302 	smulbb	r3, r3, r2
 8017c4e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017c52:	b21d      	sxth	r5, r3
 8017c54:	4628      	mov	r0, r5
 8017c56:	b01b      	add	sp, #108	; 0x6c
 8017c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c5c:	b003      	add	sp, #12
 8017c5e:	4770      	bx	lr
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	dcf7      	bgt.n	8017c54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8017c64:	2500      	movs	r5, #0
 8017c66:	e7f5      	b.n	8017c54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08017c68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c70:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017c72:	b08d      	sub	sp, #52	; 0x34
 8017c74:	4604      	mov	r4, r0
 8017c76:	429e      	cmp	r6, r3
 8017c78:	4688      	mov	r8, r1
 8017c7a:	d04b      	beq.n	8017d14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017c7c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017c80:	4628      	mov	r0, r5
 8017c82:	f7f7 fc23 	bl	800f4cc <_ZNK8touchgfx9TypedText7getFontEv>
 8017c86:	4607      	mov	r7, r0
 8017c88:	2800      	cmp	r0, #0
 8017c8a:	d043      	beq.n	8017d14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017c8c:	4628      	mov	r0, r5
 8017c8e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017c92:	f7f7 fc4f 	bl	800f534 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017c96:	4b21      	ldr	r3, [pc, #132]	; (8017d1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8017c98:	4628      	mov	r0, r5
 8017c9a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017ca4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017ca8:	785e      	ldrb	r6, [r3, #1]
 8017caa:	f7f7 fc2b 	bl	800f504 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017cae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017cb0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017cb4:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8017cba:	4b19      	ldr	r3, [pc, #100]	; (8017d20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8017cbc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8017cc6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017cca:	9707      	str	r7, [sp, #28]
 8017ccc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017cd0:	f88d 6020 	strb.w	r6, [sp, #32]
 8017cd4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017cd8:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017cdc:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017ce0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017ce4:	b10a      	cbz	r2, 8017cea <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8017ce6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8017ce8:	b906      	cbnz	r6, 8017cec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8017cea:	689e      	ldr	r6, [r3, #8]
 8017cec:	af05      	add	r7, sp, #20
 8017cee:	4621      	mov	r1, r4
 8017cf0:	4638      	mov	r0, r7
 8017cf2:	f002 f864 	bl	8019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	f7f8 ff6e 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	9001      	str	r0, [sp, #4]
 8017d00:	4630      	mov	r0, r6
 8017d02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017d06:	ab07      	add	r3, sp, #28
 8017d08:	9300      	str	r3, [sp, #0]
 8017d0a:	4643      	mov	r3, r8
 8017d0c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8017d10:	f000 fd76 	bl	8018800 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017d14:	b00d      	add	sp, #52	; 0x34
 8017d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d1a:	bf00      	nop
 8017d1c:	2000c5f4 	.word	0x2000c5f4
 8017d20:	2000c564 	.word	0x2000c564

08017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017d24:	b570      	push	{r4, r5, r6, lr}
 8017d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d2a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017d2c:	4604      	mov	r4, r0
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d021      	beq.n	8017d76 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8017d32:	6803      	ldr	r3, [r0, #0]
 8017d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d36:	4798      	blx	r3
 8017d38:	6823      	ldr	r3, [r4, #0]
 8017d3a:	4605      	mov	r5, r0
 8017d3c:	4620      	mov	r0, r4
 8017d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017d40:	4798      	blx	r3
 8017d42:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8017d46:	4606      	mov	r6, r0
 8017d48:	b22d      	sxth	r5, r5
 8017d4a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017d4e:	6823      	ldr	r3, [r4, #0]
 8017d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d52:	d109      	bne.n	8017d68 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8017d54:	4629      	mov	r1, r5
 8017d56:	4620      	mov	r0, r4
 8017d58:	4798      	blx	r3
 8017d5a:	6823      	ldr	r3, [r4, #0]
 8017d5c:	4631      	mov	r1, r6
 8017d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d60:	4620      	mov	r0, r4
 8017d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d66:	4718      	bx	r3
 8017d68:	4601      	mov	r1, r0
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	4798      	blx	r3
 8017d6e:	6823      	ldr	r3, [r4, #0]
 8017d70:	4629      	mov	r1, r5
 8017d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d74:	e7f4      	b.n	8017d60 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8017d76:	bd70      	pop	{r4, r5, r6, pc}

08017d78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017d78:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017d7c:	84c1      	strh	r1, [r0, #38]	; 0x26
 8017d7e:	b922      	cbnz	r2, 8017d8a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017d80:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017d84:	b90b      	cbnz	r3, 8017d8a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017d86:	f7ff bfcd 	b.w	8017d24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017d8a:	4770      	bx	lr

08017d8c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	8003      	strh	r3, [r0, #0]
 8017d90:	8043      	strh	r3, [r0, #2]
 8017d92:	8083      	strh	r3, [r0, #4]
 8017d94:	80c3      	strh	r3, [r0, #6]
 8017d96:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017d9a:	b91b      	cbnz	r3, 8017da4 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8017d9c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017da0:	2bff      	cmp	r3, #255	; 0xff
 8017da2:	d103      	bne.n	8017dac <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8017da4:	890b      	ldrh	r3, [r1, #8]
 8017da6:	8083      	strh	r3, [r0, #4]
 8017da8:	894b      	ldrh	r3, [r1, #10]
 8017daa:	80c3      	strh	r3, [r0, #6]
 8017dac:	4770      	bx	lr
	...

08017db0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017db2:	4604      	mov	r4, r0
 8017db4:	466b      	mov	r3, sp
 8017db6:	6808      	ldr	r0, [r1, #0]
 8017db8:	6849      	ldr	r1, [r1, #4]
 8017dba:	c303      	stmia	r3!, {r0, r1}
 8017dbc:	6823      	ldr	r3, [r4, #0]
 8017dbe:	4669      	mov	r1, sp
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dc4:	4798      	blx	r3
 8017dc6:	4b08      	ldr	r3, [pc, #32]	; (8017de8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017dce:	b10a      	cbz	r2, 8017dd4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017dd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017dd2:	b900      	cbnz	r0, 8017dd6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017dd4:	6898      	ldr	r0, [r3, #8]
 8017dd6:	6803      	ldr	r3, [r0, #0]
 8017dd8:	4669      	mov	r1, sp
 8017dda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017ddc:	69dd      	ldr	r5, [r3, #28]
 8017dde:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017de2:	47a8      	blx	r5
 8017de4:	b003      	add	sp, #12
 8017de6:	bd30      	pop	{r4, r5, pc}
 8017de8:	2000c564 	.word	0x2000c564

08017dec <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8017dec:	b570      	push	{r4, r5, r6, lr}
 8017dee:	6803      	ldr	r3, [r0, #0]
 8017df0:	4604      	mov	r4, r0
 8017df2:	4615      	mov	r5, r2
 8017df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017df6:	4798      	blx	r3
 8017df8:	6823      	ldr	r3, [r4, #0]
 8017dfa:	4629      	mov	r1, r5
 8017dfc:	4620      	mov	r0, r4
 8017dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e04:	4718      	bx	r3

08017e06 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 8017e06:	b570      	push	{r4, r5, r6, lr}
 8017e08:	6803      	ldr	r3, [r0, #0]
 8017e0a:	4604      	mov	r4, r0
 8017e0c:	460e      	mov	r6, r1
 8017e0e:	4615      	mov	r5, r2
 8017e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017e12:	4798      	blx	r3
 8017e14:	8030      	strh	r0, [r6, #0]
 8017e16:	6823      	ldr	r3, [r4, #0]
 8017e18:	4620      	mov	r0, r4
 8017e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e1c:	4798      	blx	r3
 8017e1e:	8028      	strh	r0, [r5, #0]
 8017e20:	bd70      	pop	{r4, r5, r6, pc}

08017e22 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8017e22:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8017e26:	4770      	bx	lr

08017e28 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8017e28:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8017e2c:	4770      	bx	lr

08017e2e <_ZN8touchgfx10TiledImageD1Ev>:
 8017e2e:	4770      	bx	lr

08017e30 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8017e30:	b510      	push	{r4, lr}
 8017e32:	4604      	mov	r4, r0
 8017e34:	f000 fa40 	bl	80182b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017e38:	6823      	ldr	r3, [r4, #0]
 8017e3a:	4620      	mov	r0, r4
 8017e3c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8017e40:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8017e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e4a:	4718      	bx	r3

08017e4c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8017e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e4e:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017e52:	4605      	mov	r5, r0
 8017e54:	8541      	strh	r1, [r0, #42]	; 0x2a
 8017e56:	4630      	mov	r0, r6
 8017e58:	f003 fd7e 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e5c:	b1a0      	cbz	r0, 8017e88 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 8017e5e:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8017e62:	4630      	mov	r0, r6
 8017e64:	f003 fd78 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e68:	fb97 f4f0 	sdiv	r4, r7, r0
 8017e6c:	fb04 7410 	mls	r4, r4, r0, r7
 8017e70:	4630      	mov	r0, r6
 8017e72:	f003 fd71 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e76:	4404      	add	r4, r0
 8017e78:	4630      	mov	r0, r6
 8017e7a:	f003 fd6d 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017e7e:	fb94 f3f0 	sdiv	r3, r4, r0
 8017e82:	fb03 4010 	mls	r0, r3, r0, r4
 8017e86:	8568      	strh	r0, [r5, #42]	; 0x2a
 8017e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e8a <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8017e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e8c:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8017e90:	4605      	mov	r5, r0
 8017e92:	8581      	strh	r1, [r0, #44]	; 0x2c
 8017e94:	4630      	mov	r0, r6
 8017e96:	f003 fd99 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017e9a:	b1a0      	cbz	r0, 8017ec6 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 8017e9c:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	f003 fd93 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017ea6:	fb97 f4f0 	sdiv	r4, r7, r0
 8017eaa:	fb04 7410 	mls	r4, r4, r0, r7
 8017eae:	4630      	mov	r0, r6
 8017eb0:	f003 fd8c 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017eb4:	4404      	add	r4, r0
 8017eb6:	4630      	mov	r0, r6
 8017eb8:	f003 fd88 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017ebc:	fb94 f3f0 	sdiv	r3, r4, r0
 8017ec0:	fb03 4010 	mls	r0, r3, r0, r4
 8017ec4:	85a8      	strh	r0, [r5, #44]	; 0x2c
 8017ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017ec8 <_ZN8touchgfx10TiledImageD0Ev>:
 8017ec8:	b510      	push	{r4, lr}
 8017eca:	4604      	mov	r4, r0
 8017ecc:	2130      	movs	r1, #48	; 0x30
 8017ece:	f00d fa67 	bl	80253a0 <_ZdlPvj>
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	bd10      	pop	{r4, pc}
	...

08017ed8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8017ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017edc:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 8017ee0:	b093      	sub	sp, #76	; 0x4c
 8017ee2:	4607      	mov	r7, r0
 8017ee4:	460e      	mov	r6, r1
 8017ee6:	4658      	mov	r0, fp
 8017ee8:	f003 fd36 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017eec:	4605      	mov	r5, r0
 8017eee:	4658      	mov	r0, fp
 8017ef0:	f003 fd6c 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017ef4:	4680      	mov	r8, r0
 8017ef6:	2d00      	cmp	r5, #0
 8017ef8:	f000 80c5 	beq.w	8018086 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017efc:	2800      	cmp	r0, #0
 8017efe:	f000 80c2 	beq.w	8018086 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017f02:	2300      	movs	r3, #0
 8017f04:	a90e      	add	r1, sp, #56	; 0x38
 8017f06:	4638      	mov	r0, r7
 8017f08:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8017f0c:	683b      	ldr	r3, [r7, #0]
 8017f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f10:	4798      	blx	r3
 8017f12:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8017f16:	f9b6 3000 	ldrsh.w	r3, [r6]
 8017f1a:	88b1      	ldrh	r1, [r6, #4]
 8017f1c:	189c      	adds	r4, r3, r2
 8017f1e:	440b      	add	r3, r1
 8017f20:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8017f24:	fa02 f383 	sxtah	r3, r2, r3
 8017f28:	3b01      	subs	r3, #1
 8017f2a:	fb93 f3f5 	sdiv	r3, r3, r5
 8017f2e:	fb94 f4f5 	sdiv	r4, r4, r5
 8017f32:	fb13 f305 	smulbb	r3, r3, r5
 8017f36:	fb14 f405 	smulbb	r4, r4, r5
 8017f3a:	b21b      	sxth	r3, r3
 8017f3c:	1aa4      	subs	r4, r4, r2
 8017f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017f40:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017f44:	b2a4      	uxth	r4, r4
 8017f46:	185a      	adds	r2, r3, r1
 8017f48:	fb92 f2f8 	sdiv	r2, r2, r8
 8017f4c:	fb12 f208 	smulbb	r2, r2, r8
 8017f50:	1a52      	subs	r2, r2, r1
 8017f52:	b212      	sxth	r2, r2
 8017f54:	920c      	str	r2, [sp, #48]	; 0x30
 8017f56:	88f2      	ldrh	r2, [r6, #6]
 8017f58:	4413      	add	r3, r2
 8017f5a:	fa01 f383 	sxtah	r3, r1, r3
 8017f5e:	3b01      	subs	r3, #1
 8017f60:	fb93 f3f8 	sdiv	r3, r3, r8
 8017f64:	fb13 f308 	smulbb	r3, r3, r8
 8017f68:	b21b      	sxth	r3, r3
 8017f6a:	930d      	str	r3, [sp, #52]	; 0x34
 8017f6c:	1963      	adds	r3, r4, r5
 8017f6e:	fa1f fa83 	uxth.w	sl, r3
 8017f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017f74:	b223      	sxth	r3, r4
 8017f76:	4293      	cmp	r3, r2
 8017f78:	9305      	str	r3, [sp, #20]
 8017f7a:	f300 8084 	bgt.w	8018086 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8017f7e:	fa0f f38a 	sxth.w	r3, sl
 8017f82:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8017f86:	9309      	str	r3, [sp, #36]	; 0x24
 8017f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f8a:	4599      	cmp	r9, r3
 8017f8c:	dd04      	ble.n	8017f98 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8017f8e:	442c      	add	r4, r5
 8017f90:	eb05 030a 	add.w	r3, r5, sl
 8017f94:	b2a4      	uxth	r4, r4
 8017f96:	e7ea      	b.n	8017f6e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8017f98:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017f9c:	88b2      	ldrh	r2, [r6, #4]
 8017f9e:	4462      	add	r2, ip
 8017fa0:	b292      	uxth	r2, r2
 8017fa2:	b213      	sxth	r3, r2
 8017fa4:	9308      	str	r3, [sp, #32]
 8017fa6:	fa1f f389 	uxth.w	r3, r9
 8017faa:	eb08 0103 	add.w	r1, r8, r3
 8017fae:	9307      	str	r3, [sp, #28]
 8017fb0:	b289      	uxth	r1, r1
 8017fb2:	b208      	sxth	r0, r1
 8017fb4:	9006      	str	r0, [sp, #24]
 8017fb6:	9805      	ldr	r0, [sp, #20]
 8017fb8:	4603      	mov	r3, r0
 8017fba:	9808      	ldr	r0, [sp, #32]
 8017fbc:	4283      	cmp	r3, r0
 8017fbe:	da5e      	bge.n	801807e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017fc2:	4584      	cmp	ip, r0
 8017fc4:	da5b      	bge.n	801807e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017fc6:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8017fca:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 8017fce:	4486      	add	lr, r0
 8017fd0:	fa1f fe8e 	uxth.w	lr, lr
 8017fd4:	fa0f f38e 	sxth.w	r3, lr
 8017fd8:	4599      	cmp	r9, r3
 8017fda:	930a      	str	r3, [sp, #40]	; 0x28
 8017fdc:	da4f      	bge.n	801807e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017fde:	9b06      	ldr	r3, [sp, #24]
 8017fe0:	4298      	cmp	r0, r3
 8017fe2:	da4c      	bge.n	801807e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8017fe4:	9b05      	ldr	r3, [sp, #20]
 8017fe6:	459c      	cmp	ip, r3
 8017fe8:	bfb8      	it	lt
 8017fea:	469c      	movlt	ip, r3
 8017fec:	4548      	cmp	r0, r9
 8017fee:	9b08      	ldr	r3, [sp, #32]
 8017ff0:	bfb8      	it	lt
 8017ff2:	4648      	movlt	r0, r9
 8017ff4:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 8017ff8:	4699      	mov	r9, r3
 8017ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ffc:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 8018000:	4599      	cmp	r9, r3
 8018002:	bfc8      	it	gt
 8018004:	4652      	movgt	r2, sl
 8018006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018008:	eba2 020c 	sub.w	r2, r2, ip
 801800c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8018010:	9a06      	ldr	r2, [sp, #24]
 8018012:	4293      	cmp	r3, r2
 8018014:	bfd8      	it	le
 8018016:	4671      	movle	r1, lr
 8018018:	1a09      	subs	r1, r1, r0
 801801a:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801801e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018022:	9b07      	ldr	r3, [sp, #28]
 8018024:	1b12      	subs	r2, r2, r4
 8018026:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801802a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801802e:	1ad2      	subs	r2, r2, r3
 8018030:	4b16      	ldr	r3, [pc, #88]	; (801808c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 8018032:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8018036:	681a      	ldr	r2, [r3, #0]
 8018038:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801803c:	b109      	cbz	r1, 8018042 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801803e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8018040:	b900      	cbnz	r0, 8018044 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8018042:	6890      	ldr	r0, [r2, #8]
 8018044:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018048:	f04f 0c01 	mov.w	ip, #1
 801804c:	9b07      	ldr	r3, [sp, #28]
 801804e:	6801      	ldr	r1, [r0, #0]
 8018050:	4413      	add	r3, r2
 8018052:	f8cd c008 	str.w	ip, [sp, #8]
 8018056:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801805a:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801805e:	b21b      	sxth	r3, r3
 8018060:	4422      	add	r2, r4
 8018062:	f8cd c004 	str.w	ip, [sp, #4]
 8018066:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801806a:	b212      	sxth	r2, r2
 801806c:	f8cd c000 	str.w	ip, [sp]
 8018070:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8018074:	4659      	mov	r1, fp
 8018076:	47c8      	blx	r9
 8018078:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801807c:	e784      	b.n	8017f88 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801807e:	2300      	movs	r3, #0
 8018080:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8018084:	e7cb      	b.n	801801e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 8018086:	b013      	add	sp, #76	; 0x4c
 8018088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801808c:	2000c564 	.word	0x2000c564

08018090 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8018090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018094:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018098:	4606      	mov	r6, r0
 801809a:	4689      	mov	r9, r1
 801809c:	2bff      	cmp	r3, #255	; 0xff
 801809e:	d008      	beq.n	80180b2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80180a0:	2300      	movs	r3, #0
 80180a2:	8003      	strh	r3, [r0, #0]
 80180a4:	8043      	strh	r3, [r0, #2]
 80180a6:	8083      	strh	r3, [r0, #4]
 80180a8:	4630      	mov	r0, r6
 80180aa:	80f3      	strh	r3, [r6, #6]
 80180ac:	b003      	add	sp, #12
 80180ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180b2:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80180b6:	4668      	mov	r0, sp
 80180b8:	4659      	mov	r1, fp
 80180ba:	f003 fcc1 	bl	801ba40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80180be:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80180c2:	4658      	mov	r0, fp
 80180c4:	f9bd 7000 	ldrsh.w	r7, [sp]
 80180c8:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80180cc:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80180d0:	f003 fc42 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80180d4:	4284      	cmp	r4, r0
 80180d6:	d10d      	bne.n	80180f4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80180d8:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80180dc:	4658      	mov	r0, fp
 80180de:	f003 fc75 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80180e2:	4580      	cmp	r8, r0
 80180e4:	d12a      	bne.n	801813c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80180e6:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80180ea:	8037      	strh	r7, [r6, #0]
 80180ec:	f8a6 a002 	strh.w	sl, [r6, #2]
 80180f0:	80b5      	strh	r5, [r6, #4]
 80180f2:	e7d9      	b.n	80180a8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80180f4:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 80180f8:	4658      	mov	r0, fp
 80180fa:	f003 fc2d 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80180fe:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 8018102:	1b7f      	subs	r7, r7, r5
 8018104:	b2a3      	uxth	r3, r4
 8018106:	b2bd      	uxth	r5, r7
 8018108:	b22f      	sxth	r7, r5
 801810a:	4428      	add	r0, r5
 801810c:	2f00      	cmp	r7, #0
 801810e:	b280      	uxth	r0, r0
 8018110:	bfb8      	it	lt
 8018112:	18ed      	addlt	r5, r5, r3
 8018114:	4403      	add	r3, r0
 8018116:	bfac      	ite	ge
 8018118:	4625      	movge	r5, r4
 801811a:	2700      	movlt	r7, #0
 801811c:	b29b      	uxth	r3, r3
 801811e:	bfb8      	it	lt
 8018120:	b22d      	sxthlt	r5, r5
 8018122:	b219      	sxth	r1, r3
 8018124:	bfb8      	it	lt
 8018126:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801812a:	4291      	cmp	r1, r2
 801812c:	bfc4      	itt	gt
 801812e:	1a9c      	subgt	r4, r3, r2
 8018130:	b224      	sxthgt	r4, r4
 8018132:	42ac      	cmp	r4, r5
 8018134:	bfc4      	itt	gt
 8018136:	b207      	sxthgt	r7, r0
 8018138:	4625      	movgt	r5, r4
 801813a:	e7cf      	b.n	80180dc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801813c:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8018140:	4658      	mov	r0, fp
 8018142:	f003 fc43 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018146:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801814a:	ebaa 0404 	sub.w	r4, sl, r4
 801814e:	fa1f f288 	uxth.w	r2, r8
 8018152:	b2a4      	uxth	r4, r4
 8018154:	fa0f fa84 	sxth.w	sl, r4
 8018158:	4420      	add	r0, r4
 801815a:	f1ba 0f00 	cmp.w	sl, #0
 801815e:	b280      	uxth	r0, r0
 8018160:	bfb8      	it	lt
 8018162:	18a3      	addlt	r3, r4, r2
 8018164:	4402      	add	r2, r0
 8018166:	bfac      	ite	ge
 8018168:	4643      	movge	r3, r8
 801816a:	f04f 0a00 	movlt.w	sl, #0
 801816e:	b292      	uxth	r2, r2
 8018170:	bfb8      	it	lt
 8018172:	b21b      	sxthlt	r3, r3
 8018174:	b214      	sxth	r4, r2
 8018176:	bfb8      	it	lt
 8018178:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801817c:	428c      	cmp	r4, r1
 801817e:	bfc4      	itt	gt
 8018180:	eba2 0801 	subgt.w	r8, r2, r1
 8018184:	fa0f f888 	sxthgt.w	r8, r8
 8018188:	4543      	cmp	r3, r8
 801818a:	bfbc      	itt	lt
 801818c:	fa0f fa80 	sxthlt.w	sl, r0
 8018190:	4643      	movlt	r3, r8
 8018192:	e7aa      	b.n	80180ea <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

08018194 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018194:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801819c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801819e:	4604      	mov	r4, r0
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d018      	beq.n	80181d6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80181a4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80181a8:	4628      	mov	r0, r5
 80181aa:	f7f7 f98f 	bl	800f4cc <_ZNK8touchgfx9TypedText7getFontEv>
 80181ae:	6803      	ldr	r3, [r0, #0]
 80181b0:	4606      	mov	r6, r0
 80181b2:	4628      	mov	r0, r5
 80181b4:	69df      	ldr	r7, [r3, #28]
 80181b6:	f7f7 f9a5 	bl	800f504 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80181ba:	4680      	mov	r8, r0
 80181bc:	4628      	mov	r0, r5
 80181be:	f7f8 fd0b 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80181c2:	2300      	movs	r3, #0
 80181c4:	4602      	mov	r2, r0
 80181c6:	4641      	mov	r1, r8
 80181c8:	9300      	str	r3, [sp, #0]
 80181ca:	4630      	mov	r0, r6
 80181cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80181ce:	47b8      	blx	r7
 80181d0:	b002      	add	sp, #8
 80181d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181d6:	2000      	movs	r0, #0
 80181d8:	e7fa      	b.n	80181d0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

080181da <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80181da:	b570      	push	{r4, r5, r6, lr}
 80181dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181e0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80181e2:	4604      	mov	r4, r0
 80181e4:	429a      	cmp	r2, r3
 80181e6:	d00c      	beq.n	8018202 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 80181e8:	f850 3b26 	ldr.w	r3, [r0], #38
 80181ec:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80181ee:	f7f8 fcf3 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 80181f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80181f4:	4601      	mov	r1, r0
 80181f6:	46ac      	mov	ip, r5
 80181f8:	4620      	mov	r0, r4
 80181fa:	2300      	movs	r3, #0
 80181fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018200:	4760      	bx	ip
 8018202:	2000      	movs	r0, #0
 8018204:	bd70      	pop	{r4, r5, r6, pc}
	...

08018208 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8018208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801820c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018210:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8018212:	b08d      	sub	sp, #52	; 0x34
 8018214:	4604      	mov	r4, r0
 8018216:	429e      	cmp	r6, r3
 8018218:	460f      	mov	r7, r1
 801821a:	d048      	beq.n	80182ae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801821c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8018220:	4628      	mov	r0, r5
 8018222:	f7f7 f953 	bl	800f4cc <_ZNK8touchgfx9TypedText7getFontEv>
 8018226:	4680      	mov	r8, r0
 8018228:	2800      	cmp	r0, #0
 801822a:	d040      	beq.n	80182ae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801822c:	4628      	mov	r0, r5
 801822e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8018232:	f7f7 f97f 	bl	800f534 <_ZNK8touchgfx9TypedText11assertValidEv>
 8018236:	4b1f      	ldr	r3, [pc, #124]	; (80182b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8018238:	4628      	mov	r0, r5
 801823a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8018244:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8018248:	785e      	ldrb	r6, [r3, #1]
 801824a:	f7f7 f95b 	bl	800f504 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801824e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8018252:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8018256:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018258:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801825c:	f88d 6020 	strb.w	r6, [sp, #32]
 8018260:	ae05      	add	r6, sp, #20
 8018262:	9309      	str	r3, [sp, #36]	; 0x24
 8018264:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8018268:	f8cd 801c 	str.w	r8, [sp, #28]
 801826c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8018270:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8018274:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018278:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801827c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8018280:	f7f7 fd82 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8018284:	4621      	mov	r1, r4
 8018286:	4680      	mov	r8, r0
 8018288:	4630      	mov	r0, r6
 801828a:	f001 fd98 	bl	8019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801828e:	4628      	mov	r0, r5
 8018290:	f7f8 fca2 	bl	8010bd8 <_ZNK8touchgfx9TypedText7getTextEv>
 8018294:	2300      	movs	r3, #0
 8018296:	9303      	str	r3, [sp, #12]
 8018298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801829a:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801829e:	ab07      	add	r3, sp, #28
 80182a0:	4640      	mov	r0, r8
 80182a2:	9300      	str	r3, [sp, #0]
 80182a4:	463b      	mov	r3, r7
 80182a6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80182aa:	f000 faa9 	bl	8018800 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80182ae:	b00d      	add	sp, #52	; 0x34
 80182b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182b4:	2000c5f4 	.word	0x2000c5f4

080182b8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80182b8:	b570      	push	{r4, r5, r6, lr}
 80182ba:	4605      	mov	r5, r0
 80182bc:	880b      	ldrh	r3, [r1, #0]
 80182be:	4604      	mov	r4, r0
 80182c0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80182c2:	f855 3b26 	ldr.w	r3, [r5], #38
 80182c6:	4628      	mov	r0, r5
 80182c8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80182ca:	f003 fb45 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182ce:	b201      	sxth	r1, r0
 80182d0:	4620      	mov	r0, r4
 80182d2:	47b0      	blx	r6
 80182d4:	6823      	ldr	r3, [r4, #0]
 80182d6:	4628      	mov	r0, r5
 80182d8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80182da:	f003 fb77 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80182de:	b201      	sxth	r1, r0
 80182e0:	4620      	mov	r0, r4
 80182e2:	47b0      	blx	r6
 80182e4:	4628      	mov	r0, r5
 80182e6:	f003 fc05 	bl	801baf4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80182ea:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80182ee:	bd70      	pop	{r4, r5, r6, pc}

080182f0 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80182f0:	b510      	push	{r4, lr}
 80182f2:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80182f6:	4604      	mov	r4, r0
 80182f8:	2bff      	cmp	r3, #255	; 0xff
 80182fa:	d006      	beq.n	801830a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80182fc:	2300      	movs	r3, #0
 80182fe:	8003      	strh	r3, [r0, #0]
 8018300:	8043      	strh	r3, [r0, #2]
 8018302:	8083      	strh	r3, [r0, #4]
 8018304:	80c3      	strh	r3, [r0, #6]
 8018306:	4620      	mov	r0, r4
 8018308:	bd10      	pop	{r4, pc}
 801830a:	3126      	adds	r1, #38	; 0x26
 801830c:	f003 fb98 	bl	801ba40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018310:	e7f9      	b.n	8018306 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08018314 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018318:	4604      	mov	r4, r0
 801831a:	b088      	sub	sp, #32
 801831c:	2500      	movs	r5, #0
 801831e:	460f      	mov	r7, r1
 8018320:	f854 3b26 	ldr.w	r3, [r4], #38
 8018324:	a904      	add	r1, sp, #16
 8018326:	4606      	mov	r6, r0
 8018328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801832a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801832e:	4798      	blx	r3
 8018330:	4620      	mov	r0, r4
 8018332:	f003 fb11 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018336:	4680      	mov	r8, r0
 8018338:	4620      	mov	r0, r4
 801833a:	f003 fb47 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801833e:	9506      	str	r5, [sp, #24]
 8018340:	ad06      	add	r5, sp, #24
 8018342:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018346:	4639      	mov	r1, r7
 8018348:	f8ad 801c 	strh.w	r8, [sp, #28]
 801834c:	4628      	mov	r0, r5
 801834e:	f7fd fef5 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 8018352:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018356:	b1c3      	cbz	r3, 801838a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8018358:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801835c:	b1ab      	cbz	r3, 801838a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801835e:	4b0c      	ldr	r3, [pc, #48]	; (8018390 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018366:	b10a      	cbz	r2, 801836c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8018368:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801836a:	b900      	cbnz	r0, 801836e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801836c:	6898      	ldr	r0, [r3, #8]
 801836e:	2701      	movs	r7, #1
 8018370:	6801      	ldr	r1, [r0, #0]
 8018372:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018376:	9702      	str	r7, [sp, #8]
 8018378:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801837c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8018380:	e9cd 5600 	strd	r5, r6, [sp]
 8018384:	68cd      	ldr	r5, [r1, #12]
 8018386:	4621      	mov	r1, r4
 8018388:	47a8      	blx	r5
 801838a:	b008      	add	sp, #32
 801838c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018390:	2000c564 	.word	0x2000c564

08018394 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8018394:	4b02      	ldr	r3, [pc, #8]	; (80183a0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8018396:	6018      	str	r0, [r3, #0]
 8018398:	4b02      	ldr	r3, [pc, #8]	; (80183a4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801839a:	6019      	str	r1, [r3, #0]
 801839c:	4770      	bx	lr
 801839e:	bf00      	nop
 80183a0:	2000c56c 	.word	0x2000c56c
 80183a4:	2000c580 	.word	0x2000c580

080183a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80183a8:	b538      	push	{r3, r4, r5, lr}
 80183aa:	4c2b      	ldr	r4, [pc, #172]	; (8018458 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80183ac:	4b2b      	ldr	r3, [pc, #172]	; (801845c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80183ae:	6821      	ldr	r1, [r4, #0]
 80183b0:	681a      	ldr	r2, [r3, #0]
 80183b2:	4281      	cmp	r1, r0
 80183b4:	4d2a      	ldr	r5, [pc, #168]	; (8018460 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80183b6:	492b      	ldr	r1, [pc, #172]	; (8018464 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80183b8:	d108      	bne.n	80183cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80183ba:	682b      	ldr	r3, [r5, #0]
 80183bc:	4293      	cmp	r3, r2
 80183be:	d105      	bne.n	80183cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80183c0:	6808      	ldr	r0, [r1, #0]
 80183c2:	280f      	cmp	r0, #15
 80183c4:	bf94      	ite	ls
 80183c6:	2000      	movls	r0, #0
 80183c8:	2001      	movhi	r0, #1
 80183ca:	bd38      	pop	{r3, r4, r5, pc}
 80183cc:	4b26      	ldr	r3, [pc, #152]	; (8018468 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80183ce:	6020      	str	r0, [r4, #0]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	602a      	str	r2, [r5, #0]
 80183d4:	4298      	cmp	r0, r3
 80183d6:	d905      	bls.n	80183e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80183d8:	4b24      	ldr	r3, [pc, #144]	; (801846c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80183da:	2137      	movs	r1, #55	; 0x37
 80183dc:	4a24      	ldr	r2, [pc, #144]	; (8018470 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80183de:	4825      	ldr	r0, [pc, #148]	; (8018474 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80183e0:	f00d f80c 	bl	80253fc <__assert_func>
 80183e4:	f010 0403 	ands.w	r4, r0, #3
 80183e8:	bf1f      	itttt	ne
 80183ea:	f1c4 0504 	rsbne	r5, r4, #4
 80183ee:	3b04      	subne	r3, #4
 80183f0:	1952      	addne	r2, r2, r5
 80183f2:	191b      	addne	r3, r3, r4
 80183f4:	4d20      	ldr	r5, [pc, #128]	; (8018478 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80183f6:	4402      	add	r2, r0
 80183f8:	1a1b      	subs	r3, r3, r0
 80183fa:	3001      	adds	r0, #1
 80183fc:	602a      	str	r2, [r5, #0]
 80183fe:	f020 0401 	bic.w	r4, r0, #1
 8018402:	42a3      	cmp	r3, r4
 8018404:	d203      	bcs.n	801840e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8018406:	4b19      	ldr	r3, [pc, #100]	; (801846c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8018408:	214a      	movs	r1, #74	; 0x4a
 801840a:	4a19      	ldr	r2, [pc, #100]	; (8018470 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801840c:	e7e7      	b.n	80183de <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801840e:	f010 0002 	ands.w	r0, r0, #2
 8018412:	bf1f      	itttt	ne
 8018414:	f1c0 0504 	rsbne	r5, r0, #4
 8018418:	1952      	addne	r2, r2, r5
 801841a:	1f05      	subne	r5, r0, #4
 801841c:	195b      	addne	r3, r3, r5
 801841e:	4422      	add	r2, r4
 8018420:	4d16      	ldr	r5, [pc, #88]	; (801847c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8018422:	1b1b      	subs	r3, r3, r4
 8018424:	602a      	str	r2, [r5, #0]
 8018426:	429c      	cmp	r4, r3
 8018428:	d903      	bls.n	8018432 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801842a:	4b10      	ldr	r3, [pc, #64]	; (801846c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801842c:	215d      	movs	r1, #93	; 0x5d
 801842e:	4a10      	ldr	r2, [pc, #64]	; (8018470 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8018430:	e7d5      	b.n	80183de <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8018432:	b120      	cbz	r0, 801843e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8018434:	f1c0 0504 	rsb	r5, r0, #4
 8018438:	3804      	subs	r0, #4
 801843a:	442a      	add	r2, r5
 801843c:	4403      	add	r3, r0
 801843e:	1b1b      	subs	r3, r3, r4
 8018440:	4422      	add	r2, r4
 8018442:	480f      	ldr	r0, [pc, #60]	; (8018480 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8018444:	2b0f      	cmp	r3, #15
 8018446:	600b      	str	r3, [r1, #0]
 8018448:	6002      	str	r2, [r0, #0]
 801844a:	d803      	bhi.n	8018454 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801844c:	4b0d      	ldr	r3, [pc, #52]	; (8018484 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801844e:	2170      	movs	r1, #112	; 0x70
 8018450:	4a07      	ldr	r2, [pc, #28]	; (8018470 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8018452:	e7c4      	b.n	80183de <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8018454:	2001      	movs	r0, #1
 8018456:	e7b8      	b.n	80183ca <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8018458:	2000c574 	.word	0x2000c574
 801845c:	2000c56c 	.word	0x2000c56c
 8018460:	2000c57c 	.word	0x2000c57c
 8018464:	2000c584 	.word	0x2000c584
 8018468:	2000c580 	.word	0x2000c580
 801846c:	08028c64 	.word	0x08028c64
 8018470:	08028d2c 	.word	0x08028d2c
 8018474:	08028c9d 	.word	0x08028c9d
 8018478:	2000c588 	.word	0x2000c588
 801847c:	2000c578 	.word	0x2000c578
 8018480:	2000c570 	.word	0x2000c570
 8018484:	08028ce7 	.word	0x08028ce7

08018488 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8018488:	4b04      	ldr	r3, [pc, #16]	; (801849c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801848a:	6818      	ldr	r0, [r3, #0]
 801848c:	b120      	cbz	r0, 8018498 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801848e:	4b04      	ldr	r3, [pc, #16]	; (80184a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8018490:	6818      	ldr	r0, [r3, #0]
 8018492:	3000      	adds	r0, #0
 8018494:	bf18      	it	ne
 8018496:	2001      	movne	r0, #1
 8018498:	4770      	bx	lr
 801849a:	bf00      	nop
 801849c:	2000c56c 	.word	0x2000c56c
 80184a0:	2000c580 	.word	0x2000c580

080184a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80184a4:	4b01      	ldr	r3, [pc, #4]	; (80184ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80184a6:	6818      	ldr	r0, [r3, #0]
 80184a8:	4770      	bx	lr
 80184aa:	bf00      	nop
 80184ac:	2000c574 	.word	0x2000c574

080184b0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80184b0:	4b01      	ldr	r3, [pc, #4]	; (80184b8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80184b2:	6818      	ldr	r0, [r3, #0]
 80184b4:	4770      	bx	lr
 80184b6:	bf00      	nop
 80184b8:	2000c57c 	.word	0x2000c57c

080184bc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80184bc:	4b01      	ldr	r3, [pc, #4]	; (80184c4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80184be:	6818      	ldr	r0, [r3, #0]
 80184c0:	4770      	bx	lr
 80184c2:	bf00      	nop
 80184c4:	2000c588 	.word	0x2000c588

080184c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80184c8:	4b01      	ldr	r3, [pc, #4]	; (80184d0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80184ca:	6818      	ldr	r0, [r3, #0]
 80184cc:	4770      	bx	lr
 80184ce:	bf00      	nop
 80184d0:	2000c578 	.word	0x2000c578

080184d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80184d4:	4b01      	ldr	r3, [pc, #4]	; (80184dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80184d6:	6818      	ldr	r0, [r3, #0]
 80184d8:	4770      	bx	lr
 80184da:	bf00      	nop
 80184dc:	2000c570 	.word	0x2000c570

080184e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80184e0:	4b01      	ldr	r3, [pc, #4]	; (80184e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80184e2:	6818      	ldr	r0, [r3, #0]
 80184e4:	4770      	bx	lr
 80184e6:	bf00      	nop
 80184e8:	2000c584 	.word	0x2000c584

080184ec <_ZN8touchgfx3LCD4initEv>:
 80184ec:	4770      	bx	lr

080184ee <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80184ee:	2000      	movs	r0, #0
 80184f0:	4770      	bx	lr

080184f2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80184f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184f6:	b091      	sub	sp, #68	; 0x44
 80184f8:	4699      	mov	r9, r3
 80184fa:	4617      	mov	r7, r2
 80184fc:	2500      	movs	r5, #0
 80184fe:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8018502:	4680      	mov	r8, r0
 8018504:	a80e      	add	r0, sp, #56	; 0x38
 8018506:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8018508:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801850c:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8018510:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8018514:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018518:	910d      	str	r1, [sp, #52]	; 0x34
 801851a:	950e      	str	r5, [sp, #56]	; 0x38
 801851c:	f000 fe3a 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018520:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018522:	f8d9 6000 	ldr.w	r6, [r9]
 8018526:	6818      	ldr	r0, [r3, #0]
 8018528:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801852a:	f9b4 b000 	ldrsh.w	fp, [r4]
 801852e:	1b80      	subs	r0, r0, r6
 8018530:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018534:	eb02 0c06 	add.w	ip, r2, r6
 8018538:	ebab 0e0c 	sub.w	lr, fp, ip
 801853c:	4570      	cmp	r0, lr
 801853e:	f340 80bc 	ble.w	80186ba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8018542:	88a1      	ldrh	r1, [r4, #4]
 8018544:	4459      	add	r1, fp
 8018546:	b209      	sxth	r1, r1
 8018548:	458c      	cmp	ip, r1
 801854a:	f300 80b6 	bgt.w	80186ba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801854e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8018552:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8018556:	4283      	cmp	r3, r0
 8018558:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801855c:	edd9 6a07 	vldr	s13, [r9, #28]
 8018560:	bfa8      	it	ge
 8018562:	4603      	movge	r3, r0
 8018564:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8018568:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801856c:	45e3      	cmp	fp, ip
 801856e:	ee07 3a90 	vmov	s15, r3
 8018572:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018576:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801857a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801857e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018582:	ee25 5a27 	vmul.f32	s10, s10, s15
 8018586:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801858a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801858e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018592:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018596:	ee36 0a84 	vadd.f32	s0, s13, s8
 801859a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801859e:	ee22 2a07 	vmul.f32	s4, s4, s14
 80185a2:	f340 808d 	ble.w	80186c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80185a6:	fb9e f5f3 	sdiv	r5, lr, r3
 80185aa:	ee07 5a10 	vmov	s14, r5
 80185ae:	2d00      	cmp	r5, #0
 80185b0:	fb03 e415 	mls	r4, r3, r5, lr
 80185b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80185b8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80185bc:	eee7 0a24 	vfma.f32	s1, s14, s9
 80185c0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80185c4:	dd12      	ble.n	80185ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 80185c6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80185ca:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80185ce:	ee31 2a45 	vsub.f32	s4, s2, s10
 80185d2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80185d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185da:	bf14      	ite	ne
 80185dc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80185e0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80185e4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80185e8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80185ec:	fb05 f703 	mul.w	r7, r5, r3
 80185f0:	1bc0      	subs	r0, r0, r7
 80185f2:	443e      	add	r6, r7
 80185f4:	1997      	adds	r7, r2, r6
 80185f6:	4407      	add	r7, r0
 80185f8:	42b9      	cmp	r1, r7
 80185fa:	bfbc      	itt	lt
 80185fc:	1a88      	sublt	r0, r1, r2
 80185fe:	1b80      	sublt	r0, r0, r6
 8018600:	2800      	cmp	r0, #0
 8018602:	dd5a      	ble.n	80186ba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8018604:	fb90 f1f3 	sdiv	r1, r0, r3
 8018608:	fb03 0211 	mls	r2, r3, r1, r0
 801860c:	b90a      	cbnz	r2, 8018612 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801860e:	3901      	subs	r1, #1
 8018610:	461a      	mov	r2, r3
 8018612:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8018616:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801861a:	44a4      	add	ip, r4
 801861c:	2900      	cmp	r1, #0
 801861e:	bfcc      	ite	gt
 8018620:	469e      	movgt	lr, r3
 8018622:	4696      	movle	lr, r2
 8018624:	fb03 c505 	mla	r5, r3, r5, ip
 8018628:	eef0 6a42 	vmov.f32	s13, s4
 801862c:	eeb0 7a61 	vmov.f32	s14, s3
 8018630:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018634:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018638:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801863c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018640:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018644:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018648:	ee17 0a90 	vmov	r0, s15
 801864c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018650:	fb90 f6f3 	sdiv	r6, r0, r3
 8018654:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018658:	ee17 0a90 	vmov	r0, s15
 801865c:	fb90 f7f3 	sdiv	r7, r0, r3
 8018660:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018664:	f8d0 8000 	ldr.w	r8, [r0]
 8018668:	900c      	str	r0, [sp, #48]	; 0x30
 801866a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801866c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8018670:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8018674:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018678:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801867c:	f8cd a020 	str.w	sl, [sp, #32]
 8018680:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8018684:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018686:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801868a:	9603      	str	r6, [sp, #12]
 801868c:	44ca      	add	sl, r9
 801868e:	9506      	str	r5, [sp, #24]
 8018690:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8018694:	ee16 0a90 	vmov	r0, s13
 8018698:	f8cd a01c 	str.w	sl, [sp, #28]
 801869c:	fb07 0704 	mla	r7, r7, r4, r0
 80186a0:	ee17 0a10 	vmov	r0, s14
 80186a4:	fb06 0604 	mla	r6, r6, r4, r0
 80186a8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80186aa:	9702      	str	r7, [sp, #8]
 80186ac:	e9cd 3600 	strd	r3, r6, [sp]
 80186b0:	ebae 0304 	sub.w	r3, lr, r4
 80186b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80186b8:	47a8      	blx	r5
 80186ba:	b011      	add	sp, #68	; 0x44
 80186bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186c0:	462c      	mov	r4, r5
 80186c2:	e797      	b.n	80185f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

080186c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80186c4:	b570      	push	{r4, r5, r6, lr}
 80186c6:	4604      	mov	r4, r0
 80186c8:	2500      	movs	r5, #0
 80186ca:	9804      	ldr	r0, [sp, #16]
 80186cc:	7223      	strb	r3, [r4, #8]
 80186ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80186d2:	8025      	strh	r5, [r4, #0]
 80186d4:	6061      	str	r1, [r4, #4]
 80186d6:	7263      	strb	r3, [r4, #9]
 80186d8:	60e0      	str	r0, [r4, #12]
 80186da:	8222      	strh	r2, [r4, #16]
 80186dc:	8265      	strh	r5, [r4, #18]
 80186de:	82a5      	strh	r5, [r4, #20]
 80186e0:	82e5      	strh	r5, [r4, #22]
 80186e2:	8325      	strh	r5, [r4, #24]
 80186e4:	8365      	strh	r5, [r4, #26]
 80186e6:	83a5      	strh	r5, [r4, #28]
 80186e8:	77a5      	strb	r5, [r4, #30]
 80186ea:	6803      	ldr	r3, [r0, #0]
 80186ec:	695b      	ldr	r3, [r3, #20]
 80186ee:	4798      	blx	r3
 80186f0:	4606      	mov	r6, r0
 80186f2:	b1f8      	cbz	r0, 8018734 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80186f4:	68e0      	ldr	r0, [r4, #12]
 80186f6:	4631      	mov	r1, r6
 80186f8:	6803      	ldr	r3, [r0, #0]
 80186fa:	68db      	ldr	r3, [r3, #12]
 80186fc:	4798      	blx	r3
 80186fe:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018702:	4605      	mov	r5, r0
 8018704:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018708:	7a83      	ldrb	r3, [r0, #10]
 801870a:	4313      	orrs	r3, r2
 801870c:	83a3      	strh	r3, [r4, #28]
 801870e:	7a63      	ldrb	r3, [r4, #9]
 8018710:	2b04      	cmp	r3, #4
 8018712:	d10f      	bne.n	8018734 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8018714:	68e0      	ldr	r0, [r4, #12]
 8018716:	462a      	mov	r2, r5
 8018718:	4631      	mov	r1, r6
 801871a:	6803      	ldr	r3, [r0, #0]
 801871c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801871e:	4798      	blx	r3
 8018720:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8018724:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018728:	7aab      	ldrb	r3, [r5, #10]
 801872a:	4313      	orrs	r3, r2
 801872c:	4418      	add	r0, r3
 801872e:	8ba3      	ldrh	r3, [r4, #28]
 8018730:	4418      	add	r0, r3
 8018732:	83a0      	strh	r0, [r4, #28]
 8018734:	4620      	mov	r0, r4
 8018736:	bd70      	pop	{r4, r5, r6, pc}

08018738 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801873c:	2400      	movs	r4, #0
 801873e:	b085      	sub	sp, #20
 8018740:	4681      	mov	r9, r0
 8018742:	460f      	mov	r7, r1
 8018744:	4692      	mov	sl, r2
 8018746:	469b      	mov	fp, r3
 8018748:	46a0      	mov	r8, r4
 801874a:	4626      	mov	r6, r4
 801874c:	4554      	cmp	r4, sl
 801874e:	da21      	bge.n	8018794 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018750:	2300      	movs	r3, #0
 8018752:	463a      	mov	r2, r7
 8018754:	4659      	mov	r1, fp
 8018756:	4648      	mov	r0, r9
 8018758:	9303      	str	r3, [sp, #12]
 801875a:	ab03      	add	r3, sp, #12
 801875c:	f002 fb52 	bl	801ae04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018760:	4605      	mov	r5, r0
 8018762:	b1b8      	cbz	r0, 8018794 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018764:	280a      	cmp	r0, #10
 8018766:	d015      	beq.n	8018794 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8018768:	9a03      	ldr	r2, [sp, #12]
 801876a:	b182      	cbz	r2, 801878e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801876c:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8018770:	4641      	mov	r1, r8
 8018772:	7a93      	ldrb	r3, [r2, #10]
 8018774:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018778:	8895      	ldrh	r5, [r2, #4]
 801877a:	4303      	orrs	r3, r0
 801877c:	4638      	mov	r0, r7
 801877e:	9301      	str	r3, [sp, #4]
 8018780:	683b      	ldr	r3, [r7, #0]
 8018782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018784:	4798      	blx	r3
 8018786:	9b01      	ldr	r3, [sp, #4]
 8018788:	4418      	add	r0, r3
 801878a:	4406      	add	r6, r0
 801878c:	b2b6      	uxth	r6, r6
 801878e:	3401      	adds	r4, #1
 8018790:	46a8      	mov	r8, r5
 8018792:	e7db      	b.n	801874c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8018794:	4630      	mov	r0, r6
 8018796:	b005      	add	sp, #20
 8018798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801879c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801879c:	2a02      	cmp	r2, #2
 801879e:	b530      	push	{r4, r5, lr}
 80187a0:	d011      	beq.n	80187c6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80187a2:	2a03      	cmp	r2, #3
 80187a4:	d01c      	beq.n	80187e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80187a6:	2a01      	cmp	r2, #1
 80187a8:	d10c      	bne.n	80187c4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80187aa:	888b      	ldrh	r3, [r1, #4]
 80187ac:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80187b0:	8801      	ldrh	r1, [r0, #0]
 80187b2:	1a9b      	subs	r3, r3, r2
 80187b4:	8844      	ldrh	r4, [r0, #2]
 80187b6:	1a5b      	subs	r3, r3, r1
 80187b8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80187bc:	8004      	strh	r4, [r0, #0]
 80187be:	8043      	strh	r3, [r0, #2]
 80187c0:	8081      	strh	r1, [r0, #4]
 80187c2:	80c2      	strh	r2, [r0, #6]
 80187c4:	bd30      	pop	{r4, r5, pc}
 80187c6:	88cb      	ldrh	r3, [r1, #6]
 80187c8:	88c2      	ldrh	r2, [r0, #6]
 80187ca:	1a9b      	subs	r3, r3, r2
 80187cc:	8842      	ldrh	r2, [r0, #2]
 80187ce:	1a9b      	subs	r3, r3, r2
 80187d0:	888a      	ldrh	r2, [r1, #4]
 80187d2:	8881      	ldrh	r1, [r0, #4]
 80187d4:	8043      	strh	r3, [r0, #2]
 80187d6:	1a52      	subs	r2, r2, r1
 80187d8:	8801      	ldrh	r1, [r0, #0]
 80187da:	1a52      	subs	r2, r2, r1
 80187dc:	8002      	strh	r2, [r0, #0]
 80187de:	e7f1      	b.n	80187c4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80187e0:	88cb      	ldrh	r3, [r1, #6]
 80187e2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80187e6:	8841      	ldrh	r1, [r0, #2]
 80187e8:	1a9b      	subs	r3, r3, r2
 80187ea:	f9b0 5000 	ldrsh.w	r5, [r0]
 80187ee:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80187f2:	1a5b      	subs	r3, r3, r1
 80187f4:	8045      	strh	r5, [r0, #2]
 80187f6:	8082      	strh	r2, [r0, #4]
 80187f8:	8003      	strh	r3, [r0, #0]
 80187fa:	80c4      	strh	r4, [r0, #6]
 80187fc:	e7e2      	b.n	80187c4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08018800 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8018800:	b570      	push	{r4, r5, r6, lr}
 8018802:	b086      	sub	sp, #24
 8018804:	ac02      	add	r4, sp, #8
 8018806:	e884 0006 	stmia.w	r4, {r1, r2}
 801880a:	461a      	mov	r2, r3
 801880c:	ab0c      	add	r3, sp, #48	; 0x30
 801880e:	9305      	str	r3, [sp, #20]
 8018810:	4b0a      	ldr	r3, [pc, #40]	; (801883c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8018812:	685d      	ldr	r5, [r3, #4]
 8018814:	1069      	asrs	r1, r5, #1
 8018816:	07ed      	lsls	r5, r5, #31
 8018818:	eb00 0601 	add.w	r6, r0, r1
 801881c:	bf46      	itte	mi
 801881e:	681b      	ldrmi	r3, [r3, #0]
 8018820:	5841      	ldrmi	r1, [r0, r1]
 8018822:	681d      	ldrpl	r5, [r3, #0]
 8018824:	4630      	mov	r0, r6
 8018826:	bf48      	it	mi
 8018828:	58cd      	ldrmi	r5, [r1, r3]
 801882a:	4621      	mov	r1, r4
 801882c:	9b05      	ldr	r3, [sp, #20]
 801882e:	9301      	str	r3, [sp, #4]
 8018830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018832:	9300      	str	r3, [sp, #0]
 8018834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018836:	47a8      	blx	r5
 8018838:	b006      	add	sp, #24
 801883a:	bd70      	pop	{r4, r5, r6, pc}
 801883c:	2000002c 	.word	0x2000002c

08018840 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018844:	b09d      	sub	sp, #116	; 0x74
 8018846:	9114      	str	r1, [sp, #80]	; 0x50
 8018848:	9315      	str	r3, [sp, #84]	; 0x54
 801884a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801884c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801884e:	8809      	ldrh	r1, [r1, #0]
 8018850:	889b      	ldrh	r3, [r3, #4]
 8018852:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8018854:	440b      	add	r3, r1
 8018856:	9210      	str	r2, [sp, #64]	; 0x40
 8018858:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801885c:	b21b      	sxth	r3, r3
 801885e:	900f      	str	r0, [sp, #60]	; 0x3c
 8018860:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8018864:	930e      	str	r3, [sp, #56]	; 0x38
 8018866:	6833      	ldr	r3, [r6, #0]
 8018868:	7a59      	ldrb	r1, [r3, #9]
 801886a:	7a1b      	ldrb	r3, [r3, #8]
 801886c:	9113      	str	r1, [sp, #76]	; 0x4c
 801886e:	9312      	str	r3, [sp, #72]	; 0x48
 8018870:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018872:	f9b3 4000 	ldrsh.w	r4, [r3]
 8018876:	2a00      	cmp	r2, #0
 8018878:	d059      	beq.n	801892e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801887a:	7c33      	ldrb	r3, [r6, #16]
 801887c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801887e:	2b04      	cmp	r3, #4
 8018880:	bf14      	ite	ne
 8018882:	2301      	movne	r3, #1
 8018884:	2302      	moveq	r3, #2
 8018886:	4413      	add	r3, r2
 8018888:	f04f 0800 	mov.w	r8, #0
 801888c:	930d      	str	r3, [sp, #52]	; 0x34
 801888e:	4645      	mov	r5, r8
 8018890:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8018894:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8018898:	4293      	cmp	r3, r2
 801889a:	da75      	bge.n	8018988 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801889c:	2300      	movs	r3, #0
 801889e:	992b      	ldr	r1, [sp, #172]	; 0xac
 80188a0:	6832      	ldr	r2, [r6, #0]
 80188a2:	931a      	str	r3, [sp, #104]	; 0x68
 80188a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188a6:	428b      	cmp	r3, r1
 80188a8:	db43      	blt.n	8018932 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 80188aa:	6813      	ldr	r3, [r2, #0]
 80188ac:	4610      	mov	r0, r2
 80188ae:	695b      	ldr	r3, [r3, #20]
 80188b0:	4798      	blx	r3
 80188b2:	4681      	mov	r9, r0
 80188b4:	6830      	ldr	r0, [r6, #0]
 80188b6:	aa1b      	add	r2, sp, #108	; 0x6c
 80188b8:	4649      	mov	r1, r9
 80188ba:	6803      	ldr	r3, [r0, #0]
 80188bc:	689f      	ldr	r7, [r3, #8]
 80188be:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80188c2:	47b8      	blx	r7
 80188c4:	901a      	str	r0, [sp, #104]	; 0x68
 80188c6:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 80188ca:	45d1      	cmp	r9, sl
 80188cc:	d045      	beq.n	801895a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80188ce:	f242 070b 	movw	r7, #8203	; 0x200b
 80188d2:	45b9      	cmp	r9, r7
 80188d4:	d041      	beq.n	801895a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80188d6:	f1b9 0f00 	cmp.w	r9, #0
 80188da:	f000 80ee 	beq.w	8018aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80188de:	f1b9 0f0a 	cmp.w	r9, #10
 80188e2:	d057      	beq.n	8018994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80188e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80188e6:	b383      	cbz	r3, 801894a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 80188e8:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80188ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80188ee:	2a00      	cmp	r2, #0
 80188f0:	f000 80d2 	beq.w	8018a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 80188f4:	f1bb 0f00 	cmp.w	fp, #0
 80188f8:	d100      	bne.n	80188fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 80188fa:	4444      	add	r4, r8
 80188fc:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8018900:	f1bb 0f01 	cmp.w	fp, #1
 8018904:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8018908:	f892 800a 	ldrb.w	r8, [r2, #10]
 801890c:	ea48 0803 	orr.w	r8, r8, r3
 8018910:	d128      	bne.n	8018964 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8018912:	eba4 0408 	sub.w	r4, r4, r8
 8018916:	2d00      	cmp	r5, #0
 8018918:	d143      	bne.n	80189a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801891a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801891c:	eb08 0304 	add.w	r3, r8, r4
 8018920:	4413      	add	r3, r2
 8018922:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018924:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018928:	4293      	cmp	r3, r2
 801892a:	da44      	bge.n	80189b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801892c:	e02b      	b.n	8018986 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801892e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018930:	e7aa      	b.n	8018888 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8018932:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018936:	4659      	mov	r1, fp
 8018938:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801893a:	9301      	str	r3, [sp, #4]
 801893c:	ab1b      	add	r3, sp, #108	; 0x6c
 801893e:	9300      	str	r3, [sp, #0]
 8018940:	ab1a      	add	r3, sp, #104	; 0x68
 8018942:	f002 fa93 	bl	801ae6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018946:	4681      	mov	r9, r0
 8018948:	e7bd      	b.n	80188c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801894a:	6830      	ldr	r0, [r6, #0]
 801894c:	6803      	ldr	r3, [r0, #0]
 801894e:	691b      	ldr	r3, [r3, #16]
 8018950:	4798      	blx	r3
 8018952:	4550      	cmp	r0, sl
 8018954:	d001      	beq.n	801895a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018956:	42b8      	cmp	r0, r7
 8018958:	d1c8      	bne.n	80188ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801895a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801895c:	464d      	mov	r5, r9
 801895e:	3301      	adds	r3, #1
 8018960:	930c      	str	r3, [sp, #48]	; 0x30
 8018962:	e797      	b.n	8018894 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8018964:	2d00      	cmp	r5, #0
 8018966:	f000 80aa 	beq.w	8018abe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801896a:	f1bb 0f00 	cmp.w	fp, #0
 801896e:	d118      	bne.n	80189a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8018970:	6830      	ldr	r0, [r6, #0]
 8018972:	4629      	mov	r1, r5
 8018974:	6803      	ldr	r3, [r0, #0]
 8018976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018978:	4798      	blx	r3
 801897a:	4404      	add	r4, r0
 801897c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801897e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018980:	1ae3      	subs	r3, r4, r3
 8018982:	4293      	cmp	r3, r2
 8018984:	dd17      	ble.n	80189b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018986:	464d      	mov	r5, r9
 8018988:	2d00      	cmp	r5, #0
 801898a:	f000 8096 	beq.w	8018aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801898e:	2d0a      	cmp	r5, #10
 8018990:	f040 8084 	bne.w	8018a9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8018994:	250a      	movs	r5, #10
 8018996:	fab5 f085 	clz	r0, r5
 801899a:	0940      	lsrs	r0, r0, #5
 801899c:	b01d      	add	sp, #116	; 0x74
 801899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189a2:	6830      	ldr	r0, [r6, #0]
 80189a4:	4629      	mov	r1, r5
 80189a6:	6803      	ldr	r3, [r0, #0]
 80189a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189aa:	4798      	blx	r3
 80189ac:	f1bb 0f01 	cmp.w	fp, #1
 80189b0:	eba4 0400 	sub.w	r4, r4, r0
 80189b4:	d0b1      	beq.n	801891a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80189b6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80189b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80189ba:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80189be:	f9b3 5000 	ldrsh.w	r5, [r3]
 80189c2:	7b43      	ldrb	r3, [r0, #13]
 80189c4:	4421      	add	r1, r4
 80189c6:	015b      	lsls	r3, r3, #5
 80189c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80189cc:	7983      	ldrb	r3, [r0, #6]
 80189ce:	4313      	orrs	r3, r2
 80189d0:	440b      	add	r3, r1
 80189d2:	42ab      	cmp	r3, r5
 80189d4:	dbc1      	blt.n	801895a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80189d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189d8:	4299      	cmp	r1, r3
 80189da:	dabe      	bge.n	801895a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80189dc:	6830      	ldr	r0, [r6, #0]
 80189de:	42a5      	cmp	r5, r4
 80189e0:	6803      	ldr	r3, [r0, #0]
 80189e2:	bfcc      	ite	gt
 80189e4:	1b2d      	subgt	r5, r5, r4
 80189e6:	2500      	movle	r5, #0
 80189e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189ea:	bfc8      	it	gt
 80189ec:	b2ad      	uxthgt	r5, r5
 80189ee:	4798      	blx	r3
 80189f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80189f2:	4935      	ldr	r1, [pc, #212]	; (8018ac8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 80189f4:	7b5a      	ldrb	r2, [r3, #13]
 80189f6:	f893 e008 	ldrb.w	lr, [r3, #8]
 80189fa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80189fe:	bf18      	it	ne
 8018a00:	468c      	movne	ip, r1
 8018a02:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018a04:	bf08      	it	eq
 8018a06:	f04f 0c00 	moveq.w	ip, #0
 8018a0a:	4408      	add	r0, r1
 8018a0c:	00d1      	lsls	r1, r2, #3
 8018a0e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018a12:	ea41 070e 	orr.w	r7, r1, lr
 8018a16:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8018a18:	ea4c 0707 	orr.w	r7, ip, r7
 8018a1c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018a20:	1bc7      	subs	r7, r0, r7
 8018a22:	b2bf      	uxth	r7, r7
 8018a24:	fa0f fa87 	sxth.w	sl, r7
 8018a28:	4551      	cmp	r1, sl
 8018a2a:	dd33      	ble.n	8018a94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8018a2c:	0112      	lsls	r2, r2, #4
 8018a2e:	79d8      	ldrb	r0, [r3, #7]
 8018a30:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018a34:	4302      	orrs	r2, r0
 8018a36:	4492      	add	sl, r2
 8018a38:	4551      	cmp	r1, sl
 8018a3a:	dc8e      	bgt.n	801895a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018a3c:	1bcf      	subs	r7, r1, r7
 8018a3e:	468a      	mov	sl, r1
 8018a40:	b2bf      	uxth	r7, r7
 8018a42:	9317      	str	r3, [sp, #92]	; 0x5c
 8018a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a46:	6830      	ldr	r0, [r6, #0]
 8018a48:	681a      	ldr	r2, [r3, #0]
 8018a4a:	6801      	ldr	r1, [r0, #0]
 8018a4c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8018a4e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018a50:	9311      	str	r3, [sp, #68]	; 0x44
 8018a52:	9216      	str	r2, [sp, #88]	; 0x58
 8018a54:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8018a56:	4788      	blx	r1
 8018a58:	79b1      	ldrb	r1, [r6, #6]
 8018a5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018a5c:	910b      	str	r1, [sp, #44]	; 0x2c
 8018a5e:	7bb1      	ldrb	r1, [r6, #14]
 8018a60:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018a62:	910a      	str	r1, [sp, #40]	; 0x28
 8018a64:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8018a68:	9109      	str	r1, [sp, #36]	; 0x24
 8018a6a:	68b1      	ldr	r1, [r6, #8]
 8018a6c:	9305      	str	r3, [sp, #20]
 8018a6e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018a70:	9206      	str	r2, [sp, #24]
 8018a72:	e9cd a501 	strd	sl, r5, [sp, #4]
 8018a76:	4425      	add	r5, r4
 8018a78:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8018a7c:	b22d      	sxth	r5, r5
 8018a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a80:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018a84:	9500      	str	r5, [sp, #0]
 8018a86:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018a88:	681a      	ldr	r2, [r3, #0]
 8018a8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018a8c:	685b      	ldr	r3, [r3, #4]
 8018a8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018a90:	47a8      	blx	r5
 8018a92:	e762      	b.n	801895a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018a94:	2700      	movs	r7, #0
 8018a96:	e7d4      	b.n	8018a42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8018a98:	4690      	mov	r8, r2
 8018a9a:	e75e      	b.n	801895a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018a9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018a9e:	3401      	adds	r4, #1
 8018aa0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018aa2:	429c      	cmp	r4, r3
 8018aa4:	f6bf af77 	bge.w	8018996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8018aa8:	4659      	mov	r1, fp
 8018aaa:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8018aac:	f002 f96a 	bl	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018ab0:	4605      	mov	r5, r0
 8018ab2:	b110      	cbz	r0, 8018aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8018ab4:	280a      	cmp	r0, #10
 8018ab6:	d1f2      	bne.n	8018a9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8018ab8:	e76c      	b.n	8018994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8018aba:	2500      	movs	r5, #0
 8018abc:	e76b      	b.n	8018996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8018abe:	f1bb 0f00 	cmp.w	fp, #0
 8018ac2:	f43f af5b 	beq.w	801897c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8018ac6:	e776      	b.n	80189b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018ac8:	fffffe00 	.word	0xfffffe00

08018acc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018acc:	b530      	push	{r4, r5, lr}
 8018ace:	8a44      	ldrh	r4, [r0, #18]
 8018ad0:	8ac5      	ldrh	r5, [r0, #22]
 8018ad2:	82c3      	strh	r3, [r0, #22]
 8018ad4:	442c      	add	r4, r5
 8018ad6:	1ae4      	subs	r4, r4, r3
 8018ad8:	8b03      	ldrh	r3, [r0, #24]
 8018ada:	8244      	strh	r4, [r0, #18]
 8018adc:	8a84      	ldrh	r4, [r0, #20]
 8018ade:	4422      	add	r2, r4
 8018ae0:	440c      	add	r4, r1
 8018ae2:	1a59      	subs	r1, r3, r1
 8018ae4:	8342      	strh	r2, [r0, #26]
 8018ae6:	8284      	strh	r4, [r0, #20]
 8018ae8:	8301      	strh	r1, [r0, #24]
 8018aea:	bd30      	pop	{r4, r5, pc}

08018aec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af0:	7a45      	ldrb	r5, [r0, #9]
 8018af2:	b085      	sub	sp, #20
 8018af4:	4604      	mov	r4, r0
 8018af6:	4689      	mov	r9, r1
 8018af8:	1eeb      	subs	r3, r5, #3
 8018afa:	b2db      	uxtb	r3, r3
 8018afc:	b329      	cbz	r1, 8018b4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8018afe:	2b01      	cmp	r3, #1
 8018b00:	d921      	bls.n	8018b46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8018b02:	1e69      	subs	r1, r5, #1
 8018b04:	f1d1 0b00 	rsbs	fp, r1, #0
 8018b08:	eb4b 0b01 	adc.w	fp, fp, r1
 8018b0c:	1eaa      	subs	r2, r5, #2
 8018b0e:	2500      	movs	r5, #0
 8018b10:	4253      	negs	r3, r2
 8018b12:	9500      	str	r5, [sp, #0]
 8018b14:	4153      	adcs	r3, r2
 8018b16:	9301      	str	r3, [sp, #4]
 8018b18:	2600      	movs	r6, #0
 8018b1a:	f242 080b 	movw	r8, #8203	; 0x200b
 8018b1e:	8266      	strh	r6, [r4, #18]
 8018b20:	82a6      	strh	r6, [r4, #20]
 8018b22:	2300      	movs	r3, #0
 8018b24:	68e2      	ldr	r2, [r4, #12]
 8018b26:	7a21      	ldrb	r1, [r4, #8]
 8018b28:	9303      	str	r3, [sp, #12]
 8018b2a:	ab03      	add	r3, sp, #12
 8018b2c:	6860      	ldr	r0, [r4, #4]
 8018b2e:	8827      	ldrh	r7, [r4, #0]
 8018b30:	f002 f968 	bl	801ae04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018b34:	8020      	strh	r0, [r4, #0]
 8018b36:	b9b0      	cbnz	r0, 8018b66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8018b38:	8b22      	ldrh	r2, [r4, #24]
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	4611      	mov	r1, r2
 8018b3e:	4620      	mov	r0, r4
 8018b40:	f7ff ffc4 	bl	8018acc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018b44:	e062      	b.n	8018c0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8018b46:	468b      	mov	fp, r1
 8018b48:	e7e0      	b.n	8018b0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8018b4a:	2b01      	cmp	r3, #1
 8018b4c:	f105 35ff 	add.w	r5, r5, #4294967295
 8018b50:	9101      	str	r1, [sp, #4]
 8018b52:	468b      	mov	fp, r1
 8018b54:	bf8c      	ite	hi
 8018b56:	2300      	movhi	r3, #0
 8018b58:	2301      	movls	r3, #1
 8018b5a:	2d01      	cmp	r5, #1
 8018b5c:	9300      	str	r3, [sp, #0]
 8018b5e:	bf8c      	ite	hi
 8018b60:	2500      	movhi	r5, #0
 8018b62:	2501      	movls	r5, #1
 8018b64:	e7d8      	b.n	8018b18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8018b66:	8ae3      	ldrh	r3, [r4, #22]
 8018b68:	280a      	cmp	r0, #10
 8018b6a:	f103 0301 	add.w	r3, r3, #1
 8018b6e:	82e3      	strh	r3, [r4, #22]
 8018b70:	d0e2      	beq.n	8018b38 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8018b72:	9a03      	ldr	r2, [sp, #12]
 8018b74:	b972      	cbnz	r2, 8018b94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8018b76:	4540      	cmp	r0, r8
 8018b78:	d1d3      	bne.n	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018b7a:	8823      	ldrh	r3, [r4, #0]
 8018b7c:	8b21      	ldrh	r1, [r4, #24]
 8018b7e:	2b20      	cmp	r3, #32
 8018b80:	d001      	beq.n	8018b86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8018b82:	4543      	cmp	r3, r8
 8018b84:	d11d      	bne.n	8018bc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018b86:	2f20      	cmp	r7, #32
 8018b88:	d002      	beq.n	8018b90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8018b8a:	4547      	cmp	r7, r8
 8018b8c:	bf18      	it	ne
 8018b8e:	460e      	movne	r6, r1
 8018b90:	2001      	movs	r0, #1
 8018b92:	e017      	b.n	8018bc4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8018b94:	4540      	cmp	r0, r8
 8018b96:	d012      	beq.n	8018bbe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8018b98:	8893      	ldrh	r3, [r2, #4]
 8018b9a:	4639      	mov	r1, r7
 8018b9c:	8023      	strh	r3, [r4, #0]
 8018b9e:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8018ba2:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8018ba6:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8018baa:	ea4a 0a00 	orr.w	sl, sl, r0
 8018bae:	68e0      	ldr	r0, [r4, #12]
 8018bb0:	6803      	ldr	r3, [r0, #0]
 8018bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018bb4:	4798      	blx	r3
 8018bb6:	eb0a 0200 	add.w	r2, sl, r0
 8018bba:	b292      	uxth	r2, r2
 8018bbc:	e7dd      	b.n	8018b7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	e7db      	b.n	8018b7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8018bc2:	2000      	movs	r0, #0
 8018bc4:	440a      	add	r2, r1
 8018bc6:	8aa3      	ldrh	r3, [r4, #20]
 8018bc8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018bcc:	b292      	uxth	r2, r2
 8018bce:	8322      	strh	r2, [r4, #24]
 8018bd0:	4413      	add	r3, r2
 8018bd2:	f1b9 0f00 	cmp.w	r9, #0
 8018bd6:	d022      	beq.n	8018c1e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8018bd8:	f1bb 0f00 	cmp.w	fp, #0
 8018bdc:	d102      	bne.n	8018be4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8018bde:	9901      	ldr	r1, [sp, #4]
 8018be0:	b149      	cbz	r1, 8018bf6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8018be2:	b140      	cbz	r0, 8018bf6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8018be4:	8ba1      	ldrh	r1, [r4, #28]
 8018be6:	4419      	add	r1, r3
 8018be8:	458c      	cmp	ip, r1
 8018bea:	da12      	bge.n	8018c12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8018bec:	8a61      	ldrh	r1, [r4, #18]
 8018bee:	b181      	cbz	r1, 8018c12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8018bf0:	4563      	cmp	r3, ip
 8018bf2:	dd96      	ble.n	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018bf4:	e004      	b.n	8018c00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8018bf6:	4563      	cmp	r3, ip
 8018bf8:	dd93      	ble.n	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018bfa:	8a63      	ldrh	r3, [r4, #18]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d090      	beq.n	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018c00:	2301      	movs	r3, #1
 8018c02:	8ba2      	ldrh	r2, [r4, #28]
 8018c04:	77a3      	strb	r3, [r4, #30]
 8018c06:	8b63      	ldrh	r3, [r4, #26]
 8018c08:	4413      	add	r3, r2
 8018c0a:	8363      	strh	r3, [r4, #26]
 8018c0c:	b005      	add	sp, #20
 8018c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c12:	2300      	movs	r3, #0
 8018c14:	4611      	mov	r1, r2
 8018c16:	4620      	mov	r0, r4
 8018c18:	f7ff ff58 	bl	8018acc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018c1c:	e781      	b.n	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018c1e:	4563      	cmp	r3, ip
 8018c20:	dd16      	ble.n	8018c50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8018c22:	9b00      	ldr	r3, [sp, #0]
 8018c24:	b113      	cbz	r3, 8018c2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8018c26:	2301      	movs	r3, #1
 8018c28:	460a      	mov	r2, r1
 8018c2a:	e787      	b.n	8018b3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8018c2c:	2d00      	cmp	r5, #0
 8018c2e:	f43f af78 	beq.w	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018c32:	2800      	cmp	r0, #0
 8018c34:	f47f af75 	bne.w	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018c38:	2f20      	cmp	r7, #32
 8018c3a:	d001      	beq.n	8018c40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8018c3c:	4547      	cmp	r7, r8
 8018c3e:	d102      	bne.n	8018c46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8018c40:	2301      	movs	r3, #1
 8018c42:	4632      	mov	r2, r6
 8018c44:	e77b      	b.n	8018b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8018c46:	8a63      	ldrh	r3, [r4, #18]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	f43f af6a 	beq.w	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018c4e:	e7dd      	b.n	8018c0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8018c50:	2800      	cmp	r0, #0
 8018c52:	f47f af66 	bne.w	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018c56:	2f20      	cmp	r7, #32
 8018c58:	d002      	beq.n	8018c60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8018c5a:	4547      	cmp	r7, r8
 8018c5c:	f47f af61 	bne.w	8018b22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018c60:	2301      	movs	r3, #1
 8018c62:	4632      	mov	r2, r6
 8018c64:	e7d7      	b.n	8018c16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08018c66 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018c66:	b570      	push	{r4, r5, r6, lr}
 8018c68:	4606      	mov	r6, r0
 8018c6a:	b08a      	sub	sp, #40	; 0x28
 8018c6c:	4615      	mov	r5, r2
 8018c6e:	b191      	cbz	r1, 8018c96 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8018c70:	2401      	movs	r4, #1
 8018c72:	e9cd 3100 	strd	r3, r1, [sp]
 8018c76:	4613      	mov	r3, r2
 8018c78:	4601      	mov	r1, r0
 8018c7a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018c7e:	a802      	add	r0, sp, #8
 8018c80:	f7ff fd20 	bl	80186c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018c84:	2100      	movs	r1, #0
 8018c86:	a802      	add	r0, sp, #8
 8018c88:	f7ff ff30 	bl	8018aec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018c8c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018c90:	b173      	cbz	r3, 8018cb0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8018c92:	3401      	adds	r4, #1
 8018c94:	e7f6      	b.n	8018c84 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8018c96:	2401      	movs	r4, #1
 8018c98:	4611      	mov	r1, r2
 8018c9a:	f002 f873 	bl	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018c9e:	280a      	cmp	r0, #10
 8018ca0:	4629      	mov	r1, r5
 8018ca2:	4630      	mov	r0, r6
 8018ca4:	bf08      	it	eq
 8018ca6:	3401      	addeq	r4, #1
 8018ca8:	f002 f86c 	bl	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018cac:	2800      	cmp	r0, #0
 8018cae:	d1f6      	bne.n	8018c9e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8018cb0:	b2a0      	uxth	r0, r4
 8018cb2:	b00a      	add	sp, #40	; 0x28
 8018cb4:	bd70      	pop	{r4, r5, r6, pc}

08018cb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018cb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cba:	b0db      	sub	sp, #364	; 0x16c
 8018cbc:	468a      	mov	sl, r1
 8018cbe:	461c      	mov	r4, r3
 8018cc0:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8018cc4:	9009      	str	r0, [sp, #36]	; 0x24
 8018cc6:	f1bb 0f00 	cmp.w	fp, #0
 8018cca:	f000 80c7 	beq.w	8018e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	f000 80c3 	beq.w	8018e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018cd6:	7ba3      	ldrb	r3, [r4, #14]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	f000 80bf 	beq.w	8018e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018cde:	af0c      	add	r7, sp, #48	; 0x30
 8018ce0:	6810      	ldr	r0, [r2, #0]
 8018ce2:	6851      	ldr	r1, [r2, #4]
 8018ce4:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8018ce8:	463b      	mov	r3, r7
 8018cea:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8018cee:	c303      	stmia	r3!, {r0, r1}
 8018cf0:	2100      	movs	r1, #0
 8018cf2:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8018cf6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8018cfa:	4638      	mov	r0, r7
 8018cfc:	910e      	str	r1, [sp, #56]	; 0x38
 8018cfe:	a90e      	add	r1, sp, #56	; 0x38
 8018d00:	79a2      	ldrb	r2, [r4, #6]
 8018d02:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018d06:	f7ff fd49 	bl	801879c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018d0a:	a90e      	add	r1, sp, #56	; 0x38
 8018d0c:	79a2      	ldrb	r2, [r4, #6]
 8018d0e:	4608      	mov	r0, r1
 8018d10:	f7ff fd44 	bl	801879c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018d14:	4648      	mov	r0, r9
 8018d16:	f001 fef3 	bl	801ab00 <_ZN8touchgfx12TextProviderC1Ev>
 8018d1a:	6820      	ldr	r0, [r4, #0]
 8018d1c:	6803      	ldr	r3, [r0, #0]
 8018d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d20:	4798      	blx	r3
 8018d22:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018d24:	4603      	mov	r3, r0
 8018d26:	4659      	mov	r1, fp
 8018d28:	4648      	mov	r0, r9
 8018d2a:	f001 ff06 	bl	801ab3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018d2e:	a82e      	add	r0, sp, #184	; 0xb8
 8018d30:	f001 fee6 	bl	801ab00 <_ZN8touchgfx12TextProviderC1Ev>
 8018d34:	f894 8004 	ldrb.w	r8, [r4, #4]
 8018d38:	f1b8 0f00 	cmp.w	r8, #0
 8018d3c:	d009      	beq.n	8018d52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8018d3e:	6820      	ldr	r0, [r4, #0]
 8018d40:	6803      	ldr	r3, [r0, #0]
 8018d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d44:	4798      	blx	r3
 8018d46:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018d48:	4603      	mov	r3, r0
 8018d4a:	4659      	mov	r1, fp
 8018d4c:	a82e      	add	r0, sp, #184	; 0xb8
 8018d4e:	f001 fef4 	bl	801ab3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018d52:	6820      	ldr	r0, [r4, #0]
 8018d54:	6803      	ldr	r3, [r0, #0]
 8018d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d58:	4798      	blx	r3
 8018d5a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018d5e:	182e      	adds	r6, r5, r0
 8018d60:	2e00      	cmp	r6, #0
 8018d62:	dd45      	ble.n	8018df0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8018d64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018d68:	4283      	cmp	r3, r0
 8018d6a:	db41      	blt.n	8018df0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8018d6c:	441d      	add	r5, r3
 8018d6e:	fb95 f5f6 	sdiv	r5, r5, r6
 8018d72:	a844      	add	r0, sp, #272	; 0x110
 8018d74:	f001 fec4 	bl	801ab00 <_ZN8touchgfx12TextProviderC1Ev>
 8018d78:	7c23      	ldrb	r3, [r4, #16]
 8018d7a:	b14b      	cbz	r3, 8018d90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8018d7c:	6820      	ldr	r0, [r4, #0]
 8018d7e:	6803      	ldr	r3, [r0, #0]
 8018d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d82:	4798      	blx	r3
 8018d84:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018d86:	4603      	mov	r3, r0
 8018d88:	4659      	mov	r1, fp
 8018d8a:	a844      	add	r0, sp, #272	; 0x110
 8018d8c:	f001 fed5 	bl	801ab3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018d90:	7c21      	ldrb	r1, [r4, #16]
 8018d92:	a810      	add	r0, sp, #64	; 0x40
 8018d94:	7963      	ldrb	r3, [r4, #5]
 8018d96:	9101      	str	r1, [sp, #4]
 8018d98:	6821      	ldr	r1, [r4, #0]
 8018d9a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8018d9e:	9100      	str	r1, [sp, #0]
 8018da0:	a944      	add	r1, sp, #272	; 0x110
 8018da2:	f7ff fc8f 	bl	80186c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018da6:	7c23      	ldrb	r3, [r4, #16]
 8018da8:	bb23      	cbnz	r3, 8018df4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8018daa:	fa1f fb86 	uxth.w	fp, r6
 8018dae:	2d00      	cmp	r5, #0
 8018db0:	dd57      	ble.n	8018e62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8018db2:	7961      	ldrb	r1, [r4, #5]
 8018db4:	4648      	mov	r0, r9
 8018db6:	f001 ffe5 	bl	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018dba:	4603      	mov	r3, r0
 8018dbc:	f1b8 0f00 	cmp.w	r8, #0
 8018dc0:	d005      	beq.n	8018dce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8018dc2:	9008      	str	r0, [sp, #32]
 8018dc4:	a82e      	add	r0, sp, #184	; 0xb8
 8018dc6:	7961      	ldrb	r1, [r4, #5]
 8018dc8:	f001 ffdc 	bl	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018dcc:	9b08      	ldr	r3, [sp, #32]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d044      	beq.n	8018e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018dd2:	2b0a      	cmp	r3, #10
 8018dd4:	d1eb      	bne.n	8018dae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8018dd6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018dda:	3d01      	subs	r5, #1
 8018ddc:	445b      	add	r3, fp
 8018dde:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018de2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018de6:	eba3 030b 	sub.w	r3, r3, fp
 8018dea:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018dee:	e7de      	b.n	8018dae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8018df0:	2500      	movs	r5, #0
 8018df2:	e7be      	b.n	8018d72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8018df4:	0073      	lsls	r3, r6, #1
 8018df6:	9308      	str	r3, [sp, #32]
 8018df8:	2d00      	cmp	r5, #0
 8018dfa:	dd32      	ble.n	8018e62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8018dfc:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018e00:	a810      	add	r0, sp, #64	; 0x40
 8018e02:	9b08      	ldr	r3, [sp, #32]
 8018e04:	428b      	cmp	r3, r1
 8018e06:	bfd4      	ite	le
 8018e08:	2100      	movle	r1, #0
 8018e0a:	2101      	movgt	r1, #1
 8018e0c:	f7ff fe6e 	bl	8018aec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018e10:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8018e14:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018e18:	fa1f fb83 	uxth.w	fp, r3
 8018e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018e20:	459b      	cmp	fp, r3
 8018e22:	d00b      	beq.n	8018e3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8018e24:	7961      	ldrb	r1, [r4, #5]
 8018e26:	4648      	mov	r0, r9
 8018e28:	f001 ffac 	bl	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e2c:	f1b8 0f00 	cmp.w	r8, #0
 8018e30:	d0f0      	beq.n	8018e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8018e32:	7961      	ldrb	r1, [r4, #5]
 8018e34:	a82e      	add	r0, sp, #184	; 0xb8
 8018e36:	f001 ffa5 	bl	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e3a:	e7eb      	b.n	8018e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8018e3c:	b2b3      	uxth	r3, r6
 8018e3e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018e42:	3d01      	subs	r5, #1
 8018e44:	441a      	add	r2, r3
 8018e46:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8018e4a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8018e4e:	1ad3      	subs	r3, r2, r3
 8018e50:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018e54:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d1cd      	bne.n	8018df8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8018e5c:	b05b      	add	sp, #364	; 0x16c
 8018e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e62:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8018e66:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8018e6a:	7c23      	ldrb	r3, [r4, #16]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d05f      	beq.n	8018f30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8018e70:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018e74:	a810      	add	r0, sp, #64	; 0x40
 8018e76:	458b      	cmp	fp, r1
 8018e78:	bfd4      	ite	le
 8018e7a:	2100      	movle	r1, #0
 8018e7c:	2101      	movgt	r1, #1
 8018e7e:	f7ff fe35 	bl	8018aec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018e82:	f1b8 0f00 	cmp.w	r8, #0
 8018e86:	d04c      	beq.n	8018f22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018e88:	7c23      	ldrb	r3, [r4, #16]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d053      	beq.n	8018f36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 8018e8e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8018e92:	7922      	ldrb	r2, [r4, #4]
 8018e94:	2a01      	cmp	r2, #1
 8018e96:	d13c      	bne.n	8018f12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8018e98:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8018e9c:	1ac0      	subs	r0, r0, r3
 8018e9e:	2302      	movs	r3, #2
 8018ea0:	fb90 f0f3 	sdiv	r0, r0, r3
 8018ea4:	b200      	sxth	r0, r0
 8018ea6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018eaa:	4418      	add	r0, r3
 8018eac:	7c23      	ldrb	r3, [r4, #16]
 8018eae:	8028      	strh	r0, [r5, #0]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d03a      	beq.n	8018f2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8018eb4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8018eb8:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8018ebc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018ec0:	f8cd 9010 	str.w	r9, [sp, #16]
 8018ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ec6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018eca:	2200      	movs	r2, #0
 8018ecc:	2100      	movs	r1, #0
 8018ece:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8018ed2:	e9cd 5700 	strd	r5, r7, [sp]
 8018ed6:	4652      	mov	r2, sl
 8018ed8:	f7ff fcb2 	bl	8018840 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018edc:	2800      	cmp	r0, #0
 8018ede:	d1bd      	bne.n	8018e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018ee0:	b2b2      	uxth	r2, r6
 8018ee2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018ee6:	4611      	mov	r1, r2
 8018ee8:	4413      	add	r3, r2
 8018eea:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8018eee:	b21b      	sxth	r3, r3
 8018ef0:	1a52      	subs	r2, r2, r1
 8018ef2:	7c21      	ldrb	r1, [r4, #16]
 8018ef4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018ef8:	b212      	sxth	r2, r2
 8018efa:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8018efe:	b109      	cbz	r1, 8018f04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8018f00:	42b2      	cmp	r2, r6
 8018f02:	dbab      	blt.n	8018e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018f04:	887a      	ldrh	r2, [r7, #2]
 8018f06:	88f9      	ldrh	r1, [r7, #6]
 8018f08:	440a      	add	r2, r1
 8018f0a:	b212      	sxth	r2, r2
 8018f0c:	4293      	cmp	r3, r2
 8018f0e:	ddac      	ble.n	8018e6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8018f10:	e7a4      	b.n	8018e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018f12:	2a02      	cmp	r2, #2
 8018f14:	d107      	bne.n	8018f26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8018f16:	7be2      	ldrb	r2, [r4, #15]
 8018f18:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8018f1c:	1a80      	subs	r0, r0, r2
 8018f1e:	1ac0      	subs	r0, r0, r3
 8018f20:	e7c0      	b.n	8018ea4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8018f22:	7be0      	ldrb	r0, [r4, #15]
 8018f24:	e7bf      	b.n	8018ea6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018f26:	2000      	movs	r0, #0
 8018f28:	e7bd      	b.n	8018ea6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8018f2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018f2e:	e7c3      	b.n	8018eb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8018f30:	f1b8 0f00 	cmp.w	r8, #0
 8018f34:	d0f5      	beq.n	8018f22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018f36:	2300      	movs	r3, #0
 8018f38:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018f3c:	6821      	ldr	r1, [r4, #0]
 8018f3e:	a82e      	add	r0, sp, #184	; 0xb8
 8018f40:	f7ff fbfa 	bl	8018738 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018f44:	b203      	sxth	r3, r0
 8018f46:	e7a4      	b.n	8018e92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08018f48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018f48:	2b02      	cmp	r3, #2
 8018f4a:	b510      	push	{r4, lr}
 8018f4c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018f50:	d00b      	beq.n	8018f6a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8018f52:	2b03      	cmp	r3, #3
 8018f54:	d00e      	beq.n	8018f74 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8018f56:	2b01      	cmp	r3, #1
 8018f58:	d001      	beq.n	8018f5e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8018f5a:	1860      	adds	r0, r4, r1
 8018f5c:	bd10      	pop	{r4, pc}
 8018f5e:	8880      	ldrh	r0, [r0, #4]
 8018f60:	4420      	add	r0, r4
 8018f62:	b200      	sxth	r0, r0
 8018f64:	1a80      	subs	r0, r0, r2
 8018f66:	3801      	subs	r0, #1
 8018f68:	e7f8      	b.n	8018f5c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8018f6a:	8880      	ldrh	r0, [r0, #4]
 8018f6c:	4420      	add	r0, r4
 8018f6e:	b200      	sxth	r0, r0
 8018f70:	1a40      	subs	r0, r0, r1
 8018f72:	e7f8      	b.n	8018f66 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018f74:	18a0      	adds	r0, r4, r2
 8018f76:	e7f1      	b.n	8018f5c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018f78 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018f78:	2b02      	cmp	r3, #2
 8018f7a:	b510      	push	{r4, lr}
 8018f7c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018f80:	d006      	beq.n	8018f90 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018f82:	2b03      	cmp	r3, #3
 8018f84:	d00a      	beq.n	8018f9c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018f86:	2b01      	cmp	r3, #1
 8018f88:	bf14      	ite	ne
 8018f8a:	18a0      	addne	r0, r4, r2
 8018f8c:	1860      	addeq	r0, r4, r1
 8018f8e:	bd10      	pop	{r4, pc}
 8018f90:	88c0      	ldrh	r0, [r0, #6]
 8018f92:	4420      	add	r0, r4
 8018f94:	b200      	sxth	r0, r0
 8018f96:	1a80      	subs	r0, r0, r2
 8018f98:	3801      	subs	r0, #1
 8018f9a:	e7f8      	b.n	8018f8e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018f9c:	88c0      	ldrh	r0, [r0, #6]
 8018f9e:	4420      	add	r0, r4
 8018fa0:	b200      	sxth	r0, r0
 8018fa2:	1a40      	subs	r0, r0, r1
 8018fa4:	e7f8      	b.n	8018f98 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018fa8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018fa8:	4b01      	ldr	r3, [pc, #4]	; (8018fb0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018faa:	2200      	movs	r2, #0
 8018fac:	601a      	str	r2, [r3, #0]
 8018fae:	4770      	bx	lr
 8018fb0:	2000c58c 	.word	0x2000c58c

08018fb4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8018fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fb6:	1e05      	subs	r5, r0, #0
 8018fb8:	f04f 0601 	mov.w	r6, #1
 8018fbc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018fc0:	bfba      	itte	lt
 8018fc2:	f04f 37ff 	movlt.w	r7, #4294967295
 8018fc6:	426d      	neglt	r5, r5
 8018fc8:	2701      	movge	r7, #1
 8018fca:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8018fce:	f1be 0f00 	cmp.w	lr, #0
 8018fd2:	bfbc      	itt	lt
 8018fd4:	f1ce 0e00 	rsblt	lr, lr, #0
 8018fd8:	427f      	neglt	r7, r7
 8018fda:	2c00      	cmp	r4, #0
 8018fdc:	fa4e f001 	asr.w	r0, lr, r1
 8018fe0:	fa06 f101 	lsl.w	r1, r6, r1
 8018fe4:	bfbc      	itt	lt
 8018fe6:	4264      	neglt	r4, r4
 8018fe8:	427f      	neglt	r7, r7
 8018fea:	3901      	subs	r1, #1
 8018fec:	ea01 010e 	and.w	r1, r1, lr
 8018ff0:	434d      	muls	r5, r1
 8018ff2:	f8dc 1000 	ldr.w	r1, [ip]
 8018ff6:	fb03 1300 	mla	r3, r3, r0, r1
 8018ffa:	fb95 f1f4 	sdiv	r1, r5, r4
 8018ffe:	fb04 5511 	mls	r5, r4, r1, r5
 8019002:	441d      	add	r5, r3
 8019004:	fb95 f3f4 	sdiv	r3, r5, r4
 8019008:	4419      	add	r1, r3
 801900a:	fb04 5413 	mls	r4, r4, r3, r5
 801900e:	fb02 1000 	mla	r0, r2, r0, r1
 8019012:	f8cc 4000 	str.w	r4, [ip]
 8019016:	4378      	muls	r0, r7
 8019018:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801901c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019020:	4c24      	ldr	r4, [pc, #144]	; (80190b4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8019022:	b086      	sub	sp, #24
 8019024:	4605      	mov	r5, r0
 8019026:	6807      	ldr	r7, [r0, #0]
 8019028:	69a3      	ldr	r3, [r4, #24]
 801902a:	b92b      	cbnz	r3, 8019038 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801902c:	6840      	ldr	r0, [r0, #4]
 801902e:	e9c5 7000 	strd	r7, r0, [r5]
 8019032:	b006      	add	sp, #24
 8019034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019038:	f04f 0802 	mov.w	r8, #2
 801903c:	68a2      	ldr	r2, [r4, #8]
 801903e:	ae06      	add	r6, sp, #24
 8019040:	6820      	ldr	r0, [r4, #0]
 8019042:	fb93 f1f8 	sdiv	r1, r3, r8
 8019046:	440a      	add	r2, r1
 8019048:	69e1      	ldr	r1, [r4, #28]
 801904a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801904e:	9700      	str	r7, [sp, #0]
 8019050:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019052:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8019056:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019058:	f7ff ffac 	bl	8018fb4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801905c:	69a3      	ldr	r3, [r4, #24]
 801905e:	4607      	mov	r7, r0
 8019060:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8019062:	9301      	str	r3, [sp, #4]
 8019064:	686b      	ldr	r3, [r5, #4]
 8019066:	6a21      	ldr	r1, [r4, #32]
 8019068:	9300      	str	r3, [sp, #0]
 801906a:	9602      	str	r6, [sp, #8]
 801906c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801906e:	6860      	ldr	r0, [r4, #4]
 8019070:	f7ff ffa0 	bl	8018fb4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019074:	69a2      	ldr	r2, [r4, #24]
 8019076:	6963      	ldr	r3, [r4, #20]
 8019078:	4407      	add	r7, r0
 801907a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801907c:	68e0      	ldr	r0, [r4, #12]
 801907e:	fb92 f8f8 	sdiv	r8, r2, r8
 8019082:	4443      	add	r3, r8
 8019084:	9305      	str	r3, [sp, #20]
 8019086:	682b      	ldr	r3, [r5, #0]
 8019088:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801908c:	9300      	str	r3, [sp, #0]
 801908e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019090:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019092:	f7ff ff8f 	bl	8018fb4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8019096:	69a3      	ldr	r3, [r4, #24]
 8019098:	4680      	mov	r8, r0
 801909a:	9602      	str	r6, [sp, #8]
 801909c:	9301      	str	r3, [sp, #4]
 801909e:	686b      	ldr	r3, [r5, #4]
 80190a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80190a2:	9300      	str	r3, [sp, #0]
 80190a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80190a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80190a8:	6920      	ldr	r0, [r4, #16]
 80190aa:	f7ff ff83 	bl	8018fb4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80190ae:	4440      	add	r0, r8
 80190b0:	e7bd      	b.n	801902e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80190b2:	bf00      	nop
 80190b4:	2000c590 	.word	0x2000c590

080190b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80190b8:	4b07      	ldr	r3, [pc, #28]	; (80190d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80190ba:	b510      	push	{r4, lr}
 80190bc:	781b      	ldrb	r3, [r3, #0]
 80190be:	2b01      	cmp	r3, #1
 80190c0:	d108      	bne.n	80190d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80190c2:	4b06      	ldr	r3, [pc, #24]	; (80190dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80190c4:	880c      	ldrh	r4, [r1, #0]
 80190c6:	881b      	ldrh	r3, [r3, #0]
 80190c8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80190cc:	3b01      	subs	r3, #1
 80190ce:	1b1b      	subs	r3, r3, r4
 80190d0:	8003      	strh	r3, [r0, #0]
 80190d2:	800a      	strh	r2, [r1, #0]
 80190d4:	bd10      	pop	{r4, pc}
 80190d6:	bf00      	nop
 80190d8:	2000c55c 	.word	0x2000c55c
 80190dc:	2000c560 	.word	0x2000c560

080190e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80190e0:	4b0a      	ldr	r3, [pc, #40]	; (801910c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80190e2:	b510      	push	{r4, lr}
 80190e4:	781b      	ldrb	r3, [r3, #0]
 80190e6:	2b01      	cmp	r3, #1
 80190e8:	d10e      	bne.n	8019108 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80190ea:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80190ee:	8843      	ldrh	r3, [r0, #2]
 80190f0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80190f4:	18ca      	adds	r2, r1, r3
 80190f6:	4b06      	ldr	r3, [pc, #24]	; (8019110 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80190f8:	8044      	strh	r4, [r0, #2]
 80190fa:	881b      	ldrh	r3, [r3, #0]
 80190fc:	1a9b      	subs	r3, r3, r2
 80190fe:	8003      	strh	r3, [r0, #0]
 8019100:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019104:	8081      	strh	r1, [r0, #4]
 8019106:	80c3      	strh	r3, [r0, #6]
 8019108:	bd10      	pop	{r4, pc}
 801910a:	bf00      	nop
 801910c:	2000c55c 	.word	0x2000c55c
 8019110:	2000c558 	.word	0x2000c558

08019114 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019114:	4b07      	ldr	r3, [pc, #28]	; (8019134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019116:	b510      	push	{r4, lr}
 8019118:	781b      	ldrb	r3, [r3, #0]
 801911a:	2b01      	cmp	r3, #1
 801911c:	d108      	bne.n	8019130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801911e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019122:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019126:	8003      	strh	r3, [r0, #0]
 8019128:	8893      	ldrh	r3, [r2, #4]
 801912a:	3b01      	subs	r3, #1
 801912c:	1b1b      	subs	r3, r3, r4
 801912e:	800b      	strh	r3, [r1, #0]
 8019130:	bd10      	pop	{r4, pc}
 8019132:	bf00      	nop
 8019134:	2000c55c 	.word	0x2000c55c

08019138 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019138:	4b08      	ldr	r3, [pc, #32]	; (801915c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801913a:	b513      	push	{r0, r1, r4, lr}
 801913c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019140:	2400      	movs	r4, #0
 8019142:	4b07      	ldr	r3, [pc, #28]	; (8019160 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8019144:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019148:	466a      	mov	r2, sp
 801914a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801914e:	9400      	str	r4, [sp, #0]
 8019150:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019154:	f7ff ffde 	bl	8019114 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019158:	b002      	add	sp, #8
 801915a:	bd10      	pop	{r4, pc}
 801915c:	2000c558 	.word	0x2000c558
 8019160:	2000c55a 	.word	0x2000c55a

08019164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019164:	4b0a      	ldr	r3, [pc, #40]	; (8019190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019166:	460a      	mov	r2, r1
 8019168:	b510      	push	{r4, lr}
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	2b01      	cmp	r3, #1
 801916e:	d10d      	bne.n	801918c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019170:	8881      	ldrh	r1, [r0, #4]
 8019172:	8803      	ldrh	r3, [r0, #0]
 8019174:	440b      	add	r3, r1
 8019176:	4601      	mov	r1, r0
 8019178:	3b01      	subs	r3, #1
 801917a:	f821 3b02 	strh.w	r3, [r1], #2
 801917e:	f7ff ffc9 	bl	8019114 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019182:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019186:	88c2      	ldrh	r2, [r0, #6]
 8019188:	80c3      	strh	r3, [r0, #6]
 801918a:	8082      	strh	r2, [r0, #4]
 801918c:	bd10      	pop	{r4, pc}
 801918e:	bf00      	nop
 8019190:	2000c55c 	.word	0x2000c55c

08019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019194:	4b09      	ldr	r3, [pc, #36]	; (80191bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019196:	b507      	push	{r0, r1, r2, lr}
 8019198:	2100      	movs	r1, #0
 801919a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801919e:	4b08      	ldr	r3, [pc, #32]	; (80191c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80191a0:	9100      	str	r1, [sp, #0]
 80191a2:	4669      	mov	r1, sp
 80191a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80191a8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80191ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 80191b0:	f7ff ffd8 	bl	8019164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80191b4:	b003      	add	sp, #12
 80191b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80191ba:	bf00      	nop
 80191bc:	2000c558 	.word	0x2000c558
 80191c0:	2000c55a 	.word	0x2000c55a

080191c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80191c4:	4b03      	ldr	r3, [pc, #12]	; (80191d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80191c6:	6818      	ldr	r0, [r3, #0]
 80191c8:	b110      	cbz	r0, 80191d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80191ca:	6803      	ldr	r3, [r0, #0]
 80191cc:	699b      	ldr	r3, [r3, #24]
 80191ce:	4718      	bx	r3
 80191d0:	4770      	bx	lr
 80191d2:	bf00      	nop
 80191d4:	2000c5e0 	.word	0x2000c5e0

080191d8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80191d8:	4770      	bx	lr
	...

080191dc <_ZN8touchgfx11Application4drawEv>:
 80191dc:	4b09      	ldr	r3, [pc, #36]	; (8019204 <_ZN8touchgfx11Application4drawEv+0x28>)
 80191de:	b507      	push	{r0, r1, r2, lr}
 80191e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80191e4:	2100      	movs	r1, #0
 80191e6:	4b08      	ldr	r3, [pc, #32]	; (8019208 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80191e8:	9100      	str	r1, [sp, #0]
 80191ea:	4669      	mov	r1, sp
 80191ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80191f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80191f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80191f8:	6803      	ldr	r3, [r0, #0]
 80191fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191fc:	4798      	blx	r3
 80191fe:	b003      	add	sp, #12
 8019200:	f85d fb04 	ldr.w	pc, [sp], #4
 8019204:	2000c558 	.word	0x2000c558
 8019208:	2000c55a 	.word	0x2000c55a

0801920c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801920c:	4b03      	ldr	r3, [pc, #12]	; (801921c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801920e:	6818      	ldr	r0, [r3, #0]
 8019210:	b110      	cbz	r0, 8019218 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019212:	6803      	ldr	r3, [r0, #0]
 8019214:	69db      	ldr	r3, [r3, #28]
 8019216:	4718      	bx	r3
 8019218:	4770      	bx	lr
 801921a:	bf00      	nop
 801921c:	2000c5e0 	.word	0x2000c5e0

08019220 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019220:	4b03      	ldr	r3, [pc, #12]	; (8019230 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019222:	6818      	ldr	r0, [r3, #0]
 8019224:	b110      	cbz	r0, 801922c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019226:	6803      	ldr	r3, [r0, #0]
 8019228:	6a1b      	ldr	r3, [r3, #32]
 801922a:	4718      	bx	r3
 801922c:	4770      	bx	lr
 801922e:	bf00      	nop
 8019230:	2000c5e0 	.word	0x2000c5e0

08019234 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019234:	4b03      	ldr	r3, [pc, #12]	; (8019244 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019236:	6818      	ldr	r0, [r3, #0]
 8019238:	b110      	cbz	r0, 8019240 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801923a:	6803      	ldr	r3, [r0, #0]
 801923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801923e:	4718      	bx	r3
 8019240:	4770      	bx	lr
 8019242:	bf00      	nop
 8019244:	2000c5e0 	.word	0x2000c5e0

08019248 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801924c:	4d3a      	ldr	r5, [pc, #232]	; (8019338 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801924e:	4604      	mov	r4, r0
 8019250:	6828      	ldr	r0, [r5, #0]
 8019252:	b140      	cbz	r0, 8019266 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8019254:	7a03      	ldrb	r3, [r0, #8]
 8019256:	b933      	cbnz	r3, 8019266 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8019258:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801925c:	6803      	ldr	r3, [r0, #0]
 801925e:	689b      	ldr	r3, [r3, #8]
 8019260:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019264:	4718      	bx	r3
 8019266:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801926a:	b97b      	cbnz	r3, 801928c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801926c:	b170      	cbz	r0, 801928c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801926e:	7a03      	ldrb	r3, [r0, #8]
 8019270:	b163      	cbz	r3, 801928c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019272:	4b32      	ldr	r3, [pc, #200]	; (801933c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8019274:	6818      	ldr	r0, [r3, #0]
 8019276:	b110      	cbz	r0, 801927e <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8019278:	6803      	ldr	r3, [r0, #0]
 801927a:	691b      	ldr	r3, [r3, #16]
 801927c:	4798      	blx	r3
 801927e:	6828      	ldr	r0, [r5, #0]
 8019280:	6803      	ldr	r3, [r0, #0]
 8019282:	68db      	ldr	r3, [r3, #12]
 8019284:	4798      	blx	r3
 8019286:	2301      	movs	r3, #1
 8019288:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801928c:	2500      	movs	r5, #0
 801928e:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019292:	42a8      	cmp	r0, r5
 8019294:	dd0c      	ble.n	80192b0 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8019296:	1963      	adds	r3, r4, r5
 8019298:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801929c:	b132      	cbz	r2, 80192ac <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801929e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80192a2:	4413      	add	r3, r2
 80192a4:	6858      	ldr	r0, [r3, #4]
 80192a6:	6803      	ldr	r3, [r0, #0]
 80192a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192aa:	4798      	blx	r3
 80192ac:	3501      	adds	r5, #1
 80192ae:	e7ee      	b.n	801928e <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80192b0:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 80192b4:	3801      	subs	r0, #1
 80192b6:	f04f 0c00 	mov.w	ip, #0
 80192ba:	3678      	adds	r6, #120	; 0x78
 80192bc:	1c43      	adds	r3, r0, #1
 80192be:	d033      	beq.n	8019328 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80192c0:	1823      	adds	r3, r4, r0
 80192c2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80192c6:	bb6a      	cbnz	r2, 8019324 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 80192c8:	b281      	uxth	r1, r0
 80192ca:	1d25      	adds	r5, r4, #4
 80192cc:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80192d0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80192d4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80192d8:	4293      	cmp	r3, r2
 80192da:	dc0a      	bgt.n	80192f2 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 80192dc:	f101 0288 	add.w	r2, r1, #136	; 0x88
 80192e0:	4422      	add	r2, r4
 80192e2:	18b1      	adds	r1, r6, r2
 80192e4:	b289      	uxth	r1, r1
 80192e6:	428b      	cmp	r3, r1
 80192e8:	d919      	bls.n	801931e <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 80192ea:	7851      	ldrb	r1, [r2, #1]
 80192ec:	f802 1b01 	strb.w	r1, [r2], #1
 80192f0:	e7f7      	b.n	80192e2 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 80192f2:	682f      	ldr	r7, [r5, #0]
 80192f4:	f105 0804 	add.w	r8, r5, #4
 80192f8:	45b9      	cmp	r9, r7
 80192fa:	d10d      	bne.n	8019318 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 80192fc:	4696      	mov	lr, r2
 80192fe:	f1be 0f1e 	cmp.w	lr, #30
 8019302:	dc06      	bgt.n	8019312 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8019304:	f10e 0e01 	add.w	lr, lr, #1
 8019308:	686f      	ldr	r7, [r5, #4]
 801930a:	4573      	cmp	r3, lr
 801930c:	f845 7b04 	str.w	r7, [r5], #4
 8019310:	dcf5      	bgt.n	80192fe <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8019312:	3b01      	subs	r3, #1
 8019314:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8019318:	3201      	adds	r2, #1
 801931a:	4645      	mov	r5, r8
 801931c:	e7da      	b.n	80192d4 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801931e:	4423      	add	r3, r4
 8019320:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8019324:	3801      	subs	r0, #1
 8019326:	e7c9      	b.n	80192bc <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8019328:	4b04      	ldr	r3, [pc, #16]	; (801933c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801932a:	6818      	ldr	r0, [r3, #0]
 801932c:	b110      	cbz	r0, 8019334 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801932e:	6803      	ldr	r3, [r0, #0]
 8019330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019332:	e795      	b.n	8019260 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8019334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019338:	2000c5e4 	.word	0x2000c5e4
 801933c:	2000c5e0 	.word	0x2000c5e0

08019340 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019340:	b570      	push	{r4, r5, r6, lr}
 8019342:	4606      	mov	r6, r0
 8019344:	460c      	mov	r4, r1
 8019346:	b929      	cbnz	r1, 8019354 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8019348:	4b0c      	ldr	r3, [pc, #48]	; (801937c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801934a:	2164      	movs	r1, #100	; 0x64
 801934c:	4a0c      	ldr	r2, [pc, #48]	; (8019380 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801934e:	480d      	ldr	r0, [pc, #52]	; (8019384 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8019350:	f00c f854 	bl	80253fc <__assert_func>
 8019354:	2300      	movs	r3, #0
 8019356:	4d0c      	ldr	r5, [pc, #48]	; (8019388 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8019358:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801935c:	6828      	ldr	r0, [r5, #0]
 801935e:	b110      	cbz	r0, 8019366 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8019360:	6803      	ldr	r3, [r0, #0]
 8019362:	695b      	ldr	r3, [r3, #20]
 8019364:	4798      	blx	r3
 8019366:	602c      	str	r4, [r5, #0]
 8019368:	4620      	mov	r0, r4
 801936a:	6823      	ldr	r3, [r4, #0]
 801936c:	68db      	ldr	r3, [r3, #12]
 801936e:	4798      	blx	r3
 8019370:	6833      	ldr	r3, [r6, #0]
 8019372:	4630      	mov	r0, r6
 8019374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801937a:	4718      	bx	r3
 801937c:	08028dc8 	.word	0x08028dc8
 8019380:	08028e90 	.word	0x08028e90
 8019384:	08028dd2 	.word	0x08028dd2
 8019388:	2000c5e0 	.word	0x2000c5e0

0801938c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801938c:	b510      	push	{r4, lr}
 801938e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019392:	888a      	ldrh	r2, [r1, #4]
 8019394:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019398:	4422      	add	r2, r4
 801939a:	b212      	sxth	r2, r2
 801939c:	4293      	cmp	r3, r2
 801939e:	da15      	bge.n	80193cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80193a0:	8882      	ldrh	r2, [r0, #4]
 80193a2:	4413      	add	r3, r2
 80193a4:	b21b      	sxth	r3, r3
 80193a6:	429c      	cmp	r4, r3
 80193a8:	da10      	bge.n	80193cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80193aa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80193ae:	88c9      	ldrh	r1, [r1, #6]
 80193b0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80193b4:	4419      	add	r1, r3
 80193b6:	b209      	sxth	r1, r1
 80193b8:	428a      	cmp	r2, r1
 80193ba:	da07      	bge.n	80193cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80193bc:	88c0      	ldrh	r0, [r0, #6]
 80193be:	4410      	add	r0, r2
 80193c0:	b200      	sxth	r0, r0
 80193c2:	4283      	cmp	r3, r0
 80193c4:	bfac      	ite	ge
 80193c6:	2000      	movge	r0, #0
 80193c8:	2001      	movlt	r0, #1
 80193ca:	bd10      	pop	{r4, pc}
 80193cc:	2000      	movs	r0, #0
 80193ce:	e7fc      	b.n	80193ca <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080193d0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80193d0:	b570      	push	{r4, r5, r6, lr}
 80193d2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80193d6:	f9b0 5000 	ldrsh.w	r5, [r0]
 80193da:	42ac      	cmp	r4, r5
 80193dc:	db18      	blt.n	8019410 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80193de:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80193e2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80193e6:	429a      	cmp	r2, r3
 80193e8:	db12      	blt.n	8019410 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80193ea:	8886      	ldrh	r6, [r0, #4]
 80193ec:	4435      	add	r5, r6
 80193ee:	888e      	ldrh	r6, [r1, #4]
 80193f0:	4434      	add	r4, r6
 80193f2:	b22d      	sxth	r5, r5
 80193f4:	b224      	sxth	r4, r4
 80193f6:	42a5      	cmp	r5, r4
 80193f8:	db0a      	blt.n	8019410 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80193fa:	88c0      	ldrh	r0, [r0, #6]
 80193fc:	4418      	add	r0, r3
 80193fe:	88cb      	ldrh	r3, [r1, #6]
 8019400:	441a      	add	r2, r3
 8019402:	b200      	sxth	r0, r0
 8019404:	b212      	sxth	r2, r2
 8019406:	4290      	cmp	r0, r2
 8019408:	bfb4      	ite	lt
 801940a:	2000      	movlt	r0, #0
 801940c:	2001      	movge	r0, #1
 801940e:	bd70      	pop	{r4, r5, r6, pc}
 8019410:	2000      	movs	r0, #0
 8019412:	e7fc      	b.n	801940e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08019414 <_ZN8touchgfx11Application11getInstanceEv>:
 8019414:	4b01      	ldr	r3, [pc, #4]	; (801941c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019416:	6818      	ldr	r0, [r3, #0]
 8019418:	4770      	bx	lr
 801941a:	bf00      	nop
 801941c:	2000c5f0 	.word	0x2000c5f0

08019420 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019420:	2300      	movs	r3, #0
 8019422:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8019426:	30a8      	adds	r0, #168	; 0xa8
 8019428:	f820 3c24 	strh.w	r3, [r0, #-36]
 801942c:	f802 3b01 	strb.w	r3, [r2], #1
 8019430:	4282      	cmp	r2, r0
 8019432:	d1fb      	bne.n	801942c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8019434:	4770      	bx	lr

08019436 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019436:	4603      	mov	r3, r0
 8019438:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801943c:	2200      	movs	r2, #0
 801943e:	801a      	strh	r2, [r3, #0]
 8019440:	3308      	adds	r3, #8
 8019442:	f823 2c06 	strh.w	r2, [r3, #-6]
 8019446:	f823 2c04 	strh.w	r2, [r3, #-4]
 801944a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801944e:	428b      	cmp	r3, r1
 8019450:	d1f5      	bne.n	801943e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019452:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8019456:	4770      	bx	lr

08019458 <_ZN8touchgfx11ApplicationC1Ev>:
 8019458:	b570      	push	{r4, r5, r6, lr}
 801945a:	4b16      	ldr	r3, [pc, #88]	; (80194b4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801945c:	2500      	movs	r5, #0
 801945e:	4604      	mov	r4, r0
 8019460:	30a8      	adds	r0, #168	; 0xa8
 8019462:	f840 3ca8 	str.w	r3, [r0, #-168]
 8019466:	f820 5c24 	strh.w	r5, [r0, #-36]
 801946a:	f7ff ffe4 	bl	8019436 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801946e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8019472:	f7ff ffe0 	bl	8019436 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019476:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801947a:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801947e:	490e      	ldr	r1, [pc, #56]	; (80194b8 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8019480:	480e      	ldr	r0, [pc, #56]	; (80194bc <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8019482:	f00a faa1 	bl	80239c8 <CRC_Lock>
 8019486:	4e0e      	ldr	r6, [pc, #56]	; (80194c0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8019488:	4b0e      	ldr	r3, [pc, #56]	; (80194c4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801948a:	b158      	cbz	r0, 80194a4 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801948c:	801d      	strh	r5, [r3, #0]
 801948e:	2300      	movs	r3, #0
 8019490:	4a0d      	ldr	r2, [pc, #52]	; (80194c8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019492:	4620      	mov	r0, r4
 8019494:	6013      	str	r3, [r2, #0]
 8019496:	4a0d      	ldr	r2, [pc, #52]	; (80194cc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019498:	6033      	str	r3, [r6, #0]
 801949a:	6013      	str	r3, [r2, #0]
 801949c:	f7ff ffc0 	bl	8019420 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80194a0:	4620      	mov	r0, r4
 80194a2:	bd70      	pop	{r4, r5, r6, pc}
 80194a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80194a8:	2002      	movs	r0, #2
 80194aa:	801a      	strh	r2, [r3, #0]
 80194ac:	6030      	str	r0, [r6, #0]
 80194ae:	f000 ff81 	bl	801a3b4 <_ZN8touchgfx6Screen4drawEv>
 80194b2:	e7ec      	b.n	801948e <_ZN8touchgfx11ApplicationC1Ev+0x36>
 80194b4:	08028e5c 	.word	0x08028e5c
 80194b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80194bc:	f407a5c2 	.word	0xf407a5c2
 80194c0:	2000c5e0 	.word	0x2000c5e0
 80194c4:	20000054 	.word	0x20000054
 80194c8:	2000c5f0 	.word	0x2000c5f0
 80194cc:	2000c5e4 	.word	0x2000c5e4

080194d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80194d0:	2300      	movs	r3, #0
 80194d2:	8003      	strh	r3, [r0, #0]
 80194d4:	8043      	strh	r3, [r0, #2]
 80194d6:	8083      	strh	r3, [r0, #4]
 80194d8:	80c3      	strh	r3, [r0, #6]
 80194da:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80194de:	4293      	cmp	r3, r2
 80194e0:	b530      	push	{r4, r5, lr}
 80194e2:	d912      	bls.n	801950a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80194e4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80194e8:	3b01      	subs	r3, #1
 80194ea:	6825      	ldr	r5, [r4, #0]
 80194ec:	b29b      	uxth	r3, r3
 80194ee:	6005      	str	r5, [r0, #0]
 80194f0:	4293      	cmp	r3, r2
 80194f2:	6865      	ldr	r5, [r4, #4]
 80194f4:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 80194f8:	6045      	str	r5, [r0, #4]
 80194fa:	d906      	bls.n	801950a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80194fc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8019500:	681d      	ldr	r5, [r3, #0]
 8019502:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8019506:	685d      	ldr	r5, [r3, #4]
 8019508:	6065      	str	r5, [r4, #4]
 801950a:	bd30      	pop	{r4, r5, pc}

0801950c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801950c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801950e:	466b      	mov	r3, sp
 8019510:	4604      	mov	r4, r0
 8019512:	e883 0006 	stmia.w	r3, {r1, r2}
 8019516:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801951a:	2a07      	cmp	r2, #7
 801951c:	d906      	bls.n	801952c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801951e:	4b09      	ldr	r3, [pc, #36]	; (8019544 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8019520:	f44f 7102 	mov.w	r1, #520	; 0x208
 8019524:	4a08      	ldr	r2, [pc, #32]	; (8019548 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8019526:	4809      	ldr	r0, [pc, #36]	; (801954c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8019528:	f00b ff68 	bl	80253fc <__assert_func>
 801952c:	1c51      	adds	r1, r2, #1
 801952e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8019532:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8019536:	cb03      	ldmia	r3!, {r0, r1}
 8019538:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801953c:	6069      	str	r1, [r5, #4]
 801953e:	b003      	add	sp, #12
 8019540:	bd30      	pop	{r4, r5, pc}
 8019542:	bf00      	nop
 8019544:	08028dfc 	.word	0x08028dfc
 8019548:	08028ed4 	.word	0x08028ed4
 801954c:	08028e2b 	.word	0x08028e2b

08019550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019554:	b089      	sub	sp, #36	; 0x24
 8019556:	4606      	mov	r6, r0
 8019558:	466c      	mov	r4, sp
 801955a:	4620      	mov	r0, r4
 801955c:	e884 0006 	stmia.w	r4, {r1, r2}
 8019560:	f7fc fe30 	bl	80161c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019564:	bbb0      	cbnz	r0, 80195d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019566:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801956a:	b1fd      	cbz	r5, 80195ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801956c:	3d01      	subs	r5, #1
 801956e:	af04      	add	r7, sp, #16
 8019570:	f04f 090a 	mov.w	r9, #10
 8019574:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8019578:	ab02      	add	r3, sp, #8
 801957a:	fa1f f885 	uxth.w	r8, r5
 801957e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019582:	6851      	ldr	r1, [r2, #4]
 8019584:	c303      	stmia	r3!, {r0, r1}
 8019586:	4621      	mov	r1, r4
 8019588:	a802      	add	r0, sp, #8
 801958a:	f7ff ff21 	bl	80193d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801958e:	bb08      	cbnz	r0, 80195d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8019590:	a902      	add	r1, sp, #8
 8019592:	4620      	mov	r0, r4
 8019594:	f7ff ff1c 	bl	80193d0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019598:	b1f8      	cbz	r0, 80195da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801959a:	4642      	mov	r2, r8
 801959c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80195a0:	a806      	add	r0, sp, #24
 80195a2:	f7ff ff95 	bl	80194d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195a6:	f115 35ff 	adds.w	r5, r5, #4294967295
 80195aa:	d2e3      	bcs.n	8019574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80195ac:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80195b0:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80195b4:	2b08      	cmp	r3, #8
 80195b6:	d108      	bne.n	80195ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80195b8:	4629      	mov	r1, r5
 80195ba:	a806      	add	r0, sp, #24
 80195bc:	2207      	movs	r2, #7
 80195be:	f7ff ff87 	bl	80194d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195c2:	a906      	add	r1, sp, #24
 80195c4:	4620      	mov	r0, r4
 80195c6:	f7fd fff8 	bl	80175ba <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80195ca:	4628      	mov	r0, r5
 80195cc:	e894 0006 	ldmia.w	r4, {r1, r2}
 80195d0:	f7ff ff9c 	bl	801950c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80195d4:	b009      	add	sp, #36	; 0x24
 80195d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195da:	4621      	mov	r1, r4
 80195dc:	a802      	add	r0, sp, #8
 80195de:	f7ff fed5 	bl	801938c <_ZNK8touchgfx4Rect9intersectERKS0_>
 80195e2:	b150      	cbz	r0, 80195fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80195e4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80195e8:	a806      	add	r0, sp, #24
 80195ea:	4642      	mov	r2, r8
 80195ec:	f7ff ff70 	bl	80194d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80195f0:	a902      	add	r1, sp, #8
 80195f2:	4620      	mov	r0, r4
 80195f4:	f7fd ffe1 	bl	80175ba <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80195f8:	e7d5      	b.n	80195a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80195fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80195fe:	e887 0003 	stmia.w	r7, {r0, r1}
 8019602:	a902      	add	r1, sp, #8
 8019604:	4638      	mov	r0, r7
 8019606:	f7fd ffd8 	bl	80175ba <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801960a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801960e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019612:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019616:	fb13 f302 	smulbb	r3, r3, r2
 801961a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801961e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019622:	fb11 f102 	smulbb	r1, r1, r2
 8019626:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801962a:	fb09 f303 	mul.w	r3, r9, r3
 801962e:	fb12 1100 	smlabb	r1, r2, r0, r1
 8019632:	220b      	movs	r2, #11
 8019634:	434a      	muls	r2, r1
 8019636:	4293      	cmp	r3, r2
 8019638:	dab5      	bge.n	80195a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801963a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801963e:	a806      	add	r0, sp, #24
 8019640:	4642      	mov	r2, r8
 8019642:	f7ff ff45 	bl	80194d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019646:	e897 0003 	ldmia.w	r7, {r0, r1}
 801964a:	e884 0003 	stmia.w	r4, {r0, r1}
 801964e:	e7aa      	b.n	80195a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019650 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019650:	4b1d      	ldr	r3, [pc, #116]	; (80196c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019652:	b530      	push	{r4, r5, lr}
 8019654:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019658:	b085      	sub	sp, #20
 801965a:	4b1c      	ldr	r3, [pc, #112]	; (80196cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801965c:	460c      	mov	r4, r1
 801965e:	2100      	movs	r1, #0
 8019660:	4605      	mov	r5, r0
 8019662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019666:	6820      	ldr	r0, [r4, #0]
 8019668:	9100      	str	r1, [sp, #0]
 801966a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801966e:	ab02      	add	r3, sp, #8
 8019670:	6861      	ldr	r1, [r4, #4]
 8019672:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019676:	c303      	stmia	r3!, {r0, r1}
 8019678:	4669      	mov	r1, sp
 801967a:	a802      	add	r0, sp, #8
 801967c:	f7fc fd5e 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 8019680:	ab02      	add	r3, sp, #8
 8019682:	cb03      	ldmia	r3!, {r0, r1}
 8019684:	4b12      	ldr	r3, [pc, #72]	; (80196d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8019686:	6020      	str	r0, [r4, #0]
 8019688:	6818      	ldr	r0, [r3, #0]
 801968a:	6061      	str	r1, [r4, #4]
 801968c:	b138      	cbz	r0, 801969e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801968e:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8019692:	b133      	cbz	r3, 80196a2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8019694:	6821      	ldr	r1, [r4, #0]
 8019696:	4628      	mov	r0, r5
 8019698:	6862      	ldr	r2, [r4, #4]
 801969a:	f7ff ff59 	bl	8019550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801969e:	b005      	add	sp, #20
 80196a0:	bd30      	pop	{r4, r5, pc}
 80196a2:	6803      	ldr	r3, [r0, #0]
 80196a4:	4621      	mov	r1, r4
 80196a6:	689b      	ldr	r3, [r3, #8]
 80196a8:	4798      	blx	r3
 80196aa:	4b0a      	ldr	r3, [pc, #40]	; (80196d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80196ac:	6818      	ldr	r0, [r3, #0]
 80196ae:	b118      	cbz	r0, 80196b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80196b0:	6803      	ldr	r3, [r0, #0]
 80196b2:	4621      	mov	r1, r4
 80196b4:	689b      	ldr	r3, [r3, #8]
 80196b6:	4798      	blx	r3
 80196b8:	4b07      	ldr	r3, [pc, #28]	; (80196d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80196ba:	4621      	mov	r1, r4
 80196bc:	6818      	ldr	r0, [r3, #0]
 80196be:	6803      	ldr	r3, [r0, #0]
 80196c0:	695b      	ldr	r3, [r3, #20]
 80196c2:	4798      	blx	r3
 80196c4:	e7eb      	b.n	801969e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80196c6:	bf00      	nop
 80196c8:	2000c558 	.word	0x2000c558
 80196cc:	2000c55a 	.word	0x2000c55a
 80196d0:	2000c5e0 	.word	0x2000c5e0
 80196d4:	2000c5dc 	.word	0x2000c5dc
 80196d8:	2000c564 	.word	0x2000c564

080196dc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80196dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196e0:	4604      	mov	r4, r0
 80196e2:	b09b      	sub	sp, #108	; 0x6c
 80196e4:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 80196e8:	b129      	cbz	r1, 80196f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80196ea:	2300      	movs	r3, #0
 80196ec:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80196f0:	b01b      	add	sp, #108	; 0x6c
 80196f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196f6:	4baf      	ldr	r3, [pc, #700]	; (80199b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	b33b      	cbz	r3, 801974c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80196fc:	4dae      	ldr	r5, [pc, #696]	; (80199b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80196fe:	4628      	mov	r0, r5
 8019700:	f7fc fd60 	bl	80161c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019704:	4606      	mov	r6, r0
 8019706:	bb08      	cbnz	r0, 801974c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019708:	4628      	mov	r0, r5
 801970a:	f7ff fce9 	bl	80190e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801970e:	6829      	ldr	r1, [r5, #0]
 8019710:	686a      	ldr	r2, [r5, #4]
 8019712:	4620      	mov	r0, r4
 8019714:	f7ff ff1c 	bl	8019550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019718:	802e      	strh	r6, [r5, #0]
 801971a:	806e      	strh	r6, [r5, #2]
 801971c:	80ae      	strh	r6, [r5, #4]
 801971e:	80ee      	strh	r6, [r5, #6]
 8019720:	4fa6      	ldr	r7, [pc, #664]	; (80199bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8019722:	a809      	add	r0, sp, #36	; 0x24
 8019724:	f7ff fe87 	bl	8019436 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019728:	883d      	ldrh	r5, [r7, #0]
 801972a:	462e      	mov	r6, r5
 801972c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019730:	42b3      	cmp	r3, r6
 8019732:	d910      	bls.n	8019756 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8019734:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019738:	3601      	adds	r6, #1
 801973a:	a809      	add	r0, sp, #36	; 0x24
 801973c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019740:	b2b6      	uxth	r6, r6
 8019742:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019746:	f7ff fee1 	bl	801950c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801974a:	e7ef      	b.n	801972c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801974c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019750:	2b00      	cmp	r3, #0
 8019752:	d1e5      	bne.n	8019720 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8019754:	e7cc      	b.n	80196f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019756:	462e      	mov	r6, r5
 8019758:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801975c:	42b3      	cmp	r3, r6
 801975e:	d90b      	bls.n	8019778 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019760:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019764:	3601      	adds	r6, #1
 8019766:	4620      	mov	r0, r4
 8019768:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801976c:	b2b6      	uxth	r6, r6
 801976e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8019772:	f7ff feed 	bl	8019550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019776:	e7ef      	b.n	8019758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8019778:	4e91      	ldr	r6, [pc, #580]	; (80199c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801977a:	6833      	ldr	r3, [r6, #0]
 801977c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019780:	2b01      	cmp	r3, #1
 8019782:	f040 8092 	bne.w	80198aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8019786:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801978a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801978e:	f04f 0900 	mov.w	r9, #0
 8019792:	33aa      	adds	r3, #170	; 0xaa
 8019794:	42a8      	cmp	r0, r5
 8019796:	f103 0308 	add.w	r3, r3, #8
 801979a:	dd0a      	ble.n	80197b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801979c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80197a0:	3501      	adds	r5, #1
 80197a2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80197a6:	440a      	add	r2, r1
 80197a8:	b212      	sxth	r2, r2
 80197aa:	4591      	cmp	r9, r2
 80197ac:	bfb8      	it	lt
 80197ae:	4691      	movlt	r9, r2
 80197b0:	e7f0      	b.n	8019794 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 80197b2:	4b84      	ldr	r3, [pc, #528]	; (80199c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80197b4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80199cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 80197b8:	881d      	ldrh	r5, [r3, #0]
 80197ba:	2300      	movs	r3, #0
 80197bc:	2d0f      	cmp	r5, #15
 80197be:	bf8c      	ite	hi
 80197c0:	08ed      	lsrhi	r5, r5, #3
 80197c2:	2501      	movls	r5, #1
 80197c4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80197c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80197cc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80197d0:	6830      	ldr	r0, [r6, #0]
 80197d2:	440b      	add	r3, r1
 80197d4:	6802      	ldr	r2, [r0, #0]
 80197d6:	b21b      	sxth	r3, r3
 80197d8:	4599      	cmp	r9, r3
 80197da:	dd49      	ble.n	8019870 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 80197dc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80197e0:	4798      	blx	r3
 80197e2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80197e6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80197ea:	4413      	add	r3, r2
 80197ec:	b21b      	sxth	r3, r3
 80197ee:	195a      	adds	r2, r3, r5
 80197f0:	4290      	cmp	r0, r2
 80197f2:	da07      	bge.n	8019804 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80197f4:	4581      	cmp	r9, r0
 80197f6:	dd05      	ble.n	8019804 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80197f8:	4298      	cmp	r0, r3
 80197fa:	da33      	bge.n	8019864 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	dd31      	ble.n	8019864 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8019800:	4648      	mov	r0, r9
 8019802:	e004      	b.n	801980e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8019804:	4298      	cmp	r0, r3
 8019806:	dbfb      	blt.n	8019800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8019808:	4548      	cmp	r0, r9
 801980a:	bfa8      	it	ge
 801980c:	4648      	movge	r0, r9
 801980e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019812:	2100      	movs	r1, #0
 8019814:	1ac0      	subs	r0, r0, r3
 8019816:	f8b7 a000 	ldrh.w	sl, [r7]
 801981a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801981e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019822:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019826:	f8ad 001a 	strh.w	r0, [sp, #26]
 801982a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801982e:	4553      	cmp	r3, sl
 8019830:	d9ca      	bls.n	80197c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8019832:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019836:	ab07      	add	r3, sp, #28
 8019838:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801983c:	6851      	ldr	r1, [r2, #4]
 801983e:	c303      	stmia	r3!, {r0, r1}
 8019840:	a807      	add	r0, sp, #28
 8019842:	a905      	add	r1, sp, #20
 8019844:	f7fc fc7a 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 8019848:	a807      	add	r0, sp, #28
 801984a:	f7fc fcbb 	bl	80161c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801984e:	b920      	cbnz	r0, 801985a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8019850:	6823      	ldr	r3, [r4, #0]
 8019852:	a907      	add	r1, sp, #28
 8019854:	4620      	mov	r0, r4
 8019856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019858:	4798      	blx	r3
 801985a:	f10a 0a01 	add.w	sl, sl, #1
 801985e:	fa1f fa8a 	uxth.w	sl, sl
 8019862:	e7e2      	b.n	801982a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8019864:	6830      	ldr	r0, [r6, #0]
 8019866:	2101      	movs	r1, #1
 8019868:	6803      	ldr	r3, [r0, #0]
 801986a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801986c:	4798      	blx	r3
 801986e:	e7ab      	b.n	80197c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8019870:	69d3      	ldr	r3, [r2, #28]
 8019872:	4798      	blx	r3
 8019874:	4b54      	ldr	r3, [pc, #336]	; (80199c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	2b00      	cmp	r3, #0
 801987a:	f43f af39 	beq.w	80196f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801987e:	2300      	movs	r3, #0
 8019880:	883d      	ldrh	r5, [r7, #0]
 8019882:	34ea      	adds	r4, #234	; 0xea
 8019884:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8019888:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801988c:	42ab      	cmp	r3, r5
 801988e:	f67f af2f 	bls.w	80196f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019892:	ab1a      	add	r3, sp, #104	; 0x68
 8019894:	4620      	mov	r0, r4
 8019896:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801989a:	3501      	adds	r5, #1
 801989c:	3b44      	subs	r3, #68	; 0x44
 801989e:	b2ad      	uxth	r5, r5
 80198a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80198a4:	f7ff fe32 	bl	801950c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80198a8:	e7ee      	b.n	8019888 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 80198aa:	2b02      	cmp	r3, #2
 80198ac:	d16a      	bne.n	8019984 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80198ae:	f8df a120 	ldr.w	sl, [pc, #288]	; 80199d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80198b2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80198b6:	42ab      	cmp	r3, r5
 80198b8:	d9dc      	bls.n	8019874 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80198ba:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80198be:	ab03      	add	r3, sp, #12
 80198c0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80198c4:	6851      	ldr	r1, [r2, #4]
 80198c6:	c303      	stmia	r3!, {r0, r1}
 80198c8:	f89a 3000 	ldrb.w	r3, [sl]
 80198cc:	2b01      	cmp	r3, #1
 80198ce:	d102      	bne.n	80198d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 80198d0:	a803      	add	r0, sp, #12
 80198d2:	f7ff fc5f 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80198d6:	a803      	add	r0, sp, #12
 80198d8:	f7fc fc74 	bl	80161c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80198dc:	2800      	cmp	r0, #0
 80198de:	d14a      	bne.n	8019976 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 80198e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80198e4:	f10d 0914 	add.w	r9, sp, #20
 80198e8:	f10d 081c 	add.w	r8, sp, #28
 80198ec:	f8ad 001a 	strh.w	r0, [sp, #26]
 80198f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80198f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80198f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80198fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019900:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019904:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8019908:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801990c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019910:	44dc      	add	ip, fp
 8019912:	6830      	ldr	r0, [r6, #0]
 8019914:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019918:	ebac 0c02 	sub.w	ip, ip, r2
 801991c:	f8d0 e000 	ldr.w	lr, [r0]
 8019920:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019924:	fa1f fc8c 	uxth.w	ip, ip
 8019928:	f8cd c000 	str.w	ip, [sp]
 801992c:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019930:	47d8      	blx	fp
 8019932:	f89a 3000 	ldrb.w	r3, [sl]
 8019936:	f8ad 001a 	strh.w	r0, [sp, #26]
 801993a:	2b01      	cmp	r3, #1
 801993c:	d11e      	bne.n	801997c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801993e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019942:	e888 0003 	stmia.w	r8, {r0, r1}
 8019946:	4640      	mov	r0, r8
 8019948:	f7ff fbca 	bl	80190e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801994c:	6823      	ldr	r3, [r4, #0]
 801994e:	4641      	mov	r1, r8
 8019950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019952:	4620      	mov	r0, r4
 8019954:	4798      	blx	r3
 8019956:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801995a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801995e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8019962:	4413      	add	r3, r2
 8019964:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019968:	440a      	add	r2, r1
 801996a:	b21b      	sxth	r3, r3
 801996c:	b212      	sxth	r2, r2
 801996e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019972:	4293      	cmp	r3, r2
 8019974:	dbc6      	blt.n	8019904 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8019976:	3501      	adds	r5, #1
 8019978:	b2ad      	uxth	r5, r5
 801997a:	e79a      	b.n	80198b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801997c:	6823      	ldr	r3, [r4, #0]
 801997e:	4649      	mov	r1, r9
 8019980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019982:	e7e6      	b.n	8019952 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8019984:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019988:	42ab      	cmp	r3, r5
 801998a:	f67f af73 	bls.w	8019874 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801998e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019992:	ab07      	add	r3, sp, #28
 8019994:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8019998:	6851      	ldr	r1, [r2, #4]
 801999a:	c303      	stmia	r3!, {r0, r1}
 801999c:	a807      	add	r0, sp, #28
 801999e:	f7fc fc11 	bl	80161c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80199a2:	b920      	cbnz	r0, 80199ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 80199a4:	6823      	ldr	r3, [r4, #0]
 80199a6:	a907      	add	r1, sp, #28
 80199a8:	4620      	mov	r0, r4
 80199aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199ac:	4798      	blx	r3
 80199ae:	3501      	adds	r5, #1
 80199b0:	b2ad      	uxth	r5, r5
 80199b2:	e7e7      	b.n	8019984 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80199b4:	2000c5dc 	.word	0x2000c5dc
 80199b8:	2000c5e8 	.word	0x2000c5e8
 80199bc:	20000054 	.word	0x20000054
 80199c0:	2000c564 	.word	0x2000c564
 80199c4:	2000c55a 	.word	0x2000c55a
 80199c8:	2000c562 	.word	0x2000c562
 80199cc:	2000c558 	.word	0x2000c558
 80199d0:	2000c55c 	.word	0x2000c55c

080199d4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80199d4:	4b03      	ldr	r3, [pc, #12]	; (80199e4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80199d6:	2200      	movs	r2, #0
 80199d8:	801a      	strh	r2, [r3, #0]
 80199da:	805a      	strh	r2, [r3, #2]
 80199dc:	809a      	strh	r2, [r3, #4]
 80199de:	80da      	strh	r2, [r3, #6]
 80199e0:	4770      	bx	lr
 80199e2:	bf00      	nop
 80199e4:	2000c5e8 	.word	0x2000c5e8

080199e8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 80199e8:	2000      	movs	r0, #0
 80199ea:	4770      	bx	lr

080199ec <_ZNK8touchgfx4Font12getGSUBTableEv>:
 80199ec:	2000      	movs	r0, #0
 80199ee:	4770      	bx	lr

080199f0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80199f0:	b508      	push	{r3, lr}
 80199f2:	6803      	ldr	r3, [r0, #0]
 80199f4:	68db      	ldr	r3, [r3, #12]
 80199f6:	4798      	blx	r3
 80199f8:	b128      	cbz	r0, 8019a06 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80199fa:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80199fe:	7a80      	ldrb	r0, [r0, #10]
 8019a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a04:	4318      	orrs	r0, r3
 8019a06:	bd08      	pop	{r3, pc}

08019a08 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8019a08:	b40e      	push	{r1, r2, r3}
 8019a0a:	b533      	push	{r0, r1, r4, r5, lr}
 8019a0c:	ab05      	add	r3, sp, #20
 8019a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a12:	9301      	str	r3, [sp, #4]
 8019a14:	4b0a      	ldr	r3, [pc, #40]	; (8019a40 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8019a16:	685c      	ldr	r4, [r3, #4]
 8019a18:	1061      	asrs	r1, r4, #1
 8019a1a:	07e4      	lsls	r4, r4, #31
 8019a1c:	eb00 0501 	add.w	r5, r0, r1
 8019a20:	bf46      	itte	mi
 8019a22:	681b      	ldrmi	r3, [r3, #0]
 8019a24:	5841      	ldrmi	r1, [r0, r1]
 8019a26:	681c      	ldrpl	r4, [r3, #0]
 8019a28:	4628      	mov	r0, r5
 8019a2a:	bf48      	it	mi
 8019a2c:	58cc      	ldrmi	r4, [r1, r3]
 8019a2e:	2100      	movs	r1, #0
 8019a30:	9b01      	ldr	r3, [sp, #4]
 8019a32:	47a0      	blx	r4
 8019a34:	b002      	add	sp, #8
 8019a36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a3a:	b003      	add	sp, #12
 8019a3c:	4770      	bx	lr
 8019a3e:	bf00      	nop
 8019a40:	20000024 	.word	0x20000024

08019a44 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8019a44:	b40c      	push	{r2, r3}
 8019a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a48:	ab06      	add	r3, sp, #24
 8019a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a4e:	9301      	str	r3, [sp, #4]
 8019a50:	4b09      	ldr	r3, [pc, #36]	; (8019a78 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8019a52:	685d      	ldr	r5, [r3, #4]
 8019a54:	106c      	asrs	r4, r5, #1
 8019a56:	07ed      	lsls	r5, r5, #31
 8019a58:	eb00 0604 	add.w	r6, r0, r4
 8019a5c:	bf45      	ittet	mi
 8019a5e:	681b      	ldrmi	r3, [r3, #0]
 8019a60:	5900      	ldrmi	r0, [r0, r4]
 8019a62:	681c      	ldrpl	r4, [r3, #0]
 8019a64:	58c4      	ldrmi	r4, [r0, r3]
 8019a66:	4630      	mov	r0, r6
 8019a68:	9b01      	ldr	r3, [sp, #4]
 8019a6a:	47a0      	blx	r4
 8019a6c:	b002      	add	sp, #8
 8019a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a72:	b002      	add	sp, #8
 8019a74:	4770      	bx	lr
 8019a76:	bf00      	nop
 8019a78:	20000024 	.word	0x20000024

08019a7c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019a7c:	b40e      	push	{r1, r2, r3}
 8019a7e:	b530      	push	{r4, r5, lr}
 8019a80:	b098      	sub	sp, #96	; 0x60
 8019a82:	4604      	mov	r4, r0
 8019a84:	ab1b      	add	r3, sp, #108	; 0x6c
 8019a86:	a802      	add	r0, sp, #8
 8019a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a8c:	9301      	str	r3, [sp, #4]
 8019a8e:	f001 f837 	bl	801ab00 <_ZN8touchgfx12TextProviderC1Ev>
 8019a92:	6823      	ldr	r3, [r4, #0]
 8019a94:	4620      	mov	r0, r4
 8019a96:	2401      	movs	r4, #1
 8019a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a9a:	4798      	blx	r3
 8019a9c:	9a01      	ldr	r2, [sp, #4]
 8019a9e:	4603      	mov	r3, r0
 8019aa0:	4629      	mov	r1, r5
 8019aa2:	a802      	add	r0, sp, #8
 8019aa4:	f001 f849 	bl	801ab3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019aa8:	a802      	add	r0, sp, #8
 8019aaa:	f001 f87f 	bl	801abac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019aae:	b2a3      	uxth	r3, r4
 8019ab0:	b138      	cbz	r0, 8019ac2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8019ab2:	280a      	cmp	r0, #10
 8019ab4:	a802      	add	r0, sp, #8
 8019ab6:	bf04      	itt	eq
 8019ab8:	3301      	addeq	r3, #1
 8019aba:	b21c      	sxtheq	r4, r3
 8019abc:	f001 f876 	bl	801abac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ac0:	e7f5      	b.n	8019aae <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	b018      	add	sp, #96	; 0x60
 8019ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019aca:	b003      	add	sp, #12
 8019acc:	4770      	bx	lr
	...

08019ad0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019ad0:	b40e      	push	{r1, r2, r3}
 8019ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ad4:	b098      	sub	sp, #96	; 0x60
 8019ad6:	4605      	mov	r5, r0
 8019ad8:	4f25      	ldr	r7, [pc, #148]	; (8019b70 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8019ada:	ab1d      	add	r3, sp, #116	; 0x74
 8019adc:	a802      	add	r0, sp, #8
 8019ade:	ae18      	add	r6, sp, #96	; 0x60
 8019ae0:	f853 4b04 	ldr.w	r4, [r3], #4
 8019ae4:	9300      	str	r3, [sp, #0]
 8019ae6:	f001 f80b 	bl	801ab00 <_ZN8touchgfx12TextProviderC1Ev>
 8019aea:	682b      	ldr	r3, [r5, #0]
 8019aec:	4628      	mov	r0, r5
 8019aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019af0:	4798      	blx	r3
 8019af2:	4621      	mov	r1, r4
 8019af4:	2400      	movs	r4, #0
 8019af6:	4603      	mov	r3, r0
 8019af8:	9a00      	ldr	r2, [sp, #0]
 8019afa:	a802      	add	r0, sp, #8
 8019afc:	f001 f81d 	bl	801ab3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019b00:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8019b04:	462a      	mov	r2, r5
 8019b06:	4633      	mov	r3, r6
 8019b08:	4621      	mov	r1, r4
 8019b0a:	a802      	add	r0, sp, #8
 8019b0c:	f001 f97a 	bl	801ae04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b10:	b340      	cbz	r0, 8019b64 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 8019b12:	280a      	cmp	r0, #10
 8019b14:	d01f      	beq.n	8019b56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019b16:	9901      	ldr	r1, [sp, #4]
 8019b18:	b1e9      	cbz	r1, 8019b56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019b1a:	7b4b      	ldrb	r3, [r1, #13]
 8019b1c:	f891 c008 	ldrb.w	ip, [r1, #8]
 8019b20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019b24:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8019b28:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019b2c:	79c9      	ldrb	r1, [r1, #7]
 8019b2e:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8019b32:	bf18      	it	ne
 8019b34:	4638      	movne	r0, r7
 8019b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b3a:	bf08      	it	eq
 8019b3c:	2000      	moveq	r0, #0
 8019b3e:	88aa      	ldrh	r2, [r5, #4]
 8019b40:	ea41 010e 	orr.w	r1, r1, lr
 8019b44:	ea43 030c 	orr.w	r3, r3, ip
 8019b48:	440a      	add	r2, r1
 8019b4a:	4303      	orrs	r3, r0
 8019b4c:	1ad3      	subs	r3, r2, r3
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	42a3      	cmp	r3, r4
 8019b52:	bfc8      	it	gt
 8019b54:	b21c      	sxthgt	r4, r3
 8019b56:	4633      	mov	r3, r6
 8019b58:	462a      	mov	r2, r5
 8019b5a:	2100      	movs	r1, #0
 8019b5c:	a802      	add	r0, sp, #8
 8019b5e:	f001 f951 	bl	801ae04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b62:	e7d5      	b.n	8019b10 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8019b64:	b2a0      	uxth	r0, r4
 8019b66:	b018      	add	sp, #96	; 0x60
 8019b68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019b6c:	b003      	add	sp, #12
 8019b6e:	4770      	bx	lr
 8019b70:	fffffe00 	.word	0xfffffe00

08019b74 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019b74:	b40e      	push	{r1, r2, r3}
 8019b76:	b570      	push	{r4, r5, r6, lr}
 8019b78:	b099      	sub	sp, #100	; 0x64
 8019b7a:	4604      	mov	r4, r0
 8019b7c:	26ff      	movs	r6, #255	; 0xff
 8019b7e:	ab1d      	add	r3, sp, #116	; 0x74
 8019b80:	a802      	add	r0, sp, #8
 8019b82:	f853 5b04 	ldr.w	r5, [r3], #4
 8019b86:	9300      	str	r3, [sp, #0]
 8019b88:	f000 ffba 	bl	801ab00 <_ZN8touchgfx12TextProviderC1Ev>
 8019b8c:	6823      	ldr	r3, [r4, #0]
 8019b8e:	4620      	mov	r0, r4
 8019b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b92:	4798      	blx	r3
 8019b94:	4629      	mov	r1, r5
 8019b96:	4603      	mov	r3, r0
 8019b98:	9a00      	ldr	r2, [sp, #0]
 8019b9a:	a802      	add	r0, sp, #8
 8019b9c:	ad18      	add	r5, sp, #96	; 0x60
 8019b9e:	f000 ffcc 	bl	801ab3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019ba2:	2100      	movs	r1, #0
 8019ba4:	4622      	mov	r2, r4
 8019ba6:	a802      	add	r0, sp, #8
 8019ba8:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8019bac:	462b      	mov	r3, r5
 8019bae:	f001 f929 	bl	801ae04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019bb2:	b190      	cbz	r0, 8019bda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8019bb4:	280a      	cmp	r0, #10
 8019bb6:	d009      	beq.n	8019bcc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8019bb8:	9a01      	ldr	r2, [sp, #4]
 8019bba:	b13a      	cbz	r2, 8019bcc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8019bbc:	7923      	ldrb	r3, [r4, #4]
 8019bbe:	7a12      	ldrb	r2, [r2, #8]
 8019bc0:	1a9b      	subs	r3, r3, r2
 8019bc2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8019bc6:	429e      	cmp	r6, r3
 8019bc8:	bf28      	it	cs
 8019bca:	461e      	movcs	r6, r3
 8019bcc:	462b      	mov	r3, r5
 8019bce:	4622      	mov	r2, r4
 8019bd0:	2100      	movs	r1, #0
 8019bd2:	a802      	add	r0, sp, #8
 8019bd4:	f001 f916 	bl	801ae04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019bd8:	e7eb      	b.n	8019bb2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8019bda:	4630      	mov	r0, r6
 8019bdc:	b019      	add	sp, #100	; 0x64
 8019bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019be2:	b003      	add	sp, #12
 8019be4:	4770      	bx	lr

08019be6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019be6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bea:	b099      	sub	sp, #100	; 0x64
 8019bec:	4606      	mov	r6, r0
 8019bee:	4614      	mov	r4, r2
 8019bf0:	4688      	mov	r8, r1
 8019bf2:	a802      	add	r0, sp, #8
 8019bf4:	461d      	mov	r5, r3
 8019bf6:	f04f 0b00 	mov.w	fp, #0
 8019bfa:	f000 ff81 	bl	801ab00 <_ZN8touchgfx12TextProviderC1Ev>
 8019bfe:	6833      	ldr	r3, [r6, #0]
 8019c00:	4630      	mov	r0, r6
 8019c02:	465f      	mov	r7, fp
 8019c04:	46da      	mov	sl, fp
 8019c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c08:	46d9      	mov	r9, fp
 8019c0a:	4798      	blx	r3
 8019c0c:	462a      	mov	r2, r5
 8019c0e:	4603      	mov	r3, r0
 8019c10:	4621      	mov	r1, r4
 8019c12:	a802      	add	r0, sp, #8
 8019c14:	f000 ff91 	bl	801ab3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019c18:	ab01      	add	r3, sp, #4
 8019c1a:	4632      	mov	r2, r6
 8019c1c:	4641      	mov	r1, r8
 8019c1e:	a802      	add	r0, sp, #8
 8019c20:	f8cd 9004 	str.w	r9, [sp, #4]
 8019c24:	f001 f8ee 	bl	801ae04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c28:	4605      	mov	r5, r0
 8019c2a:	b108      	cbz	r0, 8019c30 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8019c2c:	280a      	cmp	r0, #10
 8019c2e:	d10b      	bne.n	8019c48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8019c30:	4557      	cmp	r7, sl
 8019c32:	bf38      	it	cc
 8019c34:	4657      	movcc	r7, sl
 8019c36:	f04f 0a00 	mov.w	sl, #0
 8019c3a:	b91d      	cbnz	r5, 8019c44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8019c3c:	4638      	mov	r0, r7
 8019c3e:	b019      	add	sp, #100	; 0x64
 8019c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c44:	46ab      	mov	fp, r5
 8019c46:	e7e7      	b.n	8019c18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8019c48:	9a01      	ldr	r2, [sp, #4]
 8019c4a:	2a00      	cmp	r2, #0
 8019c4c:	d0fa      	beq.n	8019c44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8019c4e:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8019c52:	4659      	mov	r1, fp
 8019c54:	6833      	ldr	r3, [r6, #0]
 8019c56:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8019c5a:	7a94      	ldrb	r4, [r2, #10]
 8019c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c5e:	4304      	orrs	r4, r0
 8019c60:	4630      	mov	r0, r6
 8019c62:	8895      	ldrh	r5, [r2, #4]
 8019c64:	4798      	blx	r3
 8019c66:	4420      	add	r0, r4
 8019c68:	4450      	add	r0, sl
 8019c6a:	fa1f fa80 	uxth.w	sl, r0
 8019c6e:	e7e4      	b.n	8019c3a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08019c70 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019c70:	b513      	push	{r0, r1, r4, lr}
 8019c72:	1d01      	adds	r1, r0, #4
 8019c74:	4603      	mov	r3, r0
 8019c76:	466a      	mov	r2, sp
 8019c78:	c903      	ldmia	r1, {r0, r1}
 8019c7a:	e882 0003 	stmia.w	r2, {r0, r1}
 8019c7e:	2100      	movs	r1, #0
 8019c80:	4618      	mov	r0, r3
 8019c82:	9100      	str	r1, [sp, #0]
 8019c84:	6819      	ldr	r1, [r3, #0]
 8019c86:	690c      	ldr	r4, [r1, #16]
 8019c88:	4611      	mov	r1, r2
 8019c8a:	47a0      	blx	r4
 8019c8c:	b002      	add	sp, #8
 8019c8e:	bd10      	pop	{r4, pc}

08019c90 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019c90:	b538      	push	{r3, r4, r5, lr}
 8019c92:	680b      	ldr	r3, [r1, #0]
 8019c94:	460c      	mov	r4, r1
 8019c96:	4605      	mov	r5, r0
 8019c98:	68db      	ldr	r3, [r3, #12]
 8019c9a:	4798      	blx	r3
 8019c9c:	6823      	ldr	r3, [r4, #0]
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	4629      	mov	r1, r5
 8019ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ca4:	4798      	blx	r3
 8019ca6:	4628      	mov	r0, r5
 8019ca8:	bd38      	pop	{r3, r4, r5, pc}

08019caa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019caa:	b410      	push	{r4}
 8019cac:	880a      	ldrh	r2, [r1, #0]
 8019cae:	8884      	ldrh	r4, [r0, #4]
 8019cb0:	4422      	add	r2, r4
 8019cb2:	800a      	strh	r2, [r1, #0]
 8019cb4:	884a      	ldrh	r2, [r1, #2]
 8019cb6:	88c4      	ldrh	r4, [r0, #6]
 8019cb8:	4422      	add	r2, r4
 8019cba:	804a      	strh	r2, [r1, #2]
 8019cbc:	6940      	ldr	r0, [r0, #20]
 8019cbe:	b120      	cbz	r0, 8019cca <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019cc0:	6803      	ldr	r3, [r0, #0]
 8019cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cc8:	4718      	bx	r3
 8019cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019cce:	4770      	bx	lr

08019cd0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cd2:	460b      	mov	r3, r1
 8019cd4:	b085      	sub	sp, #20
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	b901      	cbnz	r1, 8019cdc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019cda:	b1fa      	cbz	r2, 8019d1c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8019cdc:	1d27      	adds	r7, r4, #4
 8019cde:	466e      	mov	r6, sp
 8019ce0:	ad02      	add	r5, sp, #8
 8019ce2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019ce6:	e886 0003 	stmia.w	r6, {r0, r1}
 8019cea:	88e1      	ldrh	r1, [r4, #6]
 8019cec:	4620      	mov	r0, r4
 8019cee:	440a      	add	r2, r1
 8019cf0:	88a1      	ldrh	r1, [r4, #4]
 8019cf2:	4419      	add	r1, r3
 8019cf4:	6823      	ldr	r3, [r4, #0]
 8019cf6:	b212      	sxth	r2, r2
 8019cf8:	b209      	sxth	r1, r1
 8019cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cfc:	4798      	blx	r3
 8019cfe:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019d02:	e885 0003 	stmia.w	r5, {r0, r1}
 8019d06:	6960      	ldr	r0, [r4, #20]
 8019d08:	b150      	cbz	r0, 8019d20 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8019d0a:	6803      	ldr	r3, [r0, #0]
 8019d0c:	4631      	mov	r1, r6
 8019d0e:	691b      	ldr	r3, [r3, #16]
 8019d10:	4798      	blx	r3
 8019d12:	6960      	ldr	r0, [r4, #20]
 8019d14:	6803      	ldr	r3, [r0, #0]
 8019d16:	691b      	ldr	r3, [r3, #16]
 8019d18:	4629      	mov	r1, r5
 8019d1a:	4798      	blx	r3
 8019d1c:	b005      	add	sp, #20
 8019d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d20:	f7ff fb78 	bl	8019414 <_ZN8touchgfx11Application11getInstanceEv>
 8019d24:	6803      	ldr	r3, [r0, #0]
 8019d26:	4631      	mov	r1, r6
 8019d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d2a:	4798      	blx	r3
 8019d2c:	f7ff fb72 	bl	8019414 <_ZN8touchgfx11Application11getInstanceEv>
 8019d30:	6803      	ldr	r3, [r0, #0]
 8019d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d34:	e7f0      	b.n	8019d18 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08019d36 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019d36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d38:	8882      	ldrh	r2, [r0, #4]
 8019d3a:	4605      	mov	r5, r0
 8019d3c:	880b      	ldrh	r3, [r1, #0]
 8019d3e:	460c      	mov	r4, r1
 8019d40:	4413      	add	r3, r2
 8019d42:	800b      	strh	r3, [r1, #0]
 8019d44:	884b      	ldrh	r3, [r1, #2]
 8019d46:	88c2      	ldrh	r2, [r0, #6]
 8019d48:	4413      	add	r3, r2
 8019d4a:	4602      	mov	r2, r0
 8019d4c:	804b      	strh	r3, [r1, #2]
 8019d4e:	466b      	mov	r3, sp
 8019d50:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019d54:	6851      	ldr	r1, [r2, #4]
 8019d56:	c303      	stmia	r3!, {r0, r1}
 8019d58:	4621      	mov	r1, r4
 8019d5a:	4668      	mov	r0, sp
 8019d5c:	f7fc f9ee 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 8019d60:	466b      	mov	r3, sp
 8019d62:	cb03      	ldmia	r3!, {r0, r1}
 8019d64:	6020      	str	r0, [r4, #0]
 8019d66:	6061      	str	r1, [r4, #4]
 8019d68:	6968      	ldr	r0, [r5, #20]
 8019d6a:	b128      	cbz	r0, 8019d78 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8019d6c:	6803      	ldr	r3, [r0, #0]
 8019d6e:	691b      	ldr	r3, [r3, #16]
 8019d70:	4621      	mov	r1, r4
 8019d72:	4798      	blx	r3
 8019d74:	b003      	add	sp, #12
 8019d76:	bd30      	pop	{r4, r5, pc}
 8019d78:	f7ff fb4c 	bl	8019414 <_ZN8touchgfx11Application11getInstanceEv>
 8019d7c:	6803      	ldr	r3, [r0, #0]
 8019d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d80:	e7f6      	b.n	8019d70 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08019d82 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019d82:	b570      	push	{r4, r5, r6, lr}
 8019d84:	8882      	ldrh	r2, [r0, #4]
 8019d86:	460c      	mov	r4, r1
 8019d88:	880b      	ldrh	r3, [r1, #0]
 8019d8a:	4605      	mov	r5, r0
 8019d8c:	4413      	add	r3, r2
 8019d8e:	800b      	strh	r3, [r1, #0]
 8019d90:	884b      	ldrh	r3, [r1, #2]
 8019d92:	88c2      	ldrh	r2, [r0, #6]
 8019d94:	4413      	add	r3, r2
 8019d96:	804b      	strh	r3, [r1, #2]
 8019d98:	1d01      	adds	r1, r0, #4
 8019d9a:	4620      	mov	r0, r4
 8019d9c:	f7fc f9ce 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 8019da0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019da4:	b153      	cbz	r3, 8019dbc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019da6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019daa:	b13b      	cbz	r3, 8019dbc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019dac:	6968      	ldr	r0, [r5, #20]
 8019dae:	b128      	cbz	r0, 8019dbc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8019db0:	6803      	ldr	r3, [r0, #0]
 8019db2:	4621      	mov	r1, r4
 8019db4:	6a1b      	ldr	r3, [r3, #32]
 8019db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019dba:	4718      	bx	r3
 8019dbc:	bd70      	pop	{r4, r5, r6, pc}

08019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019dbe:	b510      	push	{r4, lr}
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	4604      	mov	r4, r0
 8019dc4:	4608      	mov	r0, r1
 8019dc6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019dca:	8023      	strh	r3, [r4, #0]
 8019dcc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019dd0:	8063      	strh	r3, [r4, #2]
 8019dd2:	6803      	ldr	r3, [r0, #0]
 8019dd4:	80a1      	strh	r1, [r4, #4]
 8019dd6:	4621      	mov	r1, r4
 8019dd8:	80e2      	strh	r2, [r4, #6]
 8019dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ddc:	4798      	blx	r3
 8019dde:	4620      	mov	r0, r4
 8019de0:	bd10      	pop	{r4, pc}
	...

08019de4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019de4:	b530      	push	{r4, r5, lr}
 8019de6:	8083      	strh	r3, [r0, #4]
 8019de8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019dec:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019df0:	7183      	strb	r3, [r0, #6]
 8019df2:	79c3      	ldrb	r3, [r0, #7]
 8019df4:	6101      	str	r1, [r0, #16]
 8019df6:	f365 0306 	bfi	r3, r5, #0, #7
 8019dfa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019dfe:	8282      	strh	r2, [r0, #20]
 8019e00:	f365 13c7 	bfi	r3, r5, #7, #1
 8019e04:	71c3      	strb	r3, [r0, #7]
 8019e06:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019e0a:	7203      	strb	r3, [r0, #8]
 8019e0c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019e10:	7243      	strb	r3, [r0, #9]
 8019e12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019e16:	8143      	strh	r3, [r0, #10]
 8019e18:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019e1c:	8183      	strh	r3, [r0, #12]
 8019e1e:	4b01      	ldr	r3, [pc, #4]	; (8019e24 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019e20:	6003      	str	r3, [r0, #0]
 8019e22:	bd30      	pop	{r4, r5, pc}
 8019e24:	08028ffc 	.word	0x08028ffc

08019e28 <_ZNK8touchgfx9ConstFont4findEt>:
 8019e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e2a:	8a84      	ldrh	r4, [r0, #20]
 8019e2c:	2500      	movs	r5, #0
 8019e2e:	260e      	movs	r6, #14
 8019e30:	3c01      	subs	r4, #1
 8019e32:	42a5      	cmp	r5, r4
 8019e34:	dc0c      	bgt.n	8019e50 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8019e36:	192a      	adds	r2, r5, r4
 8019e38:	6903      	ldr	r3, [r0, #16]
 8019e3a:	1052      	asrs	r2, r2, #1
 8019e3c:	fb06 3302 	mla	r3, r6, r2, r3
 8019e40:	889f      	ldrh	r7, [r3, #4]
 8019e42:	428f      	cmp	r7, r1
 8019e44:	d901      	bls.n	8019e4a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8019e46:	1e54      	subs	r4, r2, #1
 8019e48:	e7f3      	b.n	8019e32 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019e4a:	d202      	bcs.n	8019e52 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8019e4c:	1c55      	adds	r5, r2, #1
 8019e4e:	e7f0      	b.n	8019e32 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019e50:	2300      	movs	r3, #0
 8019e52:	4618      	mov	r0, r3
 8019e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e56 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e58:	4605      	mov	r5, r0
 8019e5a:	4617      	mov	r7, r2
 8019e5c:	461e      	mov	r6, r3
 8019e5e:	f7ff ffe3 	bl	8019e28 <_ZNK8touchgfx9ConstFont4findEt>
 8019e62:	b9e0      	cbnz	r0, 8019e9e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019e64:	b911      	cbnz	r1, 8019e6c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8019e66:	2400      	movs	r4, #0
 8019e68:	4620      	mov	r0, r4
 8019e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e6c:	290a      	cmp	r1, #10
 8019e6e:	d0fa      	beq.n	8019e66 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019e70:	682b      	ldr	r3, [r5, #0]
 8019e72:	4628      	mov	r0, r5
 8019e74:	691b      	ldr	r3, [r3, #16]
 8019e76:	4798      	blx	r3
 8019e78:	4601      	mov	r1, r0
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	f7ff ffd4 	bl	8019e28 <_ZNK8touchgfx9ConstFont4findEt>
 8019e80:	4604      	mov	r4, r0
 8019e82:	2800      	cmp	r0, #0
 8019e84:	d0ef      	beq.n	8019e66 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019e86:	682b      	ldr	r3, [r5, #0]
 8019e88:	4621      	mov	r1, r4
 8019e8a:	4628      	mov	r0, r5
 8019e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e8e:	4798      	blx	r3
 8019e90:	6038      	str	r0, [r7, #0]
 8019e92:	682b      	ldr	r3, [r5, #0]
 8019e94:	4628      	mov	r0, r5
 8019e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e98:	4798      	blx	r3
 8019e9a:	7030      	strb	r0, [r6, #0]
 8019e9c:	e7e4      	b.n	8019e68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8019e9e:	4604      	mov	r4, r0
 8019ea0:	e7f1      	b.n	8019e86 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08019ea2 <_ZN8touchgfx6memsetEPvhm>:
 8019ea2:	4402      	add	r2, r0
 8019ea4:	4290      	cmp	r0, r2
 8019ea6:	d002      	beq.n	8019eae <_ZN8touchgfx6memsetEPvhm+0xc>
 8019ea8:	f800 1b01 	strb.w	r1, [r0], #1
 8019eac:	e7fa      	b.n	8019ea4 <_ZN8touchgfx6memsetEPvhm+0x2>
 8019eae:	4770      	bx	lr

08019eb0 <_ZN8touchgfx3clzEl>:
 8019eb0:	b1e8      	cbz	r0, 8019eee <_ZN8touchgfx3clzEl+0x3e>
 8019eb2:	2800      	cmp	r0, #0
 8019eb4:	bfb8      	it	lt
 8019eb6:	4240      	neglt	r0, r0
 8019eb8:	0c03      	lsrs	r3, r0, #16
 8019eba:	041b      	lsls	r3, r3, #16
 8019ebc:	b9ab      	cbnz	r3, 8019eea <_ZN8touchgfx3clzEl+0x3a>
 8019ebe:	0400      	lsls	r0, r0, #16
 8019ec0:	2310      	movs	r3, #16
 8019ec2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019ec6:	bf04      	itt	eq
 8019ec8:	0200      	lsleq	r0, r0, #8
 8019eca:	3308      	addeq	r3, #8
 8019ecc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019ed0:	bf04      	itt	eq
 8019ed2:	0100      	lsleq	r0, r0, #4
 8019ed4:	3304      	addeq	r3, #4
 8019ed6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019eda:	bf04      	itt	eq
 8019edc:	0080      	lsleq	r0, r0, #2
 8019ede:	3302      	addeq	r3, #2
 8019ee0:	2800      	cmp	r0, #0
 8019ee2:	bfa8      	it	ge
 8019ee4:	3301      	addge	r3, #1
 8019ee6:	1e58      	subs	r0, r3, #1
 8019ee8:	4770      	bx	lr
 8019eea:	2300      	movs	r3, #0
 8019eec:	e7e9      	b.n	8019ec2 <_ZN8touchgfx3clzEl+0x12>
 8019eee:	201f      	movs	r0, #31
 8019ef0:	4770      	bx	lr

08019ef2 <_ZN8touchgfx6muldivElllRl>:
 8019ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ef6:	4604      	mov	r4, r0
 8019ef8:	4698      	mov	r8, r3
 8019efa:	2601      	movs	r6, #1
 8019efc:	f7ff ffd8 	bl	8019eb0 <_ZN8touchgfx3clzEl>
 8019f00:	2c00      	cmp	r4, #0
 8019f02:	fa04 f500 	lsl.w	r5, r4, r0
 8019f06:	fa06 f600 	lsl.w	r6, r6, r0
 8019f0a:	bfba      	itte	lt
 8019f0c:	f04f 37ff 	movlt.w	r7, #4294967295
 8019f10:	4264      	neglt	r4, r4
 8019f12:	2701      	movge	r7, #1
 8019f14:	2900      	cmp	r1, #0
 8019f16:	f106 36ff 	add.w	r6, r6, #4294967295
 8019f1a:	bfbc      	itt	lt
 8019f1c:	4249      	neglt	r1, r1
 8019f1e:	427f      	neglt	r7, r7
 8019f20:	2a00      	cmp	r2, #0
 8019f22:	fa41 fc00 	asr.w	ip, r1, r0
 8019f26:	ea01 0106 	and.w	r1, r1, r6
 8019f2a:	bfb8      	it	lt
 8019f2c:	427f      	neglt	r7, r7
 8019f2e:	fb04 f401 	mul.w	r4, r4, r1
 8019f32:	fb95 f3f2 	sdiv	r3, r5, r2
 8019f36:	fb02 5513 	mls	r5, r2, r3, r5
 8019f3a:	bfb8      	it	lt
 8019f3c:	4252      	neglt	r2, r2
 8019f3e:	fb94 f0f2 	sdiv	r0, r4, r2
 8019f42:	fb02 4410 	mls	r4, r2, r0, r4
 8019f46:	fb0c 4405 	mla	r4, ip, r5, r4
 8019f4a:	fb94 f1f2 	sdiv	r1, r4, r2
 8019f4e:	4408      	add	r0, r1
 8019f50:	fb02 4211 	mls	r2, r2, r1, r4
 8019f54:	fb0c 0003 	mla	r0, ip, r3, r0
 8019f58:	f8c8 2000 	str.w	r2, [r8]
 8019f5c:	4378      	muls	r0, r7
 8019f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f62 <_ZN8touchgfx10ClickEventD1Ev>:
 8019f62:	4770      	bx	lr

08019f64 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019f64:	2000      	movs	r0, #0
 8019f66:	4770      	bx	lr

08019f68 <_ZN8touchgfx9DragEventD1Ev>:
 8019f68:	4770      	bx	lr

08019f6a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019f6a:	2001      	movs	r0, #1
 8019f6c:	4770      	bx	lr

08019f6e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019f6e:	2002      	movs	r0, #2
 8019f70:	4770      	bx	lr

08019f72 <_ZN8touchgfx12GestureEventD1Ev>:
 8019f72:	4770      	bx	lr

08019f74 <_ZN8touchgfx10ClickEventD0Ev>:
 8019f74:	b510      	push	{r4, lr}
 8019f76:	4604      	mov	r4, r0
 8019f78:	210c      	movs	r1, #12
 8019f7a:	f00b fa11 	bl	80253a0 <_ZdlPvj>
 8019f7e:	4620      	mov	r0, r4
 8019f80:	bd10      	pop	{r4, pc}

08019f82 <_ZN8touchgfx9DragEventD0Ev>:
 8019f82:	b510      	push	{r4, lr}
 8019f84:	4604      	mov	r4, r0
 8019f86:	2110      	movs	r1, #16
 8019f88:	f00b fa0a 	bl	80253a0 <_ZdlPvj>
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	bd10      	pop	{r4, pc}

08019f90 <_ZN8touchgfx12GestureEventD0Ev>:
 8019f90:	b510      	push	{r4, lr}
 8019f92:	4604      	mov	r4, r0
 8019f94:	210c      	movs	r1, #12
 8019f96:	f00b fa03 	bl	80253a0 <_ZdlPvj>
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	bd10      	pop	{r4, pc}
	...

08019fa0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019fa0:	b530      	push	{r4, r5, lr}
 8019fa2:	460d      	mov	r5, r1
 8019fa4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019fa6:	b087      	sub	sp, #28
 8019fa8:	4604      	mov	r4, r0
 8019faa:	b301      	cbz	r1, 8019fee <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019fac:	a801      	add	r0, sp, #4
 8019fae:	f7ff ff06 	bl	8019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fb2:	892a      	ldrh	r2, [r5, #8]
 8019fb4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019fb8:	7928      	ldrb	r0, [r5, #4]
 8019fba:	1ad2      	subs	r2, r2, r3
 8019fbc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019fbe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019fc2:	441a      	add	r2, r3
 8019fc4:	896b      	ldrh	r3, [r5, #10]
 8019fc6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019fca:	f88d 0010 	strb.w	r0, [sp, #16]
 8019fce:	1b5b      	subs	r3, r3, r5
 8019fd0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019fd2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019fd4:	442b      	add	r3, r5
 8019fd6:	4d07      	ldr	r5, [pc, #28]	; (8019ff4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019fd8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019fdc:	a903      	add	r1, sp, #12
 8019fde:	9503      	str	r5, [sp, #12]
 8019fe0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019fe4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019fe8:	6803      	ldr	r3, [r0, #0]
 8019fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019fec:	4798      	blx	r3
 8019fee:	b007      	add	sp, #28
 8019ff0:	bd30      	pop	{r4, r5, pc}
 8019ff2:	bf00      	nop
 8019ff4:	08029078 	.word	0x08029078

08019ff8 <_ZNK8touchgfx4Rect9intersectEss>:
 8019ff8:	b510      	push	{r4, lr}
 8019ffa:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019ffe:	428b      	cmp	r3, r1
 801a000:	dc10      	bgt.n	801a024 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a002:	8884      	ldrh	r4, [r0, #4]
 801a004:	4423      	add	r3, r4
 801a006:	b21b      	sxth	r3, r3
 801a008:	4299      	cmp	r1, r3
 801a00a:	da0b      	bge.n	801a024 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a00c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a010:	4293      	cmp	r3, r2
 801a012:	dc07      	bgt.n	801a024 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801a014:	88c0      	ldrh	r0, [r0, #6]
 801a016:	4418      	add	r0, r3
 801a018:	b200      	sxth	r0, r0
 801a01a:	4282      	cmp	r2, r0
 801a01c:	bfac      	ite	ge
 801a01e:	2000      	movge	r0, #0
 801a020:	2001      	movlt	r0, #1
 801a022:	bd10      	pop	{r4, pc}
 801a024:	2000      	movs	r0, #0
 801a026:	e7fc      	b.n	801a022 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801a028 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a02a:	460c      	mov	r4, r1
 801a02c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a02e:	b089      	sub	sp, #36	; 0x24
 801a030:	4605      	mov	r5, r0
 801a032:	2900      	cmp	r1, #0
 801a034:	d054      	beq.n	801a0e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801a036:	4668      	mov	r0, sp
 801a038:	f7ff fec1 	bl	8019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a03c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801a03e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801a040:	4668      	mov	r0, sp
 801a042:	8922      	ldrh	r2, [r4, #8]
 801a044:	88e1      	ldrh	r1, [r4, #6]
 801a046:	443a      	add	r2, r7
 801a048:	4431      	add	r1, r6
 801a04a:	b212      	sxth	r2, r2
 801a04c:	b209      	sxth	r1, r1
 801a04e:	f7ff ffd3 	bl	8019ff8 <_ZNK8touchgfx4Rect9intersectEss>
 801a052:	b1d0      	cbz	r0, 801a08a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a054:	89a2      	ldrh	r2, [r4, #12]
 801a056:	4668      	mov	r0, sp
 801a058:	8961      	ldrh	r1, [r4, #10]
 801a05a:	443a      	add	r2, r7
 801a05c:	4431      	add	r1, r6
 801a05e:	b212      	sxth	r2, r2
 801a060:	b209      	sxth	r1, r1
 801a062:	f7ff ffc9 	bl	8019ff8 <_ZNK8touchgfx4Rect9intersectEss>
 801a066:	4603      	mov	r3, r0
 801a068:	b978      	cbnz	r0, 801a08a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801a06a:	4a1e      	ldr	r2, [pc, #120]	; (801a0e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801a06c:	a904      	add	r1, sp, #16
 801a06e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a070:	9204      	str	r2, [sp, #16]
 801a072:	2202      	movs	r2, #2
 801a074:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a078:	f88d 2014 	strb.w	r2, [sp, #20]
 801a07c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a080:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a084:	6803      	ldr	r3, [r0, #0]
 801a086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a088:	4798      	blx	r3
 801a08a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801a08c:	a802      	add	r0, sp, #8
 801a08e:	f7ff fe96 	bl	8019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a092:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a096:	88e0      	ldrh	r0, [r4, #6]
 801a098:	8961      	ldrh	r1, [r4, #10]
 801a09a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a09e:	1a80      	subs	r0, r0, r2
 801a0a0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801a0a4:	1a89      	subs	r1, r1, r2
 801a0a6:	8923      	ldrh	r3, [r4, #8]
 801a0a8:	4460      	add	r0, ip
 801a0aa:	89a2      	ldrh	r2, [r4, #12]
 801a0ac:	4461      	add	r1, ip
 801a0ae:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a0b0:	eba3 030e 	sub.w	r3, r3, lr
 801a0b4:	eba2 020e 	sub.w	r2, r2, lr
 801a0b8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a0bc:	7927      	ldrb	r7, [r4, #4]
 801a0be:	4433      	add	r3, r6
 801a0c0:	4432      	add	r2, r6
 801a0c2:	4c09      	ldr	r4, [pc, #36]	; (801a0e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801a0c4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a0c6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a0ca:	a904      	add	r1, sp, #16
 801a0cc:	9404      	str	r4, [sp, #16]
 801a0ce:	f88d 7014 	strb.w	r7, [sp, #20]
 801a0d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a0d6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a0da:	6803      	ldr	r3, [r0, #0]
 801a0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a0de:	4798      	blx	r3
 801a0e0:	b009      	add	sp, #36	; 0x24
 801a0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0e4:	08029050 	.word	0x08029050
 801a0e8:	08029064 	.word	0x08029064

0801a0ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0f0:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801a0f4:	b0a1      	sub	sp, #132	; 0x84
 801a0f6:	4604      	mov	r4, r0
 801a0f8:	460d      	mov	r5, r1
 801a0fa:	790b      	ldrb	r3, [r1, #4]
 801a0fc:	f1b9 0f00 	cmp.w	r9, #0
 801a100:	d00f      	beq.n	801a122 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801a102:	2b00      	cmp	r3, #0
 801a104:	f040 80a2 	bne.w	801a24c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a108:	b021      	add	sp, #132	; 0x84
 801a10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a10e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a112:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a116:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a11a:	1d20      	adds	r0, r4, #4
 801a11c:	f7fb ff5c 	bl	8015fd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a120:	e094      	b.n	801a24c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801a122:	2b00      	cmp	r3, #0
 801a124:	d1f0      	bne.n	801a108 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a126:	4b5f      	ldr	r3, [pc, #380]	; (801a2a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801a12e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801a132:	f1ba 0f03 	cmp.w	sl, #3
 801a136:	ddea      	ble.n	801a10e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801a138:	f1ba 0f0c 	cmp.w	sl, #12
 801a13c:	f04f 0303 	mov.w	r3, #3
 801a140:	f04f 0600 	mov.w	r6, #0
 801a144:	4958      	ldr	r1, [pc, #352]	; (801a2a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801a146:	bfd8      	it	le
 801a148:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801a14c:	960a      	str	r6, [sp, #40]	; 0x28
 801a14e:	bfd8      	it	le
 801a150:	fb92 f3f3 	sdivle	r3, r2, r3
 801a154:	9301      	str	r3, [sp, #4]
 801a156:	4b55      	ldr	r3, [pc, #340]	; (801a2ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801a158:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a15c:	4b54      	ldr	r3, [pc, #336]	; (801a2b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801a15e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a162:	2248      	movs	r2, #72	; 0x48
 801a164:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a168:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a16c:	ab0e      	add	r3, sp, #56	; 0x38
 801a16e:	4618      	mov	r0, r3
 801a170:	f00b fc06 	bl	8025980 <memcpy>
 801a174:	f04f 32ff 	mov.w	r2, #4294967295
 801a178:	f8cd a008 	str.w	sl, [sp, #8]
 801a17c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801a180:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a184:	46b3      	mov	fp, r6
 801a186:	fb93 f3f2 	sdiv	r3, r3, r2
 801a18a:	b29b      	uxth	r3, r3
 801a18c:	9303      	str	r3, [sp, #12]
 801a18e:	2300      	movs	r3, #0
 801a190:	9a03      	ldr	r2, [sp, #12]
 801a192:	88ef      	ldrh	r7, [r5, #6]
 801a194:	a80a      	add	r0, sp, #40	; 0x28
 801a196:	9309      	str	r3, [sp, #36]	; 0x24
 801a198:	9b07      	ldr	r3, [sp, #28]
 801a19a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801a19e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801a1a2:	fb13 f302 	smulbb	r3, r3, r2
 801a1a6:	b29b      	uxth	r3, r3
 801a1a8:	9304      	str	r3, [sp, #16]
 801a1aa:	9b07      	ldr	r3, [sp, #28]
 801a1ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a1b0:	685b      	ldr	r3, [r3, #4]
 801a1b2:	fb13 f302 	smulbb	r3, r3, r2
 801a1b6:	b29b      	uxth	r3, r3
 801a1b8:	9305      	str	r3, [sp, #20]
 801a1ba:	9b04      	ldr	r3, [sp, #16]
 801a1bc:	441f      	add	r7, r3
 801a1be:	9b05      	ldr	r3, [sp, #20]
 801a1c0:	4498      	add	r8, r3
 801a1c2:	b23f      	sxth	r7, r7
 801a1c4:	fa0f f888 	sxth.w	r8, r8
 801a1c8:	4639      	mov	r1, r7
 801a1ca:	4642      	mov	r2, r8
 801a1cc:	f7ff ff14 	bl	8019ff8 <_ZNK8touchgfx4Rect9intersectEss>
 801a1d0:	b380      	cbz	r0, 801a234 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a1d2:	4639      	mov	r1, r7
 801a1d4:	ab09      	add	r3, sp, #36	; 0x24
 801a1d6:	4642      	mov	r2, r8
 801a1d8:	1d20      	adds	r0, r4, #4
 801a1da:	f7fb fefd 	bl	8015fd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801a1de:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a1e0:	b341      	cbz	r1, 801a234 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a1e2:	4549      	cmp	r1, r9
 801a1e4:	d026      	beq.n	801a234 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a1e6:	a80c      	add	r0, sp, #48	; 0x30
 801a1e8:	f7ff fde9 	bl	8019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1ec:	2002      	movs	r0, #2
 801a1ee:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a1f2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801a1f6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a1fa:	fb92 f2f0 	sdiv	r2, r2, r0
 801a1fe:	440a      	add	r2, r1
 801a200:	1a99      	subs	r1, r3, r2
 801a202:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a206:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801a20a:	fb93 f3f0 	sdiv	r3, r3, r0
 801a20e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801a212:	4403      	add	r3, r0
 801a214:	1ad3      	subs	r3, r2, r3
 801a216:	9a06      	ldr	r2, [sp, #24]
 801a218:	435b      	muls	r3, r3
 801a21a:	fb01 3301 	mla	r3, r1, r1, r3
 801a21e:	4293      	cmp	r3, r2
 801a220:	d208      	bcs.n	801a234 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801a222:	9a04      	ldr	r2, [sp, #16]
 801a224:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a228:	86a2      	strh	r2, [r4, #52]	; 0x34
 801a22a:	9a05      	ldr	r2, [sp, #20]
 801a22c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801a230:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a232:	9306      	str	r3, [sp, #24]
 801a234:	f10b 0b02 	add.w	fp, fp, #2
 801a238:	f1bb 0f08 	cmp.w	fp, #8
 801a23c:	dda7      	ble.n	801a18e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801a23e:	9b02      	ldr	r3, [sp, #8]
 801a240:	3601      	adds	r6, #1
 801a242:	4453      	add	r3, sl
 801a244:	9302      	str	r3, [sp, #8]
 801a246:	9b01      	ldr	r3, [sp, #4]
 801a248:	42b3      	cmp	r3, r6
 801a24a:	d199      	bne.n	801a180 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801a24c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a24e:	2900      	cmp	r1, #0
 801a250:	f43f af5a 	beq.w	801a108 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a254:	a80c      	add	r0, sp, #48	; 0x30
 801a256:	2600      	movs	r6, #0
 801a258:	f7ff fdb1 	bl	8019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a25c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a260:	88ea      	ldrh	r2, [r5, #6]
 801a262:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801a266:	1ad2      	subs	r2, r2, r3
 801a268:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a26a:	7929      	ldrb	r1, [r5, #4]
 801a26c:	441a      	add	r2, r3
 801a26e:	892b      	ldrh	r3, [r5, #8]
 801a270:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801a274:	a90e      	add	r1, sp, #56	; 0x38
 801a276:	1a1b      	subs	r3, r3, r0
 801a278:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801a27a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a27e:	4403      	add	r3, r0
 801a280:	480c      	ldr	r0, [pc, #48]	; (801a2b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801a282:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801a286:	900e      	str	r0, [sp, #56]	; 0x38
 801a288:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a28a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a28e:	6803      	ldr	r3, [r0, #0]
 801a290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a292:	4798      	blx	r3
 801a294:	792b      	ldrb	r3, [r5, #4]
 801a296:	2b00      	cmp	r3, #0
 801a298:	f43f af36 	beq.w	801a108 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a29c:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a2a0:	e732      	b.n	801a108 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801a2a2:	bf00      	nop
 801a2a4:	2000c564 	.word	0x2000c564
 801a2a8:	08026e88 	.word	0x08026e88
 801a2ac:	2000c558 	.word	0x2000c558
 801a2b0:	2000c55a 	.word	0x2000c55a
 801a2b4:	08029050 	.word	0x08029050

0801a2b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a2ba:	4604      	mov	r4, r0
 801a2bc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a2c0:	3201      	adds	r2, #1
 801a2c2:	d112      	bne.n	801a2ea <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a2c4:	2500      	movs	r5, #0
 801a2c6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a2ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a2ce:	6803      	ldr	r3, [r0, #0]
 801a2d0:	9500      	str	r5, [sp, #0]
 801a2d2:	466d      	mov	r5, sp
 801a2d4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a2d8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a2dc:	4629      	mov	r1, r5
 801a2de:	6a1b      	ldr	r3, [r3, #32]
 801a2e0:	4798      	blx	r3
 801a2e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a2e6:	e884 0003 	stmia.w	r4, {r0, r1}
 801a2ea:	4620      	mov	r0, r4
 801a2ec:	b003      	add	sp, #12
 801a2ee:	bd30      	pop	{r4, r5, pc}

0801a2f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a2f0:	b513      	push	{r0, r1, r4, lr}
 801a2f2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a2f6:	4604      	mov	r4, r0
 801a2f8:	3301      	adds	r3, #1
 801a2fa:	d109      	bne.n	801a310 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a2fc:	4601      	mov	r1, r0
 801a2fe:	4668      	mov	r0, sp
 801a300:	f7ff fd5d 	bl	8019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a304:	f8bd 3000 	ldrh.w	r3, [sp]
 801a308:	8423      	strh	r3, [r4, #32]
 801a30a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a30e:	8463      	strh	r3, [r4, #34]	; 0x22
 801a310:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a314:	b002      	add	sp, #8
 801a316:	bd10      	pop	{r4, pc}

0801a318 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a318:	b513      	push	{r0, r1, r4, lr}
 801a31a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a31e:	4604      	mov	r4, r0
 801a320:	3301      	adds	r3, #1
 801a322:	d109      	bne.n	801a338 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a324:	4601      	mov	r1, r0
 801a326:	4668      	mov	r0, sp
 801a328:	f7ff fd49 	bl	8019dbe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a32c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a330:	8423      	strh	r3, [r4, #32]
 801a332:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a336:	8463      	strh	r3, [r4, #34]	; 0x22
 801a338:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a33c:	b002      	add	sp, #8
 801a33e:	bd10      	pop	{r4, pc}

0801a340 <_ZN8touchgfx6ScreenC1Ev>:
 801a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a342:	4605      	mov	r5, r0
 801a344:	4b17      	ldr	r3, [pc, #92]	; (801a3a4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a346:	2200      	movs	r2, #0
 801a348:	4917      	ldr	r1, [pc, #92]	; (801a3a8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a34a:	f845 3b04 	str.w	r3, [r5], #4
 801a34e:	2301      	movs	r3, #1
 801a350:	8102      	strh	r2, [r0, #8]
 801a352:	4604      	mov	r4, r0
 801a354:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801a358:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a35c:	4b13      	ldr	r3, [pc, #76]	; (801a3ac <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a35e:	8142      	strh	r2, [r0, #10]
 801a360:	f9b3 7000 	ldrsh.w	r7, [r3]
 801a364:	4b12      	ldr	r3, [pc, #72]	; (801a3b0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801a366:	8182      	strh	r2, [r0, #12]
 801a368:	81c2      	strh	r2, [r0, #14]
 801a36a:	8202      	strh	r2, [r0, #16]
 801a36c:	8242      	strh	r2, [r0, #18]
 801a36e:	8282      	strh	r2, [r0, #20]
 801a370:	82c2      	strh	r2, [r0, #22]
 801a372:	6202      	str	r2, [r0, #32]
 801a374:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a378:	6342      	str	r2, [r0, #52]	; 0x34
 801a37a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a37e:	6041      	str	r1, [r0, #4]
 801a380:	4611      	mov	r1, r2
 801a382:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a386:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801a38a:	4628      	mov	r0, r5
 801a38c:	f7f6 f9f9 	bl	8010782 <_ZN8touchgfx8Drawable5setXYEss>
 801a390:	4639      	mov	r1, r7
 801a392:	4628      	mov	r0, r5
 801a394:	f7f6 fa13 	bl	80107be <_ZN8touchgfx8Drawable8setWidthEs>
 801a398:	4628      	mov	r0, r5
 801a39a:	4631      	mov	r1, r6
 801a39c:	f7f6 fa1e 	bl	80107dc <_ZN8touchgfx8Drawable9setHeightEs>
 801a3a0:	4620      	mov	r0, r4
 801a3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3a4:	0802908c 	.word	0x0802908c
 801a3a8:	08027d60 	.word	0x08027d60
 801a3ac:	2000c558 	.word	0x2000c558
 801a3b0:	2000c55a 	.word	0x2000c55a

0801a3b4 <_ZN8touchgfx6Screen4drawEv>:
 801a3b4:	4b09      	ldr	r3, [pc, #36]	; (801a3dc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a3b6:	b507      	push	{r0, r1, r2, lr}
 801a3b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a3bc:	2100      	movs	r1, #0
 801a3be:	4b08      	ldr	r3, [pc, #32]	; (801a3e0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a3c0:	9100      	str	r1, [sp, #0]
 801a3c2:	4669      	mov	r1, sp
 801a3c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a3cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a3d0:	6803      	ldr	r3, [r0, #0]
 801a3d2:	689b      	ldr	r3, [r3, #8]
 801a3d4:	4798      	blx	r3
 801a3d6:	b003      	add	sp, #12
 801a3d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a3dc:	2000c558 	.word	0x2000c558
 801a3e0:	2000c55a 	.word	0x2000c55a

0801a3e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a3ec:	b089      	sub	sp, #36	; 0x24
 801a3ee:	4680      	mov	r8, r0
 801a3f0:	460c      	mov	r4, r1
 801a3f2:	4615      	mov	r5, r2
 801a3f4:	b16b      	cbz	r3, 801a412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a3f6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a3fa:	b153      	cbz	r3, 801a412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a3fc:	4628      	mov	r0, r5
 801a3fe:	f7ff ff5b 	bl	801a2b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a402:	4621      	mov	r1, r4
 801a404:	f7fe ffc2 	bl	801938c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a408:	69eb      	ldr	r3, [r5, #28]
 801a40a:	b928      	cbnz	r0, 801a418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801a40c:	461d      	mov	r5, r3
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d1f4      	bne.n	801a3fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801a412:	b009      	add	sp, #36	; 0x24
 801a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a418:	ae04      	add	r6, sp, #16
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d051      	beq.n	801a4c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a41e:	682b      	ldr	r3, [r5, #0]
 801a420:	4629      	mov	r1, r5
 801a422:	a802      	add	r0, sp, #8
 801a424:	68db      	ldr	r3, [r3, #12]
 801a426:	4798      	blx	r3
 801a428:	4628      	mov	r0, r5
 801a42a:	f7ff ff61 	bl	801a2f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a42e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a432:	4407      	add	r7, r0
 801a434:	4628      	mov	r0, r5
 801a436:	f7ff ff6f 	bl	801a318 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a43a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a43e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a442:	b23f      	sxth	r7, r7
 801a444:	4418      	add	r0, r3
 801a446:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a44a:	4621      	mov	r1, r4
 801a44c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a450:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a454:	4630      	mov	r0, r6
 801a456:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a45a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a45e:	f7fb fe6d 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 801a462:	4628      	mov	r0, r5
 801a464:	f7ff ff28 	bl	801a2b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a468:	ab06      	add	r3, sp, #24
 801a46a:	4602      	mov	r2, r0
 801a46c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a470:	e883 0003 	stmia.w	r3, {r0, r1}
 801a474:	4611      	mov	r1, r2
 801a476:	4618      	mov	r0, r3
 801a478:	f7fb fe60 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 801a47c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a480:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a484:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a488:	4299      	cmp	r1, r3
 801a48a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a48e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a492:	d10b      	bne.n	801a4ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a494:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a498:	4552      	cmp	r2, sl
 801a49a:	d107      	bne.n	801a4ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a49c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a4a0:	455a      	cmp	r2, fp
 801a4a2:	d103      	bne.n	801a4ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801a4a4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a4a8:	454a      	cmp	r2, r9
 801a4aa:	d00a      	beq.n	801a4c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a4ac:	f1bb 0f00 	cmp.w	fp, #0
 801a4b0:	d002      	beq.n	801a4b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801a4b2:	f1b9 0f00 	cmp.w	r9, #0
 801a4b6:	d12e      	bne.n	801a516 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801a4b8:	69ea      	ldr	r2, [r5, #28]
 801a4ba:	4621      	mov	r1, r4
 801a4bc:	4640      	mov	r0, r8
 801a4be:	f7ff ff91 	bl	801a3e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a4c2:	4628      	mov	r0, r5
 801a4c4:	f7ff fef8 	bl	801a2b8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a4c8:	6861      	ldr	r1, [r4, #4]
 801a4ca:	4602      	mov	r2, r0
 801a4cc:	4633      	mov	r3, r6
 801a4ce:	6820      	ldr	r0, [r4, #0]
 801a4d0:	c303      	stmia	r3!, {r0, r1}
 801a4d2:	4611      	mov	r1, r2
 801a4d4:	4630      	mov	r0, r6
 801a4d6:	f7fb fe31 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 801a4da:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d097      	beq.n	801a412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a4e2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d093      	beq.n	801a412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a4ea:	4628      	mov	r0, r5
 801a4ec:	f7ff ff00 	bl	801a2f0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a4f0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a4f4:	1a18      	subs	r0, r3, r0
 801a4f6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a4fa:	4628      	mov	r0, r5
 801a4fc:	f7ff ff0c 	bl	801a318 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a500:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a504:	4631      	mov	r1, r6
 801a506:	1a18      	subs	r0, r3, r0
 801a508:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a50c:	4628      	mov	r0, r5
 801a50e:	682b      	ldr	r3, [r5, #0]
 801a510:	689b      	ldr	r3, [r3, #8]
 801a512:	4798      	blx	r3
 801a514:	e77d      	b.n	801a412 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801a516:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a51a:	fa1f f08a 	uxth.w	r0, sl
 801a51e:	4552      	cmp	r2, sl
 801a520:	9000      	str	r0, [sp, #0]
 801a522:	da12      	bge.n	801a54a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801a524:	9301      	str	r3, [sp, #4]
 801a526:	9b00      	ldr	r3, [sp, #0]
 801a528:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a52c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a530:	1a9a      	subs	r2, r3, r2
 801a532:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a536:	4631      	mov	r1, r6
 801a538:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a53c:	4640      	mov	r0, r8
 801a53e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a542:	69ea      	ldr	r2, [r5, #28]
 801a544:	f7ff ff4e 	bl	801a3e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a548:	9b01      	ldr	r3, [sp, #4]
 801a54a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a54e:	b29f      	uxth	r7, r3
 801a550:	429a      	cmp	r2, r3
 801a552:	da0d      	bge.n	801a570 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801a554:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a558:	1aba      	subs	r2, r7, r2
 801a55a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a55e:	4631      	mov	r1, r6
 801a560:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a564:	4640      	mov	r0, r8
 801a566:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a56a:	69ea      	ldr	r2, [r5, #28]
 801a56c:	f7ff ff3a 	bl	801a3e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a570:	8822      	ldrh	r2, [r4, #0]
 801a572:	445f      	add	r7, fp
 801a574:	88a3      	ldrh	r3, [r4, #4]
 801a576:	b2bf      	uxth	r7, r7
 801a578:	4413      	add	r3, r2
 801a57a:	b23a      	sxth	r2, r7
 801a57c:	b29b      	uxth	r3, r3
 801a57e:	b219      	sxth	r1, r3
 801a580:	4291      	cmp	r1, r2
 801a582:	dd0d      	ble.n	801a5a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801a584:	1bdb      	subs	r3, r3, r7
 801a586:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a58a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a58e:	4631      	mov	r1, r6
 801a590:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a594:	4640      	mov	r0, r8
 801a596:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a59a:	69ea      	ldr	r2, [r5, #28]
 801a59c:	f7ff ff22 	bl	801a3e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a5a0:	88e2      	ldrh	r2, [r4, #6]
 801a5a2:	8863      	ldrh	r3, [r4, #2]
 801a5a4:	4413      	add	r3, r2
 801a5a6:	9a00      	ldr	r2, [sp, #0]
 801a5a8:	444a      	add	r2, r9
 801a5aa:	b29b      	uxth	r3, r3
 801a5ac:	fa1f f982 	uxth.w	r9, r2
 801a5b0:	b219      	sxth	r1, r3
 801a5b2:	fa0f f289 	sxth.w	r2, r9
 801a5b6:	428a      	cmp	r2, r1
 801a5b8:	da83      	bge.n	801a4c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801a5ba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a5be:	eba3 0309 	sub.w	r3, r3, r9
 801a5c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a5c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a5ca:	4631      	mov	r1, r6
 801a5cc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a5d0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a5d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5d8:	69ea      	ldr	r2, [r5, #28]
 801a5da:	e76f      	b.n	801a4bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801a5dc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5de:	2300      	movs	r3, #0
 801a5e0:	aa02      	add	r2, sp, #8
 801a5e2:	4604      	mov	r4, r0
 801a5e4:	3004      	adds	r0, #4
 801a5e6:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a5ea:	460d      	mov	r5, r1
 801a5ec:	f7fb fe7d 	bl	80162ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a5f0:	9a01      	ldr	r2, [sp, #4]
 801a5f2:	b11a      	cbz	r2, 801a5fc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a5f4:	4629      	mov	r1, r5
 801a5f6:	4620      	mov	r0, r4
 801a5f8:	f7ff fef4 	bl	801a3e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a5fc:	b003      	add	sp, #12
 801a5fe:	bd30      	pop	{r4, r5, pc}

0801a600 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a602:	4602      	mov	r2, r0
 801a604:	4604      	mov	r4, r0
 801a606:	460d      	mov	r5, r1
 801a608:	466b      	mov	r3, sp
 801a60a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a60e:	6851      	ldr	r1, [r2, #4]
 801a610:	c303      	stmia	r3!, {r0, r1}
 801a612:	4629      	mov	r1, r5
 801a614:	4668      	mov	r0, sp
 801a616:	f7fb fd91 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 801a61a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a61e:	4669      	mov	r1, sp
 801a620:	b123      	cbz	r3, 801a62c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a622:	4620      	mov	r0, r4
 801a624:	f7ff ffda 	bl	801a5dc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a628:	b003      	add	sp, #12
 801a62a:	bd30      	pop	{r4, r5, pc}
 801a62c:	1d20      	adds	r0, r4, #4
 801a62e:	f7fb fe23 	bl	8016278 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a632:	e7f9      	b.n	801a628 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a634 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a634:	460b      	mov	r3, r1
 801a636:	680a      	ldr	r2, [r1, #0]
 801a638:	1d01      	adds	r1, r0, #4
 801a63a:	6952      	ldr	r2, [r2, #20]
 801a63c:	4618      	mov	r0, r3
 801a63e:	4710      	bx	r2

0801a640 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801a640:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a644:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801a648:	4b03      	ldr	r3, [pc, #12]	; (801a658 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801a64a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a64e:	bf08      	it	eq
 801a650:	2300      	moveq	r3, #0
 801a652:	4308      	orrs	r0, r1
 801a654:	4318      	orrs	r0, r3
 801a656:	4770      	bx	lr
 801a658:	fffffe00 	.word	0xfffffe00

0801a65c <_ZN8touchgfx9GlyphNode6setTopEs>:
 801a65c:	7b43      	ldrb	r3, [r0, #13]
 801a65e:	7201      	strb	r1, [r0, #8]
 801a660:	b289      	uxth	r1, r1
 801a662:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801a666:	05ca      	lsls	r2, r1, #23
 801a668:	bf48      	it	mi
 801a66a:	f043 0320 	orrmi.w	r3, r3, #32
 801a66e:	7343      	strb	r3, [r0, #13]
 801a670:	058b      	lsls	r3, r1, #22
 801a672:	bf42      	ittt	mi
 801a674:	7b43      	ldrbmi	r3, [r0, #13]
 801a676:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801a67a:	7343      	strbmi	r3, [r0, #13]
 801a67c:	4770      	bx	lr

0801a67e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a67e:	b530      	push	{r4, r5, lr}
 801a680:	2500      	movs	r5, #0
 801a682:	2401      	movs	r4, #1
 801a684:	6843      	ldr	r3, [r0, #4]
 801a686:	b913      	cbnz	r3, 801a68e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a688:	6803      	ldr	r3, [r0, #0]
 801a68a:	b1f3      	cbz	r3, 801a6ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a68c:	6043      	str	r3, [r0, #4]
 801a68e:	7c03      	ldrb	r3, [r0, #16]
 801a690:	b143      	cbz	r3, 801a6a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a692:	68c3      	ldr	r3, [r0, #12]
 801a694:	b12b      	cbz	r3, 801a6a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a696:	881a      	ldrh	r2, [r3, #0]
 801a698:	b11a      	cbz	r2, 801a6a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a69a:	1c9a      	adds	r2, r3, #2
 801a69c:	60c2      	str	r2, [r0, #12]
 801a69e:	8818      	ldrh	r0, [r3, #0]
 801a6a0:	bd30      	pop	{r4, r5, pc}
 801a6a2:	7405      	strb	r5, [r0, #16]
 801a6a4:	6843      	ldr	r3, [r0, #4]
 801a6a6:	8819      	ldrh	r1, [r3, #0]
 801a6a8:	b179      	cbz	r1, 801a6ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a6aa:	1c9a      	adds	r2, r3, #2
 801a6ac:	2902      	cmp	r1, #2
 801a6ae:	6042      	str	r2, [r0, #4]
 801a6b0:	d1f5      	bne.n	801a69e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a6b2:	6883      	ldr	r3, [r0, #8]
 801a6b4:	1d1a      	adds	r2, r3, #4
 801a6b6:	6082      	str	r2, [r0, #8]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	60c3      	str	r3, [r0, #12]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d0e1      	beq.n	801a684 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a6c0:	881b      	ldrh	r3, [r3, #0]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d0de      	beq.n	801a684 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a6c6:	7404      	strb	r4, [r0, #16]
 801a6c8:	e7dc      	b.n	801a684 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a6ca:	2000      	movs	r0, #0
 801a6cc:	e7e8      	b.n	801a6a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a6ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a6ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6d0:	4605      	mov	r5, r0
 801a6d2:	4608      	mov	r0, r1
 801a6d4:	b1f1      	cbz	r1, 801a714 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a6d6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a6da:	460b      	mov	r3, r1
 801a6dc:	f101 0708 	add.w	r7, r1, #8
 801a6e0:	4622      	mov	r2, r4
 801a6e2:	6818      	ldr	r0, [r3, #0]
 801a6e4:	3308      	adds	r3, #8
 801a6e6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a6ea:	4626      	mov	r6, r4
 801a6ec:	42bb      	cmp	r3, r7
 801a6ee:	c603      	stmia	r6!, {r0, r1}
 801a6f0:	4634      	mov	r4, r6
 801a6f2:	d1f6      	bne.n	801a6e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a6f4:	6818      	ldr	r0, [r3, #0]
 801a6f6:	6030      	str	r0, [r6, #0]
 801a6f8:	4610      	mov	r0, r2
 801a6fa:	889b      	ldrh	r3, [r3, #4]
 801a6fc:	80b3      	strh	r3, [r6, #4]
 801a6fe:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a702:	015b      	lsls	r3, r3, #5
 801a704:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a708:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a70c:	430b      	orrs	r3, r1
 801a70e:	425b      	negs	r3, r3
 801a710:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a714:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a716 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a716:	b538      	push	{r3, r4, r5, lr}
 801a718:	460c      	mov	r4, r1
 801a71a:	6811      	ldr	r1, [r2, #0]
 801a71c:	4610      	mov	r0, r2
 801a71e:	68cd      	ldr	r5, [r1, #12]
 801a720:	4619      	mov	r1, r3
 801a722:	47a8      	blx	r5
 801a724:	2800      	cmp	r0, #0
 801a726:	bf08      	it	eq
 801a728:	4620      	moveq	r0, r4
 801a72a:	bd38      	pop	{r3, r4, r5, pc}

0801a72c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a72c:	b570      	push	{r4, r5, r6, lr}
 801a72e:	8810      	ldrh	r0, [r2, #0]
 801a730:	4298      	cmp	r0, r3
 801a732:	d817      	bhi.n	801a764 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a734:	1e48      	subs	r0, r1, #1
 801a736:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a73a:	4298      	cmp	r0, r3
 801a73c:	d312      	bcc.n	801a764 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a73e:	2400      	movs	r4, #0
 801a740:	428c      	cmp	r4, r1
 801a742:	d20f      	bcs.n	801a764 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a744:	1860      	adds	r0, r4, r1
 801a746:	1040      	asrs	r0, r0, #1
 801a748:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a74c:	0085      	lsls	r5, r0, #2
 801a74e:	42b3      	cmp	r3, r6
 801a750:	d902      	bls.n	801a758 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a752:	3001      	adds	r0, #1
 801a754:	b284      	uxth	r4, r0
 801a756:	e7f3      	b.n	801a740 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a758:	d102      	bne.n	801a760 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801a75a:	442a      	add	r2, r5
 801a75c:	8850      	ldrh	r0, [r2, #2]
 801a75e:	bd70      	pop	{r4, r5, r6, pc}
 801a760:	b281      	uxth	r1, r0
 801a762:	e7ed      	b.n	801a740 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a764:	2000      	movs	r0, #0
 801a766:	e7fa      	b.n	801a75e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801a768 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801a768:	b510      	push	{r4, lr}
 801a76a:	8ac3      	ldrh	r3, [r0, #22]
 801a76c:	428b      	cmp	r3, r1
 801a76e:	d805      	bhi.n	801a77c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801a770:	4b07      	ldr	r3, [pc, #28]	; (801a790 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801a772:	21fd      	movs	r1, #253	; 0xfd
 801a774:	4a07      	ldr	r2, [pc, #28]	; (801a794 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801a776:	4808      	ldr	r0, [pc, #32]	; (801a798 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801a778:	f00a fe40 	bl	80253fc <__assert_func>
 801a77c:	8a83      	ldrh	r3, [r0, #20]
 801a77e:	240a      	movs	r4, #10
 801a780:	4419      	add	r1, r3
 801a782:	fbb1 f3f4 	udiv	r3, r1, r4
 801a786:	fb04 1113 	mls	r1, r4, r3, r1
 801a78a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a78e:	bd10      	pop	{r4, pc}
 801a790:	080290d9 	.word	0x080290d9
 801a794:	08029508 	.word	0x08029508
 801a798:	080290e7 	.word	0x080290e7

0801a79c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801a79c:	b508      	push	{r3, lr}
 801a79e:	8ac3      	ldrh	r3, [r0, #22]
 801a7a0:	428b      	cmp	r3, r1
 801a7a2:	d805      	bhi.n	801a7b0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801a7a4:	4b07      	ldr	r3, [pc, #28]	; (801a7c4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801a7a6:	21d3      	movs	r1, #211	; 0xd3
 801a7a8:	4a07      	ldr	r2, [pc, #28]	; (801a7c8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801a7aa:	4808      	ldr	r0, [pc, #32]	; (801a7cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801a7ac:	f00a fe26 	bl	80253fc <__assert_func>
 801a7b0:	8a83      	ldrh	r3, [r0, #20]
 801a7b2:	220a      	movs	r2, #10
 801a7b4:	4419      	add	r1, r3
 801a7b6:	fbb1 f3f2 	udiv	r3, r1, r2
 801a7ba:	fb02 1113 	mls	r1, r2, r3, r1
 801a7be:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801a7c2:	bd08      	pop	{r3, pc}
 801a7c4:	080290d9 	.word	0x080290d9
 801a7c8:	08029258 	.word	0x08029258
 801a7cc:	080290e7 	.word	0x080290e7

0801a7d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7d4:	4604      	mov	r4, r0
 801a7d6:	4688      	mov	r8, r1
 801a7d8:	4615      	mov	r5, r2
 801a7da:	b94a      	cbnz	r2, 801a7f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801a7dc:	4691      	mov	r9, r2
 801a7de:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a7e2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a7e6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a7ea:	4648      	mov	r0, r9
 801a7ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7f0:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801a7f4:	8892      	ldrh	r2, [r2, #4]
 801a7f6:	462b      	mov	r3, r5
 801a7f8:	f105 0c08 	add.w	ip, r5, #8
 801a7fc:	46b3      	mov	fp, r6
 801a7fe:	6818      	ldr	r0, [r3, #0]
 801a800:	3308      	adds	r3, #8
 801a802:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a806:	4637      	mov	r7, r6
 801a808:	4563      	cmp	r3, ip
 801a80a:	c703      	stmia	r7!, {r0, r1}
 801a80c:	463e      	mov	r6, r7
 801a80e:	d1f6      	bne.n	801a7fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801a810:	6818      	ldr	r0, [r3, #0]
 801a812:	46d9      	mov	r9, fp
 801a814:	6038      	str	r0, [r7, #0]
 801a816:	889b      	ldrh	r3, [r3, #4]
 801a818:	80bb      	strh	r3, [r7, #4]
 801a81a:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801a81e:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801a822:	18d3      	adds	r3, r2, r3
 801a824:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801a828:	b298      	uxth	r0, r3
 801a82a:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801a82e:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801a832:	281d      	cmp	r0, #29
 801a834:	ea4a 0a01 	orr.w	sl, sl, r1
 801a838:	fa1f f68a 	uxth.w	r6, sl
 801a83c:	d842      	bhi.n	801a8c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801a83e:	2301      	movs	r3, #1
 801a840:	4950      	ldr	r1, [pc, #320]	; (801a984 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801a842:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801a846:	4083      	lsls	r3, r0
 801a848:	420b      	tst	r3, r1
 801a84a:	d114      	bne.n	801a876 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a84c:	f413 7f60 	tst.w	r3, #896	; 0x380
 801a850:	d03c      	beq.n	801a8cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801a852:	fa1f fa8a 	uxth.w	sl, sl
 801a856:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a85a:	4658      	mov	r0, fp
 801a85c:	eba1 010a 	sub.w	r1, r1, sl
 801a860:	b209      	sxth	r1, r1
 801a862:	f7ff fefb 	bl	801a65c <_ZN8touchgfx9GlyphNode6setTopEs>
 801a866:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801a86a:	1b86      	subs	r6, r0, r6
 801a86c:	eba6 0a0a 	sub.w	sl, r6, sl
 801a870:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801a874:	e7b9      	b.n	801a7ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a876:	2100      	movs	r1, #0
 801a878:	f104 001a 	add.w	r0, r4, #26
 801a87c:	f7ff ff8e 	bl	801a79c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a880:	f640 6333 	movw	r3, #3635	; 0xe33
 801a884:	4601      	mov	r1, r0
 801a886:	4298      	cmp	r0, r3
 801a888:	d10a      	bne.n	801a8a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801a88a:	f8d8 3000 	ldr.w	r3, [r8]
 801a88e:	4640      	mov	r0, r8
 801a890:	68db      	ldr	r3, [r3, #12]
 801a892:	4798      	blx	r3
 801a894:	7b41      	ldrb	r1, [r0, #13]
 801a896:	7a00      	ldrb	r0, [r0, #8]
 801a898:	f7ff fed2 	bl	801a640 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a89c:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a8a0:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a8a4:	4658      	mov	r0, fp
 801a8a6:	4431      	add	r1, r6
 801a8a8:	4451      	add	r1, sl
 801a8aa:	b209      	sxth	r1, r1
 801a8ac:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801a8b0:	f7ff fed4 	bl	801a65c <_ZN8touchgfx9GlyphNode6setTopEs>
 801a8b4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a8b8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a8bc:	1a9b      	subs	r3, r3, r2
 801a8be:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a8c2:	e792      	b.n	801a7ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a8c4:	f640 631b 	movw	r3, #3611	; 0xe1b
 801a8c8:	429a      	cmp	r2, r3
 801a8ca:	d005      	beq.n	801a8d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801a8cc:	f022 0302 	bic.w	r3, r2, #2
 801a8d0:	f640 611d 	movw	r1, #3613	; 0xe1d
 801a8d4:	428b      	cmp	r3, r1
 801a8d6:	d119      	bne.n	801a90c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801a8d8:	1e53      	subs	r3, r2, #1
 801a8da:	4629      	mov	r1, r5
 801a8dc:	4642      	mov	r2, r8
 801a8de:	4620      	mov	r0, r4
 801a8e0:	b29b      	uxth	r3, r3
 801a8e2:	f7ff ff18 	bl	801a716 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a8e6:	7b41      	ldrb	r1, [r0, #13]
 801a8e8:	7a00      	ldrb	r0, [r0, #8]
 801a8ea:	f7ff fea9 	bl	801a640 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a8ee:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801a8f2:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a8f6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a8fa:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a8fe:	4313      	orrs	r3, r2
 801a900:	115a      	asrs	r2, r3, #5
 801a902:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a906:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a90a:	e02e      	b.n	801a96a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a90c:	4639      	mov	r1, r7
 801a90e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a912:	f7ff fe95 	bl	801a640 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a916:	f640 6109 	movw	r1, #3593	; 0xe09
 801a91a:	f022 0310 	bic.w	r3, r2, #16
 801a91e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a922:	428b      	cmp	r3, r1
 801a924:	d003      	beq.n	801a92e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801a926:	f640 6313 	movw	r3, #3603	; 0xe13
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d127      	bne.n	801a97e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801a92e:	b27f      	sxtb	r7, r7
 801a930:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a934:	4629      	mov	r1, r5
 801a936:	4620      	mov	r0, r4
 801a938:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801a93c:	431f      	orrs	r7, r3
 801a93e:	f640 6313 	movw	r3, #3603	; 0xe13
 801a942:	429a      	cmp	r2, r3
 801a944:	bf14      	ite	ne
 801a946:	f102 33ff 	addne.w	r3, r2, #4294967295
 801a94a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a94e:	4642      	mov	r2, r8
 801a950:	bf18      	it	ne
 801a952:	b29b      	uxthne	r3, r3
 801a954:	f7ff fedf 	bl	801a716 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a958:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a95c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a960:	7a83      	ldrb	r3, [r0, #10]
 801a962:	4313      	orrs	r3, r2
 801a964:	1aff      	subs	r7, r7, r3
 801a966:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801a96a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a96e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a972:	f7ff fe65 	bl	801a640 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a976:	1b80      	subs	r0, r0, r6
 801a978:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801a97c:	e735      	b.n	801a7ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a97e:	2300      	movs	r3, #0
 801a980:	e7c1      	b.n	801a906 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801a982:	bf00      	nop
 801a984:	3fc00079 	.word	0x3fc00079

0801a988 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a988:	3a01      	subs	r2, #1
 801a98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a98e:	b292      	uxth	r2, r2
 801a990:	460c      	mov	r4, r1
 801a992:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a996:	42b2      	cmp	r2, r6
 801a998:	d018      	beq.n	801a9cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801a99a:	8b01      	ldrh	r1, [r0, #24]
 801a99c:	f834 5b02 	ldrh.w	r5, [r4], #2
 801a9a0:	4291      	cmp	r1, r2
 801a9a2:	d805      	bhi.n	801a9b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801a9a4:	4b13      	ldr	r3, [pc, #76]	; (801a9f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801a9a6:	21d3      	movs	r1, #211	; 0xd3
 801a9a8:	4a13      	ldr	r2, [pc, #76]	; (801a9f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801a9aa:	4814      	ldr	r0, [pc, #80]	; (801a9fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801a9ac:	f00a fd26 	bl	80253fc <__assert_func>
 801a9b0:	8ac1      	ldrh	r1, [r0, #22]
 801a9b2:	4411      	add	r1, r2
 801a9b4:	3a01      	subs	r2, #1
 801a9b6:	f001 0101 	and.w	r1, r1, #1
 801a9ba:	b292      	uxth	r2, r2
 801a9bc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a9c0:	8a49      	ldrh	r1, [r1, #18]
 801a9c2:	428d      	cmp	r5, r1
 801a9c4:	d0e7      	beq.n	801a996 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801a9c6:	2000      	movs	r0, #0
 801a9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9cc:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a9d0:	2600      	movs	r6, #0
 801a9d2:	f100 051a 	add.w	r5, r0, #26
 801a9d6:	441f      	add	r7, r3
 801a9d8:	b2b1      	uxth	r1, r6
 801a9da:	42b9      	cmp	r1, r7
 801a9dc:	da08      	bge.n	801a9f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801a9de:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801a9e2:	4628      	mov	r0, r5
 801a9e4:	f7ff feda 	bl	801a79c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a9e8:	3601      	adds	r6, #1
 801a9ea:	4540      	cmp	r0, r8
 801a9ec:	d0f4      	beq.n	801a9d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801a9ee:	e7ea      	b.n	801a9c6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a9f0:	2001      	movs	r0, #1
 801a9f2:	e7e9      	b.n	801a9c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a9f4:	080290d9 	.word	0x080290d9
 801a9f8:	08029668 	.word	0x08029668
 801a9fc:	080290e7 	.word	0x080290e7

0801aa00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801aa00:	b538      	push	{r3, r4, r5, lr}
 801aa02:	8ac3      	ldrh	r3, [r0, #22]
 801aa04:	428b      	cmp	r3, r1
 801aa06:	d205      	bcs.n	801aa14 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801aa08:	4b08      	ldr	r3, [pc, #32]	; (801aa2c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801aa0a:	21d8      	movs	r1, #216	; 0xd8
 801aa0c:	4a08      	ldr	r2, [pc, #32]	; (801aa30 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801aa0e:	4809      	ldr	r0, [pc, #36]	; (801aa34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801aa10:	f00a fcf4 	bl	80253fc <__assert_func>
 801aa14:	8a82      	ldrh	r2, [r0, #20]
 801aa16:	250a      	movs	r5, #10
 801aa18:	1a5b      	subs	r3, r3, r1
 801aa1a:	440a      	add	r2, r1
 801aa1c:	82c3      	strh	r3, [r0, #22]
 801aa1e:	fbb2 f4f5 	udiv	r4, r2, r5
 801aa22:	fb05 2214 	mls	r2, r5, r4, r2
 801aa26:	8282      	strh	r2, [r0, #20]
 801aa28:	bd38      	pop	{r3, r4, r5, pc}
 801aa2a:	bf00      	nop
 801aa2c:	080290cd 	.word	0x080290cd
 801aa30:	08029484 	.word	0x08029484
 801aa34:	080290e7 	.word	0x080290e7

0801aa38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801aa38:	b538      	push	{r3, r4, r5, lr}
 801aa3a:	8ac3      	ldrh	r3, [r0, #22]
 801aa3c:	2b09      	cmp	r3, #9
 801aa3e:	d905      	bls.n	801aa4c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801aa40:	4b08      	ldr	r3, [pc, #32]	; (801aa64 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801aa42:	21f7      	movs	r1, #247	; 0xf7
 801aa44:	4a08      	ldr	r2, [pc, #32]	; (801aa68 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801aa46:	4809      	ldr	r0, [pc, #36]	; (801aa6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801aa48:	f00a fcd8 	bl	80253fc <__assert_func>
 801aa4c:	8a82      	ldrh	r2, [r0, #20]
 801aa4e:	250a      	movs	r5, #10
 801aa50:	441a      	add	r2, r3
 801aa52:	3301      	adds	r3, #1
 801aa54:	fbb2 f4f5 	udiv	r4, r2, r5
 801aa58:	fb05 2214 	mls	r2, r5, r4, r2
 801aa5c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801aa60:	82c3      	strh	r3, [r0, #22]
 801aa62:	bd38      	pop	{r3, r4, r5, pc}
 801aa64:	080290c1 	.word	0x080290c1
 801aa68:	080293d5 	.word	0x080293d5
 801aa6c:	080290e7 	.word	0x080290e7

0801aa70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801aa70:	b538      	push	{r3, r4, r5, lr}
 801aa72:	4604      	mov	r4, r0
 801aa74:	f100 051a 	add.w	r5, r0, #26
 801aa78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801aa7a:	2b0a      	cmp	r3, #10
 801aa7c:	d01c      	beq.n	801aab8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801aa7e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801aa80:	b962      	cbnz	r2, 801aa9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801aa82:	f104 051a 	add.w	r5, r4, #26
 801aa86:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801aa88:	2b0a      	cmp	r3, #10
 801aa8a:	d015      	beq.n	801aab8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801aa8c:	4620      	mov	r0, r4
 801aa8e:	f7ff fdf6 	bl	801a67e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801aa92:	4601      	mov	r1, r0
 801aa94:	4628      	mov	r0, r5
 801aa96:	f7ff ffcf 	bl	801aa38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801aa9a:	e7f4      	b.n	801aa86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801aa9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801aa9e:	3a01      	subs	r2, #1
 801aaa0:	4628      	mov	r0, r5
 801aaa2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801aaa6:	3301      	adds	r3, #1
 801aaa8:	f003 0301 	and.w	r3, r3, #1
 801aaac:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801aaae:	8722      	strh	r2, [r4, #56]	; 0x38
 801aab0:	86e3      	strh	r3, [r4, #54]	; 0x36
 801aab2:	f7ff ffc1 	bl	801aa38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801aab6:	e7df      	b.n	801aa78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801aab8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801aabc <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801aabc:	2300      	movs	r3, #0
 801aabe:	b510      	push	{r4, lr}
 801aac0:	6043      	str	r3, [r0, #4]
 801aac2:	4604      	mov	r4, r0
 801aac4:	60c3      	str	r3, [r0, #12]
 801aac6:	7403      	strb	r3, [r0, #16]
 801aac8:	8603      	strh	r3, [r0, #48]	; 0x30
 801aaca:	8303      	strh	r3, [r0, #24]
 801aacc:	8703      	strh	r3, [r0, #56]	; 0x38
 801aace:	f7ff ffcf 	bl	801aa70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801aad2:	4a0a      	ldr	r2, [pc, #40]	; (801aafc <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801aad4:	6813      	ldr	r3, [r2, #0]
 801aad6:	4611      	mov	r1, r2
 801aad8:	b913      	cbnz	r3, 801aae0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801aada:	6852      	ldr	r2, [r2, #4]
 801aadc:	07d0      	lsls	r0, r2, #31
 801aade:	d50b      	bpl.n	801aaf8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801aae0:	6849      	ldr	r1, [r1, #4]
 801aae2:	104a      	asrs	r2, r1, #1
 801aae4:	07c9      	lsls	r1, r1, #31
 801aae6:	eb04 0002 	add.w	r0, r4, r2
 801aaea:	bf48      	it	mi
 801aaec:	58a2      	ldrmi	r2, [r4, r2]
 801aaee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aaf2:	bf48      	it	mi
 801aaf4:	58d3      	ldrmi	r3, [r2, r3]
 801aaf6:	4718      	bx	r3
 801aaf8:	bd10      	pop	{r4, pc}
 801aafa:	bf00      	nop
 801aafc:	20008df0 	.word	0x20008df0

0801ab00 <_ZN8touchgfx12TextProviderC1Ev>:
 801ab00:	2300      	movs	r3, #0
 801ab02:	2201      	movs	r2, #1
 801ab04:	b510      	push	{r4, lr}
 801ab06:	4604      	mov	r4, r0
 801ab08:	60c3      	str	r3, [r0, #12]
 801ab0a:	7403      	strb	r3, [r0, #16]
 801ab0c:	82c3      	strh	r3, [r0, #22]
 801ab0e:	8303      	strh	r3, [r0, #24]
 801ab10:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801ab12:	8603      	strh	r3, [r0, #48]	; 0x30
 801ab14:	86c3      	strh	r3, [r0, #54]	; 0x36
 801ab16:	8703      	strh	r3, [r0, #56]	; 0x38
 801ab18:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ab1a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801ab1e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801ab22:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801ab26:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801ab2a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801ab2e:	e9c0 3300 	strd	r3, r3, [r0]
 801ab32:	f7ff ffc3 	bl	801aabc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ab36:	4620      	mov	r0, r4
 801ab38:	bd10      	pop	{r4, pc}

0801ab3a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801ab3a:	b410      	push	{r4}
 801ab3c:	6082      	str	r2, [r0, #8]
 801ab3e:	6001      	str	r1, [r0, #0]
 801ab40:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ab42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab46:	f7ff bfb9 	b.w	801aabc <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801ab4c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801ab4c:	b508      	push	{r3, lr}
 801ab4e:	88c2      	ldrh	r2, [r0, #6]
 801ab50:	440a      	add	r2, r1
 801ab52:	2a02      	cmp	r2, #2
 801ab54:	dd05      	ble.n	801ab62 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801ab56:	4b06      	ldr	r3, [pc, #24]	; (801ab70 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801ab58:	21ec      	movs	r1, #236	; 0xec
 801ab5a:	4a06      	ldr	r2, [pc, #24]	; (801ab74 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801ab5c:	4806      	ldr	r0, [pc, #24]	; (801ab78 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801ab5e:	f00a fc4d 	bl	80253fc <__assert_func>
 801ab62:	8883      	ldrh	r3, [r0, #4]
 801ab64:	80c2      	strh	r2, [r0, #6]
 801ab66:	1a59      	subs	r1, r3, r1
 801ab68:	f001 0101 	and.w	r1, r1, #1
 801ab6c:	8081      	strh	r1, [r0, #4]
 801ab6e:	bd08      	pop	{r3, pc}
 801ab70:	08029113 	.word	0x08029113
 801ab74:	080295e1 	.word	0x080295e1
 801ab78:	080290e7 	.word	0x080290e7

0801ab7c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801ab7c:	b508      	push	{r3, lr}
 801ab7e:	88c3      	ldrh	r3, [r0, #6]
 801ab80:	428b      	cmp	r3, r1
 801ab82:	d805      	bhi.n	801ab90 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801ab84:	4b06      	ldr	r3, [pc, #24]	; (801aba0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801ab86:	21fd      	movs	r1, #253	; 0xfd
 801ab88:	4a06      	ldr	r2, [pc, #24]	; (801aba4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801ab8a:	4807      	ldr	r0, [pc, #28]	; (801aba8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801ab8c:	f00a fc36 	bl	80253fc <__assert_func>
 801ab90:	8883      	ldrh	r3, [r0, #4]
 801ab92:	4419      	add	r1, r3
 801ab94:	f001 0101 	and.w	r1, r1, #1
 801ab98:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801ab9c:	bd08      	pop	{r3, pc}
 801ab9e:	bf00      	nop
 801aba0:	080290d9 	.word	0x080290d9
 801aba4:	08029739 	.word	0x08029739
 801aba8:	080290e7 	.word	0x080290e7

0801abac <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801abac:	b570      	push	{r4, r5, r6, lr}
 801abae:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801abb0:	4604      	mov	r4, r0
 801abb2:	b92a      	cbnz	r2, 801abc0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801abb4:	4b12      	ldr	r3, [pc, #72]	; (801ac00 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801abb6:	21de      	movs	r1, #222	; 0xde
 801abb8:	4a12      	ldr	r2, [pc, #72]	; (801ac04 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801abba:	4813      	ldr	r0, [pc, #76]	; (801ac08 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801abbc:	f00a fc1e 	bl	80253fc <__assert_func>
 801abc0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801abc2:	260a      	movs	r6, #10
 801abc4:	3a01      	subs	r2, #1
 801abc6:	3412      	adds	r4, #18
 801abc8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801abcc:	3301      	adds	r3, #1
 801abce:	8b4d      	ldrh	r5, [r1, #26]
 801abd0:	8602      	strh	r2, [r0, #48]	; 0x30
 801abd2:	fbb3 f1f6 	udiv	r1, r3, r6
 801abd6:	fb06 3311 	mls	r3, r6, r1, r3
 801abda:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801abdc:	f7ff ff48 	bl	801aa70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801abe0:	88e3      	ldrh	r3, [r4, #6]
 801abe2:	2101      	movs	r1, #1
 801abe4:	2b02      	cmp	r3, #2
 801abe6:	bf04      	itt	eq
 801abe8:	2301      	moveq	r3, #1
 801abea:	80e3      	strheq	r3, [r4, #6]
 801abec:	4620      	mov	r0, r4
 801abee:	f7ff ffad 	bl	801ab4c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801abf2:	4620      	mov	r0, r4
 801abf4:	462a      	mov	r2, r5
 801abf6:	2100      	movs	r1, #0
 801abf8:	f7ff ffc0 	bl	801ab7c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801abfc:	4628      	mov	r0, r5
 801abfe:	bd70      	pop	{r4, r5, r6, pc}
 801ac00:	080290b8 	.word	0x080290b8
 801ac04:	0802932a 	.word	0x0802932a
 801ac08:	080290e7 	.word	0x080290e7

0801ac0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ac0c:	428a      	cmp	r2, r1
 801ac0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac12:	4604      	mov	r4, r0
 801ac14:	460e      	mov	r6, r1
 801ac16:	4615      	mov	r5, r2
 801ac18:	469a      	mov	sl, r3
 801ac1a:	d92b      	bls.n	801ac74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801ac1c:	1a57      	subs	r7, r2, r1
 801ac1e:	f04f 0800 	mov.w	r8, #0
 801ac22:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801ac26:	f04f 0b0a 	mov.w	fp, #10
 801ac2a:	b2bf      	uxth	r7, r7
 801ac2c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ac2e:	b92b      	cbnz	r3, 801ac3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801ac30:	4b24      	ldr	r3, [pc, #144]	; (801acc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801ac32:	21e6      	movs	r1, #230	; 0xe6
 801ac34:	4a24      	ldr	r2, [pc, #144]	; (801acc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801ac36:	4825      	ldr	r0, [pc, #148]	; (801accc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801ac38:	f00a fbe0 	bl	80253fc <__assert_func>
 801ac3c:	3b01      	subs	r3, #1
 801ac3e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801ac40:	2101      	movs	r1, #1
 801ac42:	4648      	mov	r0, r9
 801ac44:	b29b      	uxth	r3, r3
 801ac46:	f108 0801 	add.w	r8, r8, #1
 801ac4a:	441a      	add	r2, r3
 801ac4c:	8623      	strh	r3, [r4, #48]	; 0x30
 801ac4e:	fbb2 f3fb 	udiv	r3, r2, fp
 801ac52:	fb0b 2313 	mls	r3, fp, r3, r2
 801ac56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ac5a:	8b5a      	ldrh	r2, [r3, #26]
 801ac5c:	9201      	str	r2, [sp, #4]
 801ac5e:	f7ff ff75 	bl	801ab4c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801ac62:	9a01      	ldr	r2, [sp, #4]
 801ac64:	2100      	movs	r1, #0
 801ac66:	4648      	mov	r0, r9
 801ac68:	f7ff ff88 	bl	801ab7c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801ac6c:	fa1f f388 	uxth.w	r3, r8
 801ac70:	429f      	cmp	r7, r3
 801ac72:	d8db      	bhi.n	801ac2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801ac74:	f104 071a 	add.w	r7, r4, #26
 801ac78:	4631      	mov	r1, r6
 801ac7a:	260a      	movs	r6, #10
 801ac7c:	4638      	mov	r0, r7
 801ac7e:	f7ff febf 	bl	801aa00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801ac82:	b1c5      	cbz	r5, 801acb6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801ac84:	3d01      	subs	r5, #1
 801ac86:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ac88:	b2ad      	uxth	r5, r5
 801ac8a:	2b09      	cmp	r3, #9
 801ac8c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801ac90:	d903      	bls.n	801ac9a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801ac92:	4b0f      	ldr	r3, [pc, #60]	; (801acd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801ac94:	21ec      	movs	r1, #236	; 0xec
 801ac96:	4a0f      	ldr	r2, [pc, #60]	; (801acd4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801ac98:	e7cd      	b.n	801ac36 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801ac9a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801ac9c:	3301      	adds	r3, #1
 801ac9e:	3109      	adds	r1, #9
 801aca0:	8623      	strh	r3, [r4, #48]	; 0x30
 801aca2:	fbb1 f0f6 	udiv	r0, r1, r6
 801aca6:	fb06 1110 	mls	r1, r6, r0, r1
 801acaa:	4638      	mov	r0, r7
 801acac:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801acae:	2100      	movs	r1, #0
 801acb0:	f7ff fd5a 	bl	801a768 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801acb4:	e7e5      	b.n	801ac82 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801acb6:	4620      	mov	r0, r4
 801acb8:	b003      	add	sp, #12
 801acba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acbe:	f7ff bed7 	b.w	801aa70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801acc2:	bf00      	nop
 801acc4:	080290b8 	.word	0x080290b8
 801acc8:	080291ae 	.word	0x080291ae
 801accc:	080290e7 	.word	0x080290e7
 801acd0:	08029113 	.word	0x08029113
 801acd4:	08029126 	.word	0x08029126

0801acd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801acd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acdc:	4605      	mov	r5, r0
 801acde:	4616      	mov	r6, r2
 801ace0:	1c8c      	adds	r4, r1, #2
 801ace2:	8809      	ldrh	r1, [r1, #0]
 801ace4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ace8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801acec:	42b3      	cmp	r3, r6
 801acee:	d124      	bne.n	801ad3a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801acf0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801acf4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801acf8:	f001 070f 	and.w	r7, r1, #15
 801acfc:	4652      	mov	r2, sl
 801acfe:	f8cd 8000 	str.w	r8, [sp]
 801ad02:	464b      	mov	r3, r9
 801ad04:	4621      	mov	r1, r4
 801ad06:	4628      	mov	r0, r5
 801ad08:	f7ff fe3e 	bl	801a988 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ad0c:	4683      	mov	fp, r0
 801ad0e:	b168      	cbz	r0, 801ad2c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ad10:	eb0a 0109 	add.w	r1, sl, r9
 801ad14:	463a      	mov	r2, r7
 801ad16:	4628      	mov	r0, r5
 801ad18:	4441      	add	r1, r8
 801ad1a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ad1e:	4649      	mov	r1, r9
 801ad20:	f7ff ff74 	bl	801ac0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ad24:	4658      	mov	r0, fp
 801ad26:	b003      	add	sp, #12
 801ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad2c:	eb07 010a 	add.w	r1, r7, sl
 801ad30:	4449      	add	r1, r9
 801ad32:	4441      	add	r1, r8
 801ad34:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ad38:	e7d2      	b.n	801ace0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ad3a:	f04f 0b00 	mov.w	fp, #0
 801ad3e:	e7f1      	b.n	801ad24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ad40 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad44:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801ad46:	4604      	mov	r4, r0
 801ad48:	260b      	movs	r6, #11
 801ad4a:	f100 091a 	add.w	r9, r0, #26
 801ad4e:	886f      	ldrh	r7, [r5, #2]
 801ad50:	087f      	lsrs	r7, r7, #1
 801ad52:	3e01      	subs	r6, #1
 801ad54:	d013      	beq.n	801ad7e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801ad56:	2100      	movs	r1, #0
 801ad58:	4648      	mov	r0, r9
 801ad5a:	f7ff fd1f 	bl	801a79c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ad5e:	462a      	mov	r2, r5
 801ad60:	4680      	mov	r8, r0
 801ad62:	4603      	mov	r3, r0
 801ad64:	4639      	mov	r1, r7
 801ad66:	4620      	mov	r0, r4
 801ad68:	f7ff fce0 	bl	801a72c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801ad6c:	b138      	cbz	r0, 801ad7e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801ad6e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801ad72:	4642      	mov	r2, r8
 801ad74:	4620      	mov	r0, r4
 801ad76:	f7ff ffaf 	bl	801acd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801ad7a:	2800      	cmp	r0, #0
 801ad7c:	d1e9      	bne.n	801ad52 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801ad7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801ad84:	4b1e      	ldr	r3, [pc, #120]	; (801ae00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801ad86:	b570      	push	{r4, r5, r6, lr}
 801ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad8c:	4604      	mov	r4, r0
 801ad8e:	f003 0501 	and.w	r5, r3, #1
 801ad92:	b902      	cbnz	r2, 801ad96 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801ad94:	b165      	cbz	r5, 801adb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801ad96:	105b      	asrs	r3, r3, #1
 801ad98:	f104 061a 	add.w	r6, r4, #26
 801ad9c:	18e0      	adds	r0, r4, r3
 801ad9e:	b10d      	cbz	r5, 801ada4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801ada0:	58e3      	ldr	r3, [r4, r3]
 801ada2:	589a      	ldr	r2, [r3, r2]
 801ada4:	4790      	blx	r2
 801ada6:	2100      	movs	r1, #0
 801ada8:	4602      	mov	r2, r0
 801adaa:	4630      	mov	r0, r6
 801adac:	f7ff fcdc 	bl	801a768 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801adb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801adb2:	b303      	cbz	r3, 801adf6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801adb4:	f104 051a 	add.w	r5, r4, #26
 801adb8:	2100      	movs	r1, #0
 801adba:	4628      	mov	r0, r5
 801adbc:	f7ff fcee 	bl	801a79c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801adc0:	b1c8      	cbz	r0, 801adf6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801adc2:	4620      	mov	r0, r4
 801adc4:	f7ff ffbc 	bl	801ad40 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801adc8:	2101      	movs	r1, #1
 801adca:	4628      	mov	r0, r5
 801adcc:	f7ff fce6 	bl	801a79c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801add0:	f640 133f 	movw	r3, #2367	; 0x93f
 801add4:	4606      	mov	r6, r0
 801add6:	4298      	cmp	r0, r3
 801add8:	d10d      	bne.n	801adf6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801adda:	2100      	movs	r1, #0
 801addc:	4628      	mov	r0, r5
 801adde:	f7ff fcdd 	bl	801a79c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ade2:	2101      	movs	r1, #1
 801ade4:	4602      	mov	r2, r0
 801ade6:	4628      	mov	r0, r5
 801ade8:	f7ff fcbe 	bl	801a768 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801adec:	4632      	mov	r2, r6
 801adee:	2100      	movs	r1, #0
 801adf0:	4628      	mov	r0, r5
 801adf2:	f7ff fcb9 	bl	801a768 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801adf6:	4620      	mov	r0, r4
 801adf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801adfc:	f7ff bed6 	b.w	801abac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ae00:	20008df8 	.word	0x20008df8

0801ae04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae06:	4617      	mov	r7, r2
 801ae08:	461e      	mov	r6, r3
 801ae0a:	4605      	mov	r5, r0
 801ae0c:	f7ff ffba 	bl	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ae10:	683b      	ldr	r3, [r7, #0]
 801ae12:	4604      	mov	r4, r0
 801ae14:	4601      	mov	r1, r0
 801ae16:	4638      	mov	r0, r7
 801ae18:	68db      	ldr	r3, [r3, #12]
 801ae1a:	4798      	blx	r3
 801ae1c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801ae20:	4602      	mov	r2, r0
 801ae22:	6030      	str	r0, [r6, #0]
 801ae24:	b29b      	uxth	r3, r3
 801ae26:	2b7f      	cmp	r3, #127	; 0x7f
 801ae28:	d813      	bhi.n	801ae52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801ae2a:	4639      	mov	r1, r7
 801ae2c:	4628      	mov	r0, r5
 801ae2e:	f7ff fccf 	bl	801a7d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ae32:	6030      	str	r0, [r6, #0]
 801ae34:	6833      	ldr	r3, [r6, #0]
 801ae36:	b143      	cbz	r3, 801ae4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801ae38:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801ae3c:	7a9b      	ldrb	r3, [r3, #10]
 801ae3e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ae42:	4313      	orrs	r3, r2
 801ae44:	bf0c      	ite	eq
 801ae46:	2301      	moveq	r3, #1
 801ae48:	2300      	movne	r3, #0
 801ae4a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801ae4e:	4620      	mov	r0, r4
 801ae50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae52:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d0ec      	beq.n	801ae34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801ae5a:	f640 1302 	movw	r3, #2306	; 0x902
 801ae5e:	429c      	cmp	r4, r3
 801ae60:	d1e8      	bne.n	801ae34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801ae62:	4601      	mov	r1, r0
 801ae64:	4628      	mov	r0, r5
 801ae66:	f7ff fc32 	bl	801a6ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ae6a:	e7e2      	b.n	801ae32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801ae6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae70:	4617      	mov	r7, r2
 801ae72:	461e      	mov	r6, r3
 801ae74:	4605      	mov	r5, r0
 801ae76:	f7ff ff85 	bl	801ad84 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ae7a:	683b      	ldr	r3, [r7, #0]
 801ae7c:	4604      	mov	r4, r0
 801ae7e:	4601      	mov	r1, r0
 801ae80:	4638      	mov	r0, r7
 801ae82:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801ae86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ae8a:	47c0      	blx	r8
 801ae8c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801ae90:	4602      	mov	r2, r0
 801ae92:	6030      	str	r0, [r6, #0]
 801ae94:	b29b      	uxth	r3, r3
 801ae96:	2b7f      	cmp	r3, #127	; 0x7f
 801ae98:	d814      	bhi.n	801aec4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801ae9a:	4639      	mov	r1, r7
 801ae9c:	4628      	mov	r0, r5
 801ae9e:	f7ff fc97 	bl	801a7d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801aea2:	6030      	str	r0, [r6, #0]
 801aea4:	6833      	ldr	r3, [r6, #0]
 801aea6:	b143      	cbz	r3, 801aeba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801aea8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801aeac:	7a9b      	ldrb	r3, [r3, #10]
 801aeae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801aeb2:	4313      	orrs	r3, r2
 801aeb4:	bf0c      	ite	eq
 801aeb6:	2301      	moveq	r3, #1
 801aeb8:	2300      	movne	r3, #0
 801aeba:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801aebe:	4620      	mov	r0, r4
 801aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aec4:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d0eb      	beq.n	801aea4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801aecc:	f640 1302 	movw	r3, #2306	; 0x902
 801aed0:	429c      	cmp	r4, r3
 801aed2:	d1e7      	bne.n	801aea4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801aed4:	4601      	mov	r1, r0
 801aed6:	4628      	mov	r0, r5
 801aed8:	f7ff fbf9 	bl	801a6ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801aedc:	e7e1      	b.n	801aea2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801aede <_ZN8touchgfx7Unicode6strlenEPKt>:
 801aede:	4602      	mov	r2, r0
 801aee0:	b148      	cbz	r0, 801aef6 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801aee2:	2300      	movs	r3, #0
 801aee4:	b298      	uxth	r0, r3
 801aee6:	3301      	adds	r3, #1
 801aee8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801aeec:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801aef0:	2900      	cmp	r1, #0
 801aef2:	d1f7      	bne.n	801aee4 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801aef4:	4770      	bx	lr
 801aef6:	4770      	bx	lr

0801aef8 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801aef8:	b140      	cbz	r0, 801af0c <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801aefa:	4602      	mov	r2, r0
 801aefc:	1a13      	subs	r3, r2, r0
 801aefe:	f812 1b01 	ldrb.w	r1, [r2], #1
 801af02:	b29b      	uxth	r3, r3
 801af04:	2900      	cmp	r1, #0
 801af06:	d1f9      	bne.n	801aefc <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801af08:	4618      	mov	r0, r3
 801af0a:	4770      	bx	lr
 801af0c:	4603      	mov	r3, r0
 801af0e:	e7fb      	b.n	801af08 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801af10 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801af10:	b530      	push	{r4, r5, lr}
 801af12:	4604      	mov	r4, r0
 801af14:	b159      	cbz	r1, 801af2e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801af16:	b148      	cbz	r0, 801af2c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801af18:	2300      	movs	r3, #0
 801af1a:	b298      	uxth	r0, r3
 801af1c:	4282      	cmp	r2, r0
 801af1e:	d905      	bls.n	801af2c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801af20:	5ccd      	ldrb	r5, [r1, r3]
 801af22:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801af26:	3301      	adds	r3, #1
 801af28:	2d00      	cmp	r5, #0
 801af2a:	d1f6      	bne.n	801af1a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801af2c:	bd30      	pop	{r4, r5, pc}
 801af2e:	4608      	mov	r0, r1
 801af30:	e7fc      	b.n	801af2c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801af32 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801af32:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af34:	468c      	mov	ip, r1
 801af36:	b08b      	sub	sp, #44	; 0x2c
 801af38:	2100      	movs	r1, #0
 801af3a:	ae01      	add	r6, sp, #4
 801af3c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801af40:	211f      	movs	r1, #31
 801af42:	fbb0 f7f3 	udiv	r7, r0, r3
 801af46:	fb03 0517 	mls	r5, r3, r7, r0
 801af4a:	4638      	mov	r0, r7
 801af4c:	b2ec      	uxtb	r4, r5
 801af4e:	2d09      	cmp	r5, #9
 801af50:	bfd4      	ite	le
 801af52:	3430      	addle	r4, #48	; 0x30
 801af54:	3457      	addgt	r4, #87	; 0x57
 801af56:	b2e4      	uxtb	r4, r4
 801af58:	558c      	strb	r4, [r1, r6]
 801af5a:	1e4c      	subs	r4, r1, #1
 801af5c:	b92f      	cbnz	r7, 801af6a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801af5e:	4431      	add	r1, r6
 801af60:	4660      	mov	r0, ip
 801af62:	f7ff ffd5 	bl	801af10 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801af66:	b00b      	add	sp, #44	; 0x2c
 801af68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af6a:	4621      	mov	r1, r4
 801af6c:	e7e9      	b.n	801af42 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801af6e <_ZN8touchgfx7Unicode4itoaElPtti>:
 801af6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af70:	4607      	mov	r7, r0
 801af72:	b08b      	sub	sp, #44	; 0x2c
 801af74:	4608      	mov	r0, r1
 801af76:	b341      	cbz	r1, 801afca <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801af78:	1e99      	subs	r1, r3, #2
 801af7a:	290e      	cmp	r1, #14
 801af7c:	d825      	bhi.n	801afca <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801af7e:	2100      	movs	r1, #0
 801af80:	463c      	mov	r4, r7
 801af82:	261f      	movs	r6, #31
 801af84:	f10d 0c04 	add.w	ip, sp, #4
 801af88:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801af8c:	1e71      	subs	r1, r6, #1
 801af8e:	fb94 fef3 	sdiv	lr, r4, r3
 801af92:	fb03 441e 	mls	r4, r3, lr, r4
 801af96:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801af9a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801af9e:	b2ec      	uxtb	r4, r5
 801afa0:	2d09      	cmp	r5, #9
 801afa2:	bfd4      	ite	le
 801afa4:	3430      	addle	r4, #48	; 0x30
 801afa6:	3457      	addgt	r4, #87	; 0x57
 801afa8:	b2e4      	uxtb	r4, r4
 801afaa:	f80c 4006 	strb.w	r4, [ip, r6]
 801afae:	4674      	mov	r4, lr
 801afb0:	b96c      	cbnz	r4, 801afce <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801afb2:	2f00      	cmp	r7, #0
 801afb4:	da05      	bge.n	801afc2 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801afb6:	ab0a      	add	r3, sp, #40	; 0x28
 801afb8:	4419      	add	r1, r3
 801afba:	232d      	movs	r3, #45	; 0x2d
 801afbc:	f801 3c24 	strb.w	r3, [r1, #-36]
 801afc0:	1eb1      	subs	r1, r6, #2
 801afc2:	3101      	adds	r1, #1
 801afc4:	4461      	add	r1, ip
 801afc6:	f7ff ffa3 	bl	801af10 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801afca:	b00b      	add	sp, #44	; 0x2c
 801afcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afce:	460e      	mov	r6, r1
 801afd0:	e7dc      	b.n	801af8c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801afd2 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801afd2:	b510      	push	{r4, lr}
 801afd4:	b158      	cbz	r0, 801afee <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801afd6:	1e82      	subs	r2, r0, #2
 801afd8:	210a      	movs	r1, #10
 801afda:	2000      	movs	r0, #0
 801afdc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801afe0:	3b30      	subs	r3, #48	; 0x30
 801afe2:	b29c      	uxth	r4, r3
 801afe4:	2c09      	cmp	r4, #9
 801afe6:	d802      	bhi.n	801afee <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801afe8:	fb01 3000 	mla	r0, r1, r0, r3
 801afec:	e7f6      	b.n	801afdc <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801afee:	bd10      	pop	{r4, pc}

0801aff0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aff4:	b085      	sub	sp, #20
 801aff6:	f8d0 8000 	ldr.w	r8, [r0]
 801affa:	468a      	mov	sl, r1
 801affc:	461c      	mov	r4, r3
 801affe:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b002:	4681      	mov	r9, r0
 801b004:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b008:	4640      	mov	r0, r8
 801b00a:	9203      	str	r2, [sp, #12]
 801b00c:	9102      	str	r1, [sp, #8]
 801b00e:	9301      	str	r3, [sp, #4]
 801b010:	f7ff ff65 	bl	801aede <_ZN8touchgfx7Unicode6strlenEPKt>
 801b014:	9a03      	ldr	r2, [sp, #12]
 801b016:	f1ba 0f00 	cmp.w	sl, #0
 801b01a:	bf0c      	ite	eq
 801b01c:	4684      	moveq	ip, r0
 801b01e:	f100 0c01 	addne.w	ip, r0, #1
 801b022:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801b026:	8812      	ldrh	r2, [r2, #0]
 801b028:	fa1f fc8c 	uxth.w	ip, ip
 801b02c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b02e:	2a69      	cmp	r2, #105	; 0x69
 801b030:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b032:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801b034:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801b038:	d004      	beq.n	801b044 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b03a:	d844      	bhi.n	801b0c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801b03c:	2a58      	cmp	r2, #88	; 0x58
 801b03e:	d001      	beq.n	801b044 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b040:	2a64      	cmp	r2, #100	; 0x64
 801b042:	d14b      	bne.n	801b0dc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801b044:	b1a4      	cbz	r4, 801b070 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b046:	b956      	cbnz	r6, 801b05e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801b048:	2801      	cmp	r0, #1
 801b04a:	d108      	bne.n	801b05e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801b04c:	f8b8 2000 	ldrh.w	r2, [r8]
 801b050:	2a30      	cmp	r2, #48	; 0x30
 801b052:	bf02      	ittt	eq
 801b054:	f108 0202 	addeq.w	r2, r8, #2
 801b058:	4630      	moveq	r0, r6
 801b05a:	f8c9 2000 	streq.w	r2, [r9]
 801b05e:	45b4      	cmp	ip, r6
 801b060:	da3e      	bge.n	801b0e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801b062:	b2b6      	uxth	r6, r6
 801b064:	eba6 040c 	sub.w	r4, r6, ip
 801b068:	46b4      	mov	ip, r6
 801b06a:	b2a4      	uxth	r4, r4
 801b06c:	f04f 0b00 	mov.w	fp, #0
 801b070:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b074:	3a01      	subs	r2, #1
 801b076:	b169      	cbz	r1, 801b094 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b078:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b07a:	458c      	cmp	ip, r1
 801b07c:	da09      	bge.n	801b092 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801b07e:	eba1 010c 	sub.w	r1, r1, ip
 801b082:	b289      	uxth	r1, r1
 801b084:	b933      	cbnz	r3, 801b094 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b086:	f1bb 0f00 	cmp.w	fp, #0
 801b08a:	d02b      	beq.n	801b0e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801b08c:	b350      	cbz	r0, 801b0e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801b08e:	440c      	add	r4, r1
 801b090:	b2a4      	uxth	r4, r4
 801b092:	2100      	movs	r1, #0
 801b094:	682b      	ldr	r3, [r5, #0]
 801b096:	4293      	cmp	r3, r2
 801b098:	da07      	bge.n	801b0aa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801b09a:	f1ba 0f00 	cmp.w	sl, #0
 801b09e:	d004      	beq.n	801b0aa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801b0a0:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801b0a4:	682b      	ldr	r3, [r5, #0]
 801b0a6:	3301      	adds	r3, #1
 801b0a8:	602b      	str	r3, [r5, #0]
 801b0aa:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801b0ae:	b354      	cbz	r4, 801b106 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b0b0:	682e      	ldr	r6, [r5, #0]
 801b0b2:	3c01      	subs	r4, #1
 801b0b4:	42b2      	cmp	r2, r6
 801b0b6:	b2a4      	uxth	r4, r4
 801b0b8:	dd25      	ble.n	801b106 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b0ba:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801b0be:	682b      	ldr	r3, [r5, #0]
 801b0c0:	3301      	adds	r3, #1
 801b0c2:	602b      	str	r3, [r5, #0]
 801b0c4:	e7f3      	b.n	801b0ae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801b0c6:	2a73      	cmp	r2, #115	; 0x73
 801b0c8:	d003      	beq.n	801b0d2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801b0ca:	2a78      	cmp	r2, #120	; 0x78
 801b0cc:	d0ba      	beq.n	801b044 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801b0ce:	2a6f      	cmp	r2, #111	; 0x6f
 801b0d0:	e7b7      	b.n	801b042 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801b0d2:	2c00      	cmp	r4, #0
 801b0d4:	d0cc      	beq.n	801b070 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b0d6:	42b0      	cmp	r0, r6
 801b0d8:	dd00      	ble.n	801b0dc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801b0da:	b2b0      	uxth	r0, r6
 801b0dc:	2400      	movs	r4, #0
 801b0de:	e7c7      	b.n	801b070 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801b0e0:	2400      	movs	r4, #0
 801b0e2:	e7c3      	b.n	801b06c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801b0e4:	2900      	cmp	r1, #0
 801b0e6:	d0d5      	beq.n	801b094 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b0e8:	f04f 0c20 	mov.w	ip, #32
 801b0ec:	682e      	ldr	r6, [r5, #0]
 801b0ee:	2900      	cmp	r1, #0
 801b0f0:	d0d0      	beq.n	801b094 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801b0f2:	3901      	subs	r1, #1
 801b0f4:	4296      	cmp	r6, r2
 801b0f6:	b289      	uxth	r1, r1
 801b0f8:	dacb      	bge.n	801b092 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801b0fa:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801b0fe:	682b      	ldr	r3, [r5, #0]
 801b100:	3301      	adds	r3, #1
 801b102:	602b      	str	r3, [r5, #0]
 801b104:	e7f2      	b.n	801b0ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801b106:	b198      	cbz	r0, 801b130 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b108:	f8d9 3000 	ldr.w	r3, [r9]
 801b10c:	881c      	ldrh	r4, [r3, #0]
 801b10e:	b17c      	cbz	r4, 801b130 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b110:	682c      	ldr	r4, [r5, #0]
 801b112:	3801      	subs	r0, #1
 801b114:	42a2      	cmp	r2, r4
 801b116:	b280      	uxth	r0, r0
 801b118:	dd0a      	ble.n	801b130 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801b11a:	1c9c      	adds	r4, r3, #2
 801b11c:	f8c9 4000 	str.w	r4, [r9]
 801b120:	881c      	ldrh	r4, [r3, #0]
 801b122:	682b      	ldr	r3, [r5, #0]
 801b124:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801b128:	682b      	ldr	r3, [r5, #0]
 801b12a:	3301      	adds	r3, #1
 801b12c:	602b      	str	r3, [r5, #0]
 801b12e:	e7ea      	b.n	801b106 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801b130:	2620      	movs	r6, #32
 801b132:	b151      	cbz	r1, 801b14a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801b134:	6828      	ldr	r0, [r5, #0]
 801b136:	3901      	subs	r1, #1
 801b138:	4282      	cmp	r2, r0
 801b13a:	b289      	uxth	r1, r1
 801b13c:	dd05      	ble.n	801b14a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801b13e:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801b142:	682b      	ldr	r3, [r5, #0]
 801b144:	3301      	adds	r3, #1
 801b146:	602b      	str	r3, [r5, #0]
 801b148:	e7f3      	b.n	801b132 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801b14a:	b005      	add	sp, #20
 801b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b150 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801b150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b154:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b156:	4604      	mov	r4, r0
 801b158:	f04f 0801 	mov.w	r8, #1
 801b15c:	2000      	movs	r0, #0
 801b15e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801b162:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801b166:	8008      	strh	r0, [r1, #0]
 801b168:	7010      	strb	r0, [r2, #0]
 801b16a:	7018      	strb	r0, [r3, #0]
 801b16c:	f88c 0000 	strb.w	r0, [ip]
 801b170:	f88e 0000 	strb.w	r0, [lr]
 801b174:	7030      	strb	r0, [r6, #0]
 801b176:	6820      	ldr	r0, [r4, #0]
 801b178:	8800      	ldrh	r0, [r0, #0]
 801b17a:	b190      	cbz	r0, 801b1a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801b17c:	282b      	cmp	r0, #43	; 0x2b
 801b17e:	d001      	beq.n	801b184 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801b180:	2820      	cmp	r0, #32
 801b182:	d104      	bne.n	801b18e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801b184:	8008      	strh	r0, [r1, #0]
 801b186:	6820      	ldr	r0, [r4, #0]
 801b188:	3002      	adds	r0, #2
 801b18a:	6020      	str	r0, [r4, #0]
 801b18c:	e7f3      	b.n	801b176 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801b18e:	282d      	cmp	r0, #45	; 0x2d
 801b190:	d102      	bne.n	801b198 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801b192:	f882 8000 	strb.w	r8, [r2]
 801b196:	e7f6      	b.n	801b186 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801b198:	2823      	cmp	r0, #35	; 0x23
 801b19a:	d102      	bne.n	801b1a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801b19c:	f883 8000 	strb.w	r8, [r3]
 801b1a0:	e7f1      	b.n	801b186 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801b1a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b1a6:	2b09      	cmp	r3, #9
 801b1a8:	d901      	bls.n	801b1ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801b1aa:	282a      	cmp	r0, #42	; 0x2a
 801b1ac:	d114      	bne.n	801b1d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801b1ae:	2201      	movs	r2, #1
 801b1b0:	f88e 2000 	strb.w	r2, [lr]
 801b1b4:	6823      	ldr	r3, [r4, #0]
 801b1b6:	8819      	ldrh	r1, [r3, #0]
 801b1b8:	2930      	cmp	r1, #48	; 0x30
 801b1ba:	bf02      	ittt	eq
 801b1bc:	3302      	addeq	r3, #2
 801b1be:	6023      	streq	r3, [r4, #0]
 801b1c0:	f88c 2000 	strbeq.w	r2, [ip]
 801b1c4:	6820      	ldr	r0, [r4, #0]
 801b1c6:	8803      	ldrh	r3, [r0, #0]
 801b1c8:	2b2a      	cmp	r3, #42	; 0x2a
 801b1ca:	d11e      	bne.n	801b20a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801b1cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b1d0:	603b      	str	r3, [r7, #0]
 801b1d2:	6823      	ldr	r3, [r4, #0]
 801b1d4:	3302      	adds	r3, #2
 801b1d6:	6023      	str	r3, [r4, #0]
 801b1d8:	6823      	ldr	r3, [r4, #0]
 801b1da:	881b      	ldrh	r3, [r3, #0]
 801b1dc:	2b2e      	cmp	r3, #46	; 0x2e
 801b1de:	d112      	bne.n	801b206 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801b1e0:	2301      	movs	r3, #1
 801b1e2:	7033      	strb	r3, [r6, #0]
 801b1e4:	6823      	ldr	r3, [r4, #0]
 801b1e6:	1c98      	adds	r0, r3, #2
 801b1e8:	6020      	str	r0, [r4, #0]
 801b1ea:	885b      	ldrh	r3, [r3, #2]
 801b1ec:	2b2a      	cmp	r3, #42	; 0x2a
 801b1ee:	d117      	bne.n	801b220 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801b1f0:	f04f 33ff 	mov.w	r3, #4294967295
 801b1f4:	602b      	str	r3, [r5, #0]
 801b1f6:	6823      	ldr	r3, [r4, #0]
 801b1f8:	3302      	adds	r3, #2
 801b1fa:	6023      	str	r3, [r4, #0]
 801b1fc:	682b      	ldr	r3, [r5, #0]
 801b1fe:	2b06      	cmp	r3, #6
 801b200:	bfa8      	it	ge
 801b202:	2306      	movge	r3, #6
 801b204:	602b      	str	r3, [r5, #0]
 801b206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b20a:	f7ff fee2 	bl	801afd2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801b20e:	6038      	str	r0, [r7, #0]
 801b210:	6823      	ldr	r3, [r4, #0]
 801b212:	881a      	ldrh	r2, [r3, #0]
 801b214:	3a30      	subs	r2, #48	; 0x30
 801b216:	2a09      	cmp	r2, #9
 801b218:	d8de      	bhi.n	801b1d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801b21a:	3302      	adds	r3, #2
 801b21c:	6023      	str	r3, [r4, #0]
 801b21e:	e7f7      	b.n	801b210 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801b220:	f7ff fed7 	bl	801afd2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801b224:	6028      	str	r0, [r5, #0]
 801b226:	6823      	ldr	r3, [r4, #0]
 801b228:	881a      	ldrh	r2, [r3, #0]
 801b22a:	3a30      	subs	r2, #48	; 0x30
 801b22c:	2a09      	cmp	r2, #9
 801b22e:	d8e5      	bhi.n	801b1fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801b230:	3302      	adds	r3, #2
 801b232:	6023      	str	r3, [r4, #0]
 801b234:	e7f7      	b.n	801b226 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801b236 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801b236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b23a:	b0a2      	sub	sp, #136	; 0x88
 801b23c:	2500      	movs	r5, #0
 801b23e:	4606      	mov	r6, r0
 801b240:	460f      	mov	r7, r1
 801b242:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801b246:	9209      	str	r2, [sp, #36]	; 0x24
 801b248:	4629      	mov	r1, r5
 801b24a:	2242      	movs	r2, #66	; 0x42
 801b24c:	4640      	mov	r0, r8
 801b24e:	461c      	mov	r4, r3
 801b250:	950d      	str	r5, [sp, #52]	; 0x34
 801b252:	f7fe fe26 	bl	8019ea2 <_ZN8touchgfx6memsetEPvhm>
 801b256:	b30e      	cbz	r6, 801b29c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801b258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b25a:	b1f3      	cbz	r3, 801b29a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801b25c:	f107 3aff 	add.w	sl, r7, #4294967295
 801b260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b264:	8812      	ldrh	r2, [r2, #0]
 801b266:	2a00      	cmp	r2, #0
 801b268:	f000 80b3 	beq.w	801b3d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801b26c:	459a      	cmp	sl, r3
 801b26e:	f340 80b0 	ble.w	801b3d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801b272:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b278:	f8b9 2000 	ldrh.w	r2, [r9]
 801b27c:	2a00      	cmp	r2, #0
 801b27e:	d0ef      	beq.n	801b260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b280:	2a25      	cmp	r2, #37	; 0x25
 801b282:	f000 80aa 	beq.w	801b3da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801b286:	459a      	cmp	sl, r3
 801b288:	ddea      	ble.n	801b260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b28a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b28e:	f109 0202 	add.w	r2, r9, #2
 801b292:	3301      	adds	r3, #1
 801b294:	9209      	str	r2, [sp, #36]	; 0x24
 801b296:	930d      	str	r3, [sp, #52]	; 0x34
 801b298:	e7eb      	b.n	801b272 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801b29a:	8033      	strh	r3, [r6, #0]
 801b29c:	4630      	mov	r0, r6
 801b29e:	b022      	add	sp, #136	; 0x88
 801b2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2a4:	3b63      	subs	r3, #99	; 0x63
 801b2a6:	2b01      	cmp	r3, #1
 801b2a8:	f200 80df 	bhi.w	801b46a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801b2ac:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b2b0:	8813      	ldrh	r3, [r2, #0]
 801b2b2:	2b69      	cmp	r3, #105	; 0x69
 801b2b4:	d058      	beq.n	801b368 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801b2b6:	d81b      	bhi.n	801b2f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801b2b8:	2b63      	cmp	r3, #99	; 0x63
 801b2ba:	d02e      	beq.n	801b31a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801b2bc:	2b64      	cmp	r3, #100	; 0x64
 801b2be:	d053      	beq.n	801b368 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801b2c0:	2b58      	cmp	r3, #88	; 0x58
 801b2c2:	d06f      	beq.n	801b3a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801b2c4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801b2c8:	46a1      	mov	r9, r4
 801b2ca:	e02d      	b.n	801b328 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b2cc:	2b73      	cmp	r3, #115	; 0x73
 801b2ce:	d0ed      	beq.n	801b2ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b2d0:	d803      	bhi.n	801b2da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801b2d2:	2b6f      	cmp	r3, #111	; 0x6f
 801b2d4:	f040 80c9 	bne.w	801b46a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801b2d8:	e7e8      	b.n	801b2ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b2da:	2b75      	cmp	r3, #117	; 0x75
 801b2dc:	d0e6      	beq.n	801b2ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b2de:	2b78      	cmp	r3, #120	; 0x78
 801b2e0:	e7f8      	b.n	801b2d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801b2e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b2e4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2ea:	3302      	adds	r3, #2
 801b2ec:	9309      	str	r3, [sp, #36]	; 0x24
 801b2ee:	e7b7      	b.n	801b260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b2f0:	2b73      	cmp	r3, #115	; 0x73
 801b2f2:	d034      	beq.n	801b35e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801b2f4:	d807      	bhi.n	801b306 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801b2f6:	2b6f      	cmp	r3, #111	; 0x6f
 801b2f8:	d1e4      	bne.n	801b2c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801b2fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b2fc:	f104 0904 	add.w	r9, r4, #4
 801b300:	2308      	movs	r3, #8
 801b302:	1aba      	subs	r2, r7, r2
 801b304:	e048      	b.n	801b398 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801b306:	2b75      	cmp	r3, #117	; 0x75
 801b308:	d041      	beq.n	801b38e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801b30a:	2b78      	cmp	r3, #120	; 0x78
 801b30c:	d1da      	bne.n	801b2c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801b30e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b310:	f104 0904 	add.w	r9, r4, #4
 801b314:	2310      	movs	r3, #16
 801b316:	1aba      	subs	r2, r7, r2
 801b318:	e03e      	b.n	801b398 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801b31a:	7823      	ldrb	r3, [r4, #0]
 801b31c:	f104 0904 	add.w	r9, r4, #4
 801b320:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b324:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b328:	aa0d      	add	r2, sp, #52	; 0x34
 801b32a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b32e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b332:	a810      	add	r0, sp, #64	; 0x40
 801b334:	9205      	str	r2, [sp, #20]
 801b336:	464c      	mov	r4, r9
 801b338:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801b33c:	9204      	str	r2, [sp, #16]
 801b33e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b340:	9203      	str	r2, [sp, #12]
 801b342:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801b346:	9202      	str	r2, [sp, #8]
 801b348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b34a:	9201      	str	r2, [sp, #4]
 801b34c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801b350:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801b354:	9200      	str	r2, [sp, #0]
 801b356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b358:	f7ff fe4a 	bl	801aff0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801b35c:	e7c4      	b.n	801b2e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801b35e:	f104 0904 	add.w	r9, r4, #4
 801b362:	6823      	ldr	r3, [r4, #0]
 801b364:	9310      	str	r3, [sp, #64]	; 0x40
 801b366:	e7df      	b.n	801b328 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b36a:	230a      	movs	r3, #10
 801b36c:	4641      	mov	r1, r8
 801b36e:	6820      	ldr	r0, [r4, #0]
 801b370:	1aba      	subs	r2, r7, r2
 801b372:	f104 0904 	add.w	r9, r4, #4
 801b376:	b292      	uxth	r2, r2
 801b378:	f7ff fdf9 	bl	801af6e <_ZN8touchgfx7Unicode4itoaElPtti>
 801b37c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b380:	2b2d      	cmp	r3, #45	; 0x2d
 801b382:	d1d1      	bne.n	801b328 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b384:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b388:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b38a:	3302      	adds	r3, #2
 801b38c:	e7ea      	b.n	801b364 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801b38e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b390:	f104 0904 	add.w	r9, r4, #4
 801b394:	230a      	movs	r3, #10
 801b396:	1aba      	subs	r2, r7, r2
 801b398:	b292      	uxth	r2, r2
 801b39a:	4641      	mov	r1, r8
 801b39c:	6820      	ldr	r0, [r4, #0]
 801b39e:	f7ff fdc8 	bl	801af32 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b3a2:	e7c1      	b.n	801b328 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b3a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b3a6:	2310      	movs	r3, #16
 801b3a8:	4641      	mov	r1, r8
 801b3aa:	6820      	ldr	r0, [r4, #0]
 801b3ac:	1aba      	subs	r2, r7, r2
 801b3ae:	f104 0904 	add.w	r9, r4, #4
 801b3b2:	b292      	uxth	r2, r2
 801b3b4:	f7ff fdbd 	bl	801af32 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b3b8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b3bc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d0b1      	beq.n	801b328 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801b3c4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b3c8:	2919      	cmp	r1, #25
 801b3ca:	d8f7      	bhi.n	801b3bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801b3cc:	3b20      	subs	r3, #32
 801b3ce:	8013      	strh	r3, [r2, #0]
 801b3d0:	e7f4      	b.n	801b3bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b3d8:	e760      	b.n	801b29c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801b3da:	459a      	cmp	sl, r3
 801b3dc:	f77f af40 	ble.w	801b260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801b3e0:	f109 0302 	add.w	r3, r9, #2
 801b3e4:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801b3e8:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801b3ec:	a809      	add	r0, sp, #36	; 0x24
 801b3ee:	9309      	str	r3, [sp, #36]	; 0x24
 801b3f0:	ab0f      	add	r3, sp, #60	; 0x3c
 801b3f2:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801b3f6:	9304      	str	r3, [sp, #16]
 801b3f8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801b3fc:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801b400:	9303      	str	r3, [sp, #12]
 801b402:	ab0e      	add	r3, sp, #56	; 0x38
 801b404:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801b408:	9302      	str	r3, [sp, #8]
 801b40a:	ab0c      	add	r3, sp, #48	; 0x30
 801b40c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801b410:	9301      	str	r3, [sp, #4]
 801b412:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b416:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801b41a:	9300      	str	r3, [sp, #0]
 801b41c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801b420:	950e      	str	r5, [sp, #56]	; 0x38
 801b422:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801b426:	950f      	str	r5, [sp, #60]	; 0x3c
 801b428:	f7ff fe92 	bl	801b150 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801b42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b430:	2b00      	cmp	r3, #0
 801b432:	bfbf      	itttt	lt
 801b434:	6823      	ldrlt	r3, [r4, #0]
 801b436:	3404      	addlt	r4, #4
 801b438:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b43c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b43e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b440:	2b00      	cmp	r3, #0
 801b442:	bfbf      	itttt	lt
 801b444:	6823      	ldrlt	r3, [r4, #0]
 801b446:	3404      	addlt	r4, #4
 801b448:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b44c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801b44e:	8813      	ldrh	r3, [r2, #0]
 801b450:	2b69      	cmp	r3, #105	; 0x69
 801b452:	f43f af2b 	beq.w	801b2ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b456:	f63f af39 	bhi.w	801b2cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801b45a:	2b58      	cmp	r3, #88	; 0x58
 801b45c:	f43f af26 	beq.w	801b2ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801b460:	f63f af20 	bhi.w	801b2a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801b464:	2b25      	cmp	r3, #37	; 0x25
 801b466:	f43f af3c 	beq.w	801b2e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801b46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b46c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b470:	f8b9 2000 	ldrh.w	r2, [r9]
 801b474:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b478:	3301      	adds	r3, #1
 801b47a:	930d      	str	r3, [sp, #52]	; 0x34
 801b47c:	e734      	b.n	801b2e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801b480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b480:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b482:	4605      	mov	r5, r0
 801b484:	b0a1      	sub	sp, #132	; 0x84
 801b486:	4610      	mov	r0, r2
 801b488:	460e      	mov	r6, r1
 801b48a:	4614      	mov	r4, r2
 801b48c:	461f      	mov	r7, r3
 801b48e:	f7ff fd33 	bl	801aef8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801b492:	283f      	cmp	r0, #63	; 0x3f
 801b494:	d906      	bls.n	801b4a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801b496:	4b0a      	ldr	r3, [pc, #40]	; (801b4c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801b498:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801b49c:	4a09      	ldr	r2, [pc, #36]	; (801b4c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801b49e:	480a      	ldr	r0, [pc, #40]	; (801b4c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801b4a0:	f009 ffac 	bl	80253fc <__assert_func>
 801b4a4:	4621      	mov	r1, r4
 801b4a6:	2240      	movs	r2, #64	; 0x40
 801b4a8:	4668      	mov	r0, sp
 801b4aa:	f7ff fd31 	bl	801af10 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b4ae:	463b      	mov	r3, r7
 801b4b0:	466a      	mov	r2, sp
 801b4b2:	4631      	mov	r1, r6
 801b4b4:	4628      	mov	r0, r5
 801b4b6:	f7ff febe 	bl	801b236 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801b4ba:	b021      	add	sp, #132	; 0x84
 801b4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4be:	bf00      	nop
 801b4c0:	08029811 	.word	0x08029811
 801b4c4:	080298e3 	.word	0x080298e3
 801b4c8:	0802982e 	.word	0x0802982e

0801b4cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b4cc:	b40c      	push	{r2, r3}
 801b4ce:	b507      	push	{r0, r1, r2, lr}
 801b4d0:	ab04      	add	r3, sp, #16
 801b4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4d6:	9301      	str	r3, [sp, #4]
 801b4d8:	f7ff ffd2 	bl	801b480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b4dc:	b003      	add	sp, #12
 801b4de:	f85d eb04 	ldr.w	lr, [sp], #4
 801b4e2:	b002      	add	sp, #8
 801b4e4:	4770      	bx	lr
	...

0801b4e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ec:	b0c3      	sub	sp, #268	; 0x10c
 801b4ee:	2400      	movs	r4, #0
 801b4f0:	4606      	mov	r6, r0
 801b4f2:	4689      	mov	r9, r1
 801b4f4:	af10      	add	r7, sp, #64	; 0x40
 801b4f6:	9209      	str	r2, [sp, #36]	; 0x24
 801b4f8:	4621      	mov	r1, r4
 801b4fa:	22c8      	movs	r2, #200	; 0xc8
 801b4fc:	4638      	mov	r0, r7
 801b4fe:	469a      	mov	sl, r3
 801b500:	940c      	str	r4, [sp, #48]	; 0x30
 801b502:	f7fe fcce 	bl	8019ea2 <_ZN8touchgfx6memsetEPvhm>
 801b506:	b116      	cbz	r6, 801b50e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801b508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b50a:	b923      	cbnz	r3, 801b516 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801b50c:	8033      	strh	r3, [r6, #0]
 801b50e:	4630      	mov	r0, r6
 801b510:	b043      	add	sp, #268	; 0x10c
 801b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b516:	f109 3bff 	add.w	fp, r9, #4294967295
 801b51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b51c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b51e:	8812      	ldrh	r2, [r2, #0]
 801b520:	2a00      	cmp	r2, #0
 801b522:	f000 80d1 	beq.w	801b6c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b526:	459b      	cmp	fp, r3
 801b528:	f340 80ce 	ble.w	801b6c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801b52c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801b52e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b530:	882a      	ldrh	r2, [r5, #0]
 801b532:	2a00      	cmp	r2, #0
 801b534:	d0f1      	beq.n	801b51a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b536:	2a25      	cmp	r2, #37	; 0x25
 801b538:	f000 80ca 	beq.w	801b6d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801b53c:	459b      	cmp	fp, r3
 801b53e:	ddec      	ble.n	801b51a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b540:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b544:	3502      	adds	r5, #2
 801b546:	3301      	adds	r3, #1
 801b548:	9509      	str	r5, [sp, #36]	; 0x24
 801b54a:	930c      	str	r3, [sp, #48]	; 0x30
 801b54c:	e7ee      	b.n	801b52c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801b54e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b552:	3202      	adds	r2, #2
 801b554:	920c      	str	r2, [sp, #48]	; 0x30
 801b556:	e0ac      	b.n	801b6b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801b558:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b55c:	970f      	str	r7, [sp, #60]	; 0x3c
 801b55e:	3401      	adds	r4, #1
 801b560:	edd3 7a00 	vldr	s15, [r3]
 801b564:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b568:	b923      	cbnz	r3, 801b574 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801b56a:	2301      	movs	r3, #1
 801b56c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b570:	2303      	movs	r3, #3
 801b572:	930e      	str	r3, [sp, #56]	; 0x38
 801b574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b578:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b57a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801b57e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801b77c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b586:	bf42      	ittt	mi
 801b588:	232d      	movmi	r3, #45	; 0x2d
 801b58a:	eef1 7a67 	vnegmi.f32	s15, s15
 801b58e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801b592:	2300      	movs	r3, #0
 801b594:	4298      	cmp	r0, r3
 801b596:	dd03      	ble.n	801b5a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801b598:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b59c:	3301      	adds	r3, #1
 801b59e:	e7f9      	b.n	801b594 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801b5a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b5a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b5a8:	eeb0 7a67 	vmov.f32	s14, s15
 801b5ac:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5b4:	da26      	bge.n	801b604 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801b5b6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801b5ba:	eba9 0202 	sub.w	r2, r9, r2
 801b5be:	2100      	movs	r1, #0
 801b5c0:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b5c4:	b28d      	uxth	r5, r1
 801b5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ca:	db21      	blt.n	801b610 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b5cc:	1a53      	subs	r3, r2, r1
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	dd1e      	ble.n	801b610 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801b5d2:	2963      	cmp	r1, #99	; 0x63
 801b5d4:	d01b      	beq.n	801b60e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801b5d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b5da:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801b5de:	ee17 3a10 	vmov	r3, s14
 801b5e2:	2b09      	cmp	r3, #9
 801b5e4:	bfa8      	it	ge
 801b5e6:	2309      	movge	r3, #9
 801b5e8:	ee07 3a10 	vmov	s14, r3
 801b5ec:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801b5f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b5f4:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801b5f8:	3101      	adds	r1, #1
 801b5fa:	eee7 7a66 	vfms.f32	s15, s14, s13
 801b5fe:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801b602:	e7dd      	b.n	801b5c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801b604:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b608:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801b60c:	e7ce      	b.n	801b5ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801b60e:	460d      	mov	r5, r1
 801b610:	2a63      	cmp	r2, #99	; 0x63
 801b612:	bfd4      	ite	le
 801b614:	ebc5 0202 	rsble	r2, r5, r2
 801b618:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801b61c:	2a00      	cmp	r2, #0
 801b61e:	dd4e      	ble.n	801b6be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801b620:	4603      	mov	r3, r0
 801b622:	f04f 0801 	mov.w	r8, #1
 801b626:	2b00      	cmp	r3, #0
 801b628:	dd0e      	ble.n	801b648 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801b62a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b62e:	210a      	movs	r1, #10
 801b630:	3b01      	subs	r3, #1
 801b632:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b636:	ee17 ca10 	vmov	ip, s14
 801b63a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b63e:	fb01 c808 	mla	r8, r1, r8, ip
 801b642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b646:	e7ee      	b.n	801b626 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801b648:	2800      	cmp	r0, #0
 801b64a:	f100 33ff 	add.w	r3, r0, #4294967295
 801b64e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801b652:	bfac      	ite	ge
 801b654:	1a18      	subge	r0, r3, r0
 801b656:	4618      	movlt	r0, r3
 801b658:	b292      	uxth	r2, r2
 801b65a:	230a      	movs	r3, #10
 801b65c:	900e      	str	r0, [sp, #56]	; 0x38
 801b65e:	1979      	adds	r1, r7, r5
 801b660:	4640      	mov	r0, r8
 801b662:	f7ff fc84 	bl	801af6e <_ZN8touchgfx7Unicode4itoaElPtti>
 801b666:	f1b8 0f01 	cmp.w	r8, #1
 801b66a:	dc26      	bgt.n	801b6ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801b66c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801b670:	2b00      	cmp	r3, #0
 801b672:	bf0c      	ite	eq
 801b674:	2300      	moveq	r3, #0
 801b676:	232e      	movne	r3, #46	; 0x2e
 801b678:	aa42      	add	r2, sp, #264	; 0x108
 801b67a:	4415      	add	r5, r2
 801b67c:	aa0c      	add	r2, sp, #48	; 0x30
 801b67e:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801b682:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b686:	a80f      	add	r0, sp, #60	; 0x3c
 801b688:	9205      	str	r2, [sp, #20]
 801b68a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801b68e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801b692:	9204      	str	r2, [sp, #16]
 801b694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b696:	9203      	str	r2, [sp, #12]
 801b698:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801b69c:	9202      	str	r2, [sp, #8]
 801b69e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b6a0:	9201      	str	r2, [sp, #4]
 801b6a2:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801b6a6:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801b6aa:	9200      	str	r2, [sp, #0]
 801b6ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b6ae:	f7ff fc9f 	bl	801aff0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801b6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6b4:	3302      	adds	r3, #2
 801b6b6:	9309      	str	r3, [sp, #36]	; 0x24
 801b6b8:	e72f      	b.n	801b51a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b6ba:	232e      	movs	r3, #46	; 0x2e
 801b6bc:	e7dc      	b.n	801b678 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801b6be:	ab42      	add	r3, sp, #264	; 0x108
 801b6c0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	e7d9      	b.n	801b67c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801b6c8:	2200      	movs	r2, #0
 801b6ca:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801b6ce:	e71e      	b.n	801b50e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801b6d0:	459b      	cmp	fp, r3
 801b6d2:	f77f af22 	ble.w	801b51a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801b6d6:	2300      	movs	r3, #0
 801b6d8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801b6dc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801b6e0:	a809      	add	r0, sp, #36	; 0x24
 801b6e2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b6e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b6ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b6ee:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b6f2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801b6f6:	930d      	str	r3, [sp, #52]	; 0x34
 801b6f8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801b6fc:	930e      	str	r3, [sp, #56]	; 0x38
 801b6fe:	1cab      	adds	r3, r5, #2
 801b700:	9309      	str	r3, [sp, #36]	; 0x24
 801b702:	ab0e      	add	r3, sp, #56	; 0x38
 801b704:	9304      	str	r3, [sp, #16]
 801b706:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b70a:	9303      	str	r3, [sp, #12]
 801b70c:	ab0d      	add	r3, sp, #52	; 0x34
 801b70e:	9302      	str	r3, [sp, #8]
 801b710:	ab0b      	add	r3, sp, #44	; 0x2c
 801b712:	9301      	str	r3, [sp, #4]
 801b714:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801b718:	9300      	str	r3, [sp, #0]
 801b71a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801b71e:	f7ff fd17 	bl	801b150 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801b722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b724:	2b00      	cmp	r3, #0
 801b726:	da0b      	bge.n	801b740 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801b728:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b72c:	3401      	adds	r4, #1
 801b72e:	edd3 7a00 	vldr	s15, [r3]
 801b732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b736:	ee17 3a90 	vmov	r3, s15
 801b73a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b73e:	930d      	str	r3, [sp, #52]	; 0x34
 801b740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b742:	2b00      	cmp	r3, #0
 801b744:	da0b      	bge.n	801b75e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801b746:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801b74a:	3401      	adds	r4, #1
 801b74c:	edd3 7a00 	vldr	s15, [r3]
 801b750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b754:	ee17 3a90 	vmov	r3, s15
 801b758:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b75c:	930e      	str	r3, [sp, #56]	; 0x38
 801b75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b762:	881b      	ldrh	r3, [r3, #0]
 801b764:	2b25      	cmp	r3, #37	; 0x25
 801b766:	f43f aef2 	beq.w	801b54e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801b76a:	2b66      	cmp	r3, #102	; 0x66
 801b76c:	f43f aef4 	beq.w	801b558 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801b770:	9509      	str	r5, [sp, #36]	; 0x24
 801b772:	882b      	ldrh	r3, [r5, #0]
 801b774:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b778:	3201      	adds	r2, #1
 801b77a:	e6eb      	b.n	801b554 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801b77c:	3f000002 	.word	0x3f000002

0801b780 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801b780:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b782:	4605      	mov	r5, r0
 801b784:	b0a1      	sub	sp, #132	; 0x84
 801b786:	4610      	mov	r0, r2
 801b788:	460e      	mov	r6, r1
 801b78a:	4614      	mov	r4, r2
 801b78c:	461f      	mov	r7, r3
 801b78e:	f7ff fbb3 	bl	801aef8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801b792:	283f      	cmp	r0, #63	; 0x3f
 801b794:	d906      	bls.n	801b7a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801b796:	4b0a      	ldr	r3, [pc, #40]	; (801b7c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801b798:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801b79c:	4a09      	ldr	r2, [pc, #36]	; (801b7c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801b79e:	480a      	ldr	r0, [pc, #40]	; (801b7c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801b7a0:	f009 fe2c 	bl	80253fc <__assert_func>
 801b7a4:	4621      	mov	r1, r4
 801b7a6:	2240      	movs	r2, #64	; 0x40
 801b7a8:	4668      	mov	r0, sp
 801b7aa:	f7ff fbb1 	bl	801af10 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b7ae:	463b      	mov	r3, r7
 801b7b0:	466a      	mov	r2, sp
 801b7b2:	4631      	mov	r1, r6
 801b7b4:	4628      	mov	r0, r5
 801b7b6:	f7ff fe97 	bl	801b4e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801b7ba:	b021      	add	sp, #132	; 0x84
 801b7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7be:	bf00      	nop
 801b7c0:	08029811 	.word	0x08029811
 801b7c4:	08029854 	.word	0x08029854
 801b7c8:	0802982e 	.word	0x0802982e

0801b7cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b7cc:	4b01      	ldr	r3, [pc, #4]	; (801b7d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b7ce:	6018      	str	r0, [r3, #0]
 801b7d0:	4770      	bx	lr
 801b7d2:	bf00      	nop
 801b7d4:	2000c604 	.word	0x2000c604

0801b7d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b7d8:	4b07      	ldr	r3, [pc, #28]	; (801b7f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b7da:	881a      	ldrh	r2, [r3, #0]
 801b7dc:	4282      	cmp	r2, r0
 801b7de:	d809      	bhi.n	801b7f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b7e0:	4b06      	ldr	r3, [pc, #24]	; (801b7fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801b7e2:	881b      	ldrh	r3, [r3, #0]
 801b7e4:	4413      	add	r3, r2
 801b7e6:	4298      	cmp	r0, r3
 801b7e8:	da04      	bge.n	801b7f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b7ea:	4b05      	ldr	r3, [pc, #20]	; (801b800 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b7f2:	4770      	bx	lr
 801b7f4:	2000      	movs	r0, #0
 801b7f6:	4770      	bx	lr
 801b7f8:	2000c624 	.word	0x2000c624
 801b7fc:	2000c628 	.word	0x2000c628
 801b800:	2000c608 	.word	0x2000c608

0801b804 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b808:	4d26      	ldr	r5, [pc, #152]	; (801b8a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b80a:	682b      	ldr	r3, [r5, #0]
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d046      	beq.n	801b89e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b810:	4a25      	ldr	r2, [pc, #148]	; (801b8a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b812:	4f26      	ldr	r7, [pc, #152]	; (801b8ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b814:	8810      	ldrh	r0, [r2, #0]
 801b816:	883c      	ldrh	r4, [r7, #0]
 801b818:	4e25      	ldr	r6, [pc, #148]	; (801b8b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b81a:	4420      	add	r0, r4
 801b81c:	1c42      	adds	r2, r0, #1
 801b81e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801b822:	f022 0201 	bic.w	r2, r2, #1
 801b826:	0412      	lsls	r2, r2, #16
 801b828:	0c12      	lsrs	r2, r2, #16
 801b82a:	0051      	lsls	r1, r2, #1
 801b82c:	220e      	movs	r2, #14
 801b82e:	eb08 0e01 	add.w	lr, r8, r1
 801b832:	fb02 fc04 	mul.w	ip, r2, r4
 801b836:	eb03 0208 	add.w	r2, r3, r8
 801b83a:	4c1e      	ldr	r4, [pc, #120]	; (801b8b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b83c:	6022      	str	r2, [r4, #0]
 801b83e:	eb03 020e 	add.w	r2, r3, lr
 801b842:	44e6      	add	lr, ip
 801b844:	6032      	str	r2, [r6, #0]
 801b846:	4473      	add	r3, lr
 801b848:	4a1b      	ldr	r2, [pc, #108]	; (801b8b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b84a:	6013      	str	r3, [r2, #0]
 801b84c:	2300      	movs	r3, #0
 801b84e:	4a1b      	ldr	r2, [pc, #108]	; (801b8bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b850:	8013      	strh	r3, [r2, #0]
 801b852:	4a1b      	ldr	r2, [pc, #108]	; (801b8c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b854:	6812      	ldr	r2, [r2, #0]
 801b856:	eba2 0208 	sub.w	r2, r2, r8
 801b85a:	1a52      	subs	r2, r2, r1
 801b85c:	4919      	ldr	r1, [pc, #100]	; (801b8c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b85e:	eba2 020c 	sub.w	r2, r2, ip
 801b862:	469c      	mov	ip, r3
 801b864:	600a      	str	r2, [r1, #0]
 801b866:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b86a:	4a17      	ldr	r2, [pc, #92]	; (801b8c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b86c:	8013      	strh	r3, [r2, #0]
 801b86e:	4283      	cmp	r3, r0
 801b870:	d10d      	bne.n	801b88e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801b872:	883d      	ldrh	r5, [r7, #0]
 801b874:	2300      	movs	r3, #0
 801b876:	6830      	ldr	r0, [r6, #0]
 801b878:	240e      	movs	r4, #14
 801b87a:	429d      	cmp	r5, r3
 801b87c:	d90f      	bls.n	801b89e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b87e:	fb04 0203 	mla	r2, r4, r3, r0
 801b882:	3301      	adds	r3, #1
 801b884:	7b11      	ldrb	r1, [r2, #12]
 801b886:	f36f 1145 	bfc	r1, #5, #1
 801b88a:	7311      	strb	r1, [r2, #12]
 801b88c:	e7f5      	b.n	801b87a <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801b88e:	682a      	ldr	r2, [r5, #0]
 801b890:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b894:	6822      	ldr	r2, [r4, #0]
 801b896:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b89a:	3301      	adds	r3, #1
 801b89c:	e7e7      	b.n	801b86e <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801b89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8a2:	bf00      	nop
 801b8a4:	2000c608 	.word	0x2000c608
 801b8a8:	2000c624 	.word	0x2000c624
 801b8ac:	2000c628 	.word	0x2000c628
 801b8b0:	2000c60c 	.word	0x2000c60c
 801b8b4:	2000c61c 	.word	0x2000c61c
 801b8b8:	2000c614 	.word	0x2000c614
 801b8bc:	2000c626 	.word	0x2000c626
 801b8c0:	2000c610 	.word	0x2000c610
 801b8c4:	2000c620 	.word	0x2000c620
 801b8c8:	2000c618 	.word	0x2000c618

0801b8cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b8cc:	4b10      	ldr	r3, [pc, #64]	; (801b910 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b8ce:	b510      	push	{r4, lr}
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	b9db      	cbnz	r3, 801b90c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b8d4:	b1d1      	cbz	r1, 801b90c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b8d6:	4b0f      	ldr	r3, [pc, #60]	; (801b914 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b8d8:	240e      	movs	r4, #14
 801b8da:	801a      	strh	r2, [r3, #0]
 801b8dc:	b292      	uxth	r2, r2
 801b8de:	4b0e      	ldr	r3, [pc, #56]	; (801b918 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b8e0:	881b      	ldrh	r3, [r3, #0]
 801b8e2:	4413      	add	r3, r2
 801b8e4:	4362      	muls	r2, r4
 801b8e6:	2406      	movs	r4, #6
 801b8e8:	fb04 2203 	mla	r2, r4, r3, r2
 801b8ec:	428a      	cmp	r2, r1
 801b8ee:	d305      	bcc.n	801b8fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b8f0:	4b0a      	ldr	r3, [pc, #40]	; (801b91c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b8f2:	2137      	movs	r1, #55	; 0x37
 801b8f4:	4a0a      	ldr	r2, [pc, #40]	; (801b920 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b8f6:	480b      	ldr	r0, [pc, #44]	; (801b924 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b8f8:	f009 fd80 	bl	80253fc <__assert_func>
 801b8fc:	4b0a      	ldr	r3, [pc, #40]	; (801b928 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b8fe:	6019      	str	r1, [r3, #0]
 801b900:	4b0a      	ldr	r3, [pc, #40]	; (801b92c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b902:	6018      	str	r0, [r3, #0]
 801b904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b908:	f7ff bf7c 	b.w	801b804 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b90c:	bd10      	pop	{r4, pc}
 801b90e:	bf00      	nop
 801b910:	2000c614 	.word	0x2000c614
 801b914:	2000c628 	.word	0x2000c628
 801b918:	2000c624 	.word	0x2000c624
 801b91c:	080299c5 	.word	0x080299c5
 801b920:	08029a1e 	.word	0x08029a1e
 801b924:	080299a0 	.word	0x080299a0
 801b928:	2000c610 	.word	0x2000c610
 801b92c:	2000c608 	.word	0x2000c608

0801b930 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b930:	b470      	push	{r4, r5, r6}
 801b932:	4c07      	ldr	r4, [pc, #28]	; (801b950 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b934:	4605      	mov	r5, r0
 801b936:	4610      	mov	r0, r2
 801b938:	9a03      	ldr	r2, [sp, #12]
 801b93a:	6826      	ldr	r6, [r4, #0]
 801b93c:	b936      	cbnz	r6, 801b94c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b93e:	6025      	str	r5, [r4, #0]
 801b940:	4c04      	ldr	r4, [pc, #16]	; (801b954 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b942:	8021      	strh	r1, [r4, #0]
 801b944:	4619      	mov	r1, r3
 801b946:	bc70      	pop	{r4, r5, r6}
 801b948:	f7ff bfc0 	b.w	801b8cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b94c:	bc70      	pop	{r4, r5, r6}
 801b94e:	4770      	bx	lr
 801b950:	2000c62c 	.word	0x2000c62c
 801b954:	2000c624 	.word	0x2000c624

0801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b958:	b508      	push	{r3, lr}
 801b95a:	4b14      	ldr	r3, [pc, #80]	; (801b9ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b95c:	6819      	ldr	r1, [r3, #0]
 801b95e:	b931      	cbnz	r1, 801b96e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b960:	4b13      	ldr	r3, [pc, #76]	; (801b9b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b962:	f240 21e6 	movw	r1, #742	; 0x2e6
 801b966:	4a13      	ldr	r2, [pc, #76]	; (801b9b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b968:	4813      	ldr	r0, [pc, #76]	; (801b9b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b96a:	f009 fd47 	bl	80253fc <__assert_func>
 801b96e:	4a13      	ldr	r2, [pc, #76]	; (801b9bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b970:	8803      	ldrh	r3, [r0, #0]
 801b972:	8812      	ldrh	r2, [r2, #0]
 801b974:	4293      	cmp	r3, r2
 801b976:	d204      	bcs.n	801b982 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b978:	2214      	movs	r2, #20
 801b97a:	fb02 1303 	mla	r3, r2, r3, r1
 801b97e:	8918      	ldrh	r0, [r3, #8]
 801b980:	bd08      	pop	{r3, pc}
 801b982:	490f      	ldr	r1, [pc, #60]	; (801b9c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b984:	8809      	ldrh	r1, [r1, #0]
 801b986:	4411      	add	r1, r2
 801b988:	428b      	cmp	r3, r1
 801b98a:	da06      	bge.n	801b99a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b98c:	1a9b      	subs	r3, r3, r2
 801b98e:	4a0d      	ldr	r2, [pc, #52]	; (801b9c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b990:	210e      	movs	r1, #14
 801b992:	6812      	ldr	r2, [r2, #0]
 801b994:	fb01 2303 	mla	r3, r1, r3, r2
 801b998:	e7f1      	b.n	801b97e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b99a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b99e:	4293      	cmp	r3, r2
 801b9a0:	bf0a      	itet	eq
 801b9a2:	4b09      	ldreq	r3, [pc, #36]	; (801b9c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b9a4:	2000      	movne	r0, #0
 801b9a6:	8818      	ldrheq	r0, [r3, #0]
 801b9a8:	e7ea      	b.n	801b980 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b9aa:	bf00      	nop
 801b9ac:	2000c62c 	.word	0x2000c62c
 801b9b0:	08027978 	.word	0x08027978
 801b9b4:	08029acb 	.word	0x08029acb
 801b9b8:	080299a0 	.word	0x080299a0
 801b9bc:	2000c624 	.word	0x2000c624
 801b9c0:	2000c628 	.word	0x2000c628
 801b9c4:	2000c60c 	.word	0x2000c60c
 801b9c8:	2000c558 	.word	0x2000c558

0801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b9cc:	b508      	push	{r3, lr}
 801b9ce:	4b14      	ldr	r3, [pc, #80]	; (801ba20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b9d0:	6819      	ldr	r1, [r3, #0]
 801b9d2:	b931      	cbnz	r1, 801b9e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b9d4:	4b13      	ldr	r3, [pc, #76]	; (801ba24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b9d6:	f240 21fa 	movw	r1, #762	; 0x2fa
 801b9da:	4a13      	ldr	r2, [pc, #76]	; (801ba28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b9dc:	4813      	ldr	r0, [pc, #76]	; (801ba2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b9de:	f009 fd0d 	bl	80253fc <__assert_func>
 801b9e2:	4a13      	ldr	r2, [pc, #76]	; (801ba30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b9e4:	8803      	ldrh	r3, [r0, #0]
 801b9e6:	8812      	ldrh	r2, [r2, #0]
 801b9e8:	4293      	cmp	r3, r2
 801b9ea:	d204      	bcs.n	801b9f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b9ec:	2214      	movs	r2, #20
 801b9ee:	fb02 1303 	mla	r3, r2, r3, r1
 801b9f2:	8958      	ldrh	r0, [r3, #10]
 801b9f4:	bd08      	pop	{r3, pc}
 801b9f6:	490f      	ldr	r1, [pc, #60]	; (801ba34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b9f8:	8809      	ldrh	r1, [r1, #0]
 801b9fa:	4411      	add	r1, r2
 801b9fc:	428b      	cmp	r3, r1
 801b9fe:	da06      	bge.n	801ba0e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ba00:	1a9b      	subs	r3, r3, r2
 801ba02:	4a0d      	ldr	r2, [pc, #52]	; (801ba38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ba04:	210e      	movs	r1, #14
 801ba06:	6812      	ldr	r2, [r2, #0]
 801ba08:	fb01 2303 	mla	r3, r1, r3, r2
 801ba0c:	e7f1      	b.n	801b9f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ba0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ba12:	4293      	cmp	r3, r2
 801ba14:	bf0a      	itet	eq
 801ba16:	4b09      	ldreq	r3, [pc, #36]	; (801ba3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ba18:	2000      	movne	r0, #0
 801ba1a:	8818      	ldrheq	r0, [r3, #0]
 801ba1c:	e7ea      	b.n	801b9f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ba1e:	bf00      	nop
 801ba20:	2000c62c 	.word	0x2000c62c
 801ba24:	08027978 	.word	0x08027978
 801ba28:	08029af7 	.word	0x08029af7
 801ba2c:	080299a0 	.word	0x080299a0
 801ba30:	2000c624 	.word	0x2000c624
 801ba34:	2000c628 	.word	0x2000c628
 801ba38:	2000c60c 	.word	0x2000c60c
 801ba3c:	2000c55a 	.word	0x2000c55a

0801ba40 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ba40:	4b23      	ldr	r3, [pc, #140]	; (801bad0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ba42:	b510      	push	{r4, lr}
 801ba44:	681c      	ldr	r4, [r3, #0]
 801ba46:	b934      	cbnz	r4, 801ba56 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ba48:	4b22      	ldr	r3, [pc, #136]	; (801bad4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ba4a:	f240 310e 	movw	r1, #782	; 0x30e
 801ba4e:	4a22      	ldr	r2, [pc, #136]	; (801bad8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ba50:	4822      	ldr	r0, [pc, #136]	; (801badc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ba52:	f009 fcd3 	bl	80253fc <__assert_func>
 801ba56:	4a22      	ldr	r2, [pc, #136]	; (801bae0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ba58:	880b      	ldrh	r3, [r1, #0]
 801ba5a:	8812      	ldrh	r2, [r2, #0]
 801ba5c:	4293      	cmp	r3, r2
 801ba5e:	d211      	bcs.n	801ba84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ba60:	2214      	movs	r2, #20
 801ba62:	fb02 4303 	mla	r3, r2, r3, r4
 801ba66:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ba6a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ba6e:	8a1a      	ldrh	r2, [r3, #16]
 801ba70:	8a5b      	ldrh	r3, [r3, #18]
 801ba72:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ba76:	8004      	strh	r4, [r0, #0]
 801ba78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ba7c:	8041      	strh	r1, [r0, #2]
 801ba7e:	8082      	strh	r2, [r0, #4]
 801ba80:	80c3      	strh	r3, [r0, #6]
 801ba82:	e00e      	b.n	801baa2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ba84:	4917      	ldr	r1, [pc, #92]	; (801bae4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ba86:	8809      	ldrh	r1, [r1, #0]
 801ba88:	4411      	add	r1, r2
 801ba8a:	428b      	cmp	r3, r1
 801ba8c:	da0a      	bge.n	801baa4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ba8e:	1a9b      	subs	r3, r3, r2
 801ba90:	4a15      	ldr	r2, [pc, #84]	; (801bae8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ba92:	210e      	movs	r1, #14
 801ba94:	6812      	ldr	r2, [r2, #0]
 801ba96:	fb01 2303 	mla	r3, r1, r3, r2
 801ba9a:	681a      	ldr	r2, [r3, #0]
 801ba9c:	6002      	str	r2, [r0, #0]
 801ba9e:	685a      	ldr	r2, [r3, #4]
 801baa0:	6042      	str	r2, [r0, #4]
 801baa2:	bd10      	pop	{r4, pc}
 801baa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801baa8:	4293      	cmp	r3, r2
 801baaa:	d10b      	bne.n	801bac4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801baac:	4b0f      	ldr	r3, [pc, #60]	; (801baec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801baae:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bab2:	4b0f      	ldr	r3, [pc, #60]	; (801baf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801bab4:	8081      	strh	r1, [r0, #4]
 801bab6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801baba:	2300      	movs	r3, #0
 801babc:	80c2      	strh	r2, [r0, #6]
 801babe:	8003      	strh	r3, [r0, #0]
 801bac0:	8043      	strh	r3, [r0, #2]
 801bac2:	e7ee      	b.n	801baa2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bac4:	2300      	movs	r3, #0
 801bac6:	8003      	strh	r3, [r0, #0]
 801bac8:	8043      	strh	r3, [r0, #2]
 801baca:	8083      	strh	r3, [r0, #4]
 801bacc:	e7d8      	b.n	801ba80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801bace:	bf00      	nop
 801bad0:	2000c62c 	.word	0x2000c62c
 801bad4:	08027978 	.word	0x08027978
 801bad8:	08029a64 	.word	0x08029a64
 801badc:	080299a0 	.word	0x080299a0
 801bae0:	2000c624 	.word	0x2000c624
 801bae4:	2000c628 	.word	0x2000c628
 801bae8:	2000c60c 	.word	0x2000c60c
 801baec:	2000c558 	.word	0x2000c558
 801baf0:	2000c55a 	.word	0x2000c55a

0801baf4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801baf4:	4b18      	ldr	r3, [pc, #96]	; (801bb58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	b34b      	cbz	r3, 801bb4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801bafa:	4a18      	ldr	r2, [pc, #96]	; (801bb5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801bafc:	8800      	ldrh	r0, [r0, #0]
 801bafe:	8812      	ldrh	r2, [r2, #0]
 801bb00:	4290      	cmp	r0, r2
 801bb02:	d211      	bcs.n	801bb28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801bb04:	2214      	movs	r2, #20
 801bb06:	fb02 3300 	mla	r3, r2, r0, r3
 801bb0a:	8a1a      	ldrh	r2, [r3, #16]
 801bb0c:	8919      	ldrh	r1, [r3, #8]
 801bb0e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bb12:	428a      	cmp	r2, r1
 801bb14:	db1d      	blt.n	801bb52 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801bb16:	8a58      	ldrh	r0, [r3, #18]
 801bb18:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801bb1c:	895b      	ldrh	r3, [r3, #10]
 801bb1e:	4298      	cmp	r0, r3
 801bb20:	bfac      	ite	ge
 801bb22:	2000      	movge	r0, #0
 801bb24:	2001      	movlt	r0, #1
 801bb26:	4770      	bx	lr
 801bb28:	4b0d      	ldr	r3, [pc, #52]	; (801bb60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801bb2a:	881b      	ldrh	r3, [r3, #0]
 801bb2c:	4413      	add	r3, r2
 801bb2e:	4298      	cmp	r0, r3
 801bb30:	da0d      	bge.n	801bb4e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801bb32:	4b0c      	ldr	r3, [pc, #48]	; (801bb64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801bb34:	1a80      	subs	r0, r0, r2
 801bb36:	220e      	movs	r2, #14
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	fb02 3300 	mla	r3, r2, r0, r3
 801bb3e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801bb42:	891a      	ldrh	r2, [r3, #8]
 801bb44:	4291      	cmp	r1, r2
 801bb46:	db04      	blt.n	801bb52 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801bb48:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801bb4c:	e7e6      	b.n	801bb1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801bb4e:	2000      	movs	r0, #0
 801bb50:	4770      	bx	lr
 801bb52:	2001      	movs	r0, #1
 801bb54:	4770      	bx	lr
 801bb56:	bf00      	nop
 801bb58:	2000c62c 	.word	0x2000c62c
 801bb5c:	2000c624 	.word	0x2000c624
 801bb60:	2000c628 	.word	0x2000c628
 801bb64:	2000c60c 	.word	0x2000c60c

0801bb68 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bb68:	b508      	push	{r3, lr}
 801bb6a:	4b12      	ldr	r3, [pc, #72]	; (801bbb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bb6c:	6819      	ldr	r1, [r3, #0]
 801bb6e:	b931      	cbnz	r1, 801bb7e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bb70:	4b11      	ldr	r3, [pc, #68]	; (801bbb8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bb72:	f240 3132 	movw	r1, #818	; 0x332
 801bb76:	4a11      	ldr	r2, [pc, #68]	; (801bbbc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bb78:	4811      	ldr	r0, [pc, #68]	; (801bbc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bb7a:	f009 fc3f 	bl	80253fc <__assert_func>
 801bb7e:	8803      	ldrh	r3, [r0, #0]
 801bb80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb84:	4293      	cmp	r3, r2
 801bb86:	d012      	beq.n	801bbae <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bb88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bb8c:	4293      	cmp	r3, r2
 801bb8e:	d103      	bne.n	801bb98 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bb90:	4b0c      	ldr	r3, [pc, #48]	; (801bbc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bb96:	bd08      	pop	{r3, pc}
 801bb98:	4a0b      	ldr	r2, [pc, #44]	; (801bbc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bb9a:	6812      	ldr	r2, [r2, #0]
 801bb9c:	b11a      	cbz	r2, 801bba6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bb9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bba2:	2800      	cmp	r0, #0
 801bba4:	d1f7      	bne.n	801bb96 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bba6:	2214      	movs	r2, #20
 801bba8:	4353      	muls	r3, r2
 801bbaa:	58c8      	ldr	r0, [r1, r3]
 801bbac:	e7f3      	b.n	801bb96 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bbae:	2000      	movs	r0, #0
 801bbb0:	e7f1      	b.n	801bb96 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bbb2:	bf00      	nop
 801bbb4:	2000c62c 	.word	0x2000c62c
 801bbb8:	08027978 	.word	0x08027978
 801bbbc:	08029a9a 	.word	0x08029a9a
 801bbc0:	080299a0 	.word	0x080299a0
 801bbc4:	2000c564 	.word	0x2000c564
 801bbc8:	2000c608 	.word	0x2000c608

0801bbcc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bbcc:	8802      	ldrh	r2, [r0, #0]
 801bbce:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	d840      	bhi.n	801bc58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bbd6:	4b21      	ldr	r3, [pc, #132]	; (801bc5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801bbd8:	881b      	ldrh	r3, [r3, #0]
 801bbda:	429a      	cmp	r2, r3
 801bbdc:	d220      	bcs.n	801bc20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801bbde:	4b20      	ldr	r3, [pc, #128]	; (801bc60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bbe0:	6819      	ldr	r1, [r3, #0]
 801bbe2:	2314      	movs	r3, #20
 801bbe4:	fb03 1302 	mla	r3, r3, r2, r1
 801bbe8:	6858      	ldr	r0, [r3, #4]
 801bbea:	2800      	cmp	r0, #0
 801bbec:	d035      	beq.n	801bc5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bbee:	491d      	ldr	r1, [pc, #116]	; (801bc64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bbf0:	6809      	ldr	r1, [r1, #0]
 801bbf2:	2900      	cmp	r1, #0
 801bbf4:	d031      	beq.n	801bc5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bbf6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bbfa:	b371      	cbz	r1, 801bc5a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bbfc:	895a      	ldrh	r2, [r3, #10]
 801bbfe:	8918      	ldrh	r0, [r3, #8]
 801bc00:	4350      	muls	r0, r2
 801bc02:	7c5a      	ldrb	r2, [r3, #17]
 801bc04:	7cdb      	ldrb	r3, [r3, #19]
 801bc06:	0952      	lsrs	r2, r2, #5
 801bc08:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bc0c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bc10:	2b0b      	cmp	r3, #11
 801bc12:	bf18      	it	ne
 801bc14:	0040      	lslne	r0, r0, #1
 801bc16:	3003      	adds	r0, #3
 801bc18:	f020 0003 	bic.w	r0, r0, #3
 801bc1c:	4408      	add	r0, r1
 801bc1e:	4770      	bx	lr
 801bc20:	4911      	ldr	r1, [pc, #68]	; (801bc68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bc22:	8809      	ldrh	r1, [r1, #0]
 801bc24:	4419      	add	r1, r3
 801bc26:	428a      	cmp	r2, r1
 801bc28:	da16      	bge.n	801bc58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bc2a:	4910      	ldr	r1, [pc, #64]	; (801bc6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bc2c:	1ad3      	subs	r3, r2, r3
 801bc2e:	200e      	movs	r0, #14
 801bc30:	6809      	ldr	r1, [r1, #0]
 801bc32:	fb00 1303 	mla	r3, r0, r3, r1
 801bc36:	7b19      	ldrb	r1, [r3, #12]
 801bc38:	f001 011f 	and.w	r1, r1, #31
 801bc3c:	290b      	cmp	r1, #11
 801bc3e:	d10b      	bne.n	801bc58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801bc40:	8919      	ldrh	r1, [r3, #8]
 801bc42:	8958      	ldrh	r0, [r3, #10]
 801bc44:	4b07      	ldr	r3, [pc, #28]	; (801bc64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bc46:	4348      	muls	r0, r1
 801bc48:	6819      	ldr	r1, [r3, #0]
 801bc4a:	3003      	adds	r0, #3
 801bc4c:	f020 0303 	bic.w	r3, r0, #3
 801bc50:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bc54:	4418      	add	r0, r3
 801bc56:	4770      	bx	lr
 801bc58:	2000      	movs	r0, #0
 801bc5a:	4770      	bx	lr
 801bc5c:	2000c624 	.word	0x2000c624
 801bc60:	2000c62c 	.word	0x2000c62c
 801bc64:	2000c608 	.word	0x2000c608
 801bc68:	2000c628 	.word	0x2000c628
 801bc6c:	2000c60c 	.word	0x2000c60c

0801bc70 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bc70:	4b19      	ldr	r3, [pc, #100]	; (801bcd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bc72:	6819      	ldr	r1, [r3, #0]
 801bc74:	8803      	ldrh	r3, [r0, #0]
 801bc76:	b1e9      	cbz	r1, 801bcb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bc78:	4a18      	ldr	r2, [pc, #96]	; (801bcdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801bc7a:	8812      	ldrh	r2, [r2, #0]
 801bc7c:	429a      	cmp	r2, r3
 801bc7e:	d90a      	bls.n	801bc96 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bc80:	2214      	movs	r2, #20
 801bc82:	fb02 1303 	mla	r3, r2, r3, r1
 801bc86:	7c58      	ldrb	r0, [r3, #17]
 801bc88:	0942      	lsrs	r2, r0, #5
 801bc8a:	7cd8      	ldrb	r0, [r3, #19]
 801bc8c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801bc90:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801bc94:	4770      	bx	lr
 801bc96:	4912      	ldr	r1, [pc, #72]	; (801bce0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801bc98:	8809      	ldrh	r1, [r1, #0]
 801bc9a:	4411      	add	r1, r2
 801bc9c:	428b      	cmp	r3, r1
 801bc9e:	da09      	bge.n	801bcb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bca0:	1a9b      	subs	r3, r3, r2
 801bca2:	4a10      	ldr	r2, [pc, #64]	; (801bce4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801bca4:	210e      	movs	r1, #14
 801bca6:	6812      	ldr	r2, [r2, #0]
 801bca8:	fb01 2303 	mla	r3, r1, r3, r2
 801bcac:	7b18      	ldrb	r0, [r3, #12]
 801bcae:	f000 001f 	and.w	r0, r0, #31
 801bcb2:	4770      	bx	lr
 801bcb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bcb8:	4293      	cmp	r3, r2
 801bcba:	d10a      	bne.n	801bcd2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801bcbc:	4b0a      	ldr	r3, [pc, #40]	; (801bce8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bcc4:	b10a      	cbz	r2, 801bcca <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801bcc6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801bcc8:	b900      	cbnz	r0, 801bccc <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801bcca:	6898      	ldr	r0, [r3, #8]
 801bccc:	6803      	ldr	r3, [r0, #0]
 801bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcd0:	4718      	bx	r3
 801bcd2:	2000      	movs	r0, #0
 801bcd4:	4770      	bx	lr
 801bcd6:	bf00      	nop
 801bcd8:	2000c62c 	.word	0x2000c62c
 801bcdc:	2000c624 	.word	0x2000c624
 801bce0:	2000c628 	.word	0x2000c628
 801bce4:	2000c60c 	.word	0x2000c60c
 801bce8:	2000c564 	.word	0x2000c564

0801bcec <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801bcec:	2018      	movs	r0, #24
 801bcee:	4770      	bx	lr

0801bcf0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801bcf0:	2001      	movs	r0, #1
 801bcf2:	4770      	bx	lr

0801bcf4 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801bcf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801bcf8:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801bcfc:	4770      	bx	lr

0801bcfe <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801bcfe:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801bd02:	4770      	bx	lr

0801bd04 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801bd04:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801bd08:	4770      	bx	lr

0801bd0a <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801bd0a:	b2c8      	uxtb	r0, r1
 801bd0c:	4770      	bx	lr

0801bd0e <_ZN8touchgfx8LCD24bpp4initEv>:
 801bd0e:	4770      	bx	lr

0801bd10 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd14:	b085      	sub	sp, #20
 801bd16:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801bd18:	9203      	str	r2, [sp, #12]
 801bd1a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bd1e:	6878      	ldr	r0, [r7, #4]
 801bd20:	9201      	str	r2, [sp, #4]
 801bd22:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801bd24:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801bd28:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801bd2c:	fa1f fc84 	uxth.w	ip, r4
 801bd30:	43e4      	mvns	r4, r4
 801bd32:	9100      	str	r1, [sp, #0]
 801bd34:	b2e4      	uxtb	r4, r4
 801bd36:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bd3a:	fb00 2505 	mla	r5, r0, r5, r2
 801bd3e:	683a      	ldr	r2, [r7, #0]
 801bd40:	6877      	ldr	r7, [r6, #4]
 801bd42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd46:	3704      	adds	r7, #4
 801bd48:	4415      	add	r5, r2
 801bd4a:	6832      	ldr	r2, [r6, #0]
 801bd4c:	9202      	str	r2, [sp, #8]
 801bd4e:	9a00      	ldr	r2, [sp, #0]
 801bd50:	2a00      	cmp	r2, #0
 801bd52:	dc03      	bgt.n	801bd5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801bd54:	9a03      	ldr	r2, [sp, #12]
 801bd56:	2a00      	cmp	r2, #0
 801bd58:	f340 8116 	ble.w	801bf88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bd5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bd5e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bd62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bd64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	dd0f      	ble.n	801bd8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801bd6c:	1406      	asrs	r6, r0, #16
 801bd6e:	d406      	bmi.n	801bd7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bd70:	4546      	cmp	r6, r8
 801bd72:	da04      	bge.n	801bd7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bd74:	1416      	asrs	r6, r2, #16
 801bd76:	d402      	bmi.n	801bd7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bd78:	9901      	ldr	r1, [sp, #4]
 801bd7a:	428e      	cmp	r6, r1
 801bd7c:	db07      	blt.n	801bd8e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801bd7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bd80:	3b01      	subs	r3, #1
 801bd82:	3503      	adds	r5, #3
 801bd84:	4408      	add	r0, r1
 801bd86:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bd88:	440a      	add	r2, r1
 801bd8a:	e7ed      	b.n	801bd68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801bd8c:	d011      	beq.n	801bdb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801bd8e:	1e5e      	subs	r6, r3, #1
 801bd90:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bd92:	fb01 0e06 	mla	lr, r1, r6, r0
 801bd96:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801bd9a:	d548      	bpl.n	801be2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801bd9c:	4699      	mov	r9, r3
 801bd9e:	462e      	mov	r6, r5
 801bda0:	f1b9 0f00 	cmp.w	r9, #0
 801bda4:	f300 809e 	bgt.w	801bee4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801bda8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bdac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bdb0:	441d      	add	r5, r3
 801bdb2:	9b00      	ldr	r3, [sp, #0]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	f340 80e7 	ble.w	801bf88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801bdba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bdbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdc0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bdc4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bdc8:	eef0 6a62 	vmov.f32	s13, s5
 801bdcc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bdd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bdd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bdd8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801bddc:	eef0 6a43 	vmov.f32	s13, s6
 801bde0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bde4:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801bde8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bdec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bdf0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bdf4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bdf8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bdfc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be00:	ee12 2a90 	vmov	r2, s5
 801be04:	eef0 2a47 	vmov.f32	s5, s14
 801be08:	fb92 f3f3 	sdiv	r3, r2, r3
 801be0c:	ee13 2a10 	vmov	r2, s6
 801be10:	9311      	str	r3, [sp, #68]	; 0x44
 801be12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be14:	eeb0 3a67 	vmov.f32	s6, s15
 801be18:	fb92 f3f3 	sdiv	r3, r2, r3
 801be1c:	9312      	str	r3, [sp, #72]	; 0x48
 801be1e:	9b00      	ldr	r3, [sp, #0]
 801be20:	9a03      	ldr	r2, [sp, #12]
 801be22:	3b01      	subs	r3, #1
 801be24:	9300      	str	r3, [sp, #0]
 801be26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be28:	bf08      	it	eq
 801be2a:	4613      	moveq	r3, r2
 801be2c:	e78f      	b.n	801bd4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801be2e:	45c6      	cmp	lr, r8
 801be30:	dab4      	bge.n	801bd9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801be32:	9912      	ldr	r1, [sp, #72]	; 0x48
 801be34:	fb01 2606 	mla	r6, r1, r6, r2
 801be38:	1436      	asrs	r6, r6, #16
 801be3a:	d4af      	bmi.n	801bd9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801be3c:	9901      	ldr	r1, [sp, #4]
 801be3e:	428e      	cmp	r6, r1
 801be40:	daac      	bge.n	801bd9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801be42:	1cee      	adds	r6, r5, #3
 801be44:	4699      	mov	r9, r3
 801be46:	f1b9 0f00 	cmp.w	r9, #0
 801be4a:	f106 0603 	add.w	r6, r6, #3
 801be4e:	ddab      	ble.n	801bda8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801be50:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801be54:	9902      	ldr	r1, [sp, #8]
 801be56:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801be5a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801be5e:	fb08 1e0e 	mla	lr, r8, lr, r1
 801be62:	9911      	ldr	r1, [sp, #68]	; 0x44
 801be64:	fb1b fb04 	smulbb	fp, fp, r4
 801be68:	f109 39ff 	add.w	r9, r9, #4294967295
 801be6c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801be70:	4408      	add	r0, r1
 801be72:	9912      	ldr	r1, [sp, #72]	; 0x48
 801be74:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801be78:	440a      	add	r2, r1
 801be7a:	eb07 0a0e 	add.w	sl, r7, lr
 801be7e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801be82:	fb0e be0c 	mla	lr, lr, ip, fp
 801be86:	fa1f fe8e 	uxth.w	lr, lr
 801be8a:	f10e 0b01 	add.w	fp, lr, #1
 801be8e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801be92:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801be96:	fb1b fb04 	smulbb	fp, fp, r4
 801be9a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801be9e:	f806 ec06 	strb.w	lr, [r6, #-6]
 801bea2:	f89a e001 	ldrb.w	lr, [sl, #1]
 801bea6:	fb0e be0c 	mla	lr, lr, ip, fp
 801beaa:	fa1f fe8e 	uxth.w	lr, lr
 801beae:	f10e 0b01 	add.w	fp, lr, #1
 801beb2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801beb6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801beba:	f806 ec05 	strb.w	lr, [r6, #-5]
 801bebe:	f89a e002 	ldrb.w	lr, [sl, #2]
 801bec2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801bec6:	fb1a fa04 	smulbb	sl, sl, r4
 801beca:	fb0e ae0c 	mla	lr, lr, ip, sl
 801bece:	fa1f fe8e 	uxth.w	lr, lr
 801bed2:	f10e 0a01 	add.w	sl, lr, #1
 801bed6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801beda:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bede:	f806 ec04 	strb.w	lr, [r6, #-4]
 801bee2:	e7b0      	b.n	801be46 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801bee4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801bee8:	d446      	bmi.n	801bf78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801beea:	45c2      	cmp	sl, r8
 801beec:	da44      	bge.n	801bf78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801beee:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801bef2:	d441      	bmi.n	801bf78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801bef4:	9901      	ldr	r1, [sp, #4]
 801bef6:	458e      	cmp	lr, r1
 801bef8:	da3e      	bge.n	801bf78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801befa:	9902      	ldr	r1, [sp, #8]
 801befc:	f896 b000 	ldrb.w	fp, [r6]
 801bf00:	fb08 1e0e 	mla	lr, r8, lr, r1
 801bf04:	fb1b fb04 	smulbb	fp, fp, r4
 801bf08:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801bf0c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bf10:	eb07 0a0e 	add.w	sl, r7, lr
 801bf14:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801bf18:	fb0e be0c 	mla	lr, lr, ip, fp
 801bf1c:	fa1f fe8e 	uxth.w	lr, lr
 801bf20:	f10e 0b01 	add.w	fp, lr, #1
 801bf24:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bf28:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bf2c:	fb1b fb04 	smulbb	fp, fp, r4
 801bf30:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf34:	f886 e000 	strb.w	lr, [r6]
 801bf38:	f89a e001 	ldrb.w	lr, [sl, #1]
 801bf3c:	fb0e be0c 	mla	lr, lr, ip, fp
 801bf40:	fa1f fe8e 	uxth.w	lr, lr
 801bf44:	f10e 0b01 	add.w	fp, lr, #1
 801bf48:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bf4c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf50:	f886 e001 	strb.w	lr, [r6, #1]
 801bf54:	f89a e002 	ldrb.w	lr, [sl, #2]
 801bf58:	f896 a002 	ldrb.w	sl, [r6, #2]
 801bf5c:	fb1a fa04 	smulbb	sl, sl, r4
 801bf60:	fb0e ae0c 	mla	lr, lr, ip, sl
 801bf64:	fa1f fe8e 	uxth.w	lr, lr
 801bf68:	f10e 0a01 	add.w	sl, lr, #1
 801bf6c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801bf70:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bf74:	f886 e002 	strb.w	lr, [r6, #2]
 801bf78:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bf7a:	3603      	adds	r6, #3
 801bf7c:	f109 39ff 	add.w	r9, r9, #4294967295
 801bf80:	4408      	add	r0, r1
 801bf82:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bf84:	440a      	add	r2, r1
 801bf86:	e70b      	b.n	801bda0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801bf88:	b005      	add	sp, #20
 801bf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf8e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bf8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf92:	b085      	sub	sp, #20
 801bf94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bf98:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bf9a:	9203      	str	r2, [sp, #12]
 801bf9c:	6870      	ldr	r0, [r6, #4]
 801bf9e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801bfa0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bfa4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801bfa8:	9101      	str	r1, [sp, #4]
 801bfaa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bfae:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801bfb2:	fb00 2404 	mla	r4, r0, r4, r2
 801bfb6:	6832      	ldr	r2, [r6, #0]
 801bfb8:	686e      	ldr	r6, [r5, #4]
 801bfba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bfbe:	3604      	adds	r6, #4
 801bfc0:	4414      	add	r4, r2
 801bfc2:	682a      	ldr	r2, [r5, #0]
 801bfc4:	9202      	str	r2, [sp, #8]
 801bfc6:	9a01      	ldr	r2, [sp, #4]
 801bfc8:	2a00      	cmp	r2, #0
 801bfca:	dc03      	bgt.n	801bfd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801bfcc:	9a03      	ldr	r2, [sp, #12]
 801bfce:	2a00      	cmp	r2, #0
 801bfd0:	f340 80b2 	ble.w	801c138 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801bfd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bfd6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bfda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bfdc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	dd0c      	ble.n	801bffe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801bfe4:	1405      	asrs	r5, r0, #16
 801bfe6:	d405      	bmi.n	801bff4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bfe8:	4575      	cmp	r5, lr
 801bfea:	da03      	bge.n	801bff4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bfec:	1415      	asrs	r5, r2, #16
 801bfee:	d401      	bmi.n	801bff4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bff0:	4545      	cmp	r5, r8
 801bff2:	db05      	blt.n	801c000 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bff4:	4460      	add	r0, ip
 801bff6:	443a      	add	r2, r7
 801bff8:	3b01      	subs	r3, #1
 801bffa:	3403      	adds	r4, #3
 801bffc:	e7f0      	b.n	801bfe0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801bffe:	d03d      	beq.n	801c07c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c000:	1e5d      	subs	r5, r3, #1
 801c002:	fb0c 0905 	mla	r9, ip, r5, r0
 801c006:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c00a:	d42c      	bmi.n	801c066 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c00c:	45f1      	cmp	r9, lr
 801c00e:	da2a      	bge.n	801c066 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c010:	fb07 2505 	mla	r5, r7, r5, r2
 801c014:	142d      	asrs	r5, r5, #16
 801c016:	d426      	bmi.n	801c066 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c018:	4545      	cmp	r5, r8
 801c01a:	da24      	bge.n	801c066 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c01c:	1ce5      	adds	r5, r4, #3
 801c01e:	469a      	mov	sl, r3
 801c020:	f1ba 0f00 	cmp.w	sl, #0
 801c024:	f105 0503 	add.w	r5, r5, #3
 801c028:	dd23      	ble.n	801c072 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c02a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c02e:	9902      	ldr	r1, [sp, #8]
 801c030:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c034:	443a      	add	r2, r7
 801c036:	fb0e 1909 	mla	r9, lr, r9, r1
 801c03a:	4460      	add	r0, ip
 801c03c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c040:	f819 900b 	ldrb.w	r9, [r9, fp]
 801c044:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c048:	eb06 0b09 	add.w	fp, r6, r9
 801c04c:	f816 9009 	ldrb.w	r9, [r6, r9]
 801c050:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c054:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c058:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c05c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c060:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c064:	e7dc      	b.n	801c020 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c066:	2500      	movs	r5, #0
 801c068:	eba3 0905 	sub.w	r9, r3, r5
 801c06c:	f1b9 0f00 	cmp.w	r9, #0
 801c070:	dc3c      	bgt.n	801c0ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801c072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c07a:	441c      	add	r4, r3
 801c07c:	9b01      	ldr	r3, [sp, #4]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	dd5a      	ble.n	801c138 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c082:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c088:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c08c:	eeb0 6a62 	vmov.f32	s12, s5
 801c090:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c094:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c098:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c09c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c0a0:	eeb0 6a43 	vmov.f32	s12, s6
 801c0a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c0a8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c0ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c0b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c0b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c0b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0c4:	ee12 2a90 	vmov	r2, s5
 801c0c8:	eef0 2a47 	vmov.f32	s5, s14
 801c0cc:	fb92 fcf3 	sdiv	ip, r2, r3
 801c0d0:	ee13 2a10 	vmov	r2, s6
 801c0d4:	eeb0 3a67 	vmov.f32	s6, s15
 801c0d8:	fb92 f7f3 	sdiv	r7, r2, r3
 801c0dc:	9b01      	ldr	r3, [sp, #4]
 801c0de:	9a03      	ldr	r2, [sp, #12]
 801c0e0:	3b01      	subs	r3, #1
 801c0e2:	9301      	str	r3, [sp, #4]
 801c0e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0e6:	bf08      	it	eq
 801c0e8:	4613      	moveq	r3, r2
 801c0ea:	e76c      	b.n	801bfc6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801c0ec:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c0f0:	d41e      	bmi.n	801c130 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c0f2:	45f2      	cmp	sl, lr
 801c0f4:	da1c      	bge.n	801c130 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c0f6:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c0fa:	d419      	bmi.n	801c130 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c0fc:	45c1      	cmp	r9, r8
 801c0fe:	da17      	bge.n	801c130 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801c100:	9902      	ldr	r1, [sp, #8]
 801c102:	fb0e 1909 	mla	r9, lr, r9, r1
 801c106:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c10a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c10e:	f816 b009 	ldrb.w	fp, [r6, r9]
 801c112:	eb06 0a09 	add.w	sl, r6, r9
 801c116:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801c11a:	f804 b009 	strb.w	fp, [r4, r9]
 801c11e:	44a1      	add	r9, r4
 801c120:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c124:	f889 b001 	strb.w	fp, [r9, #1]
 801c128:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c12c:	f889 a002 	strb.w	sl, [r9, #2]
 801c130:	4460      	add	r0, ip
 801c132:	443a      	add	r2, r7
 801c134:	3501      	adds	r5, #1
 801c136:	e797      	b.n	801c068 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801c138:	b005      	add	sp, #20
 801c13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c13e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c13e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c142:	b087      	sub	sp, #28
 801c144:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c148:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c14a:	9204      	str	r2, [sp, #16]
 801c14c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c150:	6870      	ldr	r0, [r6, #4]
 801c152:	9205      	str	r2, [sp, #20]
 801c154:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c156:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c15a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c15e:	9101      	str	r1, [sp, #4]
 801c160:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c164:	fb00 2505 	mla	r5, r0, r5, r2
 801c168:	6832      	ldr	r2, [r6, #0]
 801c16a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c16e:	4415      	add	r5, r2
 801c170:	6822      	ldr	r2, [r4, #0]
 801c172:	9202      	str	r2, [sp, #8]
 801c174:	6862      	ldr	r2, [r4, #4]
 801c176:	3204      	adds	r2, #4
 801c178:	9203      	str	r2, [sp, #12]
 801c17a:	9a01      	ldr	r2, [sp, #4]
 801c17c:	2a00      	cmp	r2, #0
 801c17e:	dc03      	bgt.n	801c188 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801c180:	9a04      	ldr	r2, [sp, #16]
 801c182:	2a00      	cmp	r2, #0
 801c184:	f340 8124 	ble.w	801c3d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c188:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c18a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c18e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c190:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c194:	2b00      	cmp	r3, #0
 801c196:	dd0e      	ble.n	801c1b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c198:	1422      	asrs	r2, r4, #16
 801c19a:	d405      	bmi.n	801c1a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c19c:	4572      	cmp	r2, lr
 801c19e:	da03      	bge.n	801c1a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c1a0:	1402      	asrs	r2, r0, #16
 801c1a2:	d401      	bmi.n	801c1a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c1a4:	4542      	cmp	r2, r8
 801c1a6:	db07      	blt.n	801c1b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801c1a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c1aa:	3b01      	subs	r3, #1
 801c1ac:	3503      	adds	r5, #3
 801c1ae:	4414      	add	r4, r2
 801c1b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c1b2:	4410      	add	r0, r2
 801c1b4:	e7ee      	b.n	801c194 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801c1b6:	d010      	beq.n	801c1da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801c1b8:	1e5a      	subs	r2, r3, #1
 801c1ba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c1bc:	fb06 4602 	mla	r6, r6, r2, r4
 801c1c0:	1436      	asrs	r6, r6, #16
 801c1c2:	d546      	bpl.n	801c252 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801c1c4:	4699      	mov	r9, r3
 801c1c6:	462f      	mov	r7, r5
 801c1c8:	f1b9 0f00 	cmp.w	r9, #0
 801c1cc:	f300 80a5 	bgt.w	801c31a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801c1d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1d8:	441d      	add	r5, r3
 801c1da:	9b01      	ldr	r3, [sp, #4]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	f340 80f7 	ble.w	801c3d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801c1e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c1e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1ec:	eeb0 6a62 	vmov.f32	s12, s5
 801c1f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c1f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c1fc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c200:	eeb0 6a43 	vmov.f32	s12, s6
 801c204:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c208:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c20c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c210:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c214:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c218:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c21c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c220:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c224:	ee12 2a90 	vmov	r2, s5
 801c228:	eef0 2a47 	vmov.f32	s5, s14
 801c22c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c230:	ee13 2a10 	vmov	r2, s6
 801c234:	9313      	str	r3, [sp, #76]	; 0x4c
 801c236:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c238:	eeb0 3a67 	vmov.f32	s6, s15
 801c23c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c240:	9314      	str	r3, [sp, #80]	; 0x50
 801c242:	9b01      	ldr	r3, [sp, #4]
 801c244:	9a04      	ldr	r2, [sp, #16]
 801c246:	3b01      	subs	r3, #1
 801c248:	9301      	str	r3, [sp, #4]
 801c24a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c24c:	bf08      	it	eq
 801c24e:	4613      	moveq	r3, r2
 801c250:	e793      	b.n	801c17a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c252:	4576      	cmp	r6, lr
 801c254:	dab6      	bge.n	801c1c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c256:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c258:	fb06 0202 	mla	r2, r6, r2, r0
 801c25c:	1412      	asrs	r2, r2, #16
 801c25e:	d4b1      	bmi.n	801c1c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c260:	4542      	cmp	r2, r8
 801c262:	daaf      	bge.n	801c1c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801c264:	1cef      	adds	r7, r5, #3
 801c266:	4699      	mov	r9, r3
 801c268:	f1b9 0f00 	cmp.w	r9, #0
 801c26c:	ddb0      	ble.n	801c1d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c26e:	9902      	ldr	r1, [sp, #8]
 801c270:	1402      	asrs	r2, r0, #16
 801c272:	1426      	asrs	r6, r4, #16
 801c274:	fb0e 1202 	mla	r2, lr, r2, r1
 801c278:	9903      	ldr	r1, [sp, #12]
 801c27a:	5d92      	ldrb	r2, [r2, r6]
 801c27c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c280:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c284:	d041      	beq.n	801c30a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c286:	9a05      	ldr	r2, [sp, #20]
 801c288:	fa5f fb86 	uxtb.w	fp, r6
 801c28c:	fb02 fc0c 	mul.w	ip, r2, ip
 801c290:	f10c 0201 	add.w	r2, ip, #1
 801c294:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c298:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c29c:	1212      	asrs	r2, r2, #8
 801c29e:	fa1f fa82 	uxth.w	sl, r2
 801c2a2:	43d2      	mvns	r2, r2
 801c2a4:	fb1b fb0a 	smulbb	fp, fp, sl
 801c2a8:	b2d2      	uxtb	r2, r2
 801c2aa:	fb0c bc02 	mla	ip, ip, r2, fp
 801c2ae:	fa1f fc8c 	uxth.w	ip, ip
 801c2b2:	f10c 0b01 	add.w	fp, ip, #1
 801c2b6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c2ba:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c2be:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c2c2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c2c6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c2ca:	fb16 fa0a 	smulbb	sl, r6, sl
 801c2ce:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c2d2:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c2d6:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c2da:	fb06 aa02 	mla	sl, r6, r2, sl
 801c2de:	fb0c bc02 	mla	ip, ip, r2, fp
 801c2e2:	fa1f fa8a 	uxth.w	sl, sl
 801c2e6:	fa1f fc8c 	uxth.w	ip, ip
 801c2ea:	f10a 0601 	add.w	r6, sl, #1
 801c2ee:	f10c 0b01 	add.w	fp, ip, #1
 801c2f2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c2f6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c2fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c2fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c302:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c306:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c30a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c30c:	3703      	adds	r7, #3
 801c30e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c312:	4414      	add	r4, r2
 801c314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c316:	4410      	add	r0, r2
 801c318:	e7a6      	b.n	801c268 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c31a:	1426      	asrs	r6, r4, #16
 801c31c:	d450      	bmi.n	801c3c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c31e:	4576      	cmp	r6, lr
 801c320:	da4e      	bge.n	801c3c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c322:	1402      	asrs	r2, r0, #16
 801c324:	d44c      	bmi.n	801c3c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c326:	4542      	cmp	r2, r8
 801c328:	da4a      	bge.n	801c3c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c32a:	9902      	ldr	r1, [sp, #8]
 801c32c:	fb0e 1202 	mla	r2, lr, r2, r1
 801c330:	9903      	ldr	r1, [sp, #12]
 801c332:	5d92      	ldrb	r2, [r2, r6]
 801c334:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801c338:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c33c:	d040      	beq.n	801c3c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801c33e:	9a05      	ldr	r2, [sp, #20]
 801c340:	fa5f fb86 	uxtb.w	fp, r6
 801c344:	fb02 fc0c 	mul.w	ip, r2, ip
 801c348:	f10c 0201 	add.w	r2, ip, #1
 801c34c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c350:	f897 c000 	ldrb.w	ip, [r7]
 801c354:	1212      	asrs	r2, r2, #8
 801c356:	fa1f fa82 	uxth.w	sl, r2
 801c35a:	43d2      	mvns	r2, r2
 801c35c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c360:	b2d2      	uxtb	r2, r2
 801c362:	fb0c bc02 	mla	ip, ip, r2, fp
 801c366:	fa1f fc8c 	uxth.w	ip, ip
 801c36a:	f10c 0b01 	add.w	fp, ip, #1
 801c36e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c372:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c376:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c37a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c37e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c382:	fb16 fa0a 	smulbb	sl, r6, sl
 801c386:	78be      	ldrb	r6, [r7, #2]
 801c388:	f887 c000 	strb.w	ip, [r7]
 801c38c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801c390:	fb06 aa02 	mla	sl, r6, r2, sl
 801c394:	fb0c bc02 	mla	ip, ip, r2, fp
 801c398:	fa1f fa8a 	uxth.w	sl, sl
 801c39c:	fa1f fc8c 	uxth.w	ip, ip
 801c3a0:	f10a 0601 	add.w	r6, sl, #1
 801c3a4:	f10c 0b01 	add.w	fp, ip, #1
 801c3a8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c3ac:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c3b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c3b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c3b8:	f887 a002 	strb.w	sl, [r7, #2]
 801c3bc:	f887 c001 	strb.w	ip, [r7, #1]
 801c3c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c3c2:	3703      	adds	r7, #3
 801c3c4:	f109 39ff 	add.w	r9, r9, #4294967295
 801c3c8:	4414      	add	r4, r2
 801c3ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c3cc:	4410      	add	r0, r2
 801c3ce:	e6fb      	b.n	801c1c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c3d0:	b007      	add	sp, #28
 801c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c3d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3da:	b085      	sub	sp, #20
 801c3dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c3e0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c3e2:	9203      	str	r2, [sp, #12]
 801c3e4:	6870      	ldr	r0, [r6, #4]
 801c3e6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801c3e8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c3ec:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c3f0:	9100      	str	r1, [sp, #0]
 801c3f2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c3f6:	fb00 2404 	mla	r4, r0, r4, r2
 801c3fa:	6832      	ldr	r2, [r6, #0]
 801c3fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c400:	4414      	add	r4, r2
 801c402:	682a      	ldr	r2, [r5, #0]
 801c404:	9201      	str	r2, [sp, #4]
 801c406:	686a      	ldr	r2, [r5, #4]
 801c408:	3204      	adds	r2, #4
 801c40a:	9202      	str	r2, [sp, #8]
 801c40c:	9a00      	ldr	r2, [sp, #0]
 801c40e:	2a00      	cmp	r2, #0
 801c410:	dc03      	bgt.n	801c41a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801c412:	9a03      	ldr	r2, [sp, #12]
 801c414:	2a00      	cmp	r2, #0
 801c416:	f340 8131 	ble.w	801c67c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c41a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c41c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c420:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c422:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c426:	2b00      	cmp	r3, #0
 801c428:	dd0e      	ble.n	801c448 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c42a:	1405      	asrs	r5, r0, #16
 801c42c:	d405      	bmi.n	801c43a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c42e:	4575      	cmp	r5, lr
 801c430:	da03      	bge.n	801c43a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c432:	1415      	asrs	r5, r2, #16
 801c434:	d401      	bmi.n	801c43a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c436:	4545      	cmp	r5, r8
 801c438:	db07      	blt.n	801c44a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c43a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c43c:	3b01      	subs	r3, #1
 801c43e:	3403      	adds	r4, #3
 801c440:	4428      	add	r0, r5
 801c442:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c444:	442a      	add	r2, r5
 801c446:	e7ee      	b.n	801c426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801c448:	d06f      	beq.n	801c52a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801c44a:	1e5d      	subs	r5, r3, #1
 801c44c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c44e:	fb06 0605 	mla	r6, r6, r5, r0
 801c452:	1436      	asrs	r6, r6, #16
 801c454:	d460      	bmi.n	801c518 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c456:	4576      	cmp	r6, lr
 801c458:	da5e      	bge.n	801c518 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c45a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c45c:	fb06 2505 	mla	r5, r6, r5, r2
 801c460:	142d      	asrs	r5, r5, #16
 801c462:	d459      	bmi.n	801c518 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c464:	4545      	cmp	r5, r8
 801c466:	da57      	bge.n	801c518 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c468:	1ce5      	adds	r5, r4, #3
 801c46a:	469a      	mov	sl, r3
 801c46c:	f1ba 0f00 	cmp.w	sl, #0
 801c470:	dd56      	ble.n	801c520 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801c472:	9901      	ldr	r1, [sp, #4]
 801c474:	1416      	asrs	r6, r2, #16
 801c476:	1407      	asrs	r7, r0, #16
 801c478:	fb0e 1606 	mla	r6, lr, r6, r1
 801c47c:	9902      	ldr	r1, [sp, #8]
 801c47e:	5df6      	ldrb	r6, [r6, r7]
 801c480:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801c484:	0e37      	lsrs	r7, r6, #24
 801c486:	2fff      	cmp	r7, #255	; 0xff
 801c488:	f000 80ef 	beq.w	801c66a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801c48c:	fa5f fc87 	uxtb.w	ip, r7
 801c490:	b3d7      	cbz	r7, 801c508 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c492:	fa1f f78c 	uxth.w	r7, ip
 801c496:	ea6f 0c0c 	mvn.w	ip, ip
 801c49a:	fa5f fb86 	uxtb.w	fp, r6
 801c49e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c4a2:	fa5f fc8c 	uxtb.w	ip, ip
 801c4a6:	fb1b fb07 	smulbb	fp, fp, r7
 801c4aa:	fb09 b90c 	mla	r9, r9, ip, fp
 801c4ae:	fa1f f989 	uxth.w	r9, r9
 801c4b2:	f109 0b01 	add.w	fp, r9, #1
 801c4b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c4ba:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c4be:	fb1b fb0c 	smulbb	fp, fp, ip
 801c4c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4c6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c4ca:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c4ce:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c4d2:	fb09 b907 	mla	r9, r9, r7, fp
 801c4d6:	fa1f f989 	uxth.w	r9, r9
 801c4da:	f109 0b01 	add.w	fp, r9, #1
 801c4de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c4e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4e6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c4ea:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c4ee:	fb19 fc0c 	smulbb	ip, r9, ip
 801c4f2:	fb06 c607 	mla	r6, r6, r7, ip
 801c4f6:	b2b6      	uxth	r6, r6
 801c4f8:	f106 0c01 	add.w	ip, r6, #1
 801c4fc:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801c500:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c504:	f805 cc01 	strb.w	ip, [r5, #-1]
 801c508:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c50a:	3503      	adds	r5, #3
 801c50c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c510:	4408      	add	r0, r1
 801c512:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c514:	440a      	add	r2, r1
 801c516:	e7a9      	b.n	801c46c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c518:	2600      	movs	r6, #0
 801c51a:	1b9d      	subs	r5, r3, r6
 801c51c:	2d00      	cmp	r5, #0
 801c51e:	dc40      	bgt.n	801c5a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801c520:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c524:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c528:	441c      	add	r4, r3
 801c52a:	9b00      	ldr	r3, [sp, #0]
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	f340 80a5 	ble.w	801c67c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c532:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c538:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c53c:	eeb0 6a62 	vmov.f32	s12, s5
 801c540:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c544:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c548:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c54c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c550:	eeb0 6a43 	vmov.f32	s12, s6
 801c554:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c558:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c55c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c560:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c564:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c568:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c56c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c570:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c574:	ee12 2a90 	vmov	r2, s5
 801c578:	eef0 2a47 	vmov.f32	s5, s14
 801c57c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c580:	ee13 2a10 	vmov	r2, s6
 801c584:	9311      	str	r3, [sp, #68]	; 0x44
 801c586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c588:	eeb0 3a67 	vmov.f32	s6, s15
 801c58c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c590:	9312      	str	r3, [sp, #72]	; 0x48
 801c592:	9b00      	ldr	r3, [sp, #0]
 801c594:	9a03      	ldr	r2, [sp, #12]
 801c596:	3b01      	subs	r3, #1
 801c598:	9300      	str	r3, [sp, #0]
 801c59a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c59c:	bf08      	it	eq
 801c59e:	4613      	moveq	r3, r2
 801c5a0:	e734      	b.n	801c40c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c5a2:	1407      	asrs	r7, r0, #16
 801c5a4:	d450      	bmi.n	801c648 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c5a6:	4577      	cmp	r7, lr
 801c5a8:	da4e      	bge.n	801c648 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c5aa:	1415      	asrs	r5, r2, #16
 801c5ac:	d44c      	bmi.n	801c648 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c5ae:	4545      	cmp	r5, r8
 801c5b0:	da4a      	bge.n	801c648 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c5b2:	9901      	ldr	r1, [sp, #4]
 801c5b4:	fb0e 1505 	mla	r5, lr, r5, r1
 801c5b8:	9902      	ldr	r1, [sp, #8]
 801c5ba:	5ded      	ldrb	r5, [r5, r7]
 801c5bc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801c5c0:	0e2f      	lsrs	r7, r5, #24
 801c5c2:	2fff      	cmp	r7, #255	; 0xff
 801c5c4:	d046      	beq.n	801c654 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801c5c6:	fa5f f987 	uxtb.w	r9, r7
 801c5ca:	b3ef      	cbz	r7, 801c648 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c5cc:	fa1f fc89 	uxth.w	ip, r9
 801c5d0:	ea6f 0909 	mvn.w	r9, r9
 801c5d4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c5d8:	fa5f fb85 	uxtb.w	fp, r5
 801c5dc:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c5e0:	fa5f f989 	uxtb.w	r9, r9
 801c5e4:	fb1b fb0c 	smulbb	fp, fp, ip
 801c5e8:	fb0a ba09 	mla	sl, sl, r9, fp
 801c5ec:	fa1f fa8a 	uxth.w	sl, sl
 801c5f0:	f10a 0b01 	add.w	fp, sl, #1
 801c5f4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c5f8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c5fc:	f804 a007 	strb.w	sl, [r4, r7]
 801c600:	4427      	add	r7, r4
 801c602:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c606:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c60a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c60e:	fb1b fb09 	smulbb	fp, fp, r9
 801c612:	fb0a ba0c 	mla	sl, sl, ip, fp
 801c616:	fa1f fa8a 	uxth.w	sl, sl
 801c61a:	f10a 0b01 	add.w	fp, sl, #1
 801c61e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c622:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c626:	f887 a001 	strb.w	sl, [r7, #1]
 801c62a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c62e:	fb1a f909 	smulbb	r9, sl, r9
 801c632:	fb05 950c 	mla	r5, r5, ip, r9
 801c636:	b2ad      	uxth	r5, r5
 801c638:	f105 0901 	add.w	r9, r5, #1
 801c63c:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c640:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c644:	f887 9002 	strb.w	r9, [r7, #2]
 801c648:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c64a:	3601      	adds	r6, #1
 801c64c:	4408      	add	r0, r1
 801c64e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c650:	440a      	add	r2, r1
 801c652:	e762      	b.n	801c51a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c654:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c658:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801c65c:	55e5      	strb	r5, [r4, r7]
 801c65e:	4427      	add	r7, r4
 801c660:	0c2d      	lsrs	r5, r5, #16
 801c662:	f887 c001 	strb.w	ip, [r7, #1]
 801c666:	70bd      	strb	r5, [r7, #2]
 801c668:	e7ee      	b.n	801c648 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c66a:	0a37      	lsrs	r7, r6, #8
 801c66c:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c670:	0c36      	lsrs	r6, r6, #16
 801c672:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c676:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c67a:	e745      	b.n	801c508 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801c67c:	b005      	add	sp, #20
 801c67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c682 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c682:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c686:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c688:	9201      	str	r2, [sp, #4]
 801c68a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801c68e:	6870      	ldr	r0, [r6, #4]
 801c690:	9200      	str	r2, [sp, #0]
 801c692:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c696:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801c69a:	fa1f fc85 	uxth.w	ip, r5
 801c69e:	43ed      	mvns	r5, r5
 801c6a0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c6a4:	b2ed      	uxtb	r5, r5
 801c6a6:	fb00 2404 	mla	r4, r0, r4, r2
 801c6aa:	6832      	ldr	r2, [r6, #0]
 801c6ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c6b0:	4414      	add	r4, r2
 801c6b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c6b4:	f8d2 8000 	ldr.w	r8, [r2]
 801c6b8:	2900      	cmp	r1, #0
 801c6ba:	dc03      	bgt.n	801c6c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801c6bc:	9a01      	ldr	r2, [sp, #4]
 801c6be:	2a00      	cmp	r2, #0
 801c6c0:	f340 8104 	ble.w	801c8cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c6c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c6ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c6cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	dd0f      	ble.n	801c6f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c6d4:	1406      	asrs	r6, r0, #16
 801c6d6:	d406      	bmi.n	801c6e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c6d8:	4576      	cmp	r6, lr
 801c6da:	da04      	bge.n	801c6e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c6dc:	1416      	asrs	r6, r2, #16
 801c6de:	d402      	bmi.n	801c6e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c6e0:	9f00      	ldr	r7, [sp, #0]
 801c6e2:	42be      	cmp	r6, r7
 801c6e4:	db07      	blt.n	801c6f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c6e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c6e8:	3b01      	subs	r3, #1
 801c6ea:	3403      	adds	r4, #3
 801c6ec:	4430      	add	r0, r6
 801c6ee:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c6f0:	4432      	add	r2, r6
 801c6f2:	e7ed      	b.n	801c6d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c6f4:	d05f      	beq.n	801c7b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801c6f6:	1e5e      	subs	r6, r3, #1
 801c6f8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c6fa:	fb07 0706 	mla	r7, r7, r6, r0
 801c6fe:	143f      	asrs	r7, r7, #16
 801c700:	d450      	bmi.n	801c7a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c702:	4577      	cmp	r7, lr
 801c704:	da4e      	bge.n	801c7a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c706:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c708:	fb07 2606 	mla	r6, r7, r6, r2
 801c70c:	1436      	asrs	r6, r6, #16
 801c70e:	d449      	bmi.n	801c7a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c710:	9f00      	ldr	r7, [sp, #0]
 801c712:	42be      	cmp	r6, r7
 801c714:	da46      	bge.n	801c7a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801c716:	1ce6      	adds	r6, r4, #3
 801c718:	4699      	mov	r9, r3
 801c71a:	f1b9 0f00 	cmp.w	r9, #0
 801c71e:	f106 0603 	add.w	r6, r6, #3
 801c722:	dd43      	ble.n	801c7ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801c724:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c728:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c72c:	1417      	asrs	r7, r2, #16
 801c72e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c732:	fb1b fb05 	smulbb	fp, fp, r5
 801c736:	fb0e a707 	mla	r7, lr, r7, sl
 801c73a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c73e:	eb08 0a07 	add.w	sl, r8, r7
 801c742:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c746:	fb07 b70c 	mla	r7, r7, ip, fp
 801c74a:	b2bf      	uxth	r7, r7
 801c74c:	f107 0b01 	add.w	fp, r7, #1
 801c750:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c754:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c758:	fb1b fb05 	smulbb	fp, fp, r5
 801c75c:	123f      	asrs	r7, r7, #8
 801c75e:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c762:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c766:	fb07 b70c 	mla	r7, r7, ip, fp
 801c76a:	b2bf      	uxth	r7, r7
 801c76c:	f107 0b01 	add.w	fp, r7, #1
 801c770:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c774:	123f      	asrs	r7, r7, #8
 801c776:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c77a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c77e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c782:	fb1a fa05 	smulbb	sl, sl, r5
 801c786:	fb07 a70c 	mla	r7, r7, ip, sl
 801c78a:	b2bf      	uxth	r7, r7
 801c78c:	f107 0a01 	add.w	sl, r7, #1
 801c790:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c794:	123f      	asrs	r7, r7, #8
 801c796:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c79a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c79c:	4438      	add	r0, r7
 801c79e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c7a0:	443a      	add	r2, r7
 801c7a2:	e7ba      	b.n	801c71a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c7a4:	2700      	movs	r7, #0
 801c7a6:	1bde      	subs	r6, r3, r7
 801c7a8:	2e00      	cmp	r6, #0
 801c7aa:	dc3f      	bgt.n	801c82c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c7ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7b4:	441c      	add	r4, r3
 801c7b6:	2900      	cmp	r1, #0
 801c7b8:	f340 8088 	ble.w	801c8cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c7bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7c6:	3901      	subs	r1, #1
 801c7c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7cc:	eef0 6a62 	vmov.f32	s13, s5
 801c7d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c7d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7dc:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c7e0:	eef0 6a43 	vmov.f32	s13, s6
 801c7e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7e8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c7ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c7f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c7f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c7f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c7fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c800:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c804:	ee12 2a90 	vmov	r2, s5
 801c808:	eef0 2a47 	vmov.f32	s5, s14
 801c80c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c810:	ee13 2a10 	vmov	r2, s6
 801c814:	930f      	str	r3, [sp, #60]	; 0x3c
 801c816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c818:	eeb0 3a67 	vmov.f32	s6, s15
 801c81c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c820:	9a01      	ldr	r2, [sp, #4]
 801c822:	9310      	str	r3, [sp, #64]	; 0x40
 801c824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c826:	bf08      	it	eq
 801c828:	4613      	moveq	r3, r2
 801c82a:	e745      	b.n	801c6b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c82c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c830:	d446      	bmi.n	801c8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c832:	45f2      	cmp	sl, lr
 801c834:	da44      	bge.n	801c8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c836:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c83a:	d441      	bmi.n	801c8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c83c:	9e00      	ldr	r6, [sp, #0]
 801c83e:	45b1      	cmp	r9, r6
 801c840:	da3e      	bge.n	801c8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c842:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c846:	fb0e a909 	mla	r9, lr, r9, sl
 801c84a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c84e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c852:	fb1b fb05 	smulbb	fp, fp, r5
 801c856:	eb08 0a09 	add.w	sl, r8, r9
 801c85a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c85e:	fb09 b90c 	mla	r9, r9, ip, fp
 801c862:	fa1f f989 	uxth.w	r9, r9
 801c866:	f109 0b01 	add.w	fp, r9, #1
 801c86a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c86e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c872:	f804 9006 	strb.w	r9, [r4, r6]
 801c876:	4426      	add	r6, r4
 801c878:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c87c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c880:	fb1b fb05 	smulbb	fp, fp, r5
 801c884:	fb09 b90c 	mla	r9, r9, ip, fp
 801c888:	fa1f f989 	uxth.w	r9, r9
 801c88c:	f109 0b01 	add.w	fp, r9, #1
 801c890:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c894:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c898:	f886 9001 	strb.w	r9, [r6, #1]
 801c89c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c8a0:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c8a4:	fb1a fa05 	smulbb	sl, sl, r5
 801c8a8:	fb09 a90c 	mla	r9, r9, ip, sl
 801c8ac:	fa1f f989 	uxth.w	r9, r9
 801c8b0:	f109 0a01 	add.w	sl, r9, #1
 801c8b4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c8b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8bc:	f886 9002 	strb.w	r9, [r6, #2]
 801c8c0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c8c2:	3701      	adds	r7, #1
 801c8c4:	4430      	add	r0, r6
 801c8c6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c8c8:	4432      	add	r2, r6
 801c8ca:	e76c      	b.n	801c7a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801c8cc:	b003      	add	sp, #12
 801c8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c8d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c8d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c8d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c8dc:	9201      	str	r2, [sp, #4]
 801c8de:	6868      	ldr	r0, [r5, #4]
 801c8e0:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801c8e4:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801c8e8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c8ec:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801c8f0:	fb00 2404 	mla	r4, r0, r4, r2
 801c8f4:	682a      	ldr	r2, [r5, #0]
 801c8f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c8fa:	4414      	add	r4, r2
 801c8fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c8fe:	f8d2 9000 	ldr.w	r9, [r2]
 801c902:	2900      	cmp	r1, #0
 801c904:	dc03      	bgt.n	801c90e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c906:	9a01      	ldr	r2, [sp, #4]
 801c908:	2a00      	cmp	r2, #0
 801c90a:	f340 80a8 	ble.w	801ca5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c90e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c910:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c916:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	dd0c      	ble.n	801c938 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c91e:	1405      	asrs	r5, r0, #16
 801c920:	d405      	bmi.n	801c92e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c922:	4565      	cmp	r5, ip
 801c924:	da03      	bge.n	801c92e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c926:	1415      	asrs	r5, r2, #16
 801c928:	d401      	bmi.n	801c92e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c92a:	4575      	cmp	r5, lr
 801c92c:	db05      	blt.n	801c93a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801c92e:	4438      	add	r0, r7
 801c930:	4432      	add	r2, r6
 801c932:	3b01      	subs	r3, #1
 801c934:	3403      	adds	r4, #3
 801c936:	e7f0      	b.n	801c91a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c938:	d03a      	beq.n	801c9b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801c93a:	1e5d      	subs	r5, r3, #1
 801c93c:	fb07 0805 	mla	r8, r7, r5, r0
 801c940:	ea5f 4828 	movs.w	r8, r8, asr #16
 801c944:	d429      	bmi.n	801c99a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c946:	45e0      	cmp	r8, ip
 801c948:	da27      	bge.n	801c99a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c94a:	fb06 2505 	mla	r5, r6, r5, r2
 801c94e:	142d      	asrs	r5, r5, #16
 801c950:	d423      	bmi.n	801c99a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c952:	4575      	cmp	r5, lr
 801c954:	da21      	bge.n	801c99a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c956:	f104 0803 	add.w	r8, r4, #3
 801c95a:	469a      	mov	sl, r3
 801c95c:	f1ba 0f00 	cmp.w	sl, #0
 801c960:	f108 0803 	add.w	r8, r8, #3
 801c964:	dd1f      	ble.n	801c9a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c966:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c96a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c96e:	1415      	asrs	r5, r2, #16
 801c970:	4438      	add	r0, r7
 801c972:	4432      	add	r2, r6
 801c974:	fb0c b505 	mla	r5, ip, r5, fp
 801c978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c97c:	eb09 0b05 	add.w	fp, r9, r5
 801c980:	f819 5005 	ldrb.w	r5, [r9, r5]
 801c984:	f808 5c06 	strb.w	r5, [r8, #-6]
 801c988:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801c98c:	f808 5c05 	strb.w	r5, [r8, #-5]
 801c990:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801c994:	f808 5c04 	strb.w	r5, [r8, #-4]
 801c998:	e7e0      	b.n	801c95c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c99a:	2500      	movs	r5, #0
 801c99c:	eba3 0805 	sub.w	r8, r3, r5
 801c9a0:	f1b8 0f00 	cmp.w	r8, #0
 801c9a4:	dc38      	bgt.n	801ca18 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801c9a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c9aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9ae:	441c      	add	r4, r3
 801c9b0:	2900      	cmp	r1, #0
 801c9b2:	dd54      	ble.n	801ca5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c9b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c9b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c9be:	3901      	subs	r1, #1
 801c9c0:	eeb0 6a62 	vmov.f32	s12, s5
 801c9c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c9c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c9cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9d0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c9d4:	eeb0 6a43 	vmov.f32	s12, s6
 801c9d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9dc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c9e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c9e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c9ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c9f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9f8:	ee12 2a90 	vmov	r2, s5
 801c9fc:	eef0 2a47 	vmov.f32	s5, s14
 801ca00:	fb92 f7f3 	sdiv	r7, r2, r3
 801ca04:	ee13 2a10 	vmov	r2, s6
 801ca08:	eeb0 3a67 	vmov.f32	s6, s15
 801ca0c:	fb92 f6f3 	sdiv	r6, r2, r3
 801ca10:	9a01      	ldr	r2, [sp, #4]
 801ca12:	bf08      	it	eq
 801ca14:	4613      	moveq	r3, r2
 801ca16:	e774      	b.n	801c902 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801ca18:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ca1c:	d41b      	bmi.n	801ca56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ca1e:	45e2      	cmp	sl, ip
 801ca20:	da19      	bge.n	801ca56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ca22:	ea5f 4822 	movs.w	r8, r2, asr #16
 801ca26:	d416      	bmi.n	801ca56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ca28:	45f0      	cmp	r8, lr
 801ca2a:	da14      	bge.n	801ca56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801ca2c:	fb0c a808 	mla	r8, ip, r8, sl
 801ca30:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ca34:	f819 b008 	ldrb.w	fp, [r9, r8]
 801ca38:	eb09 0a08 	add.w	sl, r9, r8
 801ca3c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801ca40:	f804 b008 	strb.w	fp, [r4, r8]
 801ca44:	44a0      	add	r8, r4
 801ca46:	f89a b001 	ldrb.w	fp, [sl, #1]
 801ca4a:	f888 b001 	strb.w	fp, [r8, #1]
 801ca4e:	f89a a002 	ldrb.w	sl, [sl, #2]
 801ca52:	f888 a002 	strb.w	sl, [r8, #2]
 801ca56:	4438      	add	r0, r7
 801ca58:	4432      	add	r2, r6
 801ca5a:	3501      	adds	r5, #1
 801ca5c:	e79e      	b.n	801c99c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801ca5e:	b003      	add	sp, #12
 801ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca68:	b085      	sub	sp, #20
 801ca6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ca70:	9202      	str	r2, [sp, #8]
 801ca72:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ca76:	6860      	ldr	r0, [r4, #4]
 801ca78:	9203      	str	r2, [sp, #12]
 801ca7a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ca7e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801ca82:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ca86:	fb00 2505 	mla	r5, r0, r5, r2
 801ca8a:	6822      	ldr	r2, [r4, #0]
 801ca8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca90:	4415      	add	r5, r2
 801ca92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ca94:	6812      	ldr	r2, [r2, #0]
 801ca96:	9201      	str	r2, [sp, #4]
 801ca98:	2900      	cmp	r1, #0
 801ca9a:	dc03      	bgt.n	801caa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801ca9c:	9a02      	ldr	r2, [sp, #8]
 801ca9e:	2a00      	cmp	r2, #0
 801caa0:	f340 811c 	ble.w	801ccdc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801caa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801caa6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801caaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801caac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	dd0e      	ble.n	801cad2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cab4:	1422      	asrs	r2, r4, #16
 801cab6:	d405      	bmi.n	801cac4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cab8:	4572      	cmp	r2, lr
 801caba:	da03      	bge.n	801cac4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cabc:	1402      	asrs	r2, r0, #16
 801cabe:	d401      	bmi.n	801cac4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801cac0:	4542      	cmp	r2, r8
 801cac2:	db07      	blt.n	801cad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801cac4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cac6:	3b01      	subs	r3, #1
 801cac8:	3503      	adds	r5, #3
 801caca:	4414      	add	r4, r2
 801cacc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cace:	4410      	add	r0, r2
 801cad0:	e7ee      	b.n	801cab0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801cad2:	d072      	beq.n	801cbba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801cad4:	1e5a      	subs	r2, r3, #1
 801cad6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cad8:	fb06 4602 	mla	r6, r6, r2, r4
 801cadc:	1436      	asrs	r6, r6, #16
 801cade:	d461      	bmi.n	801cba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cae0:	4576      	cmp	r6, lr
 801cae2:	da5f      	bge.n	801cba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801cae4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cae6:	fb06 0202 	mla	r2, r6, r2, r0
 801caea:	1412      	asrs	r2, r2, #16
 801caec:	d45a      	bmi.n	801cba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801caee:	4542      	cmp	r2, r8
 801caf0:	da58      	bge.n	801cba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801caf2:	1cef      	adds	r7, r5, #3
 801caf4:	4699      	mov	r9, r3
 801caf6:	f1b9 0f00 	cmp.w	r9, #0
 801cafa:	dd59      	ble.n	801cbb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cafc:	1426      	asrs	r6, r4, #16
 801cafe:	1402      	asrs	r2, r0, #16
 801cb00:	fb0e 6202 	mla	r2, lr, r2, r6
 801cb04:	9e01      	ldr	r6, [sp, #4]
 801cb06:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cb0a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801cb0e:	d041      	beq.n	801cb94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801cb10:	9a03      	ldr	r2, [sp, #12]
 801cb12:	fa5f fb86 	uxtb.w	fp, r6
 801cb16:	fb02 fc0c 	mul.w	ip, r2, ip
 801cb1a:	f10c 0201 	add.w	r2, ip, #1
 801cb1e:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801cb22:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801cb26:	1212      	asrs	r2, r2, #8
 801cb28:	fa1f fa82 	uxth.w	sl, r2
 801cb2c:	43d2      	mvns	r2, r2
 801cb2e:	fb1b fb0a 	smulbb	fp, fp, sl
 801cb32:	b2d2      	uxtb	r2, r2
 801cb34:	fb0c bc02 	mla	ip, ip, r2, fp
 801cb38:	fa1f fc8c 	uxth.w	ip, ip
 801cb3c:	f10c 0b01 	add.w	fp, ip, #1
 801cb40:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cb44:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cb48:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cb4c:	fb1b fb0a 	smulbb	fp, fp, sl
 801cb50:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cb54:	fb16 fa0a 	smulbb	sl, r6, sl
 801cb58:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cb5c:	f807 cc03 	strb.w	ip, [r7, #-3]
 801cb60:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801cb64:	fb06 aa02 	mla	sl, r6, r2, sl
 801cb68:	fb0c bc02 	mla	ip, ip, r2, fp
 801cb6c:	fa1f fa8a 	uxth.w	sl, sl
 801cb70:	fa1f fc8c 	uxth.w	ip, ip
 801cb74:	f10a 0601 	add.w	r6, sl, #1
 801cb78:	f10c 0b01 	add.w	fp, ip, #1
 801cb7c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cb80:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801cb84:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cb88:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cb8c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cb90:	f807 cc02 	strb.w	ip, [r7, #-2]
 801cb94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb96:	3703      	adds	r7, #3
 801cb98:	f109 39ff 	add.w	r9, r9, #4294967295
 801cb9c:	4414      	add	r4, r2
 801cb9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cba0:	4410      	add	r0, r2
 801cba2:	e7a8      	b.n	801caf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cba4:	f04f 0c00 	mov.w	ip, #0
 801cba8:	eba3 020c 	sub.w	r2, r3, ip
 801cbac:	2a00      	cmp	r2, #0
 801cbae:	dc3d      	bgt.n	801cc2c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801cbb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cbb8:	441d      	add	r5, r3
 801cbba:	2900      	cmp	r1, #0
 801cbbc:	f340 808e 	ble.w	801ccdc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cbc0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cbc6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbca:	3901      	subs	r1, #1
 801cbcc:	eeb0 6a62 	vmov.f32	s12, s5
 801cbd0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cbd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cbdc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cbe0:	eeb0 6a43 	vmov.f32	s12, s6
 801cbe4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cbe8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cbec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbf0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbf4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbf8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbfc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc04:	ee12 2a90 	vmov	r2, s5
 801cc08:	eef0 2a47 	vmov.f32	s5, s14
 801cc0c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc10:	ee13 2a10 	vmov	r2, s6
 801cc14:	9311      	str	r3, [sp, #68]	; 0x44
 801cc16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc18:	eeb0 3a67 	vmov.f32	s6, s15
 801cc1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc20:	9a02      	ldr	r2, [sp, #8]
 801cc22:	9312      	str	r3, [sp, #72]	; 0x48
 801cc24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc26:	bf08      	it	eq
 801cc28:	4613      	moveq	r3, r2
 801cc2a:	e735      	b.n	801ca98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801cc2c:	1426      	asrs	r6, r4, #16
 801cc2e:	d44e      	bmi.n	801ccce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cc30:	4576      	cmp	r6, lr
 801cc32:	da4c      	bge.n	801ccce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cc34:	1402      	asrs	r2, r0, #16
 801cc36:	d44a      	bmi.n	801ccce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cc38:	4542      	cmp	r2, r8
 801cc3a:	da48      	bge.n	801ccce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cc3c:	fb0e 6202 	mla	r2, lr, r2, r6
 801cc40:	9e01      	ldr	r6, [sp, #4]
 801cc42:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801cc46:	0e3a      	lsrs	r2, r7, #24
 801cc48:	d041      	beq.n	801ccce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801cc4a:	9e03      	ldr	r6, [sp, #12]
 801cc4c:	fa5f fb87 	uxtb.w	fp, r7
 801cc50:	4372      	muls	r2, r6
 801cc52:	1c56      	adds	r6, r2, #1
 801cc54:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801cc58:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801cc5c:	1212      	asrs	r2, r2, #8
 801cc5e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801cc62:	fa1f fa82 	uxth.w	sl, r2
 801cc66:	43d2      	mvns	r2, r2
 801cc68:	fb1b fb0a 	smulbb	fp, fp, sl
 801cc6c:	b2d2      	uxtb	r2, r2
 801cc6e:	fb09 b902 	mla	r9, r9, r2, fp
 801cc72:	fa1f f989 	uxth.w	r9, r9
 801cc76:	f109 0b01 	add.w	fp, r9, #1
 801cc7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc7e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cc82:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cc86:	fb1b fb0a 	smulbb	fp, fp, sl
 801cc8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc8e:	fb17 fa0a 	smulbb	sl, r7, sl
 801cc92:	f805 9006 	strb.w	r9, [r5, r6]
 801cc96:	442e      	add	r6, r5
 801cc98:	78b7      	ldrb	r7, [r6, #2]
 801cc9a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801cc9e:	fb07 aa02 	mla	sl, r7, r2, sl
 801cca2:	fb09 b902 	mla	r9, r9, r2, fp
 801cca6:	fa1f fa8a 	uxth.w	sl, sl
 801ccaa:	fa1f f989 	uxth.w	r9, r9
 801ccae:	f10a 0701 	add.w	r7, sl, #1
 801ccb2:	f109 0b01 	add.w	fp, r9, #1
 801ccb6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ccba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ccbe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ccc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ccc6:	f886 a002 	strb.w	sl, [r6, #2]
 801ccca:	f886 9001 	strb.w	r9, [r6, #1]
 801ccce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ccd0:	f10c 0c01 	add.w	ip, ip, #1
 801ccd4:	4414      	add	r4, r2
 801ccd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ccd8:	4410      	add	r0, r2
 801ccda:	e765      	b.n	801cba8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801ccdc:	b005      	add	sp, #20
 801ccde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cce2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cce2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cce6:	b085      	sub	sp, #20
 801cce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ccec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ccee:	9203      	str	r2, [sp, #12]
 801ccf0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ccf4:	6860      	ldr	r0, [r4, #4]
 801ccf6:	9201      	str	r2, [sp, #4]
 801ccf8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ccfc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cd00:	fb00 2505 	mla	r5, r0, r5, r2
 801cd04:	6822      	ldr	r2, [r4, #0]
 801cd06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd0a:	4415      	add	r5, r2
 801cd0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cd0e:	6812      	ldr	r2, [r2, #0]
 801cd10:	9202      	str	r2, [sp, #8]
 801cd12:	2900      	cmp	r1, #0
 801cd14:	dc03      	bgt.n	801cd1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cd16:	9a03      	ldr	r2, [sp, #12]
 801cd18:	2a00      	cmp	r2, #0
 801cd1a:	f340 8122 	ble.w	801cf62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801cd1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd20:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cd24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cd26:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	dd0f      	ble.n	801cd4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cd2e:	1422      	asrs	r2, r4, #16
 801cd30:	d406      	bmi.n	801cd40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cd32:	4572      	cmp	r2, lr
 801cd34:	da04      	bge.n	801cd40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cd36:	1402      	asrs	r2, r0, #16
 801cd38:	d402      	bmi.n	801cd40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cd3a:	9e01      	ldr	r6, [sp, #4]
 801cd3c:	42b2      	cmp	r2, r6
 801cd3e:	db07      	blt.n	801cd50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cd40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd42:	3b01      	subs	r3, #1
 801cd44:	3503      	adds	r5, #3
 801cd46:	4414      	add	r4, r2
 801cd48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd4a:	4410      	add	r0, r2
 801cd4c:	e7ed      	b.n	801cd2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801cd4e:	d06e      	beq.n	801ce2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801cd50:	1e5a      	subs	r2, r3, #1
 801cd52:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cd54:	fb06 4602 	mla	r6, r6, r2, r4
 801cd58:	1436      	asrs	r6, r6, #16
 801cd5a:	d45d      	bmi.n	801ce18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cd5c:	4576      	cmp	r6, lr
 801cd5e:	da5b      	bge.n	801ce18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cd60:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cd62:	fb06 0202 	mla	r2, r6, r2, r0
 801cd66:	1412      	asrs	r2, r2, #16
 801cd68:	d456      	bmi.n	801ce18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cd6a:	9e01      	ldr	r6, [sp, #4]
 801cd6c:	42b2      	cmp	r2, r6
 801cd6e:	da53      	bge.n	801ce18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801cd70:	1cee      	adds	r6, r5, #3
 801cd72:	469a      	mov	sl, r3
 801cd74:	f1ba 0f00 	cmp.w	sl, #0
 801cd78:	dd54      	ble.n	801ce24 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cd7a:	1427      	asrs	r7, r4, #16
 801cd7c:	1402      	asrs	r2, r0, #16
 801cd7e:	fb0e 7202 	mla	r2, lr, r2, r7
 801cd82:	9f02      	ldr	r7, [sp, #8]
 801cd84:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801cd88:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801cd8c:	d03c      	beq.n	801ce08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801cd8e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cd92:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cd96:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cd9a:	fa5f f28c 	uxtb.w	r2, ip
 801cd9e:	b2ff      	uxtb	r7, r7
 801cda0:	f000 80d8 	beq.w	801cf54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801cda4:	fa1f f882 	uxth.w	r8, r2
 801cda8:	43d2      	mvns	r2, r2
 801cdaa:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801cdae:	fb17 f708 	smulbb	r7, r7, r8
 801cdb2:	b2d2      	uxtb	r2, r2
 801cdb4:	fb19 f908 	smulbb	r9, r9, r8
 801cdb8:	fb0c 7702 	mla	r7, ip, r2, r7
 801cdbc:	fb1b f808 	smulbb	r8, fp, r8
 801cdc0:	b2bf      	uxth	r7, r7
 801cdc2:	f107 0c01 	add.w	ip, r7, #1
 801cdc6:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801cdca:	123f      	asrs	r7, r7, #8
 801cdcc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801cdd0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801cdd4:	fb07 9902 	mla	r9, r7, r2, r9
 801cdd8:	fa1f f989 	uxth.w	r9, r9
 801cddc:	f109 0701 	add.w	r7, r9, #1
 801cde0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cde4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801cde8:	fb07 8802 	mla	r8, r7, r2, r8
 801cdec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cdf0:	fa1f f888 	uxth.w	r8, r8
 801cdf4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801cdf8:	f108 0201 	add.w	r2, r8, #1
 801cdfc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ce00:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ce04:	f806 8c01 	strb.w	r8, [r6, #-1]
 801ce08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ce0a:	3603      	adds	r6, #3
 801ce0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ce10:	4414      	add	r4, r2
 801ce12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ce14:	4410      	add	r0, r2
 801ce16:	e7ad      	b.n	801cd74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ce18:	f04f 0c00 	mov.w	ip, #0
 801ce1c:	eba3 020c 	sub.w	r2, r3, ip
 801ce20:	2a00      	cmp	r2, #0
 801ce22:	dc3d      	bgt.n	801cea0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801ce24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce2c:	441d      	add	r5, r3
 801ce2e:	2900      	cmp	r1, #0
 801ce30:	f340 8097 	ble.w	801cf62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801ce34:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce3e:	3901      	subs	r1, #1
 801ce40:	eeb0 6a62 	vmov.f32	s12, s5
 801ce44:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ce48:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce4c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce50:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ce54:	eeb0 6a43 	vmov.f32	s12, s6
 801ce58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce5c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ce60:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce64:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce68:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce6c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce70:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce74:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce78:	ee12 2a90 	vmov	r2, s5
 801ce7c:	eef0 2a47 	vmov.f32	s5, s14
 801ce80:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce84:	ee13 2a10 	vmov	r2, s6
 801ce88:	9311      	str	r3, [sp, #68]	; 0x44
 801ce8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce8c:	eeb0 3a67 	vmov.f32	s6, s15
 801ce90:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce94:	9a03      	ldr	r2, [sp, #12]
 801ce96:	9312      	str	r3, [sp, #72]	; 0x48
 801ce98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce9a:	bf08      	it	eq
 801ce9c:	4613      	moveq	r3, r2
 801ce9e:	e738      	b.n	801cd12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801cea0:	1426      	asrs	r6, r4, #16
 801cea2:	d448      	bmi.n	801cf36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cea4:	4576      	cmp	r6, lr
 801cea6:	da46      	bge.n	801cf36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cea8:	1402      	asrs	r2, r0, #16
 801ceaa:	d444      	bmi.n	801cf36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ceac:	9f01      	ldr	r7, [sp, #4]
 801ceae:	42ba      	cmp	r2, r7
 801ceb0:	da41      	bge.n	801cf36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ceb2:	fb0e 6202 	mla	r2, lr, r2, r6
 801ceb6:	9e02      	ldr	r6, [sp, #8]
 801ceb8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801cebc:	0e3a      	lsrs	r2, r7, #24
 801cebe:	d03a      	beq.n	801cf36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cec0:	2aff      	cmp	r2, #255	; 0xff
 801cec2:	b2d6      	uxtb	r6, r2
 801cec4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cec8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801cecc:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801ced0:	b2ff      	uxtb	r7, r7
 801ced2:	d037      	beq.n	801cf44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801ced4:	fa1f f986 	uxth.w	r9, r6
 801ced8:	4462      	add	r2, ip
 801ceda:	43f6      	mvns	r6, r6
 801cedc:	f815 8002 	ldrb.w	r8, [r5, r2]
 801cee0:	fb17 f709 	smulbb	r7, r7, r9
 801cee4:	fb1a fa09 	smulbb	sl, sl, r9
 801cee8:	b2f6      	uxtb	r6, r6
 801ceea:	fb1b f909 	smulbb	r9, fp, r9
 801ceee:	fb08 7706 	mla	r7, r8, r6, r7
 801cef2:	b2bf      	uxth	r7, r7
 801cef4:	f107 0801 	add.w	r8, r7, #1
 801cef8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801cefc:	123f      	asrs	r7, r7, #8
 801cefe:	54af      	strb	r7, [r5, r2]
 801cf00:	442a      	add	r2, r5
 801cf02:	7857      	ldrb	r7, [r2, #1]
 801cf04:	fb07 aa06 	mla	sl, r7, r6, sl
 801cf08:	fa1f fa8a 	uxth.w	sl, sl
 801cf0c:	f10a 0701 	add.w	r7, sl, #1
 801cf10:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cf14:	7897      	ldrb	r7, [r2, #2]
 801cf16:	fb07 9906 	mla	r9, r7, r6, r9
 801cf1a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf1e:	fa1f f989 	uxth.w	r9, r9
 801cf22:	f882 a001 	strb.w	sl, [r2, #1]
 801cf26:	f109 0601 	add.w	r6, r9, #1
 801cf2a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801cf2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cf32:	f882 9002 	strb.w	r9, [r2, #2]
 801cf36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cf38:	f10c 0c01 	add.w	ip, ip, #1
 801cf3c:	4414      	add	r4, r2
 801cf3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf40:	4410      	add	r0, r2
 801cf42:	e76b      	b.n	801ce1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801cf44:	4462      	add	r2, ip
 801cf46:	54af      	strb	r7, [r5, r2]
 801cf48:	442a      	add	r2, r5
 801cf4a:	f882 a001 	strb.w	sl, [r2, #1]
 801cf4e:	f882 b002 	strb.w	fp, [r2, #2]
 801cf52:	e7f0      	b.n	801cf36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801cf54:	f806 7c03 	strb.w	r7, [r6, #-3]
 801cf58:	f806 9c02 	strb.w	r9, [r6, #-2]
 801cf5c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801cf60:	e752      	b.n	801ce08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801cf62:	b005      	add	sp, #20
 801cf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf68 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf6c:	b087      	sub	sp, #28
 801cf6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cf72:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801cf74:	9204      	str	r2, [sp, #16]
 801cf76:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801cf7a:	6860      	ldr	r0, [r4, #4]
 801cf7c:	9205      	str	r2, [sp, #20]
 801cf7e:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801cf82:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801cf86:	9101      	str	r1, [sp, #4]
 801cf88:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801cf8c:	fb00 2505 	mla	r5, r0, r5, r2
 801cf90:	6822      	ldr	r2, [r4, #0]
 801cf92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cf96:	4415      	add	r5, r2
 801cf98:	f10e 0201 	add.w	r2, lr, #1
 801cf9c:	f022 0201 	bic.w	r2, r2, #1
 801cfa0:	9202      	str	r2, [sp, #8]
 801cfa2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cfa4:	6812      	ldr	r2, [r2, #0]
 801cfa6:	9203      	str	r2, [sp, #12]
 801cfa8:	9a01      	ldr	r2, [sp, #4]
 801cfaa:	2a00      	cmp	r2, #0
 801cfac:	dc03      	bgt.n	801cfb6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801cfae:	9a04      	ldr	r2, [sp, #16]
 801cfb0:	2a00      	cmp	r2, #0
 801cfb2:	f340 8132 	ble.w	801d21a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801cfb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cfb8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cfbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfbe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	dd0e      	ble.n	801cfe4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801cfc6:	1422      	asrs	r2, r4, #16
 801cfc8:	d405      	bmi.n	801cfd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cfca:	4596      	cmp	lr, r2
 801cfcc:	dd03      	ble.n	801cfd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cfce:	1402      	asrs	r2, r0, #16
 801cfd0:	d401      	bmi.n	801cfd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cfd2:	4542      	cmp	r2, r8
 801cfd4:	db07      	blt.n	801cfe6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801cfd6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cfd8:	3b01      	subs	r3, #1
 801cfda:	3503      	adds	r5, #3
 801cfdc:	4414      	add	r4, r2
 801cfde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cfe0:	4410      	add	r0, r2
 801cfe2:	e7ee      	b.n	801cfc2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801cfe4:	d010      	beq.n	801d008 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801cfe6:	1e5a      	subs	r2, r3, #1
 801cfe8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801cfea:	fb06 4602 	mla	r6, r6, r2, r4
 801cfee:	1436      	asrs	r6, r6, #16
 801cff0:	d546      	bpl.n	801d080 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801cff2:	4699      	mov	r9, r3
 801cff4:	462e      	mov	r6, r5
 801cff6:	f1b9 0f00 	cmp.w	r9, #0
 801cffa:	f300 80ac 	bgt.w	801d156 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801cffe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d002:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d006:	441d      	add	r5, r3
 801d008:	9b01      	ldr	r3, [sp, #4]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	f340 8105 	ble.w	801d21a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801d010:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d016:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d01a:	eeb0 6a62 	vmov.f32	s12, s5
 801d01e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d022:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d026:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d02a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d02e:	eeb0 6a43 	vmov.f32	s12, s6
 801d032:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d036:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d03a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d03e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d042:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d046:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d04a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d04e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d052:	ee12 2a90 	vmov	r2, s5
 801d056:	eef0 2a47 	vmov.f32	s5, s14
 801d05a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d05e:	ee13 2a10 	vmov	r2, s6
 801d062:	9313      	str	r3, [sp, #76]	; 0x4c
 801d064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d066:	eeb0 3a67 	vmov.f32	s6, s15
 801d06a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d06e:	9314      	str	r3, [sp, #80]	; 0x50
 801d070:	9b01      	ldr	r3, [sp, #4]
 801d072:	9a04      	ldr	r2, [sp, #16]
 801d074:	3b01      	subs	r3, #1
 801d076:	9301      	str	r3, [sp, #4]
 801d078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d07a:	bf08      	it	eq
 801d07c:	4613      	moveq	r3, r2
 801d07e:	e793      	b.n	801cfa8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801d080:	45b6      	cmp	lr, r6
 801d082:	ddb6      	ble.n	801cff2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d084:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d086:	fb06 0202 	mla	r2, r6, r2, r0
 801d08a:	1412      	asrs	r2, r2, #16
 801d08c:	d4b1      	bmi.n	801cff2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d08e:	4542      	cmp	r2, r8
 801d090:	daaf      	bge.n	801cff2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801d092:	1cee      	adds	r6, r5, #3
 801d094:	4699      	mov	r9, r3
 801d096:	f1b9 0f00 	cmp.w	r9, #0
 801d09a:	ddb0      	ble.n	801cffe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801d09c:	1422      	asrs	r2, r4, #16
 801d09e:	9902      	ldr	r1, [sp, #8]
 801d0a0:	1407      	asrs	r7, r0, #16
 801d0a2:	fb01 2707 	mla	r7, r1, r7, r2
 801d0a6:	9903      	ldr	r1, [sp, #12]
 801d0a8:	087a      	lsrs	r2, r7, #1
 801d0aa:	5c8a      	ldrb	r2, [r1, r2]
 801d0ac:	07f9      	lsls	r1, r7, #31
 801d0ae:	bf54      	ite	pl
 801d0b0:	f002 020f 	andpl.w	r2, r2, #15
 801d0b4:	1112      	asrmi	r2, r2, #4
 801d0b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d0ba:	b2d2      	uxtb	r2, r2
 801d0bc:	2a00      	cmp	r2, #0
 801d0be:	d042      	beq.n	801d146 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801d0c0:	4957      	ldr	r1, [pc, #348]	; (801d220 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d0c2:	680f      	ldr	r7, [r1, #0]
 801d0c4:	9905      	ldr	r1, [sp, #20]
 801d0c6:	fa5f fb87 	uxtb.w	fp, r7
 801d0ca:	434a      	muls	r2, r1
 801d0cc:	f102 0c01 	add.w	ip, r2, #1
 801d0d0:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d0d4:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801d0d8:	1212      	asrs	r2, r2, #8
 801d0da:	fa1f fa82 	uxth.w	sl, r2
 801d0de:	43d2      	mvns	r2, r2
 801d0e0:	fb1b fb0a 	smulbb	fp, fp, sl
 801d0e4:	b2d2      	uxtb	r2, r2
 801d0e6:	fb0c bc02 	mla	ip, ip, r2, fp
 801d0ea:	fa1f fc8c 	uxth.w	ip, ip
 801d0ee:	f10c 0b01 	add.w	fp, ip, #1
 801d0f2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d0f6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d0fa:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d0fe:	fb1b fb0a 	smulbb	fp, fp, sl
 801d102:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d106:	fb17 fa0a 	smulbb	sl, r7, sl
 801d10a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d10e:	f806 cc03 	strb.w	ip, [r6, #-3]
 801d112:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801d116:	fb07 aa02 	mla	sl, r7, r2, sl
 801d11a:	fb0c bc02 	mla	ip, ip, r2, fp
 801d11e:	fa1f fa8a 	uxth.w	sl, sl
 801d122:	fa1f fc8c 	uxth.w	ip, ip
 801d126:	f10a 0701 	add.w	r7, sl, #1
 801d12a:	f10c 0b01 	add.w	fp, ip, #1
 801d12e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d132:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d136:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d13a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d13e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d142:	f806 cc02 	strb.w	ip, [r6, #-2]
 801d146:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d148:	3603      	adds	r6, #3
 801d14a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d14e:	4414      	add	r4, r2
 801d150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d152:	4410      	add	r0, r2
 801d154:	e79f      	b.n	801d096 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801d156:	1422      	asrs	r2, r4, #16
 801d158:	d457      	bmi.n	801d20a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d15a:	4596      	cmp	lr, r2
 801d15c:	dd55      	ble.n	801d20a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d15e:	1407      	asrs	r7, r0, #16
 801d160:	d453      	bmi.n	801d20a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d162:	4547      	cmp	r7, r8
 801d164:	da51      	bge.n	801d20a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d166:	9902      	ldr	r1, [sp, #8]
 801d168:	fb07 2701 	mla	r7, r7, r1, r2
 801d16c:	9903      	ldr	r1, [sp, #12]
 801d16e:	087a      	lsrs	r2, r7, #1
 801d170:	07ff      	lsls	r7, r7, #31
 801d172:	5c8a      	ldrb	r2, [r1, r2]
 801d174:	bf54      	ite	pl
 801d176:	f002 020f 	andpl.w	r2, r2, #15
 801d17a:	1112      	asrmi	r2, r2, #4
 801d17c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d180:	b2d2      	uxtb	r2, r2
 801d182:	2a00      	cmp	r2, #0
 801d184:	d041      	beq.n	801d20a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801d186:	4926      	ldr	r1, [pc, #152]	; (801d220 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801d188:	680f      	ldr	r7, [r1, #0]
 801d18a:	9905      	ldr	r1, [sp, #20]
 801d18c:	fa5f fb87 	uxtb.w	fp, r7
 801d190:	434a      	muls	r2, r1
 801d192:	f102 0c01 	add.w	ip, r2, #1
 801d196:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801d19a:	f896 c000 	ldrb.w	ip, [r6]
 801d19e:	1212      	asrs	r2, r2, #8
 801d1a0:	fa1f fa82 	uxth.w	sl, r2
 801d1a4:	43d2      	mvns	r2, r2
 801d1a6:	fb1b fb0a 	smulbb	fp, fp, sl
 801d1aa:	b2d2      	uxtb	r2, r2
 801d1ac:	fb0c bc02 	mla	ip, ip, r2, fp
 801d1b0:	fa1f fc8c 	uxth.w	ip, ip
 801d1b4:	f10c 0b01 	add.w	fp, ip, #1
 801d1b8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d1bc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d1c0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d1c4:	fb1b fb0a 	smulbb	fp, fp, sl
 801d1c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d1cc:	fb17 fa0a 	smulbb	sl, r7, sl
 801d1d0:	78b7      	ldrb	r7, [r6, #2]
 801d1d2:	f886 c000 	strb.w	ip, [r6]
 801d1d6:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d1da:	fb07 aa02 	mla	sl, r7, r2, sl
 801d1de:	fb0c bc02 	mla	ip, ip, r2, fp
 801d1e2:	fa1f fa8a 	uxth.w	sl, sl
 801d1e6:	fa1f fc8c 	uxth.w	ip, ip
 801d1ea:	f10a 0701 	add.w	r7, sl, #1
 801d1ee:	f10c 0b01 	add.w	fp, ip, #1
 801d1f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d1f6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d1fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d1fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d202:	f886 a002 	strb.w	sl, [r6, #2]
 801d206:	f886 c001 	strb.w	ip, [r6, #1]
 801d20a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d20c:	3603      	adds	r6, #3
 801d20e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d212:	4414      	add	r4, r2
 801d214:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d216:	4410      	add	r0, r2
 801d218:	e6ed      	b.n	801cff6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801d21a:	b007      	add	sp, #28
 801d21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d220:	2000c58c 	.word	0x2000c58c

0801d224 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d228:	b087      	sub	sp, #28
 801d22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d22e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d230:	9205      	str	r2, [sp, #20]
 801d232:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801d236:	6860      	ldr	r0, [r4, #4]
 801d238:	9202      	str	r2, [sp, #8]
 801d23a:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801d23e:	9101      	str	r1, [sp, #4]
 801d240:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801d244:	fb00 2606 	mla	r6, r0, r6, r2
 801d248:	6822      	ldr	r2, [r4, #0]
 801d24a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d24e:	4416      	add	r6, r2
 801d250:	f108 0201 	add.w	r2, r8, #1
 801d254:	f022 0201 	bic.w	r2, r2, #1
 801d258:	9203      	str	r2, [sp, #12]
 801d25a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d25c:	6812      	ldr	r2, [r2, #0]
 801d25e:	9204      	str	r2, [sp, #16]
 801d260:	9a01      	ldr	r2, [sp, #4]
 801d262:	2a00      	cmp	r2, #0
 801d264:	dc03      	bgt.n	801d26e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d266:	9a05      	ldr	r2, [sp, #20]
 801d268:	2a00      	cmp	r2, #0
 801d26a:	f340 813a 	ble.w	801d4e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d26e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d270:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d276:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	dd0f      	ble.n	801d29e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d27e:	142a      	asrs	r2, r5, #16
 801d280:	d406      	bmi.n	801d290 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d282:	4590      	cmp	r8, r2
 801d284:	dd04      	ble.n	801d290 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d286:	1422      	asrs	r2, r4, #16
 801d288:	d402      	bmi.n	801d290 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801d28a:	9802      	ldr	r0, [sp, #8]
 801d28c:	4282      	cmp	r2, r0
 801d28e:	db07      	blt.n	801d2a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d290:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d292:	3b01      	subs	r3, #1
 801d294:	3603      	adds	r6, #3
 801d296:	4415      	add	r5, r2
 801d298:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d29a:	4414      	add	r4, r2
 801d29c:	e7ed      	b.n	801d27a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d29e:	d073      	beq.n	801d388 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801d2a0:	1e5a      	subs	r2, r3, #1
 801d2a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d2a4:	fb00 5002 	mla	r0, r0, r2, r5
 801d2a8:	1400      	asrs	r0, r0, #16
 801d2aa:	d464      	bmi.n	801d376 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d2ac:	4580      	cmp	r8, r0
 801d2ae:	dd62      	ble.n	801d376 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d2b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d2b2:	fb00 4202 	mla	r2, r0, r2, r4
 801d2b6:	1412      	asrs	r2, r2, #16
 801d2b8:	d45d      	bmi.n	801d376 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d2ba:	9802      	ldr	r0, [sp, #8]
 801d2bc:	4282      	cmp	r2, r0
 801d2be:	da5a      	bge.n	801d376 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801d2c0:	1cf0      	adds	r0, r6, #3
 801d2c2:	469a      	mov	sl, r3
 801d2c4:	f1ba 0f00 	cmp.w	sl, #0
 801d2c8:	dd59      	ble.n	801d37e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801d2ca:	142a      	asrs	r2, r5, #16
 801d2cc:	9903      	ldr	r1, [sp, #12]
 801d2ce:	1427      	asrs	r7, r4, #16
 801d2d0:	fb01 2707 	mla	r7, r1, r7, r2
 801d2d4:	9904      	ldr	r1, [sp, #16]
 801d2d6:	087a      	lsrs	r2, r7, #1
 801d2d8:	5c8a      	ldrb	r2, [r1, r2]
 801d2da:	07f9      	lsls	r1, r7, #31
 801d2dc:	bf54      	ite	pl
 801d2de:	f002 020f 	andpl.w	r2, r2, #15
 801d2e2:	1112      	asrmi	r2, r2, #4
 801d2e4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d2e8:	b2d2      	uxtb	r2, r2
 801d2ea:	2a00      	cmp	r2, #0
 801d2ec:	d03b      	beq.n	801d366 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d2ee:	497e      	ldr	r1, [pc, #504]	; (801d4e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d2f0:	2aff      	cmp	r2, #255	; 0xff
 801d2f2:	680f      	ldr	r7, [r1, #0]
 801d2f4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d2f8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d2fc:	b2ff      	uxtb	r7, r7
 801d2fe:	f000 80e9 	beq.w	801d4d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d302:	fa1f fe82 	uxth.w	lr, r2
 801d306:	43d2      	mvns	r2, r2
 801d308:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801d30c:	fb17 f70e 	smulbb	r7, r7, lr
 801d310:	b2d2      	uxtb	r2, r2
 801d312:	fb19 f90e 	smulbb	r9, r9, lr
 801d316:	fb0c 7702 	mla	r7, ip, r2, r7
 801d31a:	fb1b fe0e 	smulbb	lr, fp, lr
 801d31e:	b2bf      	uxth	r7, r7
 801d320:	f107 0c01 	add.w	ip, r7, #1
 801d324:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d328:	123f      	asrs	r7, r7, #8
 801d32a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d32e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d332:	fb07 9902 	mla	r9, r7, r2, r9
 801d336:	fa1f f989 	uxth.w	r9, r9
 801d33a:	f109 0701 	add.w	r7, r9, #1
 801d33e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d342:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d346:	fb07 ee02 	mla	lr, r7, r2, lr
 801d34a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d34e:	fa1f fe8e 	uxth.w	lr, lr
 801d352:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d356:	f10e 0201 	add.w	r2, lr, #1
 801d35a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d35e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d362:	f800 ec01 	strb.w	lr, [r0, #-1]
 801d366:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d368:	3003      	adds	r0, #3
 801d36a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d36e:	4415      	add	r5, r2
 801d370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d372:	4414      	add	r4, r2
 801d374:	e7a6      	b.n	801d2c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801d376:	2700      	movs	r7, #0
 801d378:	1bda      	subs	r2, r3, r7
 801d37a:	2a00      	cmp	r2, #0
 801d37c:	dc40      	bgt.n	801d400 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d37e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d382:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d386:	441e      	add	r6, r3
 801d388:	9b01      	ldr	r3, [sp, #4]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	f340 80a9 	ble.w	801d4e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801d390:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d396:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d39a:	eeb0 6a62 	vmov.f32	s12, s5
 801d39e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d3a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d3a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3aa:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d3ae:	eeb0 6a43 	vmov.f32	s12, s6
 801d3b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3b6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d3ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d3c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d3ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d3ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d3d2:	ee12 2a90 	vmov	r2, s5
 801d3d6:	eef0 2a47 	vmov.f32	s5, s14
 801d3da:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3de:	ee13 2a10 	vmov	r2, s6
 801d3e2:	9313      	str	r3, [sp, #76]	; 0x4c
 801d3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3e6:	eeb0 3a67 	vmov.f32	s6, s15
 801d3ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3ee:	9314      	str	r3, [sp, #80]	; 0x50
 801d3f0:	9b01      	ldr	r3, [sp, #4]
 801d3f2:	9a05      	ldr	r2, [sp, #20]
 801d3f4:	3b01      	subs	r3, #1
 801d3f6:	9301      	str	r3, [sp, #4]
 801d3f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3fa:	bf08      	it	eq
 801d3fc:	4613      	moveq	r3, r2
 801d3fe:	e72f      	b.n	801d260 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d400:	142a      	asrs	r2, r5, #16
 801d402:	d458      	bmi.n	801d4b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d404:	4590      	cmp	r8, r2
 801d406:	dd56      	ble.n	801d4b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d408:	1420      	asrs	r0, r4, #16
 801d40a:	d454      	bmi.n	801d4b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d40c:	9902      	ldr	r1, [sp, #8]
 801d40e:	4288      	cmp	r0, r1
 801d410:	da51      	bge.n	801d4b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d412:	9903      	ldr	r1, [sp, #12]
 801d414:	fb00 2001 	mla	r0, r0, r1, r2
 801d418:	9904      	ldr	r1, [sp, #16]
 801d41a:	0842      	lsrs	r2, r0, #1
 801d41c:	07c0      	lsls	r0, r0, #31
 801d41e:	5c8a      	ldrb	r2, [r1, r2]
 801d420:	bf54      	ite	pl
 801d422:	f002 020f 	andpl.w	r2, r2, #15
 801d426:	1112      	asrmi	r2, r2, #4
 801d428:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d42c:	b2d2      	uxtb	r2, r2
 801d42e:	2a00      	cmp	r2, #0
 801d430:	d041      	beq.n	801d4b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d432:	492d      	ldr	r1, [pc, #180]	; (801d4e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801d434:	2aff      	cmp	r2, #255	; 0xff
 801d436:	6808      	ldr	r0, [r1, #0]
 801d438:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d43c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d440:	fa5f fc80 	uxtb.w	ip, r0
 801d444:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d448:	d03b      	beq.n	801d4c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801d44a:	fa1f f982 	uxth.w	r9, r2
 801d44e:	4438      	add	r0, r7
 801d450:	43d2      	mvns	r2, r2
 801d452:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d456:	fb1c fc09 	smulbb	ip, ip, r9
 801d45a:	fb1a fa09 	smulbb	sl, sl, r9
 801d45e:	b2d2      	uxtb	r2, r2
 801d460:	fb1b f909 	smulbb	r9, fp, r9
 801d464:	fb0e cc02 	mla	ip, lr, r2, ip
 801d468:	fa1f fc8c 	uxth.w	ip, ip
 801d46c:	f10c 0e01 	add.w	lr, ip, #1
 801d470:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d474:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d478:	f806 c000 	strb.w	ip, [r6, r0]
 801d47c:	4430      	add	r0, r6
 801d47e:	f890 c001 	ldrb.w	ip, [r0, #1]
 801d482:	fb0c aa02 	mla	sl, ip, r2, sl
 801d486:	fa1f fa8a 	uxth.w	sl, sl
 801d48a:	f10a 0c01 	add.w	ip, sl, #1
 801d48e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d492:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d496:	fb0c 9902 	mla	r9, ip, r2, r9
 801d49a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d49e:	fa1f f989 	uxth.w	r9, r9
 801d4a2:	f880 a001 	strb.w	sl, [r0, #1]
 801d4a6:	f109 0201 	add.w	r2, r9, #1
 801d4aa:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d4ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d4b2:	f880 9002 	strb.w	r9, [r0, #2]
 801d4b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d4b8:	3701      	adds	r7, #1
 801d4ba:	4415      	add	r5, r2
 801d4bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4be:	4414      	add	r4, r2
 801d4c0:	e75a      	b.n	801d378 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801d4c2:	4438      	add	r0, r7
 801d4c4:	f806 c000 	strb.w	ip, [r6, r0]
 801d4c8:	4430      	add	r0, r6
 801d4ca:	f880 a001 	strb.w	sl, [r0, #1]
 801d4ce:	f880 b002 	strb.w	fp, [r0, #2]
 801d4d2:	e7f0      	b.n	801d4b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d4d4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d4d8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d4dc:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d4e0:	e741      	b.n	801d366 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d4e2:	b007      	add	sp, #28
 801d4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4e8:	2000c58c 	.word	0x2000c58c

0801d4ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d4ec:	4770      	bx	lr

0801d4ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d4ee:	4770      	bx	lr

0801d4f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d4f0:	4770      	bx	lr

0801d4f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d4f2:	4770      	bx	lr

0801d4f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d4f4:	4770      	bx	lr

0801d4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d4f6:	4770      	bx	lr

0801d4f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d4f8:	4770      	bx	lr

0801d4fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d4fa:	4770      	bx	lr

0801d4fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d4fc:	4770      	bx	lr

0801d4fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d4fe:	4770      	bx	lr

0801d500 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d500:	4770      	bx	lr

0801d502 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d502:	4770      	bx	lr

0801d504 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d504:	4770      	bx	lr

0801d506 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d506:	4770      	bx	lr

0801d508 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d508:	4770      	bx	lr

0801d50a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d50a:	4770      	bx	lr

0801d50c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d50c:	4770      	bx	lr

0801d50e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d50e:	4770      	bx	lr

0801d510 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d510:	4770      	bx	lr

0801d512 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d512:	4770      	bx	lr

0801d514 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d514:	2bff      	cmp	r3, #255	; 0xff
 801d516:	b508      	push	{r3, lr}
 801d518:	d04f      	beq.n	801d5ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d51a:	2a2c      	cmp	r2, #44	; 0x2c
 801d51c:	d032      	beq.n	801d584 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d51e:	d80f      	bhi.n	801d540 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d520:	2a08      	cmp	r2, #8
 801d522:	d046      	beq.n	801d5b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d524:	d805      	bhi.n	801d532 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d526:	2a04      	cmp	r2, #4
 801d528:	d041      	beq.n	801d5ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d52a:	2a05      	cmp	r2, #5
 801d52c:	d03d      	beq.n	801d5aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d52e:	2000      	movs	r0, #0
 801d530:	e027      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d532:	2a0a      	cmp	r2, #10
 801d534:	d03d      	beq.n	801d5b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d536:	d301      	bcc.n	801d53c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d538:	2a0b      	cmp	r2, #11
 801d53a:	d1f8      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d53c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d53e:	e020      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d540:	2a30      	cmp	r2, #48	; 0x30
 801d542:	d038      	beq.n	801d5b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d544:	d808      	bhi.n	801d558 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d546:	2a2e      	cmp	r2, #46	; 0x2e
 801d548:	684b      	ldr	r3, [r1, #4]
 801d54a:	d029      	beq.n	801d5a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d54c:	d90b      	bls.n	801d566 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d54e:	781b      	ldrb	r3, [r3, #0]
 801d550:	2b00      	cmp	r3, #0
 801d552:	d1ec      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d554:	6a00      	ldr	r0, [r0, #32]
 801d556:	e014      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d558:	2a32      	cmp	r2, #50	; 0x32
 801d55a:	d02c      	beq.n	801d5b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d55c:	d301      	bcc.n	801d562 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d55e:	2a33      	cmp	r2, #51	; 0x33
 801d560:	d1e5      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d562:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d564:	e00d      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d566:	781b      	ldrb	r3, [r3, #0]
 801d568:	2b01      	cmp	r3, #1
 801d56a:	d009      	beq.n	801d580 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d56c:	d3f2      	bcc.n	801d554 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d56e:	2b02      	cmp	r3, #2
 801d570:	d1dd      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d572:	4b39      	ldr	r3, [pc, #228]	; (801d658 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d574:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801d578:	4a38      	ldr	r2, [pc, #224]	; (801d65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d57a:	4839      	ldr	r0, [pc, #228]	; (801d660 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d57c:	f007 ff3e 	bl	80253fc <__assert_func>
 801d580:	6900      	ldr	r0, [r0, #16]
 801d582:	bd08      	pop	{r3, pc}
 801d584:	684b      	ldr	r3, [r1, #4]
 801d586:	781b      	ldrb	r3, [r3, #0]
 801d588:	2b01      	cmp	r3, #1
 801d58a:	d007      	beq.n	801d59c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d58c:	d30b      	bcc.n	801d5a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d58e:	2b02      	cmp	r3, #2
 801d590:	d1cd      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d592:	4b31      	ldr	r3, [pc, #196]	; (801d658 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d594:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801d598:	4a30      	ldr	r2, [pc, #192]	; (801d65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d59a:	e7ee      	b.n	801d57a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d59c:	6880      	ldr	r0, [r0, #8]
 801d59e:	e7f0      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5a0:	781b      	ldrb	r3, [r3, #0]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d1c3      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5a6:	6980      	ldr	r0, [r0, #24]
 801d5a8:	e7eb      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d5ac:	e7e9      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d5b0:	e7e7      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d5b4:	e7e5      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d5b8:	e7e3      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5ba:	2a2c      	cmp	r2, #44	; 0x2c
 801d5bc:	d030      	beq.n	801d620 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d5be:	d80f      	bhi.n	801d5e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d5c0:	2a08      	cmp	r2, #8
 801d5c2:	d044      	beq.n	801d64e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d5c4:	d805      	bhi.n	801d5d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d5c6:	2a04      	cmp	r2, #4
 801d5c8:	d03f      	beq.n	801d64a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d5ca:	2a05      	cmp	r2, #5
 801d5cc:	d1af      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d5d0:	e7d7      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5d2:	2a0a      	cmp	r2, #10
 801d5d4:	d03b      	beq.n	801d64e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d5d6:	d301      	bcc.n	801d5dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d5d8:	2a0b      	cmp	r2, #11
 801d5da:	d1a8      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d5de:	e7d0      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5e0:	2a30      	cmp	r2, #48	; 0x30
 801d5e2:	d036      	beq.n	801d652 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d5e4:	d808      	bhi.n	801d5f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801d5e6:	2a2e      	cmp	r2, #46	; 0x2e
 801d5e8:	684b      	ldr	r3, [r1, #4]
 801d5ea:	d028      	beq.n	801d63e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d5ec:	d90b      	bls.n	801d606 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801d5ee:	781b      	ldrb	r3, [r3, #0]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d19c      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d5f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d5f6:	e7c4      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d5f8:	2a32      	cmp	r2, #50	; 0x32
 801d5fa:	d02a      	beq.n	801d652 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801d5fc:	d301      	bcc.n	801d602 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801d5fe:	2a33      	cmp	r2, #51	; 0x33
 801d600:	d195      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d602:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d604:	e7bd      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d606:	781b      	ldrb	r3, [r3, #0]
 801d608:	2b01      	cmp	r3, #1
 801d60a:	d007      	beq.n	801d61c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801d60c:	d3f2      	bcc.n	801d5f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801d60e:	2b02      	cmp	r3, #2
 801d610:	d18d      	bne.n	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d612:	4b11      	ldr	r3, [pc, #68]	; (801d658 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d614:	f240 31e1 	movw	r1, #993	; 0x3e1
 801d618:	4a10      	ldr	r2, [pc, #64]	; (801d65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d61a:	e7ae      	b.n	801d57a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d61c:	6940      	ldr	r0, [r0, #20]
 801d61e:	e7b0      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d620:	684b      	ldr	r3, [r1, #4]
 801d622:	781b      	ldrb	r3, [r3, #0]
 801d624:	2b01      	cmp	r3, #1
 801d626:	d008      	beq.n	801d63a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801d628:	d30d      	bcc.n	801d646 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d62a:	2b02      	cmp	r3, #2
 801d62c:	f47f af7f 	bne.w	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d630:	4b09      	ldr	r3, [pc, #36]	; (801d658 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d632:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801d636:	4a09      	ldr	r2, [pc, #36]	; (801d65c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d638:	e79f      	b.n	801d57a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d63a:	68c0      	ldr	r0, [r0, #12]
 801d63c:	e7a1      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d63e:	781b      	ldrb	r3, [r3, #0]
 801d640:	2b00      	cmp	r3, #0
 801d642:	f47f af74 	bne.w	801d52e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d646:	69c0      	ldr	r0, [r0, #28]
 801d648:	e79b      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d64a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d64c:	e799      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d64e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d650:	e797      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d652:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d654:	e795      	b.n	801d582 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d656:	bf00      	nop
 801d658:	08029cb3 	.word	0x08029cb3
 801d65c:	0802a467 	.word	0x0802a467
 801d660:	08029cff 	.word	0x08029cff

0801d664 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d664:	b508      	push	{r3, lr}
 801d666:	4b06      	ldr	r3, [pc, #24]	; (801d680 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801d668:	8818      	ldrh	r0, [r3, #0]
 801d66a:	b928      	cbnz	r0, 801d678 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801d66c:	4b05      	ldr	r3, [pc, #20]	; (801d684 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801d66e:	21d7      	movs	r1, #215	; 0xd7
 801d670:	4a05      	ldr	r2, [pc, #20]	; (801d688 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801d672:	4806      	ldr	r0, [pc, #24]	; (801d68c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801d674:	f007 fec2 	bl	80253fc <__assert_func>
 801d678:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d67c:	b280      	uxth	r0, r0
 801d67e:	bd08      	pop	{r3, pc}
 801d680:	2000c55e 	.word	0x2000c55e
 801d684:	08029f4e 	.word	0x08029f4e
 801d688:	0802a42c 	.word	0x0802a42c
 801d68c:	08029f90 	.word	0x08029f90

0801d690 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d694:	4616      	mov	r6, r2
 801d696:	b087      	sub	sp, #28
 801d698:	461f      	mov	r7, r3
 801d69a:	b33b      	cbz	r3, 801d6ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d69c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d6a0:	b323      	cbz	r3, 801d6ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d6a2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d6a6:	b30b      	cbz	r3, 801d6ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d6a8:	6808      	ldr	r0, [r1, #0]
 801d6aa:	ab04      	add	r3, sp, #16
 801d6ac:	6849      	ldr	r1, [r1, #4]
 801d6ae:	4c5a      	ldr	r4, [pc, #360]	; (801d818 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d6b0:	c303      	stmia	r3!, {r0, r1}
 801d6b2:	a804      	add	r0, sp, #16
 801d6b4:	f7fb fd6e 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d6b8:	6820      	ldr	r0, [r4, #0]
 801d6ba:	6803      	ldr	r3, [r0, #0]
 801d6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d6be:	4798      	blx	r3
 801d6c0:	2fff      	cmp	r7, #255	; 0xff
 801d6c2:	4623      	mov	r3, r4
 801d6c4:	d015      	beq.n	801d6f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d6c6:	f010 0f08 	tst.w	r0, #8
 801d6ca:	d015      	beq.n	801d6f8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801d6cc:	6818      	ldr	r0, [r3, #0]
 801d6ce:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d6d2:	6801      	ldr	r1, [r0, #0]
 801d6d4:	9401      	str	r4, [sp, #4]
 801d6d6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d6da:	9702      	str	r7, [sp, #8]
 801d6dc:	9400      	str	r4, [sp, #0]
 801d6de:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d6e2:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801d6e4:	4631      	mov	r1, r6
 801d6e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d6ea:	47a0      	blx	r4
 801d6ec:	b007      	add	sp, #28
 801d6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6f2:	f010 0f02 	tst.w	r0, #2
 801d6f6:	e7e8      	b.n	801d6ca <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801d6f8:	6818      	ldr	r0, [r3, #0]
 801d6fa:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801d6fe:	6803      	ldr	r3, [r0, #0]
 801d700:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801d704:	6a1b      	ldr	r3, [r3, #32]
 801d706:	4798      	blx	r3
 801d708:	4944      	ldr	r1, [pc, #272]	; (801d81c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801d70a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d70e:	2fff      	cmp	r7, #255	; 0xff
 801d710:	f8b1 c000 	ldrh.w	ip, [r1]
 801d714:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801d718:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d71c:	4688      	mov	r8, r1
 801d71e:	fb0c 2303 	mla	r3, ip, r3, r2
 801d722:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801d726:	b2f2      	uxtb	r2, r6
 801d728:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801d72c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d730:	4418      	add	r0, r3
 801d732:	d112      	bne.n	801d75a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801d734:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d738:	2100      	movs	r1, #0
 801d73a:	42a9      	cmp	r1, r5
 801d73c:	da66      	bge.n	801d80c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d73e:	4603      	mov	r3, r0
 801d740:	2700      	movs	r7, #0
 801d742:	42a7      	cmp	r7, r4
 801d744:	f103 0303 	add.w	r3, r3, #3
 801d748:	da57      	bge.n	801d7fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801d74a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d74e:	3701      	adds	r7, #1
 801d750:	f803 ec02 	strb.w	lr, [r3, #-2]
 801d754:	f803 cc01 	strb.w	ip, [r3, #-1]
 801d758:	e7f3      	b.n	801d742 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801d75a:	b2bb      	uxth	r3, r7
 801d75c:	f04f 0800 	mov.w	r8, #0
 801d760:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d764:	fb0c fc03 	mul.w	ip, ip, r3
 801d768:	fb0e fe03 	mul.w	lr, lr, r3
 801d76c:	435a      	muls	r2, r3
 801d76e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801d772:	460f      	mov	r7, r1
 801d774:	b29b      	uxth	r3, r3
 801d776:	45a8      	cmp	r8, r5
 801d778:	da48      	bge.n	801d80c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801d77a:	4601      	mov	r1, r0
 801d77c:	f04f 0a00 	mov.w	sl, #0
 801d780:	45a2      	cmp	sl, r4
 801d782:	f101 0103 	add.w	r1, r1, #3
 801d786:	da2f      	bge.n	801d7e8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801d788:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801d78c:	f10a 0a01 	add.w	sl, sl, #1
 801d790:	fb19 f903 	smulbb	r9, r9, r3
 801d794:	4491      	add	r9, r2
 801d796:	fa1f f989 	uxth.w	r9, r9
 801d79a:	f109 0b01 	add.w	fp, r9, #1
 801d79e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d7a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7a6:	f801 9c03 	strb.w	r9, [r1, #-3]
 801d7aa:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801d7ae:	fb19 f903 	smulbb	r9, r9, r3
 801d7b2:	44f1      	add	r9, lr
 801d7b4:	fa1f f989 	uxth.w	r9, r9
 801d7b8:	f109 0b01 	add.w	fp, r9, #1
 801d7bc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d7c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7c4:	f801 9c02 	strb.w	r9, [r1, #-2]
 801d7c8:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801d7cc:	fb19 f903 	smulbb	r9, r9, r3
 801d7d0:	44e1      	add	r9, ip
 801d7d2:	fa1f f989 	uxth.w	r9, r9
 801d7d6:	f109 0b01 	add.w	fp, r9, #1
 801d7da:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d7de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7e2:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d7e6:	e7cb      	b.n	801d780 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801d7e8:	8839      	ldrh	r1, [r7, #0]
 801d7ea:	f108 0801 	add.w	r8, r8, #1
 801d7ee:	1b09      	subs	r1, r1, r4
 801d7f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d7f4:	4431      	add	r1, r6
 801d7f6:	4408      	add	r0, r1
 801d7f8:	e7bd      	b.n	801d776 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801d7fa:	f8b8 3000 	ldrh.w	r3, [r8]
 801d7fe:	3101      	adds	r1, #1
 801d800:	1b1b      	subs	r3, r3, r4
 801d802:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d806:	4433      	add	r3, r6
 801d808:	4418      	add	r0, r3
 801d80a:	e796      	b.n	801d73a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801d80c:	4b02      	ldr	r3, [pc, #8]	; (801d818 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d80e:	6818      	ldr	r0, [r3, #0]
 801d810:	6803      	ldr	r3, [r0, #0]
 801d812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d814:	4798      	blx	r3
 801d816:	e769      	b.n	801d6ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d818:	2000c564 	.word	0x2000c564
 801d81c:	2000c55e 	.word	0x2000c55e

0801d820 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d824:	b08d      	sub	sp, #52	; 0x34
 801d826:	460c      	mov	r4, r1
 801d828:	4617      	mov	r7, r2
 801d82a:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d82e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d832:	2e00      	cmp	r6, #0
 801d834:	d04a      	beq.n	801d8cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d836:	6810      	ldr	r0, [r2, #0]
 801d838:	ad08      	add	r5, sp, #32
 801d83a:	6851      	ldr	r1, [r2, #4]
 801d83c:	c503      	stmia	r5!, {r0, r1}
 801d83e:	6818      	ldr	r0, [r3, #0]
 801d840:	ad0a      	add	r5, sp, #40	; 0x28
 801d842:	6859      	ldr	r1, [r3, #4]
 801d844:	c503      	stmia	r5!, {r0, r1}
 801d846:	a808      	add	r0, sp, #32
 801d848:	f7fb fca4 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d84c:	4639      	mov	r1, r7
 801d84e:	a80a      	add	r0, sp, #40	; 0x28
 801d850:	4f59      	ldr	r7, [pc, #356]	; (801d9b8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801d852:	f7fb fc87 	bl	8019164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d856:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d85a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d85e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d862:	6838      	ldr	r0, [r7, #0]
 801d864:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d868:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d86c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d870:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d874:	440c      	add	r4, r1
 801d876:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d87a:	440a      	add	r2, r1
 801d87c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d880:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d884:	4413      	add	r3, r2
 801d886:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d88a:	6803      	ldr	r3, [r0, #0]
 801d88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d88e:	4798      	blx	r3
 801d890:	2eff      	cmp	r6, #255	; 0xff
 801d892:	f000 8089 	beq.w	801d9a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801d896:	0743      	lsls	r3, r0, #29
 801d898:	d405      	bmi.n	801d8a6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801d89a:	f1b9 0f00 	cmp.w	r9, #0
 801d89e:	d018      	beq.n	801d8d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d8a0:	f010 0f10 	tst.w	r0, #16
 801d8a4:	d015      	beq.n	801d8d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d8a6:	6838      	ldr	r0, [r7, #0]
 801d8a8:	b2ad      	uxth	r5, r5
 801d8aa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d8ae:	6801      	ldr	r1, [r0, #0]
 801d8b0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d8b4:	9500      	str	r5, [sp, #0]
 801d8b6:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801d8ba:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801d8be:	9602      	str	r6, [sp, #8]
 801d8c0:	fa1f f688 	uxth.w	r6, r8
 801d8c4:	9601      	str	r6, [sp, #4]
 801d8c6:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801d8c8:	4621      	mov	r1, r4
 801d8ca:	47a8      	blx	r5
 801d8cc:	b00d      	add	sp, #52	; 0x34
 801d8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8d2:	6838      	ldr	r0, [r7, #0]
 801d8d4:	6803      	ldr	r3, [r0, #0]
 801d8d6:	6a1b      	ldr	r3, [r3, #32]
 801d8d8:	4798      	blx	r3
 801d8da:	4a38      	ldr	r2, [pc, #224]	; (801d9bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801d8dc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d8e0:	2eff      	cmp	r6, #255	; 0xff
 801d8e2:	8813      	ldrh	r3, [r2, #0]
 801d8e4:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801d8e8:	fb0c 1303 	mla	r3, ip, r3, r1
 801d8ec:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801d8f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8f4:	4418      	add	r0, r3
 801d8f6:	d032      	beq.n	801d95e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d8f8:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801d8fc:	f04f 0c00 	mov.w	ip, #0
 801d900:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801d904:	9306      	str	r3, [sp, #24]
 801d906:	45c4      	cmp	ip, r8
 801d908:	da49      	bge.n	801d99e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d90a:	4686      	mov	lr, r0
 801d90c:	46a1      	mov	r9, r4
 801d90e:	eba9 0304 	sub.w	r3, r9, r4
 801d912:	428b      	cmp	r3, r1
 801d914:	da13      	bge.n	801d93e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801d916:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d91a:	f89e b000 	ldrb.w	fp, [lr]
 801d91e:	9307      	str	r3, [sp, #28]
 801d920:	9b06      	ldr	r3, [sp, #24]
 801d922:	fb1b fb03 	smulbb	fp, fp, r3
 801d926:	9b07      	ldr	r3, [sp, #28]
 801d928:	fb03 b306 	mla	r3, r3, r6, fp
 801d92c:	b29b      	uxth	r3, r3
 801d92e:	f103 0b01 	add.w	fp, r3, #1
 801d932:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801d936:	121b      	asrs	r3, r3, #8
 801d938:	f80e 3b01 	strb.w	r3, [lr], #1
 801d93c:	e7e7      	b.n	801d90e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801d93e:	8813      	ldrh	r3, [r2, #0]
 801d940:	f10c 0c01 	add.w	ip, ip, #1
 801d944:	1b5b      	subs	r3, r3, r5
 801d946:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d94a:	4453      	add	r3, sl
 801d94c:	4418      	add	r0, r3
 801d94e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d952:	1b5b      	subs	r3, r3, r5
 801d954:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d958:	4453      	add	r3, sl
 801d95a:	441c      	add	r4, r3
 801d95c:	e7d3      	b.n	801d906 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801d95e:	2600      	movs	r6, #0
 801d960:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801d964:	4546      	cmp	r6, r8
 801d966:	da1a      	bge.n	801d99e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d968:	f100 3eff 	add.w	lr, r0, #4294967295
 801d96c:	4623      	mov	r3, r4
 801d96e:	eba3 0904 	sub.w	r9, r3, r4
 801d972:	4589      	cmp	r9, r1
 801d974:	da04      	bge.n	801d980 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801d976:	f813 9b01 	ldrb.w	r9, [r3], #1
 801d97a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801d97e:	e7f6      	b.n	801d96e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801d980:	8813      	ldrh	r3, [r2, #0]
 801d982:	3601      	adds	r6, #1
 801d984:	1b5b      	subs	r3, r3, r5
 801d986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d98a:	4463      	add	r3, ip
 801d98c:	4418      	add	r0, r3
 801d98e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d992:	1b5b      	subs	r3, r3, r5
 801d994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d998:	4463      	add	r3, ip
 801d99a:	441c      	add	r4, r3
 801d99c:	e7e2      	b.n	801d964 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801d99e:	6838      	ldr	r0, [r7, #0]
 801d9a0:	6803      	ldr	r3, [r0, #0]
 801d9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9a4:	4798      	blx	r3
 801d9a6:	e791      	b.n	801d8cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d9a8:	f1b9 0f00 	cmp.w	r9, #0
 801d9ac:	f47f af78 	bne.w	801d8a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801d9b0:	f010 0f01 	tst.w	r0, #1
 801d9b4:	e776      	b.n	801d8a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801d9b6:	bf00      	nop
 801d9b8:	2000c564 	.word	0x2000c564
 801d9bc:	2000c55e 	.word	0x2000c55e

0801d9c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d9c0:	b510      	push	{r4, lr}
 801d9c2:	4604      	mov	r4, r0
 801d9c4:	2104      	movs	r1, #4
 801d9c6:	f007 fceb 	bl	80253a0 <_ZdlPvj>
 801d9ca:	4620      	mov	r0, r4
 801d9cc:	bd10      	pop	{r4, pc}

0801d9ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d9ce:	b510      	push	{r4, lr}
 801d9d0:	4604      	mov	r4, r0
 801d9d2:	2104      	movs	r1, #4
 801d9d4:	f007 fce4 	bl	80253a0 <_ZdlPvj>
 801d9d8:	4620      	mov	r0, r4
 801d9da:	bd10      	pop	{r4, pc}

0801d9dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d9dc:	b510      	push	{r4, lr}
 801d9de:	4604      	mov	r4, r0
 801d9e0:	2104      	movs	r1, #4
 801d9e2:	f007 fcdd 	bl	80253a0 <_ZdlPvj>
 801d9e6:	4620      	mov	r0, r4
 801d9e8:	bd10      	pop	{r4, pc}

0801d9ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d9ea:	b510      	push	{r4, lr}
 801d9ec:	4604      	mov	r4, r0
 801d9ee:	2104      	movs	r1, #4
 801d9f0:	f007 fcd6 	bl	80253a0 <_ZdlPvj>
 801d9f4:	4620      	mov	r0, r4
 801d9f6:	bd10      	pop	{r4, pc}

0801d9f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d9f8:	b510      	push	{r4, lr}
 801d9fa:	4604      	mov	r4, r0
 801d9fc:	2104      	movs	r1, #4
 801d9fe:	f007 fccf 	bl	80253a0 <_ZdlPvj>
 801da02:	4620      	mov	r0, r4
 801da04:	bd10      	pop	{r4, pc}

0801da06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801da06:	b510      	push	{r4, lr}
 801da08:	4604      	mov	r4, r0
 801da0a:	2104      	movs	r1, #4
 801da0c:	f007 fcc8 	bl	80253a0 <_ZdlPvj>
 801da10:	4620      	mov	r0, r4
 801da12:	bd10      	pop	{r4, pc}

0801da14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801da14:	b510      	push	{r4, lr}
 801da16:	4604      	mov	r4, r0
 801da18:	2104      	movs	r1, #4
 801da1a:	f007 fcc1 	bl	80253a0 <_ZdlPvj>
 801da1e:	4620      	mov	r0, r4
 801da20:	bd10      	pop	{r4, pc}

0801da22 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801da22:	b510      	push	{r4, lr}
 801da24:	4604      	mov	r4, r0
 801da26:	2104      	movs	r1, #4
 801da28:	f007 fcba 	bl	80253a0 <_ZdlPvj>
 801da2c:	4620      	mov	r0, r4
 801da2e:	bd10      	pop	{r4, pc}

0801da30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801da30:	b510      	push	{r4, lr}
 801da32:	4604      	mov	r4, r0
 801da34:	2104      	movs	r1, #4
 801da36:	f007 fcb3 	bl	80253a0 <_ZdlPvj>
 801da3a:	4620      	mov	r0, r4
 801da3c:	bd10      	pop	{r4, pc}

0801da3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801da3e:	b510      	push	{r4, lr}
 801da40:	4604      	mov	r4, r0
 801da42:	2104      	movs	r1, #4
 801da44:	f007 fcac 	bl	80253a0 <_ZdlPvj>
 801da48:	4620      	mov	r0, r4
 801da4a:	bd10      	pop	{r4, pc}

0801da4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801da4c:	b510      	push	{r4, lr}
 801da4e:	4604      	mov	r4, r0
 801da50:	2104      	movs	r1, #4
 801da52:	f007 fca5 	bl	80253a0 <_ZdlPvj>
 801da56:	4620      	mov	r0, r4
 801da58:	bd10      	pop	{r4, pc}

0801da5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801da5a:	b510      	push	{r4, lr}
 801da5c:	4604      	mov	r4, r0
 801da5e:	2104      	movs	r1, #4
 801da60:	f007 fc9e 	bl	80253a0 <_ZdlPvj>
 801da64:	4620      	mov	r0, r4
 801da66:	bd10      	pop	{r4, pc}

0801da68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801da68:	b510      	push	{r4, lr}
 801da6a:	4604      	mov	r4, r0
 801da6c:	2104      	movs	r1, #4
 801da6e:	f007 fc97 	bl	80253a0 <_ZdlPvj>
 801da72:	4620      	mov	r0, r4
 801da74:	bd10      	pop	{r4, pc}

0801da76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801da76:	b510      	push	{r4, lr}
 801da78:	4604      	mov	r4, r0
 801da7a:	2104      	movs	r1, #4
 801da7c:	f007 fc90 	bl	80253a0 <_ZdlPvj>
 801da80:	4620      	mov	r0, r4
 801da82:	bd10      	pop	{r4, pc}

0801da84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801da84:	b510      	push	{r4, lr}
 801da86:	4604      	mov	r4, r0
 801da88:	2104      	movs	r1, #4
 801da8a:	f007 fc89 	bl	80253a0 <_ZdlPvj>
 801da8e:	4620      	mov	r0, r4
 801da90:	bd10      	pop	{r4, pc}

0801da92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801da92:	b510      	push	{r4, lr}
 801da94:	4604      	mov	r4, r0
 801da96:	2104      	movs	r1, #4
 801da98:	f007 fc82 	bl	80253a0 <_ZdlPvj>
 801da9c:	4620      	mov	r0, r4
 801da9e:	bd10      	pop	{r4, pc}

0801daa0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801daa0:	b510      	push	{r4, lr}
 801daa2:	4604      	mov	r4, r0
 801daa4:	2104      	movs	r1, #4
 801daa6:	f007 fc7b 	bl	80253a0 <_ZdlPvj>
 801daaa:	4620      	mov	r0, r4
 801daac:	bd10      	pop	{r4, pc}

0801daae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801daae:	b510      	push	{r4, lr}
 801dab0:	4604      	mov	r4, r0
 801dab2:	2104      	movs	r1, #4
 801dab4:	f007 fc74 	bl	80253a0 <_ZdlPvj>
 801dab8:	4620      	mov	r0, r4
 801daba:	bd10      	pop	{r4, pc}

0801dabc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801dabc:	b510      	push	{r4, lr}
 801dabe:	4604      	mov	r4, r0
 801dac0:	2104      	movs	r1, #4
 801dac2:	f007 fc6d 	bl	80253a0 <_ZdlPvj>
 801dac6:	4620      	mov	r0, r4
 801dac8:	bd10      	pop	{r4, pc}

0801daca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801daca:	b510      	push	{r4, lr}
 801dacc:	4604      	mov	r4, r0
 801dace:	2104      	movs	r1, #4
 801dad0:	f007 fc66 	bl	80253a0 <_ZdlPvj>
 801dad4:	4620      	mov	r0, r4
 801dad6:	bd10      	pop	{r4, pc}

0801dad8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dadc:	4d9e      	ldr	r5, [pc, #632]	; (801dd58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801dade:	4690      	mov	r8, r2
 801dae0:	b08f      	sub	sp, #60	; 0x3c
 801dae2:	4604      	mov	r4, r0
 801dae4:	682a      	ldr	r2, [r5, #0]
 801dae6:	4689      	mov	r9, r1
 801dae8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801daec:	2a02      	cmp	r2, #2
 801daee:	d106      	bne.n	801dafe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801daf0:	4b9a      	ldr	r3, [pc, #616]	; (801dd5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801daf2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801daf6:	4a9a      	ldr	r2, [pc, #616]	; (801dd60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801daf8:	489a      	ldr	r0, [pc, #616]	; (801dd64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801dafa:	f007 fc7f 	bl	80253fc <__assert_func>
 801dafe:	ae0e      	add	r6, sp, #56	; 0x38
 801db00:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801db04:	4630      	mov	r0, r6
 801db06:	f7fe f8b3 	bl	801bc70 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801db0a:	6823      	ldr	r3, [r4, #0]
 801db0c:	4607      	mov	r7, r0
 801db0e:	4620      	mov	r0, r4
 801db10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db12:	4798      	blx	r3
 801db14:	4287      	cmp	r7, r0
 801db16:	d004      	beq.n	801db22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801db18:	4b93      	ldr	r3, [pc, #588]	; (801dd68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801db1a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801db1e:	4a90      	ldr	r2, [pc, #576]	; (801dd60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801db20:	e7ea      	b.n	801daf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801db22:	4630      	mov	r0, r6
 801db24:	f7fe f820 	bl	801bb68 <_ZNK8touchgfx6Bitmap7getDataEv>
 801db28:	4607      	mov	r7, r0
 801db2a:	b920      	cbnz	r0, 801db36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801db2c:	4b8f      	ldr	r3, [pc, #572]	; (801dd6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801db2e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801db32:	4a8b      	ldr	r2, [pc, #556]	; (801dd60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801db34:	e7e0      	b.n	801daf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801db36:	f8d8 0000 	ldr.w	r0, [r8]
 801db3a:	ab06      	add	r3, sp, #24
 801db3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801db40:	f9b8 a000 	ldrsh.w	sl, [r8]
 801db44:	c303      	stmia	r3!, {r0, r1}
 801db46:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801db4a:	ab08      	add	r3, sp, #32
 801db4c:	f8d9 0000 	ldr.w	r0, [r9]
 801db50:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801db54:	c303      	stmia	r3!, {r0, r1}
 801db56:	4630      	mov	r0, r6
 801db58:	f7fd fefe 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801db5c:	4680      	mov	r8, r0
 801db5e:	4630      	mov	r0, r6
 801db60:	4e83      	ldr	r6, [pc, #524]	; (801dd70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801db62:	f7fd ff33 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801db66:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801db6a:	f10d 0920 	add.w	r9, sp, #32
 801db6e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801db72:	a806      	add	r0, sp, #24
 801db74:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801db78:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801db7c:	f7fb fb0a 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db80:	4648      	mov	r0, r9
 801db82:	f7fb fb07 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db86:	a80a      	add	r0, sp, #40	; 0x28
 801db88:	f7fb fb04 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db8c:	4b79      	ldr	r3, [pc, #484]	; (801dd74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801db8e:	2100      	movs	r1, #0
 801db90:	f9b6 2000 	ldrsh.w	r2, [r6]
 801db94:	f9b3 3000 	ldrsh.w	r3, [r3]
 801db98:	4648      	mov	r0, r9
 801db9a:	910c      	str	r1, [sp, #48]	; 0x30
 801db9c:	a90c      	add	r1, sp, #48	; 0x30
 801db9e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801dba2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801dba6:	f7f8 fac9 	bl	801613c <_ZN8touchgfx4RectaNERKS0_>
 801dbaa:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801dbae:	9602      	str	r6, [sp, #8]
 801dbb0:	f1bc 0f00 	cmp.w	ip, #0
 801dbb4:	f000 80a4 	beq.w	801dd00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dbb8:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801dbbc:	2e00      	cmp	r6, #0
 801dbbe:	f000 809f 	beq.w	801dd00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dbc2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801dbc6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801dbca:	4288      	cmp	r0, r1
 801dbcc:	db36      	blt.n	801dc3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dbce:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801dbd2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801dbd6:	429a      	cmp	r2, r3
 801dbd8:	db30      	blt.n	801dc3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dbda:	4460      	add	r0, ip
 801dbdc:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801dbe0:	4461      	add	r1, ip
 801dbe2:	b200      	sxth	r0, r0
 801dbe4:	b209      	sxth	r1, r1
 801dbe6:	4288      	cmp	r0, r1
 801dbe8:	dc28      	bgt.n	801dc3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dbea:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801dbee:	4432      	add	r2, r6
 801dbf0:	440b      	add	r3, r1
 801dbf2:	b212      	sxth	r2, r2
 801dbf4:	b21b      	sxth	r3, r3
 801dbf6:	429a      	cmp	r2, r3
 801dbf8:	dc20      	bgt.n	801dc3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801dbfa:	6823      	ldr	r3, [r4, #0]
 801dbfc:	4620      	mov	r0, r4
 801dbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc00:	4798      	blx	r3
 801dc02:	4682      	mov	sl, r0
 801dc04:	6828      	ldr	r0, [r5, #0]
 801dc06:	6803      	ldr	r3, [r0, #0]
 801dc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc0a:	4798      	blx	r3
 801dc0c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801dc10:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dc14:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801dc18:	9303      	str	r3, [sp, #12]
 801dc1a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dc1e:	1a9b      	subs	r3, r3, r2
 801dc20:	b29b      	uxth	r3, r3
 801dc22:	b21c      	sxth	r4, r3
 801dc24:	2c00      	cmp	r4, #0
 801dc26:	dc0e      	bgt.n	801dc46 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801dc28:	b134      	cbz	r4, 801dc38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801dc2a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dc2e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801dc32:	4413      	add	r3, r2
 801dc34:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801dc38:	463c      	mov	r4, r7
 801dc3a:	e00b      	b.n	801dc54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801dc3c:	4b4e      	ldr	r3, [pc, #312]	; (801dd78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801dc3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801dc42:	4a47      	ldr	r2, [pc, #284]	; (801dd60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801dc44:	e758      	b.n	801daf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dc46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dc4a:	ebab 0303 	sub.w	r3, fp, r3
 801dc4e:	443c      	add	r4, r7
 801dc50:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801dc54:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801dc58:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dc5c:	1a9b      	subs	r3, r3, r2
 801dc5e:	b29b      	uxth	r3, r3
 801dc60:	b219      	sxth	r1, r3
 801dc62:	2900      	cmp	r1, #0
 801dc64:	dd50      	ble.n	801dd08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801dc66:	9a03      	ldr	r2, [sp, #12]
 801dc68:	fb02 4401 	mla	r4, r2, r1, r4
 801dc6c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801dc70:	1ad3      	subs	r3, r2, r3
 801dc72:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801dc76:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801dc7a:	f1bc 0f00 	cmp.w	ip, #0
 801dc7e:	dd3f      	ble.n	801dd00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dc80:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801dc84:	2e00      	cmp	r6, #0
 801dc86:	dd3b      	ble.n	801dd00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dc88:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801dc8c:	2203      	movs	r2, #3
 801dc8e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801dc92:	fb0a f801 	mul.w	r8, sl, r1
 801dc96:	fb13 8802 	smlabb	r8, r3, r2, r8
 801dc9a:	9a02      	ldr	r2, [sp, #8]
 801dc9c:	4480      	add	r8, r0
 801dc9e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801dca2:	8812      	ldrh	r2, [r2, #0]
 801dca4:	4584      	cmp	ip, r0
 801dca6:	eba2 0303 	sub.w	r3, r2, r3
 801dcaa:	bfa8      	it	ge
 801dcac:	4684      	movge	ip, r0
 801dcae:	459c      	cmp	ip, r3
 801dcb0:	bfa8      	it	ge
 801dcb2:	469c      	movge	ip, r3
 801dcb4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801dcb8:	429e      	cmp	r6, r3
 801dcba:	bfa8      	it	ge
 801dcbc:	461e      	movge	r6, r3
 801dcbe:	4b2d      	ldr	r3, [pc, #180]	; (801dd74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801dcc0:	881b      	ldrh	r3, [r3, #0]
 801dcc2:	1a59      	subs	r1, r3, r1
 801dcc4:	4633      	mov	r3, r6
 801dcc6:	428e      	cmp	r6, r1
 801dcc8:	bfa8      	it	ge
 801dcca:	460b      	movge	r3, r1
 801dccc:	4562      	cmp	r2, ip
 801dcce:	9302      	str	r3, [sp, #8]
 801dcd0:	d12d      	bne.n	801dd2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801dcd2:	455a      	cmp	r2, fp
 801dcd4:	d12b      	bne.n	801dd2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801dcd6:	6828      	ldr	r0, [r5, #0]
 801dcd8:	6803      	ldr	r3, [r0, #0]
 801dcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcdc:	4798      	blx	r3
 801dcde:	07c3      	lsls	r3, r0, #31
 801dce0:	d51b      	bpl.n	801dd1a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801dce2:	6828      	ldr	r0, [r5, #0]
 801dce4:	9b02      	ldr	r3, [sp, #8]
 801dce6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801dcea:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801dcee:	6803      	ldr	r3, [r0, #0]
 801dcf0:	f8cd b000 	str.w	fp, [sp]
 801dcf4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801dcf6:	4623      	mov	r3, r4
 801dcf8:	e899 0006 	ldmia.w	r9, {r1, r2}
 801dcfc:	47a8      	blx	r5
 801dcfe:	4607      	mov	r7, r0
 801dd00:	4638      	mov	r0, r7
 801dd02:	b00f      	add	sp, #60	; 0x3c
 801dd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd08:	bf1f      	itttt	ne
 801dd0a:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801dd0e:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801dd12:	189b      	addne	r3, r3, r2
 801dd14:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801dd18:	e7ad      	b.n	801dc76 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801dd1a:	6828      	ldr	r0, [r5, #0]
 801dd1c:	4642      	mov	r2, r8
 801dd1e:	4621      	mov	r1, r4
 801dd20:	6803      	ldr	r3, [r0, #0]
 801dd22:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801dd24:	9b02      	ldr	r3, [sp, #8]
 801dd26:	fb03 f30a 	mul.w	r3, r3, sl
 801dd2a:	47a8      	blx	r5
 801dd2c:	e7e8      	b.n	801dd00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dd2e:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801dd32:	f04f 0900 	mov.w	r9, #0
 801dd36:	9b02      	ldr	r3, [sp, #8]
 801dd38:	454b      	cmp	r3, r9
 801dd3a:	dde1      	ble.n	801dd00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801dd3c:	6828      	ldr	r0, [r5, #0]
 801dd3e:	4642      	mov	r2, r8
 801dd40:	4621      	mov	r1, r4
 801dd42:	44d0      	add	r8, sl
 801dd44:	6803      	ldr	r3, [r0, #0]
 801dd46:	f109 0901 	add.w	r9, r9, #1
 801dd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd4c:	461e      	mov	r6, r3
 801dd4e:	465b      	mov	r3, fp
 801dd50:	47b0      	blx	r6
 801dd52:	9b03      	ldr	r3, [sp, #12]
 801dd54:	441c      	add	r4, r3
 801dd56:	e7ee      	b.n	801dd36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801dd58:	2000c564 	.word	0x2000c564
 801dd5c:	08029d31 	.word	0x08029d31
 801dd60:	0802a511 	.word	0x0802a511
 801dd64:	08029cff 	.word	0x08029cff
 801dd68:	08029de5 	.word	0x08029de5
 801dd6c:	08029e3a 	.word	0x08029e3a
 801dd70:	2000c55e 	.word	0x2000c55e
 801dd74:	2000c560 	.word	0x2000c560
 801dd78:	08029e78 	.word	0x08029e78

0801dd7c <_ZN8touchgfx8LCD24bppC1Ev>:
 801dd7c:	4a0b      	ldr	r2, [pc, #44]	; (801ddac <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801dd7e:	6002      	str	r2, [r0, #0]
 801dd80:	2200      	movs	r2, #0
 801dd82:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801dd86:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801dd8a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801dd8e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801dd92:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801dd96:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801dd9a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801dd9e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801dda2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801dda6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801ddaa:	4770      	bx	lr
 801ddac:	0802a15c 	.word	0x0802a15c

0801ddb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddb4:	b093      	sub	sp, #76	; 0x4c
 801ddb6:	880c      	ldrh	r4, [r1, #0]
 801ddb8:	4605      	mov	r5, r0
 801ddba:	460f      	mov	r7, r1
 801ddbc:	4691      	mov	r9, r2
 801ddbe:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801ddc2:	b12c      	cbz	r4, 801ddd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801ddc4:	4b71      	ldr	r3, [pc, #452]	; (801df8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801ddc6:	2167      	movs	r1, #103	; 0x67
 801ddc8:	4a71      	ldr	r2, [pc, #452]	; (801df90 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801ddca:	4872      	ldr	r0, [pc, #456]	; (801df94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801ddcc:	f007 fb16 	bl	80253fc <__assert_func>
 801ddd0:	6810      	ldr	r0, [r2, #0]
 801ddd2:	ae0e      	add	r6, sp, #56	; 0x38
 801ddd4:	6851      	ldr	r1, [r2, #4]
 801ddd6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801df9c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801ddda:	c603      	stmia	r6!, {r0, r1}
 801dddc:	6818      	ldr	r0, [r3, #0]
 801ddde:	ae10      	add	r6, sp, #64	; 0x40
 801dde0:	6859      	ldr	r1, [r3, #4]
 801dde2:	c603      	stmia	r6!, {r0, r1}
 801dde4:	a80e      	add	r0, sp, #56	; 0x38
 801dde6:	f7fb f9d5 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ddea:	4649      	mov	r1, r9
 801ddec:	a810      	add	r0, sp, #64	; 0x40
 801ddee:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801df98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801ddf2:	f7fb f9b7 	bl	8019164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ddf6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801ddfa:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801ddfe:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801de02:	f8d9 0000 	ldr.w	r0, [r9]
 801de06:	fb11 2103 	smlabb	r1, r1, r3, r2
 801de0a:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801de0e:	440d      	add	r5, r1
 801de10:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801de14:	440a      	add	r2, r1
 801de16:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801de1a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801de1e:	4413      	add	r3, r2
 801de20:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801de24:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801de28:	930b      	str	r3, [sp, #44]	; 0x2c
 801de2a:	6803      	ldr	r3, [r0, #0]
 801de2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801de30:	4798      	blx	r3
 801de32:	2801      	cmp	r0, #1
 801de34:	d11e      	bne.n	801de74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801de36:	220b      	movs	r2, #11
 801de38:	9008      	str	r0, [sp, #32]
 801de3a:	b2b6      	uxth	r6, r6
 801de3c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801de40:	9207      	str	r2, [sp, #28]
 801de42:	4629      	mov	r1, r5
 801de44:	f8ba 2000 	ldrh.w	r2, [sl]
 801de48:	f8cd 8010 	str.w	r8, [sp, #16]
 801de4c:	9601      	str	r6, [sp, #4]
 801de4e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801de52:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801de56:	9203      	str	r2, [sp, #12]
 801de58:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801de5c:	9202      	str	r2, [sp, #8]
 801de5e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801de62:	9200      	str	r2, [sp, #0]
 801de64:	463a      	mov	r2, r7
 801de66:	f8d9 0000 	ldr.w	r0, [r9]
 801de6a:	f7f8 fdb5 	bl	80169d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801de6e:	b013      	add	sp, #76	; 0x4c
 801de70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de74:	f8d9 0000 	ldr.w	r0, [r9]
 801de78:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801de7c:	6803      	ldr	r3, [r0, #0]
 801de7e:	6a1b      	ldr	r3, [r3, #32]
 801de80:	4798      	blx	r3
 801de82:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801de86:	f8ba 3000 	ldrh.w	r3, [sl]
 801de8a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801de8e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801de92:	fb01 2303 	mla	r3, r1, r3, r2
 801de96:	4621      	mov	r1, r4
 801de98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de9c:	4418      	add	r0, r3
 801de9e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801dea2:	930c      	str	r3, [sp, #48]	; 0x30
 801dea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dea6:	4299      	cmp	r1, r3
 801dea8:	da6a      	bge.n	801df80 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801deaa:	1cc2      	adds	r2, r0, #3
 801deac:	46aa      	mov	sl, r5
 801deae:	ebaa 0305 	sub.w	r3, sl, r5
 801deb2:	429e      	cmp	r6, r3
 801deb4:	dd55      	ble.n	801df62 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801deb6:	2404      	movs	r4, #4
 801deb8:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801debc:	fb14 4303 	smlabb	r3, r4, r3, r4
 801dec0:	eb07 0e03 	add.w	lr, r7, r3
 801dec4:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801dec8:	b184      	cbz	r4, 801deec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801deca:	2cff      	cmp	r4, #255	; 0xff
 801decc:	f817 b003 	ldrb.w	fp, [r7, r3]
 801ded0:	d10e      	bne.n	801def0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801ded2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ded6:	d10b      	bne.n	801def0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801ded8:	f802 bc03 	strb.w	fp, [r2, #-3]
 801dedc:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801dee0:	f802 3c02 	strb.w	r3, [r2, #-2]
 801dee4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801dee8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801deec:	3203      	adds	r2, #3
 801deee:	e7de      	b.n	801deae <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801def0:	fb08 f404 	mul.w	r4, r8, r4
 801def4:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801def8:	1c63      	adds	r3, r4, #1
 801defa:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801defe:	121b      	asrs	r3, r3, #8
 801df00:	b29c      	uxth	r4, r3
 801df02:	43db      	mvns	r3, r3
 801df04:	fb1b fb04 	smulbb	fp, fp, r4
 801df08:	b2db      	uxtb	r3, r3
 801df0a:	fb0c bc03 	mla	ip, ip, r3, fp
 801df0e:	fa1f fc8c 	uxth.w	ip, ip
 801df12:	f10c 0b01 	add.w	fp, ip, #1
 801df16:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801df1a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801df1e:	fb1b fb03 	smulbb	fp, fp, r3
 801df22:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801df26:	f802 cc03 	strb.w	ip, [r2, #-3]
 801df2a:	f89e c001 	ldrb.w	ip, [lr, #1]
 801df2e:	fb0c bc04 	mla	ip, ip, r4, fp
 801df32:	fa1f fc8c 	uxth.w	ip, ip
 801df36:	f10c 0b01 	add.w	fp, ip, #1
 801df3a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801df3e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801df42:	f802 cc02 	strb.w	ip, [r2, #-2]
 801df46:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801df4a:	f89e e002 	ldrb.w	lr, [lr, #2]
 801df4e:	fb1c f303 	smulbb	r3, ip, r3
 801df52:	fb0e 3304 	mla	r3, lr, r4, r3
 801df56:	b29b      	uxth	r3, r3
 801df58:	1c5c      	adds	r4, r3, #1
 801df5a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801df5e:	121b      	asrs	r3, r3, #8
 801df60:	e7c2      	b.n	801dee8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801df62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df64:	3101      	adds	r1, #1
 801df66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801df68:	881b      	ldrh	r3, [r3, #0]
 801df6a:	1b9b      	subs	r3, r3, r6
 801df6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df70:	4413      	add	r3, r2
 801df72:	4418      	add	r0, r3
 801df74:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801df78:	1b9b      	subs	r3, r3, r6
 801df7a:	444b      	add	r3, r9
 801df7c:	441d      	add	r5, r3
 801df7e:	e791      	b.n	801dea4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801df80:	4b05      	ldr	r3, [pc, #20]	; (801df98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801df82:	6818      	ldr	r0, [r3, #0]
 801df84:	6803      	ldr	r3, [r0, #0]
 801df86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df88:	4798      	blx	r3
 801df8a:	e770      	b.n	801de6e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801df8c:	08029c63 	.word	0x08029c63
 801df90:	0802a333 	.word	0x0802a333
 801df94:	08029cff 	.word	0x08029cff
 801df98:	2000c564 	.word	0x2000c564
 801df9c:	2000c55e 	.word	0x2000c55e

0801dfa0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfa4:	4614      	mov	r4, r2
 801dfa6:	880a      	ldrh	r2, [r1, #0]
 801dfa8:	b091      	sub	sp, #68	; 0x44
 801dfaa:	4680      	mov	r8, r0
 801dfac:	2a01      	cmp	r2, #1
 801dfae:	460e      	mov	r6, r1
 801dfb0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801dfb4:	d005      	beq.n	801dfc2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801dfb6:	4b6d      	ldr	r3, [pc, #436]	; (801e16c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801dfb8:	21b5      	movs	r1, #181	; 0xb5
 801dfba:	4a6d      	ldr	r2, [pc, #436]	; (801e170 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801dfbc:	486d      	ldr	r0, [pc, #436]	; (801e174 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801dfbe:	f007 fa1d 	bl	80253fc <__assert_func>
 801dfc2:	6820      	ldr	r0, [r4, #0]
 801dfc4:	ad0c      	add	r5, sp, #48	; 0x30
 801dfc6:	6861      	ldr	r1, [r4, #4]
 801dfc8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801e178 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801dfcc:	c503      	stmia	r5!, {r0, r1}
 801dfce:	6818      	ldr	r0, [r3, #0]
 801dfd0:	ad0e      	add	r5, sp, #56	; 0x38
 801dfd2:	6859      	ldr	r1, [r3, #4]
 801dfd4:	c503      	stmia	r5!, {r0, r1}
 801dfd6:	a80c      	add	r0, sp, #48	; 0x30
 801dfd8:	f7fb f8dc 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dfdc:	4621      	mov	r1, r4
 801dfde:	a80e      	add	r0, sp, #56	; 0x38
 801dfe0:	f7fb f8c0 	bl	8019164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dfe4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801dfe8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801dfec:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801dff0:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801dff4:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dff8:	eb08 0401 	add.w	r4, r8, r1
 801dffc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e000:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801e17c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801e004:	440a      	add	r2, r1
 801e006:	f8d8 0000 	ldr.w	r0, [r8]
 801e00a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e00e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e012:	4413      	add	r3, r2
 801e014:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e018:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e01c:	930a      	str	r3, [sp, #40]	; 0x28
 801e01e:	6803      	ldr	r3, [r0, #0]
 801e020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e024:	4798      	blx	r3
 801e026:	2801      	cmp	r0, #1
 801e028:	d11e      	bne.n	801e068 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801e02a:	220b      	movs	r2, #11
 801e02c:	9008      	str	r0, [sp, #32]
 801e02e:	b2ad      	uxth	r5, r5
 801e030:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e034:	9207      	str	r2, [sp, #28]
 801e036:	4621      	mov	r1, r4
 801e038:	f8b9 2000 	ldrh.w	r2, [r9]
 801e03c:	9501      	str	r5, [sp, #4]
 801e03e:	9206      	str	r2, [sp, #24]
 801e040:	2200      	movs	r2, #0
 801e042:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801e046:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e04a:	9203      	str	r2, [sp, #12]
 801e04c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801e050:	9202      	str	r2, [sp, #8]
 801e052:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e056:	9200      	str	r2, [sp, #0]
 801e058:	4632      	mov	r2, r6
 801e05a:	f8d8 0000 	ldr.w	r0, [r8]
 801e05e:	f7f8 fcbb 	bl	80169d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e062:	b011      	add	sp, #68	; 0x44
 801e064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e068:	f8d8 0000 	ldr.w	r0, [r8]
 801e06c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801e070:	6803      	ldr	r3, [r0, #0]
 801e072:	6a1b      	ldr	r3, [r3, #32]
 801e074:	4798      	blx	r3
 801e076:	f8b9 3000 	ldrh.w	r3, [r9]
 801e07a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e07e:	f04f 0e00 	mov.w	lr, #0
 801e082:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e086:	fa1f f987 	uxth.w	r9, r7
 801e08a:	fb01 2303 	mla	r3, r1, r3, r2
 801e08e:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801e092:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e096:	b289      	uxth	r1, r1
 801e098:	4418      	add	r0, r3
 801e09a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e09e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0a2:	459e      	cmp	lr, r3
 801e0a4:	da5c      	bge.n	801e160 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801e0a6:	1cc3      	adds	r3, r0, #3
 801e0a8:	46a2      	mov	sl, r4
 801e0aa:	ebaa 0204 	sub.w	r2, sl, r4
 801e0ae:	4295      	cmp	r5, r2
 801e0b0:	dd46      	ble.n	801e140 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801e0b2:	f04f 0c03 	mov.w	ip, #3
 801e0b6:	f04f 0b04 	mov.w	fp, #4
 801e0ba:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801e0be:	2fff      	cmp	r7, #255	; 0xff
 801e0c0:	fb1c b202 	smlabb	r2, ip, r2, fp
 801e0c4:	eb06 0c02 	add.w	ip, r6, r2
 801e0c8:	f816 b002 	ldrb.w	fp, [r6, r2]
 801e0cc:	d02f      	beq.n	801e12e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801e0ce:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801e0d2:	fb12 f201 	smulbb	r2, r2, r1
 801e0d6:	fb0b 2209 	mla	r2, fp, r9, r2
 801e0da:	b292      	uxth	r2, r2
 801e0dc:	f102 0b01 	add.w	fp, r2, #1
 801e0e0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e0e4:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801e0e8:	fb1b fb01 	smulbb	fp, fp, r1
 801e0ec:	1212      	asrs	r2, r2, #8
 801e0ee:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e0f2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e0f6:	fb02 b209 	mla	r2, r2, r9, fp
 801e0fa:	b292      	uxth	r2, r2
 801e0fc:	f102 0b01 	add.w	fp, r2, #1
 801e100:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801e104:	1212      	asrs	r2, r2, #8
 801e106:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e10a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e10e:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801e112:	fb1c fc01 	smulbb	ip, ip, r1
 801e116:	fb02 c209 	mla	r2, r2, r9, ip
 801e11a:	b292      	uxth	r2, r2
 801e11c:	f102 0c01 	add.w	ip, r2, #1
 801e120:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e124:	1212      	asrs	r2, r2, #8
 801e126:	f803 2c01 	strb.w	r2, [r3, #-1]
 801e12a:	3303      	adds	r3, #3
 801e12c:	e7bd      	b.n	801e0aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801e12e:	f803 bc03 	strb.w	fp, [r3, #-3]
 801e132:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e136:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e13a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801e13e:	e7f2      	b.n	801e126 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801e140:	4b0d      	ldr	r3, [pc, #52]	; (801e178 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e142:	f10e 0e01 	add.w	lr, lr, #1
 801e146:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e148:	881b      	ldrh	r3, [r3, #0]
 801e14a:	1b5b      	subs	r3, r3, r5
 801e14c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e150:	4413      	add	r3, r2
 801e152:	4418      	add	r0, r3
 801e154:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e158:	1b5b      	subs	r3, r3, r5
 801e15a:	4443      	add	r3, r8
 801e15c:	441c      	add	r4, r3
 801e15e:	e79f      	b.n	801e0a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801e160:	4b06      	ldr	r3, [pc, #24]	; (801e17c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e162:	6818      	ldr	r0, [r3, #0]
 801e164:	6803      	ldr	r3, [r0, #0]
 801e166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e168:	4798      	blx	r3
 801e16a:	e77a      	b.n	801e062 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801e16c:	08029b6f 	.word	0x08029b6f
 801e170:	0802a226 	.word	0x0802a226
 801e174:	08029cff 	.word	0x08029cff
 801e178:	2000c55e 	.word	0x2000c55e
 801e17c:	2000c564 	.word	0x2000c564

0801e180 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e180:	b570      	push	{r4, r5, r6, lr}
 801e182:	780d      	ldrb	r5, [r1, #0]
 801e184:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e188:	2d01      	cmp	r5, #1
 801e18a:	d00d      	beq.n	801e1a8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e18c:	d307      	bcc.n	801e19e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e18e:	2d02      	cmp	r5, #2
 801e190:	d10f      	bne.n	801e1b2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e192:	4b08      	ldr	r3, [pc, #32]	; (801e1b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e194:	215a      	movs	r1, #90	; 0x5a
 801e196:	4a08      	ldr	r2, [pc, #32]	; (801e1b8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e198:	4808      	ldr	r0, [pc, #32]	; (801e1bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e19a:	f007 f92f 	bl	80253fc <__assert_func>
 801e19e:	9404      	str	r4, [sp, #16]
 801e1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e1a4:	f7ff be04 	b.w	801ddb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e1a8:	9404      	str	r4, [sp, #16]
 801e1aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e1ae:	f7ff bef7 	b.w	801dfa0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e1b2:	bd70      	pop	{r4, r5, r6, pc}
 801e1b4:	08029b24 	.word	0x08029b24
 801e1b8:	0802a1a4 	.word	0x0802a1a4
 801e1bc:	08029cff 	.word	0x08029cff

0801e1c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1c4:	b08b      	sub	sp, #44	; 0x2c
 801e1c6:	460c      	mov	r4, r1
 801e1c8:	4680      	mov	r8, r0
 801e1ca:	469a      	mov	sl, r3
 801e1cc:	6808      	ldr	r0, [r1, #0]
 801e1ce:	ab06      	add	r3, sp, #24
 801e1d0:	6849      	ldr	r1, [r1, #4]
 801e1d2:	c303      	stmia	r3!, {r0, r1}
 801e1d4:	6810      	ldr	r0, [r2, #0]
 801e1d6:	ab08      	add	r3, sp, #32
 801e1d8:	6851      	ldr	r1, [r2, #4]
 801e1da:	c303      	stmia	r3!, {r0, r1}
 801e1dc:	a806      	add	r0, sp, #24
 801e1de:	f7fa ffd9 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e1e2:	4621      	mov	r1, r4
 801e1e4:	a808      	add	r0, sp, #32
 801e1e6:	4c61      	ldr	r4, [pc, #388]	; (801e36c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e1e8:	f7fa ffbc 	bl	8019164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e1ec:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e1f0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e1f4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e1f8:	6820      	ldr	r0, [r4, #0]
 801e1fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e1fe:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801e202:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801e206:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e20a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e20e:	440a      	add	r2, r1
 801e210:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e214:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e218:	4413      	add	r3, r2
 801e21a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e21e:	6803      	ldr	r3, [r0, #0]
 801e220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e222:	4798      	blx	r3
 801e224:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e228:	d118      	bne.n	801e25c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e22a:	f010 0f20 	tst.w	r0, #32
 801e22e:	6820      	ldr	r0, [r4, #0]
 801e230:	d017      	beq.n	801e262 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e232:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e236:	b2bf      	uxth	r7, r7
 801e238:	6801      	ldr	r1, [r0, #0]
 801e23a:	9402      	str	r4, [sp, #8]
 801e23c:	fa1f f489 	uxth.w	r4, r9
 801e240:	f8cd a00c 	str.w	sl, [sp, #12]
 801e244:	9401      	str	r4, [sp, #4]
 801e246:	9700      	str	r7, [sp, #0]
 801e248:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e24c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e24e:	4641      	mov	r1, r8
 801e250:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e254:	47a0      	blx	r4
 801e256:	b00b      	add	sp, #44	; 0x2c
 801e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e25c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e260:	e7e5      	b.n	801e22e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801e262:	6803      	ldr	r3, [r0, #0]
 801e264:	6a1b      	ldr	r3, [r3, #32]
 801e266:	4798      	blx	r3
 801e268:	4b41      	ldr	r3, [pc, #260]	; (801e370 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801e26a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e26e:	f04f 0c00 	mov.w	ip, #0
 801e272:	881a      	ldrh	r2, [r3, #0]
 801e274:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801e278:	fb04 1202 	mla	r2, r4, r2, r1
 801e27c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e280:	4410      	add	r0, r2
 801e282:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801e286:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801e28a:	0092      	lsls	r2, r2, #2
 801e28c:	9105      	str	r1, [sp, #20]
 801e28e:	9204      	str	r2, [sp, #16]
 801e290:	45cc      	cmp	ip, r9
 801e292:	da65      	bge.n	801e360 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801e294:	1cc4      	adds	r4, r0, #3
 801e296:	f108 0504 	add.w	r5, r8, #4
 801e29a:	f04f 0e00 	mov.w	lr, #0
 801e29e:	45be      	cmp	lr, r7
 801e2a0:	da4d      	bge.n	801e33e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801e2a2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e2a6:	b181      	cbz	r1, 801e2ca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e2a8:	29ff      	cmp	r1, #255	; 0xff
 801e2aa:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801e2ae:	d111      	bne.n	801e2d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e2b0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e2b4:	d10e      	bne.n	801e2d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801e2b6:	f804 bc03 	strb.w	fp, [r4, #-3]
 801e2ba:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801e2be:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e2c2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801e2c6:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e2ca:	f10e 0e01 	add.w	lr, lr, #1
 801e2ce:	3403      	adds	r4, #3
 801e2d0:	3504      	adds	r5, #4
 801e2d2:	e7e4      	b.n	801e29e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e2d4:	fb0a f101 	mul.w	r1, sl, r1
 801e2d8:	1c4a      	adds	r2, r1, #1
 801e2da:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e2de:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801e2e2:	1212      	asrs	r2, r2, #8
 801e2e4:	b296      	uxth	r6, r2
 801e2e6:	43d2      	mvns	r2, r2
 801e2e8:	fb1b fb06 	smulbb	fp, fp, r6
 801e2ec:	b2d2      	uxtb	r2, r2
 801e2ee:	fb01 b102 	mla	r1, r1, r2, fp
 801e2f2:	b289      	uxth	r1, r1
 801e2f4:	f101 0b01 	add.w	fp, r1, #1
 801e2f8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e2fc:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801e300:	fb1b fb02 	smulbb	fp, fp, r2
 801e304:	1209      	asrs	r1, r1, #8
 801e306:	f804 1c03 	strb.w	r1, [r4, #-3]
 801e30a:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801e30e:	fb01 b106 	mla	r1, r1, r6, fp
 801e312:	b289      	uxth	r1, r1
 801e314:	f101 0b01 	add.w	fp, r1, #1
 801e318:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e31c:	1209      	asrs	r1, r1, #8
 801e31e:	f804 1c02 	strb.w	r1, [r4, #-2]
 801e322:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801e326:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801e32a:	fb11 f202 	smulbb	r2, r1, r2
 801e32e:	fb0b 2206 	mla	r2, fp, r6, r2
 801e332:	b292      	uxth	r2, r2
 801e334:	1c56      	adds	r6, r2, #1
 801e336:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e33a:	1212      	asrs	r2, r2, #8
 801e33c:	e7c3      	b.n	801e2c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801e33e:	881a      	ldrh	r2, [r3, #0]
 801e340:	f10c 0c01 	add.w	ip, ip, #1
 801e344:	9905      	ldr	r1, [sp, #20]
 801e346:	1bd2      	subs	r2, r2, r7
 801e348:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e34c:	440a      	add	r2, r1
 801e34e:	9904      	ldr	r1, [sp, #16]
 801e350:	4410      	add	r0, r2
 801e352:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801e356:	1bd2      	subs	r2, r2, r7
 801e358:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e35c:	4490      	add	r8, r2
 801e35e:	e797      	b.n	801e290 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801e360:	4b02      	ldr	r3, [pc, #8]	; (801e36c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801e362:	6818      	ldr	r0, [r3, #0]
 801e364:	6803      	ldr	r3, [r0, #0]
 801e366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e368:	4798      	blx	r3
 801e36a:	e774      	b.n	801e256 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e36c:	2000c564 	.word	0x2000c564
 801e370:	2000c55e 	.word	0x2000c55e

0801e374 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e378:	b085      	sub	sp, #20
 801e37a:	4606      	mov	r6, r0
 801e37c:	460c      	mov	r4, r1
 801e37e:	4691      	mov	r9, r2
 801e380:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e384:	4698      	mov	r8, r3
 801e386:	b385      	cbz	r5, 801e3ea <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e388:	4608      	mov	r0, r1
 801e38a:	f7fd fae5 	bl	801b958 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e38e:	4607      	mov	r7, r0
 801e390:	4620      	mov	r0, r4
 801e392:	f7fd fb1b 	bl	801b9cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e396:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e39a:	4620      	mov	r0, r4
 801e39c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e3a0:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e3a4:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e3a8:	f7fd fc62 	bl	801bc70 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e3ac:	2801      	cmp	r0, #1
 801e3ae:	d00f      	beq.n	801e3d0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e3b0:	4620      	mov	r0, r4
 801e3b2:	f7fd fc5d 	bl	801bc70 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e3b6:	2802      	cmp	r0, #2
 801e3b8:	d00a      	beq.n	801e3d0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e3ba:	4620      	mov	r0, r4
 801e3bc:	f7fd fc58 	bl	801bc70 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e3c0:	280b      	cmp	r0, #11
 801e3c2:	d005      	beq.n	801e3d0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e3c4:	4b1b      	ldr	r3, [pc, #108]	; (801e434 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801e3c6:	2142      	movs	r1, #66	; 0x42
 801e3c8:	4a1b      	ldr	r2, [pc, #108]	; (801e438 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801e3ca:	481c      	ldr	r0, [pc, #112]	; (801e43c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801e3cc:	f007 f816 	bl	80253fc <__assert_func>
 801e3d0:	4620      	mov	r0, r4
 801e3d2:	f7fd fc4d 	bl	801bc70 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e3d6:	2802      	cmp	r0, #2
 801e3d8:	4620      	mov	r0, r4
 801e3da:	d109      	bne.n	801e3f0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801e3dc:	f7fd fbc4 	bl	801bb68 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e3e0:	462b      	mov	r3, r5
 801e3e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e3e4:	a902      	add	r1, sp, #8
 801e3e6:	f7ff feeb 	bl	801e1c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e3ea:	b005      	add	sp, #20
 801e3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e3f0:	f7fd fc3e 	bl	801bc70 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e3f4:	280b      	cmp	r0, #11
 801e3f6:	d10e      	bne.n	801e416 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801e3f8:	4620      	mov	r0, r4
 801e3fa:	f7fd fbb5 	bl	801bb68 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e3fe:	4606      	mov	r6, r0
 801e400:	4620      	mov	r0, r4
 801e402:	f7fd fbe3 	bl	801bbcc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e406:	9500      	str	r5, [sp, #0]
 801e408:	4601      	mov	r1, r0
 801e40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e40c:	aa02      	add	r2, sp, #8
 801e40e:	4630      	mov	r0, r6
 801e410:	f7ff feb6 	bl	801e180 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e414:	e7e9      	b.n	801e3ea <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e416:	6833      	ldr	r3, [r6, #0]
 801e418:	4620      	mov	r0, r4
 801e41a:	691f      	ldr	r7, [r3, #16]
 801e41c:	f7fd fba4 	bl	801bb68 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e420:	2300      	movs	r3, #0
 801e422:	4601      	mov	r1, r0
 801e424:	aa02      	add	r2, sp, #8
 801e426:	4630      	mov	r0, r6
 801e428:	e9cd 5300 	strd	r5, r3, [sp]
 801e42c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e42e:	47b8      	blx	r7
 801e430:	e7db      	b.n	801e3ea <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801e432:	bf00      	nop
 801e434:	08029bbd 	.word	0x08029bbd
 801e438:	0802a2af 	.word	0x0802a2af
 801e43c:	08029cff 	.word	0x08029cff

0801e440 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e440:	b570      	push	{r4, r5, r6, lr}
 801e442:	9d04      	ldr	r5, [sp, #16]
 801e444:	460c      	mov	r4, r1
 801e446:	4619      	mov	r1, r3
 801e448:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e44c:	2a0c      	cmp	r2, #12
 801e44e:	d826      	bhi.n	801e49e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801e450:	e8df f002 	tbb	[pc, r2]
 801e454:	200e1407 	.word	0x200e1407
 801e458:	20202020 	.word	0x20202020
 801e45c:	20202020 	.word	0x20202020
 801e460:	20          	.byte	0x20
 801e461:	00          	.byte	0x00
 801e462:	4b0f      	ldr	r3, [pc, #60]	; (801e4a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e464:	f240 117f 	movw	r1, #383	; 0x17f
 801e468:	4a0e      	ldr	r2, [pc, #56]	; (801e4a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e46a:	480f      	ldr	r0, [pc, #60]	; (801e4a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801e46c:	f006 ffc6 	bl	80253fc <__assert_func>
 801e470:	462a      	mov	r2, r5
 801e472:	4620      	mov	r0, r4
 801e474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e478:	f7ff bea2 	b.w	801e1c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e47c:	6802      	ldr	r2, [r0, #0]
 801e47e:	2600      	movs	r6, #0
 801e480:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e484:	6916      	ldr	r6, [r2, #16]
 801e486:	462b      	mov	r3, r5
 801e488:	460a      	mov	r2, r1
 801e48a:	4621      	mov	r1, r4
 801e48c:	46b4      	mov	ip, r6
 801e48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e492:	4760      	bx	ip
 801e494:	4b05      	ldr	r3, [pc, #20]	; (801e4ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801e496:	f240 1191 	movw	r1, #401	; 0x191
 801e49a:	4a02      	ldr	r2, [pc, #8]	; (801e4a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801e49c:	e7e5      	b.n	801e46a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801e49e:	bd70      	pop	{r4, r5, r6, pc}
 801e4a0:	08029ed8 	.word	0x08029ed8
 801e4a4:	0802a597 	.word	0x0802a597
 801e4a8:	08029cff 	.word	0x08029cff
 801e4ac:	08029f19 	.word	0x08029f19

0801e4b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e4b0:	b158      	cbz	r0, 801e4ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801e4b2:	2902      	cmp	r1, #2
 801e4b4:	d00f      	beq.n	801e4d6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801e4b6:	2903      	cmp	r1, #3
 801e4b8:	d010      	beq.n	801e4dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e4ba:	2901      	cmp	r1, #1
 801e4bc:	d101      	bne.n	801e4c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e4be:	2001      	movs	r0, #1
 801e4c0:	4770      	bx	lr
 801e4c2:	4b08      	ldr	r3, [pc, #32]	; (801e4e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e4c4:	8819      	ldrh	r1, [r3, #0]
 801e4c6:	4248      	negs	r0, r1
 801e4c8:	4770      	bx	lr
 801e4ca:	2902      	cmp	r1, #2
 801e4cc:	d006      	beq.n	801e4dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801e4ce:	2903      	cmp	r1, #3
 801e4d0:	d0f7      	beq.n	801e4c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801e4d2:	2901      	cmp	r1, #1
 801e4d4:	d1f3      	bne.n	801e4be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801e4d6:	4b03      	ldr	r3, [pc, #12]	; (801e4e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801e4d8:	8818      	ldrh	r0, [r3, #0]
 801e4da:	4770      	bx	lr
 801e4dc:	f04f 30ff 	mov.w	r0, #4294967295
 801e4e0:	4770      	bx	lr
 801e4e2:	bf00      	nop
 801e4e4:	2000c55e 	.word	0x2000c55e

0801e4e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e4e8:	b170      	cbz	r0, 801e508 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801e4ea:	2902      	cmp	r1, #2
 801e4ec:	d012      	beq.n	801e514 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801e4ee:	2903      	cmp	r1, #3
 801e4f0:	d006      	beq.n	801e500 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e4f2:	2901      	cmp	r1, #1
 801e4f4:	d001      	beq.n	801e4fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e4f6:	2001      	movs	r0, #1
 801e4f8:	4770      	bx	lr
 801e4fa:	4b08      	ldr	r3, [pc, #32]	; (801e51c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e4fc:	8818      	ldrh	r0, [r3, #0]
 801e4fe:	4770      	bx	lr
 801e500:	4b06      	ldr	r3, [pc, #24]	; (801e51c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801e502:	8818      	ldrh	r0, [r3, #0]
 801e504:	4240      	negs	r0, r0
 801e506:	4770      	bx	lr
 801e508:	2902      	cmp	r1, #2
 801e50a:	d0f9      	beq.n	801e500 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801e50c:	2903      	cmp	r1, #3
 801e50e:	d0f2      	beq.n	801e4f6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801e510:	2901      	cmp	r1, #1
 801e512:	d1f2      	bne.n	801e4fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801e514:	f04f 30ff 	mov.w	r0, #4294967295
 801e518:	4770      	bx	lr
 801e51a:	bf00      	nop
 801e51c:	2000c55e 	.word	0x2000c55e

0801e520 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e524:	b095      	sub	sp, #84	; 0x54
 801e526:	9109      	str	r1, [sp, #36]	; 0x24
 801e528:	a910      	add	r1, sp, #64	; 0x40
 801e52a:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801e52e:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801e532:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801e536:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801e53a:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801e53e:	e881 000c 	stmia.w	r1, {r2, r3}
 801e542:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801e546:	9306      	str	r3, [sp, #24]
 801e548:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801e54c:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801e550:	930e      	str	r3, [sp, #56]	; 0x38
 801e552:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801e556:	798f      	ldrb	r7, [r1, #6]
 801e558:	930a      	str	r3, [sp, #40]	; 0x28
 801e55a:	7b4b      	ldrb	r3, [r1, #13]
 801e55c:	0158      	lsls	r0, r3, #5
 801e55e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e562:	4338      	orrs	r0, r7
 801e564:	9008      	str	r0, [sp, #32]
 801e566:	f000 8174 	beq.w	801e852 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e56a:	011b      	lsls	r3, r3, #4
 801e56c:	79c8      	ldrb	r0, [r1, #7]
 801e56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e572:	4303      	orrs	r3, r0
 801e574:	9307      	str	r3, [sp, #28]
 801e576:	f000 816c 	beq.w	801e852 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e57a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e57e:	b29b      	uxth	r3, r3
 801e580:	2e00      	cmp	r6, #0
 801e582:	f000 8112 	beq.w	801e7aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801e586:	1af6      	subs	r6, r6, r3
 801e588:	b2b6      	uxth	r6, r6
 801e58a:	0433      	lsls	r3, r6, #16
 801e58c:	d502      	bpl.n	801e594 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e58e:	1bad      	subs	r5, r5, r6
 801e590:	2600      	movs	r6, #0
 801e592:	b22d      	sxth	r5, r5
 801e594:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e598:	a810      	add	r0, sp, #64	; 0x40
 801e59a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e59e:	428d      	cmp	r5, r1
 801e5a0:	b28b      	uxth	r3, r1
 801e5a2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801e5a6:	bfbf      	itttt	lt
 801e5a8:	18f6      	addlt	r6, r6, r3
 801e5aa:	1b75      	sublt	r5, r6, r5
 801e5ac:	b2ae      	uxthlt	r6, r5
 801e5ae:	460d      	movlt	r5, r1
 801e5b0:	8891      	ldrh	r1, [r2, #4]
 801e5b2:	440b      	add	r3, r1
 801e5b4:	4629      	mov	r1, r5
 801e5b6:	b21b      	sxth	r3, r3
 801e5b8:	930d      	str	r3, [sp, #52]	; 0x34
 801e5ba:	88d3      	ldrh	r3, [r2, #6]
 801e5bc:	9a06      	ldr	r2, [sp, #24]
 801e5be:	449a      	add	sl, r3
 801e5c0:	fa0f f38a 	sxth.w	r3, sl
 801e5c4:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801e5c8:	930c      	str	r3, [sp, #48]	; 0x30
 801e5ca:	4bb8      	ldr	r3, [pc, #736]	; (801e8ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801e5cc:	f893 b000 	ldrb.w	fp, [r3]
 801e5d0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e5d4:	f1dc 0300 	rsbs	r3, ip, #0
 801e5d8:	eb43 030c 	adc.w	r3, r3, ip
 801e5dc:	930b      	str	r3, [sp, #44]	; 0x2c
 801e5de:	464b      	mov	r3, r9
 801e5e0:	f7fa fcb2 	bl	8018f48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e5e4:	4629      	mov	r1, r5
 801e5e6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801e5ea:	464b      	mov	r3, r9
 801e5ec:	9a06      	ldr	r2, [sp, #24]
 801e5ee:	a810      	add	r0, sp, #64	; 0x40
 801e5f0:	f7fa fcc2 	bl	8018f78 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e5f4:	a914      	add	r1, sp, #80	; 0x50
 801e5f6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e5fa:	a813      	add	r0, sp, #76	; 0x4c
 801e5fc:	f7fa fd9c 	bl	8019138 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e600:	f1b9 0f00 	cmp.w	r9, #0
 801e604:	f040 80d4 	bne.w	801e7b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801e608:	f1bb 0f01 	cmp.w	fp, #1
 801e60c:	f040 80d8 	bne.w	801e7c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801e610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e612:	2b00      	cmp	r3, #0
 801e614:	f040 8122 	bne.w	801e85c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801e618:	4ba5      	ldr	r3, [pc, #660]	; (801e8b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e61a:	6818      	ldr	r0, [r3, #0]
 801e61c:	6803      	ldr	r3, [r0, #0]
 801e61e:	6a1b      	ldr	r3, [r3, #32]
 801e620:	4798      	blx	r3
 801e622:	4aa4      	ldr	r2, [pc, #656]	; (801e8b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801e624:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e628:	8811      	ldrh	r1, [r2, #0]
 801e62a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e62e:	fb01 2303 	mla	r3, r1, r3, r2
 801e632:	2201      	movs	r2, #1
 801e634:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e638:	4590      	cmp	r8, r2
 801e63a:	4403      	add	r3, r0
 801e63c:	9307      	str	r3, [sp, #28]
 801e63e:	fa02 f308 	lsl.w	r3, r2, r8
 801e642:	f103 33ff 	add.w	r3, r3, #4294967295
 801e646:	b2db      	uxtb	r3, r3
 801e648:	930f      	str	r3, [sp, #60]	; 0x3c
 801e64a:	f000 8109 	beq.w	801e860 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801e64e:	f1b8 0f02 	cmp.w	r8, #2
 801e652:	f000 813e 	beq.w	801e8d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801e656:	f1b8 0f04 	cmp.w	r8, #4
 801e65a:	f000 8132 	beq.w	801e8c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801e65e:	b906      	cbnz	r6, 801e662 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801e660:	b174      	cbz	r4, 801e680 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801e662:	fb17 6304 	smlabb	r3, r7, r4, r6
 801e666:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e668:	ebaa 0a04 	sub.w	sl, sl, r4
 801e66c:	fb13 f308 	smulbb	r3, r3, r8
 801e670:	fa1f fa8a 	uxth.w	sl, sl
 801e674:	b29b      	uxth	r3, r3
 801e676:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801e67a:	f003 0407 	and.w	r4, r3, #7
 801e67e:	9124      	str	r1, [sp, #144]	; 0x90
 801e680:	4649      	mov	r1, r9
 801e682:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e684:	f7ff ff14 	bl	801e4b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e688:	4649      	mov	r1, r9
 801e68a:	4683      	mov	fp, r0
 801e68c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e68e:	f7ff ff2b 	bl	801e4e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e692:	9906      	ldr	r1, [sp, #24]
 801e694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e696:	1bad      	subs	r5, r5, r6
 801e698:	1a5b      	subs	r3, r3, r1
 801e69a:	459a      	cmp	sl, r3
 801e69c:	bfa8      	it	ge
 801e69e:	469a      	movge	sl, r3
 801e6a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e6a2:	1b5d      	subs	r5, r3, r5
 801e6a4:	9b08      	ldr	r3, [sp, #32]
 801e6a6:	429d      	cmp	r5, r3
 801e6a8:	bfd4      	ite	le
 801e6aa:	ebc6 0605 	rsble	r6, r6, r5
 801e6ae:	ebc6 0603 	rsbgt	r6, r6, r3
 801e6b2:	1bbf      	subs	r7, r7, r6
 801e6b4:	fb0b 0016 	mls	r0, fp, r6, r0
 801e6b8:	fb08 f307 	mul.w	r3, r8, r7
 801e6bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e6c0:	9308      	str	r3, [sp, #32]
 801e6c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e6c4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e6c8:	930b      	str	r3, [sp, #44]	; 0x2c
 801e6ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e6cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e6d0:	930c      	str	r3, [sp, #48]	; 0x30
 801e6d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e6d4:	b2db      	uxtb	r3, r3
 801e6d6:	930d      	str	r3, [sp, #52]	; 0x34
 801e6d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e6da:	7819      	ldrb	r1, [r3, #0]
 801e6dc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e6e0:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801e6e4:	4121      	asrs	r1, r4
 801e6e6:	9306      	str	r3, [sp, #24]
 801e6e8:	fb03 0b0b 	mla	fp, r3, fp, r0
 801e6ec:	b2c9      	uxtb	r1, r1
 801e6ee:	f1ba 0f00 	cmp.w	sl, #0
 801e6f2:	f340 80d1 	ble.w	801e898 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801e6f6:	46b6      	mov	lr, r6
 801e6f8:	9807      	ldr	r0, [sp, #28]
 801e6fa:	f1be 0f00 	cmp.w	lr, #0
 801e6fe:	f340 80b8 	ble.w	801e872 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801e702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e704:	400b      	ands	r3, r1
 801e706:	d03e      	beq.n	801e786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e708:	fb13 f302 	smulbb	r3, r3, r2
 801e70c:	2bfe      	cmp	r3, #254	; 0xfe
 801e70e:	dd03      	ble.n	801e718 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801e710:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e712:	2dff      	cmp	r5, #255	; 0xff
 801e714:	f000 80a6 	beq.w	801e864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801e718:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e71a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e71c:	fb15 f303 	smulbb	r3, r5, r3
 801e720:	b29b      	uxth	r3, r3
 801e722:	1c5d      	adds	r5, r3, #1
 801e724:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e728:	7805      	ldrb	r5, [r0, #0]
 801e72a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e72e:	fa1f fc83 	uxth.w	ip, r3
 801e732:	43db      	mvns	r3, r3
 801e734:	fb17 f90c 	smulbb	r9, r7, ip
 801e738:	b2db      	uxtb	r3, r3
 801e73a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e73c:	fb05 9503 	mla	r5, r5, r3, r9
 801e740:	b2ad      	uxth	r5, r5
 801e742:	f105 0901 	add.w	r9, r5, #1
 801e746:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e74a:	fb17 f90c 	smulbb	r9, r7, ip
 801e74e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e750:	122d      	asrs	r5, r5, #8
 801e752:	fb17 fc0c 	smulbb	ip, r7, ip
 801e756:	7005      	strb	r5, [r0, #0]
 801e758:	7845      	ldrb	r5, [r0, #1]
 801e75a:	fb05 9503 	mla	r5, r5, r3, r9
 801e75e:	b2ad      	uxth	r5, r5
 801e760:	f105 0901 	add.w	r9, r5, #1
 801e764:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e768:	122d      	asrs	r5, r5, #8
 801e76a:	7045      	strb	r5, [r0, #1]
 801e76c:	7885      	ldrb	r5, [r0, #2]
 801e76e:	fb05 cc03 	mla	ip, r5, r3, ip
 801e772:	fa1f fc8c 	uxth.w	ip, ip
 801e776:	f10c 0301 	add.w	r3, ip, #1
 801e77a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e77e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e782:	f880 c002 	strb.w	ip, [r0, #2]
 801e786:	4444      	add	r4, r8
 801e788:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e78c:	b2a4      	uxth	r4, r4
 801e78e:	2c07      	cmp	r4, #7
 801e790:	bf89      	itett	hi
 801e792:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801e794:	fa41 f108 	asrls.w	r1, r1, r8
 801e798:	2400      	movhi	r4, #0
 801e79a:	7859      	ldrbhi	r1, [r3, #1]
 801e79c:	bf8a      	itet	hi
 801e79e:	3301      	addhi	r3, #1
 801e7a0:	b2c9      	uxtbls	r1, r1
 801e7a2:	9324      	strhi	r3, [sp, #144]	; 0x90
 801e7a4:	9b06      	ldr	r3, [sp, #24]
 801e7a6:	4418      	add	r0, r3
 801e7a8:	e7a7      	b.n	801e6fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801e7aa:	441d      	add	r5, r3
 801e7ac:	b22d      	sxth	r5, r5
 801e7ae:	e6f1      	b.n	801e594 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e7b0:	f1b9 0f01 	cmp.w	r9, #1
 801e7b4:	f47f af2c 	bne.w	801e610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e7b8:	f1bb 0f01 	cmp.w	fp, #1
 801e7bc:	f47f af28 	bne.w	801e610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e7c0:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801e8b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e7c4:	f8db 0000 	ldr.w	r0, [fp]
 801e7c8:	6803      	ldr	r3, [r0, #0]
 801e7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e7cc:	4798      	blx	r3
 801e7ce:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801e7d2:	465a      	mov	r2, fp
 801e7d4:	d006      	beq.n	801e7e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e7d6:	f1b8 0f04 	cmp.w	r8, #4
 801e7da:	d13d      	bne.n	801e858 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801e7dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7de:	3300      	adds	r3, #0
 801e7e0:	bf18      	it	ne
 801e7e2:	2301      	movne	r3, #1
 801e7e4:	05c0      	lsls	r0, r0, #23
 801e7e6:	d567      	bpl.n	801e8b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e7e8:	f1b8 0f08 	cmp.w	r8, #8
 801e7ec:	d164      	bne.n	801e8b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	bf0c      	ite	eq
 801e7f2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801e7f6:	2180      	movne	r1, #128	; 0x80
 801e7f8:	2e00      	cmp	r6, #0
 801e7fa:	f47f af09 	bne.w	801e610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e7fe:	2c00      	cmp	r4, #0
 801e800:	f47f af06 	bne.w	801e610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e804:	9b08      	ldr	r3, [sp, #32]
 801e806:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e808:	442b      	add	r3, r5
 801e80a:	4283      	cmp	r3, r0
 801e80c:	f73f af00 	bgt.w	801e610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e810:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801e814:	4403      	add	r3, r0
 801e816:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e818:	4283      	cmp	r3, r0
 801e81a:	f73f aef9 	bgt.w	801e610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e81e:	f1b8 0f08 	cmp.w	r8, #8
 801e822:	6810      	ldr	r0, [r2, #0]
 801e824:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801e828:	bf18      	it	ne
 801e82a:	3701      	addne	r7, #1
 801e82c:	6804      	ldr	r4, [r0, #0]
 801e82e:	9105      	str	r1, [sp, #20]
 801e830:	bf18      	it	ne
 801e832:	f027 0701 	bicne.w	r7, r7, #1
 801e836:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e838:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801e83c:	bf18      	it	ne
 801e83e:	b2bf      	uxthne	r7, r7
 801e840:	9104      	str	r1, [sp, #16]
 801e842:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e844:	e9cd 7a00 	strd	r7, sl, [sp]
 801e848:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e84c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e84e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801e850:	47a0      	blx	r4
 801e852:	b015      	add	sp, #84	; 0x54
 801e854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e858:	2300      	movs	r3, #0
 801e85a:	e7c3      	b.n	801e7e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e85c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e85e:	e6e0      	b.n	801e622 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e860:	22ff      	movs	r2, #255	; 0xff
 801e862:	e6fc      	b.n	801e65e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e866:	7003      	strb	r3, [r0, #0]
 801e868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e86a:	7043      	strb	r3, [r0, #1]
 801e86c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e86e:	7083      	strb	r3, [r0, #2]
 801e870:	e789      	b.n	801e786 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e872:	9b08      	ldr	r3, [sp, #32]
 801e874:	b153      	cbz	r3, 801e88c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801e876:	441c      	add	r4, r3
 801e878:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e87a:	b2a4      	uxth	r4, r4
 801e87c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e880:	f004 0407 	and.w	r4, r4, #7
 801e884:	7819      	ldrb	r1, [r3, #0]
 801e886:	9324      	str	r3, [sp, #144]	; 0x90
 801e888:	4121      	asrs	r1, r4
 801e88a:	b2c9      	uxtb	r1, r1
 801e88c:	9b07      	ldr	r3, [sp, #28]
 801e88e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e892:	445b      	add	r3, fp
 801e894:	9307      	str	r3, [sp, #28]
 801e896:	e72a      	b.n	801e6ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801e898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e89a:	2b00      	cmp	r3, #0
 801e89c:	d1d9      	bne.n	801e852 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e89e:	4b04      	ldr	r3, [pc, #16]	; (801e8b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e8a0:	6818      	ldr	r0, [r3, #0]
 801e8a2:	6803      	ldr	r3, [r0, #0]
 801e8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8a6:	4798      	blx	r3
 801e8a8:	e7d3      	b.n	801e852 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e8aa:	bf00      	nop
 801e8ac:	2000c55c 	.word	0x2000c55c
 801e8b0:	2000c564 	.word	0x2000c564
 801e8b4:	2000c55e 	.word	0x2000c55e
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	f43f aea9 	beq.w	801e610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e8be:	2180      	movs	r1, #128	; 0x80
 801e8c0:	e79a      	b.n	801e7f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801e8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8c4:	b11b      	cbz	r3, 801e8ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e8c6:	07fb      	lsls	r3, r7, #31
 801e8c8:	d501      	bpl.n	801e8ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e8ca:	3701      	adds	r7, #1
 801e8cc:	b2bf      	uxth	r7, r7
 801e8ce:	2211      	movs	r2, #17
 801e8d0:	e6c5      	b.n	801e65e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e8d2:	2255      	movs	r2, #85	; 0x55
 801e8d4:	e6c3      	b.n	801e65e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e8d6:	bf00      	nop

0801e8d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e8d8:	b538      	push	{r3, r4, r5, lr}
 801e8da:	4c15      	ldr	r4, [pc, #84]	; (801e930 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e8dc:	4605      	mov	r5, r0
 801e8de:	7823      	ldrb	r3, [r4, #0]
 801e8e0:	f3bf 8f5b 	dmb	ish
 801e8e4:	07da      	lsls	r2, r3, #31
 801e8e6:	d40b      	bmi.n	801e900 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e8e8:	4620      	mov	r0, r4
 801e8ea:	f006 fd5b 	bl	80253a4 <__cxa_guard_acquire>
 801e8ee:	b138      	cbz	r0, 801e900 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	f006 fd63 	bl	80253bc <__cxa_guard_release>
 801e8f6:	4a0f      	ldr	r2, [pc, #60]	; (801e934 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e8f8:	490f      	ldr	r1, [pc, #60]	; (801e938 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e8fa:	4810      	ldr	r0, [pc, #64]	; (801e93c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e8fc:	f006 fd4b 	bl	8025396 <__aeabi_atexit>
 801e900:	4c0f      	ldr	r4, [pc, #60]	; (801e940 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e902:	7823      	ldrb	r3, [r4, #0]
 801e904:	f3bf 8f5b 	dmb	ish
 801e908:	07db      	lsls	r3, r3, #31
 801e90a:	d40b      	bmi.n	801e924 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e90c:	4620      	mov	r0, r4
 801e90e:	f006 fd49 	bl	80253a4 <__cxa_guard_acquire>
 801e912:	b138      	cbz	r0, 801e924 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e914:	4620      	mov	r0, r4
 801e916:	f006 fd51 	bl	80253bc <__cxa_guard_release>
 801e91a:	4a06      	ldr	r2, [pc, #24]	; (801e934 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e91c:	4909      	ldr	r1, [pc, #36]	; (801e944 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e91e:	480a      	ldr	r0, [pc, #40]	; (801e948 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e920:	f006 fd39 	bl	8025396 <__aeabi_atexit>
 801e924:	4b05      	ldr	r3, [pc, #20]	; (801e93c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e926:	612b      	str	r3, [r5, #16]
 801e928:	4b07      	ldr	r3, [pc, #28]	; (801e948 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e92a:	616b      	str	r3, [r5, #20]
 801e92c:	bd38      	pop	{r3, r4, r5, pc}
 801e92e:	bf00      	nop
 801e930:	2000c670 	.word	0x2000c670
 801e934:	20000000 	.word	0x20000000
 801e938:	0801d50f 	.word	0x0801d50f
 801e93c:	20000098 	.word	0x20000098
 801e940:	2000c674 	.word	0x2000c674
 801e944:	0801d50d 	.word	0x0801d50d
 801e948:	2000009c 	.word	0x2000009c

0801e94c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e94c:	b538      	push	{r3, r4, r5, lr}
 801e94e:	4c15      	ldr	r4, [pc, #84]	; (801e9a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e950:	4605      	mov	r5, r0
 801e952:	7823      	ldrb	r3, [r4, #0]
 801e954:	f3bf 8f5b 	dmb	ish
 801e958:	07da      	lsls	r2, r3, #31
 801e95a:	d40b      	bmi.n	801e974 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e95c:	4620      	mov	r0, r4
 801e95e:	f006 fd21 	bl	80253a4 <__cxa_guard_acquire>
 801e962:	b138      	cbz	r0, 801e974 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e964:	4620      	mov	r0, r4
 801e966:	f006 fd29 	bl	80253bc <__cxa_guard_release>
 801e96a:	4a0f      	ldr	r2, [pc, #60]	; (801e9a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e96c:	490f      	ldr	r1, [pc, #60]	; (801e9ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e96e:	4810      	ldr	r0, [pc, #64]	; (801e9b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e970:	f006 fd11 	bl	8025396 <__aeabi_atexit>
 801e974:	4c0f      	ldr	r4, [pc, #60]	; (801e9b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e976:	7823      	ldrb	r3, [r4, #0]
 801e978:	f3bf 8f5b 	dmb	ish
 801e97c:	07db      	lsls	r3, r3, #31
 801e97e:	d40b      	bmi.n	801e998 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e980:	4620      	mov	r0, r4
 801e982:	f006 fd0f 	bl	80253a4 <__cxa_guard_acquire>
 801e986:	b138      	cbz	r0, 801e998 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e988:	4620      	mov	r0, r4
 801e98a:	f006 fd17 	bl	80253bc <__cxa_guard_release>
 801e98e:	4a06      	ldr	r2, [pc, #24]	; (801e9a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e990:	4909      	ldr	r1, [pc, #36]	; (801e9b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e992:	480a      	ldr	r0, [pc, #40]	; (801e9bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e994:	f006 fcff 	bl	8025396 <__aeabi_atexit>
 801e998:	4b05      	ldr	r3, [pc, #20]	; (801e9b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e99a:	60ab      	str	r3, [r5, #8]
 801e99c:	4b07      	ldr	r3, [pc, #28]	; (801e9bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e99e:	60eb      	str	r3, [r5, #12]
 801e9a0:	bd38      	pop	{r3, r4, r5, pc}
 801e9a2:	bf00      	nop
 801e9a4:	2000c650 	.word	0x2000c650
 801e9a8:	20000000 	.word	0x20000000
 801e9ac:	0801d513 	.word	0x0801d513
 801e9b0:	20000078 	.word	0x20000078
 801e9b4:	2000c654 	.word	0x2000c654
 801e9b8:	0801d511 	.word	0x0801d511
 801e9bc:	2000007c 	.word	0x2000007c

0801e9c0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e9c0:	b510      	push	{r4, lr}
 801e9c2:	4604      	mov	r4, r0
 801e9c4:	f7ff ff88 	bl	801e8d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e9c8:	4620      	mov	r0, r4
 801e9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9ce:	f7ff bfbd 	b.w	801e94c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e9d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e9d4:	b538      	push	{r3, r4, r5, lr}
 801e9d6:	4c15      	ldr	r4, [pc, #84]	; (801ea2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e9d8:	4605      	mov	r5, r0
 801e9da:	7823      	ldrb	r3, [r4, #0]
 801e9dc:	f3bf 8f5b 	dmb	ish
 801e9e0:	07da      	lsls	r2, r3, #31
 801e9e2:	d40b      	bmi.n	801e9fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e9e4:	4620      	mov	r0, r4
 801e9e6:	f006 fcdd 	bl	80253a4 <__cxa_guard_acquire>
 801e9ea:	b138      	cbz	r0, 801e9fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e9ec:	4620      	mov	r0, r4
 801e9ee:	f006 fce5 	bl	80253bc <__cxa_guard_release>
 801e9f2:	4a0f      	ldr	r2, [pc, #60]	; (801ea30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e9f4:	490f      	ldr	r1, [pc, #60]	; (801ea34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e9f6:	4810      	ldr	r0, [pc, #64]	; (801ea38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e9f8:	f006 fccd 	bl	8025396 <__aeabi_atexit>
 801e9fc:	4c0f      	ldr	r4, [pc, #60]	; (801ea3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e9fe:	7823      	ldrb	r3, [r4, #0]
 801ea00:	f3bf 8f5b 	dmb	ish
 801ea04:	07db      	lsls	r3, r3, #31
 801ea06:	d40b      	bmi.n	801ea20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ea08:	4620      	mov	r0, r4
 801ea0a:	f006 fccb 	bl	80253a4 <__cxa_guard_acquire>
 801ea0e:	b138      	cbz	r0, 801ea20 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ea10:	4620      	mov	r0, r4
 801ea12:	f006 fcd3 	bl	80253bc <__cxa_guard_release>
 801ea16:	4a06      	ldr	r2, [pc, #24]	; (801ea30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ea18:	4909      	ldr	r1, [pc, #36]	; (801ea40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ea1a:	480a      	ldr	r0, [pc, #40]	; (801ea44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ea1c:	f006 fcbb 	bl	8025396 <__aeabi_atexit>
 801ea20:	4b05      	ldr	r3, [pc, #20]	; (801ea38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ea22:	622b      	str	r3, [r5, #32]
 801ea24:	4b07      	ldr	r3, [pc, #28]	; (801ea44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ea26:	626b      	str	r3, [r5, #36]	; 0x24
 801ea28:	bd38      	pop	{r3, r4, r5, pc}
 801ea2a:	bf00      	nop
 801ea2c:	2000c678 	.word	0x2000c678
 801ea30:	20000000 	.word	0x20000000
 801ea34:	0801d507 	.word	0x0801d507
 801ea38:	200000a0 	.word	0x200000a0
 801ea3c:	2000c67c 	.word	0x2000c67c
 801ea40:	0801d505 	.word	0x0801d505
 801ea44:	200000a4 	.word	0x200000a4

0801ea48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ea48:	b538      	push	{r3, r4, r5, lr}
 801ea4a:	4c15      	ldr	r4, [pc, #84]	; (801eaa0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ea4c:	4605      	mov	r5, r0
 801ea4e:	7823      	ldrb	r3, [r4, #0]
 801ea50:	f3bf 8f5b 	dmb	ish
 801ea54:	07da      	lsls	r2, r3, #31
 801ea56:	d40b      	bmi.n	801ea70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ea58:	4620      	mov	r0, r4
 801ea5a:	f006 fca3 	bl	80253a4 <__cxa_guard_acquire>
 801ea5e:	b138      	cbz	r0, 801ea70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ea60:	4620      	mov	r0, r4
 801ea62:	f006 fcab 	bl	80253bc <__cxa_guard_release>
 801ea66:	4a0f      	ldr	r2, [pc, #60]	; (801eaa4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ea68:	490f      	ldr	r1, [pc, #60]	; (801eaa8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ea6a:	4810      	ldr	r0, [pc, #64]	; (801eaac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ea6c:	f006 fc93 	bl	8025396 <__aeabi_atexit>
 801ea70:	4c0f      	ldr	r4, [pc, #60]	; (801eab0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ea72:	7823      	ldrb	r3, [r4, #0]
 801ea74:	f3bf 8f5b 	dmb	ish
 801ea78:	07db      	lsls	r3, r3, #31
 801ea7a:	d40b      	bmi.n	801ea94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ea7c:	4620      	mov	r0, r4
 801ea7e:	f006 fc91 	bl	80253a4 <__cxa_guard_acquire>
 801ea82:	b138      	cbz	r0, 801ea94 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ea84:	4620      	mov	r0, r4
 801ea86:	f006 fc99 	bl	80253bc <__cxa_guard_release>
 801ea8a:	4a06      	ldr	r2, [pc, #24]	; (801eaa4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ea8c:	4909      	ldr	r1, [pc, #36]	; (801eab4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ea8e:	480a      	ldr	r0, [pc, #40]	; (801eab8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ea90:	f006 fc81 	bl	8025396 <__aeabi_atexit>
 801ea94:	4b05      	ldr	r3, [pc, #20]	; (801eaac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ea96:	61ab      	str	r3, [r5, #24]
 801ea98:	4b07      	ldr	r3, [pc, #28]	; (801eab8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ea9a:	61eb      	str	r3, [r5, #28]
 801ea9c:	bd38      	pop	{r3, r4, r5, pc}
 801ea9e:	bf00      	nop
 801eaa0:	2000c658 	.word	0x2000c658
 801eaa4:	20000000 	.word	0x20000000
 801eaa8:	0801d50b 	.word	0x0801d50b
 801eaac:	20000080 	.word	0x20000080
 801eab0:	2000c65c 	.word	0x2000c65c
 801eab4:	0801d509 	.word	0x0801d509
 801eab8:	20000084 	.word	0x20000084

0801eabc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801eabc:	b510      	push	{r4, lr}
 801eabe:	4604      	mov	r4, r0
 801eac0:	f7ff ff88 	bl	801e9d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801eac4:	4620      	mov	r0, r4
 801eac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eaca:	f7ff bfbd 	b.w	801ea48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801ead0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801ead0:	b538      	push	{r3, r4, r5, lr}
 801ead2:	4c15      	ldr	r4, [pc, #84]	; (801eb28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801ead4:	4605      	mov	r5, r0
 801ead6:	7823      	ldrb	r3, [r4, #0]
 801ead8:	f3bf 8f5b 	dmb	ish
 801eadc:	07da      	lsls	r2, r3, #31
 801eade:	d40b      	bmi.n	801eaf8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eae0:	4620      	mov	r0, r4
 801eae2:	f006 fc5f 	bl	80253a4 <__cxa_guard_acquire>
 801eae6:	b138      	cbz	r0, 801eaf8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801eae8:	4620      	mov	r0, r4
 801eaea:	f006 fc67 	bl	80253bc <__cxa_guard_release>
 801eaee:	4a0f      	ldr	r2, [pc, #60]	; (801eb2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801eaf0:	490f      	ldr	r1, [pc, #60]	; (801eb30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801eaf2:	4810      	ldr	r0, [pc, #64]	; (801eb34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801eaf4:	f006 fc4f 	bl	8025396 <__aeabi_atexit>
 801eaf8:	4c0f      	ldr	r4, [pc, #60]	; (801eb38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801eafa:	7823      	ldrb	r3, [r4, #0]
 801eafc:	f3bf 8f5b 	dmb	ish
 801eb00:	07db      	lsls	r3, r3, #31
 801eb02:	d40b      	bmi.n	801eb1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eb04:	4620      	mov	r0, r4
 801eb06:	f006 fc4d 	bl	80253a4 <__cxa_guard_acquire>
 801eb0a:	b138      	cbz	r0, 801eb1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801eb0c:	4620      	mov	r0, r4
 801eb0e:	f006 fc55 	bl	80253bc <__cxa_guard_release>
 801eb12:	4a06      	ldr	r2, [pc, #24]	; (801eb2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801eb14:	4909      	ldr	r1, [pc, #36]	; (801eb3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801eb16:	480a      	ldr	r0, [pc, #40]	; (801eb40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801eb18:	f006 fc3d 	bl	8025396 <__aeabi_atexit>
 801eb1c:	4b05      	ldr	r3, [pc, #20]	; (801eb34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801eb1e:	632b      	str	r3, [r5, #48]	; 0x30
 801eb20:	4b07      	ldr	r3, [pc, #28]	; (801eb40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801eb22:	636b      	str	r3, [r5, #52]	; 0x34
 801eb24:	bd38      	pop	{r3, r4, r5, pc}
 801eb26:	bf00      	nop
 801eb28:	2000c660 	.word	0x2000c660
 801eb2c:	20000000 	.word	0x20000000
 801eb30:	0801d4ff 	.word	0x0801d4ff
 801eb34:	20000088 	.word	0x20000088
 801eb38:	2000c664 	.word	0x2000c664
 801eb3c:	0801d4fd 	.word	0x0801d4fd
 801eb40:	2000008c 	.word	0x2000008c

0801eb44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801eb44:	b538      	push	{r3, r4, r5, lr}
 801eb46:	4c15      	ldr	r4, [pc, #84]	; (801eb9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801eb48:	4605      	mov	r5, r0
 801eb4a:	7823      	ldrb	r3, [r4, #0]
 801eb4c:	f3bf 8f5b 	dmb	ish
 801eb50:	07da      	lsls	r2, r3, #31
 801eb52:	d40b      	bmi.n	801eb6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801eb54:	4620      	mov	r0, r4
 801eb56:	f006 fc25 	bl	80253a4 <__cxa_guard_acquire>
 801eb5a:	b138      	cbz	r0, 801eb6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801eb5c:	4620      	mov	r0, r4
 801eb5e:	f006 fc2d 	bl	80253bc <__cxa_guard_release>
 801eb62:	4a0f      	ldr	r2, [pc, #60]	; (801eba0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801eb64:	490f      	ldr	r1, [pc, #60]	; (801eba4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801eb66:	4810      	ldr	r0, [pc, #64]	; (801eba8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801eb68:	f006 fc15 	bl	8025396 <__aeabi_atexit>
 801eb6c:	4c0f      	ldr	r4, [pc, #60]	; (801ebac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801eb6e:	7823      	ldrb	r3, [r4, #0]
 801eb70:	f3bf 8f5b 	dmb	ish
 801eb74:	07db      	lsls	r3, r3, #31
 801eb76:	d40b      	bmi.n	801eb90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801eb78:	4620      	mov	r0, r4
 801eb7a:	f006 fc13 	bl	80253a4 <__cxa_guard_acquire>
 801eb7e:	b138      	cbz	r0, 801eb90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801eb80:	4620      	mov	r0, r4
 801eb82:	f006 fc1b 	bl	80253bc <__cxa_guard_release>
 801eb86:	4a06      	ldr	r2, [pc, #24]	; (801eba0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801eb88:	4909      	ldr	r1, [pc, #36]	; (801ebb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801eb8a:	480a      	ldr	r0, [pc, #40]	; (801ebb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801eb8c:	f006 fc03 	bl	8025396 <__aeabi_atexit>
 801eb90:	4b05      	ldr	r3, [pc, #20]	; (801eba8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801eb92:	62ab      	str	r3, [r5, #40]	; 0x28
 801eb94:	4b07      	ldr	r3, [pc, #28]	; (801ebb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801eb96:	62eb      	str	r3, [r5, #44]	; 0x2c
 801eb98:	bd38      	pop	{r3, r4, r5, pc}
 801eb9a:	bf00      	nop
 801eb9c:	2000c638 	.word	0x2000c638
 801eba0:	20000000 	.word	0x20000000
 801eba4:	0801d503 	.word	0x0801d503
 801eba8:	20000060 	.word	0x20000060
 801ebac:	2000c63c 	.word	0x2000c63c
 801ebb0:	0801d501 	.word	0x0801d501
 801ebb4:	20000064 	.word	0x20000064

0801ebb8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801ebb8:	b510      	push	{r4, lr}
 801ebba:	4604      	mov	r4, r0
 801ebbc:	f7ff ff88 	bl	801ead0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801ebc0:	4620      	mov	r0, r4
 801ebc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ebc6:	f7ff bfbd 	b.w	801eb44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801ebcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801ebcc:	b538      	push	{r3, r4, r5, lr}
 801ebce:	4c15      	ldr	r4, [pc, #84]	; (801ec24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ebd0:	4605      	mov	r5, r0
 801ebd2:	7823      	ldrb	r3, [r4, #0]
 801ebd4:	f3bf 8f5b 	dmb	ish
 801ebd8:	07da      	lsls	r2, r3, #31
 801ebda:	d40b      	bmi.n	801ebf4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ebdc:	4620      	mov	r0, r4
 801ebde:	f006 fbe1 	bl	80253a4 <__cxa_guard_acquire>
 801ebe2:	b138      	cbz	r0, 801ebf4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801ebe4:	4620      	mov	r0, r4
 801ebe6:	f006 fbe9 	bl	80253bc <__cxa_guard_release>
 801ebea:	4a0f      	ldr	r2, [pc, #60]	; (801ec28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ebec:	490f      	ldr	r1, [pc, #60]	; (801ec2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ebee:	4810      	ldr	r0, [pc, #64]	; (801ec30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ebf0:	f006 fbd1 	bl	8025396 <__aeabi_atexit>
 801ebf4:	4c0f      	ldr	r4, [pc, #60]	; (801ec34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801ebf6:	7823      	ldrb	r3, [r4, #0]
 801ebf8:	f3bf 8f5b 	dmb	ish
 801ebfc:	07db      	lsls	r3, r3, #31
 801ebfe:	d40b      	bmi.n	801ec18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ec00:	4620      	mov	r0, r4
 801ec02:	f006 fbcf 	bl	80253a4 <__cxa_guard_acquire>
 801ec06:	b138      	cbz	r0, 801ec18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801ec08:	4620      	mov	r0, r4
 801ec0a:	f006 fbd7 	bl	80253bc <__cxa_guard_release>
 801ec0e:	4a06      	ldr	r2, [pc, #24]	; (801ec28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ec10:	4909      	ldr	r1, [pc, #36]	; (801ec38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ec12:	480a      	ldr	r0, [pc, #40]	; (801ec3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ec14:	f006 fbbf 	bl	8025396 <__aeabi_atexit>
 801ec18:	4b05      	ldr	r3, [pc, #20]	; (801ec30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ec1a:	642b      	str	r3, [r5, #64]	; 0x40
 801ec1c:	4b07      	ldr	r3, [pc, #28]	; (801ec3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801ec1e:	646b      	str	r3, [r5, #68]	; 0x44
 801ec20:	bd38      	pop	{r3, r4, r5, pc}
 801ec22:	bf00      	nop
 801ec24:	2000c668 	.word	0x2000c668
 801ec28:	20000000 	.word	0x20000000
 801ec2c:	0801d4f7 	.word	0x0801d4f7
 801ec30:	20000090 	.word	0x20000090
 801ec34:	2000c66c 	.word	0x2000c66c
 801ec38:	0801d4f5 	.word	0x0801d4f5
 801ec3c:	20000094 	.word	0x20000094

0801ec40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ec40:	b538      	push	{r3, r4, r5, lr}
 801ec42:	4c15      	ldr	r4, [pc, #84]	; (801ec98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ec44:	4605      	mov	r5, r0
 801ec46:	7823      	ldrb	r3, [r4, #0]
 801ec48:	f3bf 8f5b 	dmb	ish
 801ec4c:	07da      	lsls	r2, r3, #31
 801ec4e:	d40b      	bmi.n	801ec68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ec50:	4620      	mov	r0, r4
 801ec52:	f006 fba7 	bl	80253a4 <__cxa_guard_acquire>
 801ec56:	b138      	cbz	r0, 801ec68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801ec58:	4620      	mov	r0, r4
 801ec5a:	f006 fbaf 	bl	80253bc <__cxa_guard_release>
 801ec5e:	4a0f      	ldr	r2, [pc, #60]	; (801ec9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ec60:	490f      	ldr	r1, [pc, #60]	; (801eca0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ec62:	4810      	ldr	r0, [pc, #64]	; (801eca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ec64:	f006 fb97 	bl	8025396 <__aeabi_atexit>
 801ec68:	4c0f      	ldr	r4, [pc, #60]	; (801eca8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ec6a:	7823      	ldrb	r3, [r4, #0]
 801ec6c:	f3bf 8f5b 	dmb	ish
 801ec70:	07db      	lsls	r3, r3, #31
 801ec72:	d40b      	bmi.n	801ec8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ec74:	4620      	mov	r0, r4
 801ec76:	f006 fb95 	bl	80253a4 <__cxa_guard_acquire>
 801ec7a:	b138      	cbz	r0, 801ec8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801ec7c:	4620      	mov	r0, r4
 801ec7e:	f006 fb9d 	bl	80253bc <__cxa_guard_release>
 801ec82:	4a06      	ldr	r2, [pc, #24]	; (801ec9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ec84:	4909      	ldr	r1, [pc, #36]	; (801ecac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ec86:	480a      	ldr	r0, [pc, #40]	; (801ecb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ec88:	f006 fb85 	bl	8025396 <__aeabi_atexit>
 801ec8c:	4b05      	ldr	r3, [pc, #20]	; (801eca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ec8e:	63ab      	str	r3, [r5, #56]	; 0x38
 801ec90:	4b07      	ldr	r3, [pc, #28]	; (801ecb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801ec92:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ec94:	bd38      	pop	{r3, r4, r5, pc}
 801ec96:	bf00      	nop
 801ec98:	2000c648 	.word	0x2000c648
 801ec9c:	20000000 	.word	0x20000000
 801eca0:	0801d4fb 	.word	0x0801d4fb
 801eca4:	20000070 	.word	0x20000070
 801eca8:	2000c64c 	.word	0x2000c64c
 801ecac:	0801d4f9 	.word	0x0801d4f9
 801ecb0:	20000074 	.word	0x20000074

0801ecb4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ecb4:	b510      	push	{r4, lr}
 801ecb6:	4604      	mov	r4, r0
 801ecb8:	f7ff ff88 	bl	801ebcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ecbc:	4620      	mov	r0, r4
 801ecbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ecc2:	f7ff bfbd 	b.w	801ec40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ecc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ecc8:	b538      	push	{r3, r4, r5, lr}
 801ecca:	4c15      	ldr	r4, [pc, #84]	; (801ed20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801eccc:	4605      	mov	r5, r0
 801ecce:	7823      	ldrb	r3, [r4, #0]
 801ecd0:	f3bf 8f5b 	dmb	ish
 801ecd4:	07da      	lsls	r2, r3, #31
 801ecd6:	d40b      	bmi.n	801ecf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ecd8:	4620      	mov	r0, r4
 801ecda:	f006 fb63 	bl	80253a4 <__cxa_guard_acquire>
 801ecde:	b138      	cbz	r0, 801ecf0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ece0:	4620      	mov	r0, r4
 801ece2:	f006 fb6b 	bl	80253bc <__cxa_guard_release>
 801ece6:	4a0f      	ldr	r2, [pc, #60]	; (801ed24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ece8:	490f      	ldr	r1, [pc, #60]	; (801ed28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ecea:	4810      	ldr	r0, [pc, #64]	; (801ed2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ecec:	f006 fb53 	bl	8025396 <__aeabi_atexit>
 801ecf0:	4c0f      	ldr	r4, [pc, #60]	; (801ed30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ecf2:	7823      	ldrb	r3, [r4, #0]
 801ecf4:	f3bf 8f5b 	dmb	ish
 801ecf8:	07db      	lsls	r3, r3, #31
 801ecfa:	d40b      	bmi.n	801ed14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ecfc:	4620      	mov	r0, r4
 801ecfe:	f006 fb51 	bl	80253a4 <__cxa_guard_acquire>
 801ed02:	b138      	cbz	r0, 801ed14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ed04:	4620      	mov	r0, r4
 801ed06:	f006 fb59 	bl	80253bc <__cxa_guard_release>
 801ed0a:	4a06      	ldr	r2, [pc, #24]	; (801ed24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ed0c:	4909      	ldr	r1, [pc, #36]	; (801ed34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ed0e:	480a      	ldr	r0, [pc, #40]	; (801ed38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ed10:	f006 fb41 	bl	8025396 <__aeabi_atexit>
 801ed14:	4b05      	ldr	r3, [pc, #20]	; (801ed2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ed16:	652b      	str	r3, [r5, #80]	; 0x50
 801ed18:	4b07      	ldr	r3, [pc, #28]	; (801ed38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ed1a:	656b      	str	r3, [r5, #84]	; 0x54
 801ed1c:	bd38      	pop	{r3, r4, r5, pc}
 801ed1e:	bf00      	nop
 801ed20:	2000c640 	.word	0x2000c640
 801ed24:	20000000 	.word	0x20000000
 801ed28:	0801d4ef 	.word	0x0801d4ef
 801ed2c:	20000068 	.word	0x20000068
 801ed30:	2000c644 	.word	0x2000c644
 801ed34:	0801d4ed 	.word	0x0801d4ed
 801ed38:	2000006c 	.word	0x2000006c

0801ed3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ed3c:	b538      	push	{r3, r4, r5, lr}
 801ed3e:	4c15      	ldr	r4, [pc, #84]	; (801ed94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ed40:	4605      	mov	r5, r0
 801ed42:	7823      	ldrb	r3, [r4, #0]
 801ed44:	f3bf 8f5b 	dmb	ish
 801ed48:	07da      	lsls	r2, r3, #31
 801ed4a:	d40b      	bmi.n	801ed64 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	f006 fb29 	bl	80253a4 <__cxa_guard_acquire>
 801ed52:	b138      	cbz	r0, 801ed64 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ed54:	4620      	mov	r0, r4
 801ed56:	f006 fb31 	bl	80253bc <__cxa_guard_release>
 801ed5a:	4a0f      	ldr	r2, [pc, #60]	; (801ed98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ed5c:	490f      	ldr	r1, [pc, #60]	; (801ed9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ed5e:	4810      	ldr	r0, [pc, #64]	; (801eda0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ed60:	f006 fb19 	bl	8025396 <__aeabi_atexit>
 801ed64:	4c0f      	ldr	r4, [pc, #60]	; (801eda4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ed66:	7823      	ldrb	r3, [r4, #0]
 801ed68:	f3bf 8f5b 	dmb	ish
 801ed6c:	07db      	lsls	r3, r3, #31
 801ed6e:	d40b      	bmi.n	801ed88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ed70:	4620      	mov	r0, r4
 801ed72:	f006 fb17 	bl	80253a4 <__cxa_guard_acquire>
 801ed76:	b138      	cbz	r0, 801ed88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ed78:	4620      	mov	r0, r4
 801ed7a:	f006 fb1f 	bl	80253bc <__cxa_guard_release>
 801ed7e:	4a06      	ldr	r2, [pc, #24]	; (801ed98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ed80:	4909      	ldr	r1, [pc, #36]	; (801eda8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ed82:	480a      	ldr	r0, [pc, #40]	; (801edac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ed84:	f006 fb07 	bl	8025396 <__aeabi_atexit>
 801ed88:	4b05      	ldr	r3, [pc, #20]	; (801eda0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ed8a:	64ab      	str	r3, [r5, #72]	; 0x48
 801ed8c:	4b07      	ldr	r3, [pc, #28]	; (801edac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ed8e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ed90:	bd38      	pop	{r3, r4, r5, pc}
 801ed92:	bf00      	nop
 801ed94:	2000c630 	.word	0x2000c630
 801ed98:	20000000 	.word	0x20000000
 801ed9c:	0801d4f3 	.word	0x0801d4f3
 801eda0:	20000058 	.word	0x20000058
 801eda4:	2000c634 	.word	0x2000c634
 801eda8:	0801d4f1 	.word	0x0801d4f1
 801edac:	2000005c 	.word	0x2000005c

0801edb0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801edb0:	b510      	push	{r4, lr}
 801edb2:	4604      	mov	r4, r0
 801edb4:	f7ff ff88 	bl	801ecc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801edb8:	4620      	mov	r0, r4
 801edba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edbe:	f7ff bfbd 	b.w	801ed3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801edc2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801edc2:	b510      	push	{r4, lr}
 801edc4:	4604      	mov	r4, r0
 801edc6:	f7ff fff3 	bl	801edb0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801edca:	4620      	mov	r0, r4
 801edcc:	f7ff ff72 	bl	801ecb4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801edd0:	4620      	mov	r0, r4
 801edd2:	f7ff fe73 	bl	801eabc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801edd6:	4620      	mov	r0, r4
 801edd8:	f7ff fdf2 	bl	801e9c0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801eddc:	4620      	mov	r0, r4
 801edde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ede2:	f7ff bee9 	b.w	801ebb8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801ede8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edec:	b087      	sub	sp, #28
 801edee:	7888      	ldrb	r0, [r1, #2]
 801edf0:	4616      	mov	r6, r2
 801edf2:	9001      	str	r0, [sp, #4]
 801edf4:	7848      	ldrb	r0, [r1, #1]
 801edf6:	9100      	str	r1, [sp, #0]
 801edf8:	9002      	str	r0, [sp, #8]
 801edfa:	7808      	ldrb	r0, [r1, #0]
 801edfc:	9901      	ldr	r1, [sp, #4]
 801edfe:	9003      	str	r0, [sp, #12]
 801ee00:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ee04:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801ee08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801ee0c:	9902      	ldr	r1, [sp, #8]
 801ee0e:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801ee12:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801ee16:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801ee1a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801ee1e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801ee22:	9005      	str	r0, [sp, #20]
 801ee24:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801ee28:	fb05 ca0e 	mla	sl, r5, lr, ip
 801ee2c:	2d00      	cmp	r5, #0
 801ee2e:	eb06 080a 	add.w	r8, r6, sl
 801ee32:	db4a      	blt.n	801eeca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801ee34:	45a9      	cmp	r9, r5
 801ee36:	dd48      	ble.n	801eeca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801ee38:	f1bc 0f00 	cmp.w	ip, #0
 801ee3c:	db43      	blt.n	801eec6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801ee3e:	45e6      	cmp	lr, ip
 801ee40:	dd41      	ble.n	801eec6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801ee42:	f816 600a 	ldrb.w	r6, [r6, sl]
 801ee46:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ee4a:	441e      	add	r6, r3
 801ee4c:	f11c 0001 	adds.w	r0, ip, #1
 801ee50:	d43e      	bmi.n	801eed0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801ee52:	4586      	cmp	lr, r0
 801ee54:	dd3c      	ble.n	801eed0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801ee56:	2a00      	cmp	r2, #0
 801ee58:	d03a      	beq.n	801eed0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801ee5a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801ee5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ee62:	4418      	add	r0, r3
 801ee64:	3501      	adds	r5, #1
 801ee66:	d437      	bmi.n	801eed8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801ee68:	45a9      	cmp	r9, r5
 801ee6a:	dd35      	ble.n	801eed8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801ee6c:	b3a4      	cbz	r4, 801eed8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801ee6e:	f1bc 0f00 	cmp.w	ip, #0
 801ee72:	db2f      	blt.n	801eed4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801ee74:	45e6      	cmp	lr, ip
 801ee76:	dd2d      	ble.n	801eed4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801ee78:	f818 500e 	ldrb.w	r5, [r8, lr]
 801ee7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ee80:	441d      	add	r5, r3
 801ee82:	f11c 0c01 	adds.w	ip, ip, #1
 801ee86:	d42a      	bmi.n	801eede <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801ee88:	45e6      	cmp	lr, ip
 801ee8a:	dd28      	ble.n	801eede <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801ee8c:	b33a      	cbz	r2, 801eede <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801ee8e:	44c6      	add	lr, r8
 801ee90:	f89e c001 	ldrb.w	ip, [lr, #1]
 801ee94:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ee98:	4463      	add	r3, ip
 801ee9a:	ea6f 0c07 	mvn.w	ip, r7
 801ee9e:	2a0f      	cmp	r2, #15
 801eea0:	f896 a000 	ldrb.w	sl, [r6]
 801eea4:	fa5f fc8c 	uxtb.w	ip, ip
 801eea8:	f890 b000 	ldrb.w	fp, [r0]
 801eeac:	f895 9000 	ldrb.w	r9, [r5]
 801eeb0:	7819      	ldrb	r1, [r3, #0]
 801eeb2:	d801      	bhi.n	801eeb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801eeb4:	2c0f      	cmp	r4, #15
 801eeb6:	d914      	bls.n	801eee2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801eeb8:	4b40      	ldr	r3, [pc, #256]	; (801efbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801eeba:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801eebe:	4a40      	ldr	r2, [pc, #256]	; (801efc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801eec0:	4840      	ldr	r0, [pc, #256]	; (801efc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801eec2:	f006 fa9b 	bl	80253fc <__assert_func>
 801eec6:	ae05      	add	r6, sp, #20
 801eec8:	e7c0      	b.n	801ee4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801eeca:	a805      	add	r0, sp, #20
 801eecc:	4606      	mov	r6, r0
 801eece:	e7c9      	b.n	801ee64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801eed0:	a805      	add	r0, sp, #20
 801eed2:	e7c7      	b.n	801ee64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801eed4:	ad05      	add	r5, sp, #20
 801eed6:	e7d4      	b.n	801ee82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801eed8:	ab05      	add	r3, sp, #20
 801eeda:	461d      	mov	r5, r3
 801eedc:	e7dd      	b.n	801ee9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801eede:	ab05      	add	r3, sp, #20
 801eee0:	e7db      	b.n	801ee9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801eee2:	b292      	uxth	r2, r2
 801eee4:	b2a4      	uxth	r4, r4
 801eee6:	fa1f fc8c 	uxth.w	ip, ip
 801eeea:	fb02 f804 	mul.w	r8, r2, r4
 801eeee:	0112      	lsls	r2, r2, #4
 801eef0:	b2bf      	uxth	r7, r7
 801eef2:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801eef6:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801eefa:	eba2 0208 	sub.w	r2, r2, r8
 801eefe:	b2a4      	uxth	r4, r4
 801ef00:	b292      	uxth	r2, r2
 801ef02:	ebae 0e04 	sub.w	lr, lr, r4
 801ef06:	fb02 fb0b 	mul.w	fp, r2, fp
 801ef0a:	fa1f fe8e 	uxth.w	lr, lr
 801ef0e:	fb0e ba0a 	mla	sl, lr, sl, fp
 801ef12:	fb04 aa09 	mla	sl, r4, r9, sl
 801ef16:	fb08 aa01 	mla	sl, r8, r1, sl
 801ef1a:	9903      	ldr	r1, [sp, #12]
 801ef1c:	fb11 f90c 	smulbb	r9, r1, ip
 801ef20:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801ef24:	9900      	ldr	r1, [sp, #0]
 801ef26:	fb0a 9a07 	mla	sl, sl, r7, r9
 801ef2a:	fa1f fa8a 	uxth.w	sl, sl
 801ef2e:	f10a 0901 	add.w	r9, sl, #1
 801ef32:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801ef36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ef3a:	f881 a000 	strb.w	sl, [r1]
 801ef3e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ef42:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ef46:	fb02 fa0a 	mul.w	sl, r2, sl
 801ef4a:	9902      	ldr	r1, [sp, #8]
 801ef4c:	fb0e aa09 	mla	sl, lr, r9, sl
 801ef50:	f895 9001 	ldrb.w	r9, [r5, #1]
 801ef54:	fb04 aa09 	mla	sl, r4, r9, sl
 801ef58:	f893 9001 	ldrb.w	r9, [r3, #1]
 801ef5c:	fb08 a909 	mla	r9, r8, r9, sl
 801ef60:	fb11 fa0c 	smulbb	sl, r1, ip
 801ef64:	9900      	ldr	r1, [sp, #0]
 801ef66:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ef6a:	fb09 a907 	mla	r9, r9, r7, sl
 801ef6e:	fa1f f989 	uxth.w	r9, r9
 801ef72:	f109 0a01 	add.w	sl, r9, #1
 801ef76:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ef7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ef7e:	f881 9001 	strb.w	r9, [r1, #1]
 801ef82:	7880      	ldrb	r0, [r0, #2]
 801ef84:	78b6      	ldrb	r6, [r6, #2]
 801ef86:	4342      	muls	r2, r0
 801ef88:	78a8      	ldrb	r0, [r5, #2]
 801ef8a:	789b      	ldrb	r3, [r3, #2]
 801ef8c:	fb0e 2206 	mla	r2, lr, r6, r2
 801ef90:	fb04 2400 	mla	r4, r4, r0, r2
 801ef94:	fb08 4803 	mla	r8, r8, r3, r4
 801ef98:	9b01      	ldr	r3, [sp, #4]
 801ef9a:	fb13 fc0c 	smulbb	ip, r3, ip
 801ef9e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801efa2:	fb08 c707 	mla	r7, r8, r7, ip
 801efa6:	b2bf      	uxth	r7, r7
 801efa8:	f107 0c01 	add.w	ip, r7, #1
 801efac:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801efb0:	123f      	asrs	r7, r7, #8
 801efb2:	708f      	strb	r7, [r1, #2]
 801efb4:	b007      	add	sp, #28
 801efb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efba:	bf00      	nop
 801efbc:	08029ec7 	.word	0x08029ec7
 801efc0:	0802a3be 	.word	0x0802a3be
 801efc4:	08029f90 	.word	0x08029f90

0801efc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efcc:	ed2d 8b08 	vpush	{d8-d11}
 801efd0:	b095      	sub	sp, #84	; 0x54
 801efd2:	eeb0 aa40 	vmov.f32	s20, s0
 801efd6:	eef0 9a60 	vmov.f32	s19, s1
 801efda:	930a      	str	r3, [sp, #40]	; 0x28
 801efdc:	eeb0 9a41 	vmov.f32	s18, s2
 801efe0:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801efe4:	eeb0 8a62 	vmov.f32	s16, s5
 801efe8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801efea:	eef0 8a43 	vmov.f32	s17, s6
 801efee:	930c      	str	r3, [sp, #48]	; 0x30
 801eff0:	eef0 ba44 	vmov.f32	s23, s8
 801eff4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801eff8:	eeb0 ba64 	vmov.f32	s22, s9
 801effc:	9013      	str	r0, [sp, #76]	; 0x4c
 801effe:	eef0 aa45 	vmov.f32	s21, s10
 801f002:	9310      	str	r3, [sp, #64]	; 0x40
 801f004:	6860      	ldr	r0, [r4, #4]
 801f006:	910f      	str	r1, [sp, #60]	; 0x3c
 801f008:	9212      	str	r2, [sp, #72]	; 0x48
 801f00a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f00c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801f010:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f014:	fb00 1303 	mla	r3, r0, r3, r1
 801f018:	6821      	ldr	r1, [r4, #0]
 801f01a:	6854      	ldr	r4, [r2, #4]
 801f01c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f020:	18cb      	adds	r3, r1, r3
 801f022:	930b      	str	r3, [sp, #44]	; 0x2c
 801f024:	6813      	ldr	r3, [r2, #0]
 801f026:	930e      	str	r3, [sp, #56]	; 0x38
 801f028:	1d23      	adds	r3, r4, #4
 801f02a:	9309      	str	r3, [sp, #36]	; 0x24
 801f02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f02e:	43db      	mvns	r3, r3
 801f030:	b2db      	uxtb	r3, r3
 801f032:	930d      	str	r3, [sp, #52]	; 0x34
 801f034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f036:	2b00      	cmp	r3, #0
 801f038:	dc03      	bgt.n	801f042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f03a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	f340 823c 	ble.w	801f4ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f044:	2b00      	cmp	r3, #0
 801f046:	f340 8115 	ble.w	801f274 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801f04a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f04c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f04e:	1412      	asrs	r2, r2, #16
 801f050:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f054:	d431      	bmi.n	801f0ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f056:	1c51      	adds	r1, r2, #1
 801f058:	428d      	cmp	r5, r1
 801f05a:	dd31      	ble.n	801f0c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	db2f      	blt.n	801f0c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f060:	1c59      	adds	r1, r3, #1
 801f062:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f064:	4288      	cmp	r0, r1
 801f066:	dd2b      	ble.n	801f0c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f06a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f06c:	3b01      	subs	r3, #1
 801f06e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801f070:	fb02 1203 	mla	r2, r2, r3, r1
 801f074:	1412      	asrs	r2, r2, #16
 801f076:	d42d      	bmi.n	801f0d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f078:	3201      	adds	r2, #1
 801f07a:	4295      	cmp	r5, r2
 801f07c:	dd2a      	ble.n	801f0d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f07e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f080:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f082:	fb02 1303 	mla	r3, r2, r3, r1
 801f086:	141b      	asrs	r3, r3, #16
 801f088:	d424      	bmi.n	801f0d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f08a:	3301      	adds	r3, #1
 801f08c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f08e:	429a      	cmp	r2, r3
 801f090:	dd20      	ble.n	801f0d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801f092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f094:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801f098:	f103 0c03 	add.w	ip, r3, #3
 801f09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f09e:	9311      	str	r3, [sp, #68]	; 0x44
 801f0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	f300 814f 	bgt.w	801f346 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801f0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f0ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f0b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0b4:	441a      	add	r2, r3
 801f0b6:	920b      	str	r2, [sp, #44]	; 0x2c
 801f0b8:	e0de      	b.n	801f278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f0ba:	1c51      	adds	r1, r2, #1
 801f0bc:	f040 80cb 	bne.w	801f256 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f0c0:	42aa      	cmp	r2, r5
 801f0c2:	f280 80c8 	bge.w	801f256 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f0c6:	1c5f      	adds	r7, r3, #1
 801f0c8:	f2c0 80c5 	blt.w	801f256 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f0cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f0ce:	4293      	cmp	r3, r2
 801f0d0:	f280 80c1 	bge.w	801f256 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f0d8:	9311      	str	r3, [sp, #68]	; 0x44
 801f0da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	dde3      	ble.n	801f0a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801f0e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f0e2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f0e4:	141a      	asrs	r2, r3, #16
 801f0e6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f0e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f0ea:	1400      	asrs	r0, r0, #16
 801f0ec:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f0f0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f0f4:	f100 810e 	bmi.w	801f314 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f0f8:	1c46      	adds	r6, r0, #1
 801f0fa:	42b5      	cmp	r5, r6
 801f0fc:	f340 810c 	ble.w	801f318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f100:	2a00      	cmp	r2, #0
 801f102:	f2c0 8109 	blt.w	801f318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f106:	1c56      	adds	r6, r2, #1
 801f108:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f10a:	42b4      	cmp	r4, r6
 801f10c:	f340 8104 	ble.w	801f318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801f110:	fb02 0005 	mla	r0, r2, r5, r0
 801f114:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f118:	f814 e000 	ldrb.w	lr, [r4, r0]
 801f11c:	4402      	add	r2, r0
 801f11e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f120:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f124:	eb00 080e 	add.w	r8, r0, lr
 801f128:	2b00      	cmp	r3, #0
 801f12a:	f000 80e4 	beq.w	801f2f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801f12e:	f892 c001 	ldrb.w	ip, [r2, #1]
 801f132:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f136:	4484      	add	ip, r0
 801f138:	2900      	cmp	r1, #0
 801f13a:	f000 80e5 	beq.w	801f308 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801f13e:	1950      	adds	r0, r2, r5
 801f140:	5d52      	ldrb	r2, [r2, r5]
 801f142:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f144:	7840      	ldrb	r0, [r0, #1]
 801f146:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f14a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f14e:	4422      	add	r2, r4
 801f150:	4420      	add	r0, r4
 801f152:	b29b      	uxth	r3, r3
 801f154:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f156:	b289      	uxth	r1, r1
 801f158:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801f15c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f160:	fb03 fa01 	mul.w	sl, r3, r1
 801f164:	011b      	lsls	r3, r3, #4
 801f166:	f89c e000 	ldrb.w	lr, [ip]
 801f16a:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f16e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801f172:	eba3 030a 	sub.w	r3, r3, sl
 801f176:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f178:	b289      	uxth	r1, r1
 801f17a:	b29b      	uxth	r3, r3
 801f17c:	eba9 0901 	sub.w	r9, r9, r1
 801f180:	fb03 fe0e 	mul.w	lr, r3, lr
 801f184:	fa1f f989 	uxth.w	r9, r9
 801f188:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f18c:	f892 b000 	ldrb.w	fp, [r2]
 801f190:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f194:	f890 b000 	ldrb.w	fp, [r0]
 801f198:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f19c:	f897 b000 	ldrb.w	fp, [r7]
 801f1a0:	fb1b fb04 	smulbb	fp, fp, r4
 801f1a4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f1a8:	fb0e be06 	mla	lr, lr, r6, fp
 801f1ac:	fa1f fe8e 	uxth.w	lr, lr
 801f1b0:	f10e 0b01 	add.w	fp, lr, #1
 801f1b4:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801f1b8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f1bc:	f887 b000 	strb.w	fp, [r7]
 801f1c0:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f1c4:	f898 b001 	ldrb.w	fp, [r8, #1]
 801f1c8:	fb03 fe0e 	mul.w	lr, r3, lr
 801f1cc:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f1d0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f1d4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f1d8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f1dc:	fb0a ee0b 	mla	lr, sl, fp, lr
 801f1e0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f1e4:	fb1b fb04 	smulbb	fp, fp, r4
 801f1e8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f1ec:	fb0e be06 	mla	lr, lr, r6, fp
 801f1f0:	fa1f fe8e 	uxth.w	lr, lr
 801f1f4:	f10e 0b01 	add.w	fp, lr, #1
 801f1f8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f1fc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f200:	f887 e001 	strb.w	lr, [r7, #1]
 801f204:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f208:	f898 e002 	ldrb.w	lr, [r8, #2]
 801f20c:	fb03 f30c 	mul.w	r3, r3, ip
 801f210:	fb09 330e 	mla	r3, r9, lr, r3
 801f214:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f218:	7882      	ldrb	r2, [r0, #2]
 801f21a:	fb01 310e 	mla	r1, r1, lr, r3
 801f21e:	fb0a 1a02 	mla	sl, sl, r2, r1
 801f222:	78b9      	ldrb	r1, [r7, #2]
 801f224:	fb11 f104 	smulbb	r1, r1, r4
 801f228:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f22c:	fb0a 1606 	mla	r6, sl, r6, r1
 801f230:	b2b6      	uxth	r6, r6
 801f232:	1c73      	adds	r3, r6, #1
 801f234:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f238:	1236      	asrs	r6, r6, #8
 801f23a:	70be      	strb	r6, [r7, #2]
 801f23c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f23e:	3703      	adds	r7, #3
 801f240:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f242:	4413      	add	r3, r2
 801f244:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f246:	9327      	str	r3, [sp, #156]	; 0x9c
 801f248:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f24a:	4413      	add	r3, r2
 801f24c:	9328      	str	r3, [sp, #160]	; 0xa0
 801f24e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f250:	3b01      	subs	r3, #1
 801f252:	9311      	str	r3, [sp, #68]	; 0x44
 801f254:	e741      	b.n	801f0da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801f256:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f258:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f25a:	4413      	add	r3, r2
 801f25c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f25e:	9327      	str	r3, [sp, #156]	; 0x9c
 801f260:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f262:	4413      	add	r3, r2
 801f264:	9328      	str	r3, [sp, #160]	; 0xa0
 801f266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f268:	3b01      	subs	r3, #1
 801f26a:	930a      	str	r3, [sp, #40]	; 0x28
 801f26c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f26e:	3303      	adds	r3, #3
 801f270:	930b      	str	r3, [sp, #44]	; 0x2c
 801f272:	e6e6      	b.n	801f042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801f274:	f47f aef8 	bne.w	801f068 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801f278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	f340 811d 	ble.w	801f4ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801f280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f284:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f286:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f28a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f28e:	eef0 6a48 	vmov.f32	s13, s16
 801f292:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f296:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f29a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f29e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801f2a2:	eef0 6a68 	vmov.f32	s13, s17
 801f2a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f2aa:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801f2ae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f2b2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f2b6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f2ba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f2be:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f2c2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f2c6:	ee18 2a10 	vmov	r2, s16
 801f2ca:	eeb0 8a47 	vmov.f32	s16, s14
 801f2ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2d2:	ee18 2a90 	vmov	r2, s17
 801f2d6:	9329      	str	r3, [sp, #164]	; 0xa4
 801f2d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2da:	eef0 8a67 	vmov.f32	s17, s15
 801f2de:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2e2:	932a      	str	r3, [sp, #168]	; 0xa8
 801f2e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f2e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f2e8:	3b01      	subs	r3, #1
 801f2ea:	930f      	str	r3, [sp, #60]	; 0x3c
 801f2ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f2ee:	bf08      	it	eq
 801f2f0:	4613      	moveq	r3, r2
 801f2f2:	930a      	str	r3, [sp, #40]	; 0x28
 801f2f4:	e69e      	b.n	801f034 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f2f6:	b151      	cbz	r1, 801f30e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801f2f8:	5d52      	ldrb	r2, [r2, r5]
 801f2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f2fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f300:	4402      	add	r2, r0
 801f302:	4640      	mov	r0, r8
 801f304:	46c4      	mov	ip, r8
 801f306:	e724      	b.n	801f152 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f308:	4640      	mov	r0, r8
 801f30a:	4642      	mov	r2, r8
 801f30c:	e721      	b.n	801f152 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801f30e:	4640      	mov	r0, r8
 801f310:	4642      	mov	r2, r8
 801f312:	e7f7      	b.n	801f304 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801f314:	1c46      	adds	r6, r0, #1
 801f316:	d191      	bne.n	801f23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f318:	4285      	cmp	r5, r0
 801f31a:	dd8f      	ble.n	801f23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f31c:	1c54      	adds	r4, r2, #1
 801f31e:	db8d      	blt.n	801f23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f320:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f322:	4294      	cmp	r4, r2
 801f324:	dd8a      	ble.n	801f23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f326:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f328:	9002      	str	r0, [sp, #8]
 801f32a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f32c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801f330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f334:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f338:	e9cd 5300 	strd	r5, r3, [sp]
 801f33c:	4639      	mov	r1, r7
 801f33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f340:	f7ff fd52 	bl	801ede8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f344:	e77a      	b.n	801f23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801f346:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f348:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f34a:	1410      	asrs	r0, r2, #16
 801f34c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f350:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f352:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f354:	1412      	asrs	r2, r2, #16
 801f356:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f35a:	fb05 2000 	mla	r0, r5, r0, r2
 801f35e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f360:	f814 8000 	ldrb.w	r8, [r4, r0]
 801f364:	4402      	add	r2, r0
 801f366:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f368:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f36c:	eb00 0708 	add.w	r7, r0, r8
 801f370:	2b00      	cmp	r3, #0
 801f372:	f000 8093 	beq.w	801f49c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801f376:	7856      	ldrb	r6, [r2, #1]
 801f378:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f37c:	4406      	add	r6, r0
 801f37e:	2900      	cmp	r1, #0
 801f380:	f000 8095 	beq.w	801f4ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f384:	1950      	adds	r0, r2, r5
 801f386:	5d52      	ldrb	r2, [r2, r5]
 801f388:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f38a:	7840      	ldrb	r0, [r0, #1]
 801f38c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f390:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f394:	4422      	add	r2, r4
 801f396:	4420      	add	r0, r4
 801f398:	b29b      	uxth	r3, r3
 801f39a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f39c:	b289      	uxth	r1, r1
 801f39e:	f10c 0c03 	add.w	ip, ip, #3
 801f3a2:	f814 b008 	ldrb.w	fp, [r4, r8]
 801f3a6:	fb03 f901 	mul.w	r9, r3, r1
 801f3aa:	011b      	lsls	r3, r3, #4
 801f3ac:	f896 8000 	ldrb.w	r8, [r6]
 801f3b0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f3b4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f3b8:	eba3 0309 	sub.w	r3, r3, r9
 801f3bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f3be:	b289      	uxth	r1, r1
 801f3c0:	b29b      	uxth	r3, r3
 801f3c2:	ebae 0e01 	sub.w	lr, lr, r1
 801f3c6:	fb03 f808 	mul.w	r8, r3, r8
 801f3ca:	fa1f fe8e 	uxth.w	lr, lr
 801f3ce:	fb0e 880b 	mla	r8, lr, fp, r8
 801f3d2:	f892 b000 	ldrb.w	fp, [r2]
 801f3d6:	fb01 880b 	mla	r8, r1, fp, r8
 801f3da:	f890 b000 	ldrb.w	fp, [r0]
 801f3de:	fb09 880b 	mla	r8, r9, fp, r8
 801f3e2:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801f3e6:	fb1b fb04 	smulbb	fp, fp, r4
 801f3ea:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f3ee:	fb08 b80a 	mla	r8, r8, sl, fp
 801f3f2:	fa1f f888 	uxth.w	r8, r8
 801f3f6:	f108 0b01 	add.w	fp, r8, #1
 801f3fa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f3fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f402:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801f406:	f896 8001 	ldrb.w	r8, [r6, #1]
 801f40a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f40e:	fb03 f808 	mul.w	r8, r3, r8
 801f412:	fb0e 880b 	mla	r8, lr, fp, r8
 801f416:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f41a:	fb01 880b 	mla	r8, r1, fp, r8
 801f41e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f422:	fb09 880b 	mla	r8, r9, fp, r8
 801f426:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801f42a:	fb1b fb04 	smulbb	fp, fp, r4
 801f42e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f432:	fb08 b80a 	mla	r8, r8, sl, fp
 801f436:	fa1f f888 	uxth.w	r8, r8
 801f43a:	f108 0b01 	add.w	fp, r8, #1
 801f43e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f442:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f446:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801f44a:	78b6      	ldrb	r6, [r6, #2]
 801f44c:	78bf      	ldrb	r7, [r7, #2]
 801f44e:	4373      	muls	r3, r6
 801f450:	7896      	ldrb	r6, [r2, #2]
 801f452:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f454:	fb0e 3307 	mla	r3, lr, r7, r3
 801f458:	fb01 3306 	mla	r3, r1, r6, r3
 801f45c:	7886      	ldrb	r6, [r0, #2]
 801f45e:	fb09 3906 	mla	r9, r9, r6, r3
 801f462:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801f466:	fb13 f304 	smulbb	r3, r3, r4
 801f46a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f46e:	fb09 390a 	mla	r9, r9, sl, r3
 801f472:	fa1f f989 	uxth.w	r9, r9
 801f476:	f109 0301 	add.w	r3, r9, #1
 801f47a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f47e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f480:	4413      	add	r3, r2
 801f482:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f484:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f488:	9327      	str	r3, [sp, #156]	; 0x9c
 801f48a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f48c:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801f490:	4413      	add	r3, r2
 801f492:	9328      	str	r3, [sp, #160]	; 0xa0
 801f494:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f496:	3b01      	subs	r3, #1
 801f498:	9311      	str	r3, [sp, #68]	; 0x44
 801f49a:	e601      	b.n	801f0a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f49c:	b151      	cbz	r1, 801f4b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801f49e:	5d52      	ldrb	r2, [r2, r5]
 801f4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f4a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f4a6:	4402      	add	r2, r0
 801f4a8:	4638      	mov	r0, r7
 801f4aa:	463e      	mov	r6, r7
 801f4ac:	e774      	b.n	801f398 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f4ae:	4638      	mov	r0, r7
 801f4b0:	463a      	mov	r2, r7
 801f4b2:	e771      	b.n	801f398 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801f4b4:	4638      	mov	r0, r7
 801f4b6:	463a      	mov	r2, r7
 801f4b8:	e7f7      	b.n	801f4aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801f4ba:	b015      	add	sp, #84	; 0x54
 801f4bc:	ecbd 8b08 	vpop	{d8-d11}
 801f4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f4c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4c8:	780d      	ldrb	r5, [r1, #0]
 801f4ca:	f891 9002 	ldrb.w	r9, [r1, #2]
 801f4ce:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801f4d2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f4d6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801f4da:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801f4de:	f891 9001 	ldrb.w	r9, [r1, #1]
 801f4e2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801f4e6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f4ea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f4ee:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801f4f2:	9501      	str	r5, [sp, #4]
 801f4f4:	fb06 470c 	mla	r7, r6, ip, r4
 801f4f8:	2e00      	cmp	r6, #0
 801f4fa:	eb02 0e07 	add.w	lr, r2, r7
 801f4fe:	db46      	blt.n	801f58e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f500:	45b0      	cmp	r8, r6
 801f502:	dd44      	ble.n	801f58e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801f504:	2c00      	cmp	r4, #0
 801f506:	db40      	blt.n	801f58a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f508:	45a4      	cmp	ip, r4
 801f50a:	dd3e      	ble.n	801f58a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801f50c:	5dd7      	ldrb	r7, [r2, r7]
 801f50e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f512:	441f      	add	r7, r3
 801f514:	1c62      	adds	r2, r4, #1
 801f516:	d43d      	bmi.n	801f594 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f518:	4594      	cmp	ip, r2
 801f51a:	dd3b      	ble.n	801f594 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f51c:	f1ba 0f00 	cmp.w	sl, #0
 801f520:	d038      	beq.n	801f594 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801f522:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f52a:	441d      	add	r5, r3
 801f52c:	3601      	adds	r6, #1
 801f52e:	d435      	bmi.n	801f59c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f530:	45b0      	cmp	r8, r6
 801f532:	dd33      	ble.n	801f59c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f534:	b390      	cbz	r0, 801f59c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801f536:	2c00      	cmp	r4, #0
 801f538:	db2e      	blt.n	801f598 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f53a:	45a4      	cmp	ip, r4
 801f53c:	dd2c      	ble.n	801f598 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801f53e:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801f542:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f546:	441e      	add	r6, r3
 801f548:	1c62      	adds	r2, r4, #1
 801f54a:	d42a      	bmi.n	801f5a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f54c:	4594      	cmp	ip, r2
 801f54e:	dd28      	ble.n	801f5a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f550:	f1ba 0f00 	cmp.w	sl, #0
 801f554:	d025      	beq.n	801f5a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801f556:	44f4      	add	ip, lr
 801f558:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f55c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f560:	4413      	add	r3, r2
 801f562:	f1ba 0f0f 	cmp.w	sl, #15
 801f566:	f897 8000 	ldrb.w	r8, [r7]
 801f56a:	f895 9000 	ldrb.w	r9, [r5]
 801f56e:	f896 e000 	ldrb.w	lr, [r6]
 801f572:	f893 c000 	ldrb.w	ip, [r3]
 801f576:	d801      	bhi.n	801f57c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801f578:	280f      	cmp	r0, #15
 801f57a:	d914      	bls.n	801f5a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801f57c:	4b29      	ldr	r3, [pc, #164]	; (801f624 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801f57e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f582:	4a29      	ldr	r2, [pc, #164]	; (801f628 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801f584:	4829      	ldr	r0, [pc, #164]	; (801f62c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801f586:	f005 ff39 	bl	80253fc <__assert_func>
 801f58a:	af01      	add	r7, sp, #4
 801f58c:	e7c2      	b.n	801f514 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f58e:	ad01      	add	r5, sp, #4
 801f590:	462f      	mov	r7, r5
 801f592:	e7cb      	b.n	801f52c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f594:	ad01      	add	r5, sp, #4
 801f596:	e7c9      	b.n	801f52c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f598:	ae01      	add	r6, sp, #4
 801f59a:	e7d5      	b.n	801f548 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801f59c:	ab01      	add	r3, sp, #4
 801f59e:	461e      	mov	r6, r3
 801f5a0:	e7df      	b.n	801f562 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f5a2:	ab01      	add	r3, sp, #4
 801f5a4:	e7dd      	b.n	801f562 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801f5a6:	fa1f f48a 	uxth.w	r4, sl
 801f5aa:	b280      	uxth	r0, r0
 801f5ac:	fb04 fa00 	mul.w	sl, r4, r0
 801f5b0:	0124      	lsls	r4, r4, #4
 801f5b2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801f5b6:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801f5ba:	b282      	uxth	r2, r0
 801f5bc:	eba4 000a 	sub.w	r0, r4, sl
 801f5c0:	ebab 0b02 	sub.w	fp, fp, r2
 801f5c4:	b280      	uxth	r0, r0
 801f5c6:	fa1f fb8b 	uxth.w	fp, fp
 801f5ca:	fb00 f909 	mul.w	r9, r0, r9
 801f5ce:	fb0b 9808 	mla	r8, fp, r8, r9
 801f5d2:	fb02 8e0e 	mla	lr, r2, lr, r8
 801f5d6:	fb0a ec0c 	mla	ip, sl, ip, lr
 801f5da:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f5de:	f881 c000 	strb.w	ip, [r1]
 801f5e2:	786c      	ldrb	r4, [r5, #1]
 801f5e4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f5e8:	4344      	muls	r4, r0
 801f5ea:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801f5ee:	7874      	ldrb	r4, [r6, #1]
 801f5f0:	fb02 cc04 	mla	ip, r2, r4, ip
 801f5f4:	785c      	ldrb	r4, [r3, #1]
 801f5f6:	fb0a c404 	mla	r4, sl, r4, ip
 801f5fa:	1224      	asrs	r4, r4, #8
 801f5fc:	704c      	strb	r4, [r1, #1]
 801f5fe:	78ad      	ldrb	r5, [r5, #2]
 801f600:	78bc      	ldrb	r4, [r7, #2]
 801f602:	4368      	muls	r0, r5
 801f604:	fb0b 0b04 	mla	fp, fp, r4, r0
 801f608:	78b0      	ldrb	r0, [r6, #2]
 801f60a:	fb02 b000 	mla	r0, r2, r0, fp
 801f60e:	789a      	ldrb	r2, [r3, #2]
 801f610:	fb0a 0a02 	mla	sl, sl, r2, r0
 801f614:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f618:	f881 a002 	strb.w	sl, [r1, #2]
 801f61c:	b003      	add	sp, #12
 801f61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f622:	bf00      	nop
 801f624:	08029ec7 	.word	0x08029ec7
 801f628:	0802a3be 	.word	0x0802a3be
 801f62c:	08029f90 	.word	0x08029f90

0801f630 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f634:	ed2d 8b0a 	vpush	{d8-d12}
 801f638:	b08f      	sub	sp, #60	; 0x3c
 801f63a:	eeb0 aa40 	vmov.f32	s20, s0
 801f63e:	eef0 9a60 	vmov.f32	s19, s1
 801f642:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801f644:	eeb0 9a41 	vmov.f32	s18, s2
 801f648:	9307      	str	r3, [sp, #28]
 801f64a:	eeb0 8a62 	vmov.f32	s16, s5
 801f64e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801f652:	eef0 8a43 	vmov.f32	s17, s6
 801f656:	900d      	str	r0, [sp, #52]	; 0x34
 801f658:	eeb0 ca44 	vmov.f32	s24, s8
 801f65c:	6860      	ldr	r0, [r4, #4]
 801f65e:	eef0 ba64 	vmov.f32	s23, s9
 801f662:	9309      	str	r3, [sp, #36]	; 0x24
 801f664:	eeb0 ba45 	vmov.f32	s22, s10
 801f668:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f66c:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801f670:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801f674:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801f678:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f67a:	fb00 1303 	mla	r3, r0, r3, r1
 801f67e:	6821      	ldr	r1, [r4, #0]
 801f680:	6854      	ldr	r4, [r2, #4]
 801f682:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f686:	3404      	adds	r4, #4
 801f688:	18cb      	adds	r3, r1, r3
 801f68a:	9308      	str	r3, [sp, #32]
 801f68c:	6813      	ldr	r3, [r2, #0]
 801f68e:	930a      	str	r3, [sp, #40]	; 0x28
 801f690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f692:	2b00      	cmp	r3, #0
 801f694:	dc03      	bgt.n	801f69e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f698:	2b00      	cmp	r3, #0
 801f69a:	f340 81d2 	ble.w	801fa42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f69e:	9b07      	ldr	r3, [sp, #28]
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	f340 80e3 	ble.w	801f86c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801f6a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f6a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f6aa:	1412      	asrs	r2, r2, #16
 801f6ac:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f6b0:	d42f      	bmi.n	801f712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f6b2:	1c51      	adds	r1, r2, #1
 801f6b4:	428d      	cmp	r5, r1
 801f6b6:	dd2f      	ble.n	801f718 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	db2d      	blt.n	801f718 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f6bc:	1c59      	adds	r1, r3, #1
 801f6be:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f6c0:	4288      	cmp	r0, r1
 801f6c2:	dd29      	ble.n	801f718 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f6c4:	9b07      	ldr	r3, [sp, #28]
 801f6c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f6c8:	3b01      	subs	r3, #1
 801f6ca:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f6cc:	fb02 1203 	mla	r2, r2, r3, r1
 801f6d0:	1412      	asrs	r2, r2, #16
 801f6d2:	d42b      	bmi.n	801f72c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f6d4:	3201      	adds	r2, #1
 801f6d6:	4295      	cmp	r5, r2
 801f6d8:	dd28      	ble.n	801f72c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f6da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f6dc:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f6de:	fb02 1303 	mla	r3, r2, r3, r1
 801f6e2:	141b      	asrs	r3, r3, #16
 801f6e4:	d422      	bmi.n	801f72c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f6e6:	3301      	adds	r3, #1
 801f6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6ea:	429a      	cmp	r2, r3
 801f6ec:	dd1e      	ble.n	801f72c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801f6ee:	9b08      	ldr	r3, [sp, #32]
 801f6f0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f6f4:	f103 0803 	add.w	r8, r3, #3
 801f6f8:	f1ba 0f00 	cmp.w	sl, #0
 801f6fc:	f300 8119 	bgt.w	801f932 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801f700:	9b07      	ldr	r3, [sp, #28]
 801f702:	9a08      	ldr	r2, [sp, #32]
 801f704:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f708:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f70c:	441a      	add	r2, r3
 801f70e:	9208      	str	r2, [sp, #32]
 801f710:	e0ae      	b.n	801f870 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801f712:	1c51      	adds	r1, r2, #1
 801f714:	f040 809b 	bne.w	801f84e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f718:	42aa      	cmp	r2, r5
 801f71a:	f280 8098 	bge.w	801f84e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f71e:	1c5a      	adds	r2, r3, #1
 801f720:	f2c0 8095 	blt.w	801f84e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f726:	4293      	cmp	r3, r2
 801f728:	f280 8091 	bge.w	801f84e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801f72c:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801f730:	f1bb 0f00 	cmp.w	fp, #0
 801f734:	dde4      	ble.n	801f700 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801f736:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f738:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f73a:	141a      	asrs	r2, r3, #16
 801f73c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f73e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f740:	1400      	asrs	r0, r0, #16
 801f742:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801f746:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f74a:	f100 80dc 	bmi.w	801f906 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801f74e:	1c47      	adds	r7, r0, #1
 801f750:	42bd      	cmp	r5, r7
 801f752:	f340 80da 	ble.w	801f90a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f756:	2a00      	cmp	r2, #0
 801f758:	f2c0 80d7 	blt.w	801f90a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f75c:	f102 0c01 	add.w	ip, r2, #1
 801f760:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f762:	4567      	cmp	r7, ip
 801f764:	f340 80d1 	ble.w	801f90a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801f768:	fb02 0005 	mla	r0, r2, r5, r0
 801f76c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f76e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f770:	f817 8000 	ldrb.w	r8, [r7, r0]
 801f774:	4402      	add	r2, r0
 801f776:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f77a:	eb04 0c08 	add.w	ip, r4, r8
 801f77e:	2b00      	cmp	r3, #0
 801f780:	f000 80b3 	beq.w	801f8ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801f784:	7857      	ldrb	r7, [r2, #1]
 801f786:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f78a:	4427      	add	r7, r4
 801f78c:	2900      	cmp	r1, #0
 801f78e:	f000 80b4 	beq.w	801f8fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801f792:	1950      	adds	r0, r2, r5
 801f794:	5d52      	ldrb	r2, [r2, r5]
 801f796:	7840      	ldrb	r0, [r0, #1]
 801f798:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f79c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f7a0:	4422      	add	r2, r4
 801f7a2:	4420      	add	r0, r4
 801f7a4:	b29b      	uxth	r3, r3
 801f7a6:	f814 a008 	ldrb.w	sl, [r4, r8]
 801f7aa:	b289      	uxth	r1, r1
 801f7ac:	f897 8000 	ldrb.w	r8, [r7]
 801f7b0:	fb03 f901 	mul.w	r9, r3, r1
 801f7b4:	011b      	lsls	r3, r3, #4
 801f7b6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f7ba:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f7be:	eba3 0309 	sub.w	r3, r3, r9
 801f7c2:	b289      	uxth	r1, r1
 801f7c4:	b29b      	uxth	r3, r3
 801f7c6:	ebae 0e01 	sub.w	lr, lr, r1
 801f7ca:	fb03 f808 	mul.w	r8, r3, r8
 801f7ce:	fa1f fe8e 	uxth.w	lr, lr
 801f7d2:	fb0e 880a 	mla	r8, lr, sl, r8
 801f7d6:	f892 a000 	ldrb.w	sl, [r2]
 801f7da:	fb01 880a 	mla	r8, r1, sl, r8
 801f7de:	f890 a000 	ldrb.w	sl, [r0]
 801f7e2:	fb09 880a 	mla	r8, r9, sl, r8
 801f7e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f7ea:	f886 8000 	strb.w	r8, [r6]
 801f7ee:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f7f2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f7f6:	fb03 f808 	mul.w	r8, r3, r8
 801f7fa:	fb0e 880a 	mla	r8, lr, sl, r8
 801f7fe:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f802:	fb01 880a 	mla	r8, r1, sl, r8
 801f806:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f80a:	fb09 880a 	mla	r8, r9, sl, r8
 801f80e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f812:	f886 8001 	strb.w	r8, [r6, #1]
 801f816:	78bf      	ldrb	r7, [r7, #2]
 801f818:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f81c:	437b      	muls	r3, r7
 801f81e:	7892      	ldrb	r2, [r2, #2]
 801f820:	fb0e 330c 	mla	r3, lr, ip, r3
 801f824:	fb01 3102 	mla	r1, r1, r2, r3
 801f828:	7882      	ldrb	r2, [r0, #2]
 801f82a:	fb09 1902 	mla	r9, r9, r2, r1
 801f82e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f832:	f886 9002 	strb.w	r9, [r6, #2]
 801f836:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f838:	3603      	adds	r6, #3
 801f83a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f83c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f840:	4413      	add	r3, r2
 801f842:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f844:	9323      	str	r3, [sp, #140]	; 0x8c
 801f846:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f848:	4413      	add	r3, r2
 801f84a:	9324      	str	r3, [sp, #144]	; 0x90
 801f84c:	e770      	b.n	801f730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801f84e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f850:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f852:	4413      	add	r3, r2
 801f854:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f856:	9323      	str	r3, [sp, #140]	; 0x8c
 801f858:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f85a:	4413      	add	r3, r2
 801f85c:	9324      	str	r3, [sp, #144]	; 0x90
 801f85e:	9b07      	ldr	r3, [sp, #28]
 801f860:	3b01      	subs	r3, #1
 801f862:	9307      	str	r3, [sp, #28]
 801f864:	9b08      	ldr	r3, [sp, #32]
 801f866:	3303      	adds	r3, #3
 801f868:	9308      	str	r3, [sp, #32]
 801f86a:	e718      	b.n	801f69e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f86c:	f47f af2a 	bne.w	801f6c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801f870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f872:	2b00      	cmp	r3, #0
 801f874:	f340 80e5 	ble.w	801fa42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f878:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f87c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f87e:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f882:	eef0 6a48 	vmov.f32	s13, s16
 801f886:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f88a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f88e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f892:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801f896:	eef0 6a68 	vmov.f32	s13, s17
 801f89a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f89e:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801f8a2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f8a6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f8aa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f8ae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f8b2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f8b6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f8ba:	ee18 2a10 	vmov	r2, s16
 801f8be:	eeb0 8a47 	vmov.f32	s16, s14
 801f8c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8c6:	ee18 2a90 	vmov	r2, s17
 801f8ca:	9325      	str	r3, [sp, #148]	; 0x94
 801f8cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f8ce:	eef0 8a67 	vmov.f32	s17, s15
 801f8d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8d6:	9326      	str	r3, [sp, #152]	; 0x98
 801f8d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f8dc:	3b01      	subs	r3, #1
 801f8de:	930b      	str	r3, [sp, #44]	; 0x2c
 801f8e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f8e2:	bf08      	it	eq
 801f8e4:	4613      	moveq	r3, r2
 801f8e6:	9307      	str	r3, [sp, #28]
 801f8e8:	e6d2      	b.n	801f690 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f8ea:	b149      	cbz	r1, 801f900 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f8ec:	5d52      	ldrb	r2, [r2, r5]
 801f8ee:	4660      	mov	r0, ip
 801f8f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f8f4:	4422      	add	r2, r4
 801f8f6:	4667      	mov	r7, ip
 801f8f8:	e754      	b.n	801f7a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f8fa:	4660      	mov	r0, ip
 801f8fc:	4662      	mov	r2, ip
 801f8fe:	e751      	b.n	801f7a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f900:	4660      	mov	r0, ip
 801f902:	4662      	mov	r2, ip
 801f904:	e7f7      	b.n	801f8f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801f906:	1c47      	adds	r7, r0, #1
 801f908:	d195      	bne.n	801f836 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f90a:	4285      	cmp	r5, r0
 801f90c:	dd93      	ble.n	801f836 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f90e:	1c57      	adds	r7, r2, #1
 801f910:	db91      	blt.n	801f836 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f912:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f914:	4297      	cmp	r7, r2
 801f916:	dd8e      	ble.n	801f836 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f918:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f91c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f920:	e9cd 5700 	strd	r5, r7, [sp]
 801f924:	4623      	mov	r3, r4
 801f926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f928:	4631      	mov	r1, r6
 801f92a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f92c:	f7ff fdca 	bl	801f4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f930:	e781      	b.n	801f836 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f932:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f934:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f936:	1410      	asrs	r0, r2, #16
 801f938:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f93c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f93e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f940:	1412      	asrs	r2, r2, #16
 801f942:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f946:	fb05 2000 	mla	r0, r5, r0, r2
 801f94a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f94c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f950:	4402      	add	r2, r0
 801f952:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f956:	eb04 070e 	add.w	r7, r4, lr
 801f95a:	2b00      	cmp	r3, #0
 801f95c:	d063      	beq.n	801fa26 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801f95e:	7856      	ldrb	r6, [r2, #1]
 801f960:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f964:	4426      	add	r6, r4
 801f966:	2900      	cmp	r1, #0
 801f968:	d065      	beq.n	801fa36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f96a:	1950      	adds	r0, r2, r5
 801f96c:	5d52      	ldrb	r2, [r2, r5]
 801f96e:	7840      	ldrb	r0, [r0, #1]
 801f970:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f974:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f978:	4422      	add	r2, r4
 801f97a:	4420      	add	r0, r4
 801f97c:	b29b      	uxth	r3, r3
 801f97e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f982:	b289      	uxth	r1, r1
 801f984:	f896 e000 	ldrb.w	lr, [r6]
 801f988:	f108 0803 	add.w	r8, r8, #3
 801f98c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f990:	fb03 f901 	mul.w	r9, r3, r1
 801f994:	011b      	lsls	r3, r3, #4
 801f996:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f99a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f99e:	eba3 0309 	sub.w	r3, r3, r9
 801f9a2:	b289      	uxth	r1, r1
 801f9a4:	b29b      	uxth	r3, r3
 801f9a6:	ebac 0c01 	sub.w	ip, ip, r1
 801f9aa:	fb03 fe0e 	mul.w	lr, r3, lr
 801f9ae:	fa1f fc8c 	uxth.w	ip, ip
 801f9b2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f9b6:	f892 b000 	ldrb.w	fp, [r2]
 801f9ba:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f9be:	f890 b000 	ldrb.w	fp, [r0]
 801f9c2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f9c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f9ca:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f9ce:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f9d2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f9d6:	fb03 fe0e 	mul.w	lr, r3, lr
 801f9da:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f9de:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f9e2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f9e6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f9ea:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f9ee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f9f2:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f9f6:	78b6      	ldrb	r6, [r6, #2]
 801f9f8:	78bf      	ldrb	r7, [r7, #2]
 801f9fa:	4373      	muls	r3, r6
 801f9fc:	7896      	ldrb	r6, [r2, #2]
 801f9fe:	7882      	ldrb	r2, [r0, #2]
 801fa00:	fb0c 3307 	mla	r3, ip, r7, r3
 801fa04:	fb01 3306 	mla	r3, r1, r6, r3
 801fa08:	fb09 3902 	mla	r9, r9, r2, r3
 801fa0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fa0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fa10:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa14:	4413      	add	r3, r2
 801fa16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fa18:	f808 9c04 	strb.w	r9, [r8, #-4]
 801fa1c:	9323      	str	r3, [sp, #140]	; 0x8c
 801fa1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fa20:	4413      	add	r3, r2
 801fa22:	9324      	str	r3, [sp, #144]	; 0x90
 801fa24:	e668      	b.n	801f6f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fa26:	b149      	cbz	r1, 801fa3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801fa28:	5d52      	ldrb	r2, [r2, r5]
 801fa2a:	4638      	mov	r0, r7
 801fa2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa30:	4422      	add	r2, r4
 801fa32:	463e      	mov	r6, r7
 801fa34:	e7a2      	b.n	801f97c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fa36:	4638      	mov	r0, r7
 801fa38:	463a      	mov	r2, r7
 801fa3a:	e79f      	b.n	801f97c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801fa3c:	4638      	mov	r0, r7
 801fa3e:	463a      	mov	r2, r7
 801fa40:	e7f7      	b.n	801fa32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801fa42:	b00f      	add	sp, #60	; 0x3c
 801fa44:	ecbd 8b0a 	vpop	{d8-d12}
 801fa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa50:	b087      	sub	sp, #28
 801fa52:	7888      	ldrb	r0, [r1, #2]
 801fa54:	9002      	str	r0, [sp, #8]
 801fa56:	7848      	ldrb	r0, [r1, #1]
 801fa58:	9e02      	ldr	r6, [sp, #8]
 801fa5a:	9003      	str	r0, [sp, #12]
 801fa5c:	7808      	ldrb	r0, [r1, #0]
 801fa5e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801fa62:	9004      	str	r0, [sp, #16]
 801fa64:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fa68:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801fa6c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801fa70:	9e03      	ldr	r6, [sp, #12]
 801fa72:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801fa76:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801fa7a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801fa7e:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801fa82:	fb04 7508 	mla	r5, r4, r8, r7
 801fa86:	2c00      	cmp	r4, #0
 801fa88:	eb02 0905 	add.w	r9, r2, r5
 801fa8c:	db45      	blt.n	801fb1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fa8e:	45a2      	cmp	sl, r4
 801fa90:	dd43      	ble.n	801fb1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801fa92:	2f00      	cmp	r7, #0
 801fa94:	db3f      	blt.n	801fb16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fa96:	45b8      	cmp	r8, r7
 801fa98:	dd3d      	ble.n	801fb16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801fa9a:	5d52      	ldrb	r2, [r2, r5]
 801fa9c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801faa0:	1c7a      	adds	r2, r7, #1
 801faa2:	d43d      	bmi.n	801fb20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801faa4:	4590      	cmp	r8, r2
 801faa6:	dd3b      	ble.n	801fb20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801faa8:	f1bc 0f00 	cmp.w	ip, #0
 801faac:	d038      	beq.n	801fb20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801faae:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fab2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fab6:	3401      	adds	r4, #1
 801fab8:	d436      	bmi.n	801fb28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801faba:	45a2      	cmp	sl, r4
 801fabc:	dd34      	ble.n	801fb28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fabe:	f1be 0f00 	cmp.w	lr, #0
 801fac2:	d031      	beq.n	801fb28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801fac4:	2f00      	cmp	r7, #0
 801fac6:	db2d      	blt.n	801fb24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801fac8:	45b8      	cmp	r8, r7
 801faca:	dd2b      	ble.n	801fb24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801facc:	f819 2008 	ldrb.w	r2, [r9, r8]
 801fad0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801fad4:	3701      	adds	r7, #1
 801fad6:	d409      	bmi.n	801faec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fad8:	45b8      	cmp	r8, r7
 801fada:	dd07      	ble.n	801faec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fadc:	f1bc 0f00 	cmp.w	ip, #0
 801fae0:	d004      	beq.n	801faec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fae2:	44c8      	add	r8, r9
 801fae4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fae8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801faec:	f1bc 0f0f 	cmp.w	ip, #15
 801faf0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801faf4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801faf8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fafc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fb00:	d802      	bhi.n	801fb08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801fb02:	f1be 0f0f 	cmp.w	lr, #15
 801fb06:	d911      	bls.n	801fb2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801fb08:	4b77      	ldr	r3, [pc, #476]	; (801fce8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801fb0a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fb0e:	4a77      	ldr	r2, [pc, #476]	; (801fcec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801fb10:	4877      	ldr	r0, [pc, #476]	; (801fcf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801fb12:	f005 fc73 	bl	80253fc <__assert_func>
 801fb16:	4606      	mov	r6, r0
 801fb18:	e7c2      	b.n	801faa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801fb1a:	4605      	mov	r5, r0
 801fb1c:	4606      	mov	r6, r0
 801fb1e:	e7ca      	b.n	801fab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fb20:	4605      	mov	r5, r0
 801fb22:	e7c8      	b.n	801fab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801fb24:	4604      	mov	r4, r0
 801fb26:	e7d5      	b.n	801fad4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801fb28:	4604      	mov	r4, r0
 801fb2a:	e7df      	b.n	801faec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801fb2c:	fa1f fc8c 	uxth.w	ip, ip
 801fb30:	fa1f f28e 	uxth.w	r2, lr
 801fb34:	fb02 fe0c 	mul.w	lr, r2, ip
 801fb38:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fb3c:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801fb40:	ebac 070e 	sub.w	r7, ip, lr
 801fb44:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801fb48:	b292      	uxth	r2, r2
 801fb4a:	b2bf      	uxth	r7, r7
 801fb4c:	1a9b      	subs	r3, r3, r2
 801fb4e:	fb07 fc0a 	mul.w	ip, r7, sl
 801fb52:	b29b      	uxth	r3, r3
 801fb54:	fb03 cc0b 	mla	ip, r3, fp, ip
 801fb58:	9301      	str	r3, [sp, #4]
 801fb5a:	fb02 cc09 	mla	ip, r2, r9, ip
 801fb5e:	fb0e cc08 	mla	ip, lr, r8, ip
 801fb62:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fb66:	9305      	str	r3, [sp, #20]
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	f000 80b9 	beq.w	801fce0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801fb6e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fb72:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fb76:	fb0b fc0c 	mul.w	ip, fp, ip
 801fb7a:	fb0b f606 	mul.w	r6, fp, r6
 801fb7e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fb82:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fb86:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fb8a:	44dc      	add	ip, fp
 801fb8c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fb90:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fb94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb98:	fb0a fb0b 	mul.w	fp, sl, fp
 801fb9c:	fb0a fa05 	mul.w	sl, sl, r5
 801fba0:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801fba4:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fba8:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801fbac:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fbb0:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fbb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fbb8:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801fbbc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fbc0:	0a36      	lsrs	r6, r6, #8
 801fbc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fbc6:	44dc      	add	ip, fp
 801fbc8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fbcc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fbd0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fbd4:	fb09 fb0b 	mul.w	fp, r9, fp
 801fbd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbdc:	fb09 f904 	mul.w	r9, r9, r4
 801fbe0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fbe4:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801fbe8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fbec:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801fbf0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fbf4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fbf8:	fb0c fc07 	mul.w	ip, ip, r7
 801fbfc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fc00:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801fc04:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fc08:	445d      	add	r5, fp
 801fc0a:	fb08 f404 	mul.w	r4, r8, r4
 801fc0e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fc12:	fb08 f800 	mul.w	r8, r8, r0
 801fc16:	0a2d      	lsrs	r5, r5, #8
 801fc18:	0a20      	lsrs	r0, r4, #8
 801fc1a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801fc1e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fc22:	fb07 f70a 	mul.w	r7, r7, sl
 801fc26:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fc2a:	4404      	add	r4, r0
 801fc2c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801fc30:	0a24      	lsrs	r4, r4, #8
 801fc32:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801fc36:	9801      	ldr	r0, [sp, #4]
 801fc38:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fc3c:	fb03 cc00 	mla	ip, r3, r0, ip
 801fc40:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fc44:	fb00 7606 	mla	r6, r0, r6, r7
 801fc48:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801fc4c:	fb04 cc0e 	mla	ip, r4, lr, ip
 801fc50:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fc54:	b280      	uxth	r0, r0
 801fc56:	9c04      	ldr	r4, [sp, #16]
 801fc58:	fb05 cc02 	mla	ip, r5, r2, ip
 801fc5c:	fb0e 6e08 	mla	lr, lr, r8, r6
 801fc60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc64:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801fc68:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801fc6c:	fb02 ec0c 	mla	ip, r2, ip, lr
 801fc70:	9a05      	ldr	r2, [sp, #20]
 801fc72:	4342      	muls	r2, r0
 801fc74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc78:	1c53      	adds	r3, r2, #1
 801fc7a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fc7e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fc82:	ea45 0c0c 	orr.w	ip, r5, ip
 801fc86:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801fc8a:	fa5f f28c 	uxtb.w	r2, ip
 801fc8e:	b2db      	uxtb	r3, r3
 801fc90:	fb14 f403 	smulbb	r4, r4, r3
 801fc94:	fb02 4200 	mla	r2, r2, r0, r4
 801fc98:	b292      	uxth	r2, r2
 801fc9a:	1c54      	adds	r4, r2, #1
 801fc9c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801fca0:	9c03      	ldr	r4, [sp, #12]
 801fca2:	fb14 f403 	smulbb	r4, r4, r3
 801fca6:	1212      	asrs	r2, r2, #8
 801fca8:	700a      	strb	r2, [r1, #0]
 801fcaa:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801fcae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fcb2:	fb02 4200 	mla	r2, r2, r0, r4
 801fcb6:	b292      	uxth	r2, r2
 801fcb8:	1c54      	adds	r4, r2, #1
 801fcba:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801fcbe:	1212      	asrs	r2, r2, #8
 801fcc0:	704a      	strb	r2, [r1, #1]
 801fcc2:	9a02      	ldr	r2, [sp, #8]
 801fcc4:	fb12 f303 	smulbb	r3, r2, r3
 801fcc8:	fb0c 3c00 	mla	ip, ip, r0, r3
 801fccc:	fa1f fc8c 	uxth.w	ip, ip
 801fcd0:	f10c 0301 	add.w	r3, ip, #1
 801fcd4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fcd8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fcdc:	f881 c002 	strb.w	ip, [r1, #2]
 801fce0:	b007      	add	sp, #28
 801fce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fce6:	bf00      	nop
 801fce8:	08029ec7 	.word	0x08029ec7
 801fcec:	0802a3be 	.word	0x0802a3be
 801fcf0:	08029f90 	.word	0x08029f90

0801fcf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcf8:	ed2d 8b08 	vpush	{d8-d11}
 801fcfc:	b09b      	sub	sp, #108	; 0x6c
 801fcfe:	eeb0 aa40 	vmov.f32	s20, s0
 801fd02:	eef0 9a60 	vmov.f32	s19, s1
 801fd06:	930a      	str	r3, [sp, #40]	; 0x28
 801fd08:	eeb0 9a41 	vmov.f32	s18, s2
 801fd0c:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801fd10:	eeb0 8a62 	vmov.f32	s16, s5
 801fd14:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801fd16:	eef0 8a43 	vmov.f32	s17, s6
 801fd1a:	9312      	str	r3, [sp, #72]	; 0x48
 801fd1c:	eef0 ba44 	vmov.f32	s23, s8
 801fd20:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801fd24:	eeb0 ba64 	vmov.f32	s22, s9
 801fd28:	9019      	str	r0, [sp, #100]	; 0x64
 801fd2a:	eef0 aa45 	vmov.f32	s21, s10
 801fd2e:	9114      	str	r1, [sp, #80]	; 0x50
 801fd30:	9317      	str	r3, [sp, #92]	; 0x5c
 801fd32:	6868      	ldr	r0, [r5, #4]
 801fd34:	9218      	str	r2, [sp, #96]	; 0x60
 801fd36:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801fd38:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801fd3c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801fd40:	fb00 1303 	mla	r3, r0, r3, r1
 801fd44:	6829      	ldr	r1, [r5, #0]
 801fd46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd4a:	18cb      	adds	r3, r1, r3
 801fd4c:	930d      	str	r3, [sp, #52]	; 0x34
 801fd4e:	6813      	ldr	r3, [r2, #0]
 801fd50:	9313      	str	r3, [sp, #76]	; 0x4c
 801fd52:	6853      	ldr	r3, [r2, #4]
 801fd54:	3304      	adds	r3, #4
 801fd56:	9309      	str	r3, [sp, #36]	; 0x24
 801fd58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	dc03      	bgt.n	801fd66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801fd5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	f340 8352 	ble.w	802040a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801fd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	f340 81a2 	ble.w	80200b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801fd6e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fd70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fd72:	1412      	asrs	r2, r2, #16
 801fd74:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fd78:	d431      	bmi.n	801fdde <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801fd7a:	1c51      	adds	r1, r2, #1
 801fd7c:	428c      	cmp	r4, r1
 801fd7e:	dd31      	ble.n	801fde4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	db2f      	blt.n	801fde4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801fd84:	1c59      	adds	r1, r3, #1
 801fd86:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd88:	4288      	cmp	r0, r1
 801fd8a:	dd2b      	ble.n	801fde4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801fd8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd8e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fd90:	3b01      	subs	r3, #1
 801fd92:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801fd94:	fb02 1203 	mla	r2, r2, r3, r1
 801fd98:	1412      	asrs	r2, r2, #16
 801fd9a:	d42d      	bmi.n	801fdf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801fd9c:	3201      	adds	r2, #1
 801fd9e:	4294      	cmp	r4, r2
 801fda0:	dd2a      	ble.n	801fdf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801fda2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fda4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801fda6:	fb02 1303 	mla	r3, r2, r3, r1
 801fdaa:	141b      	asrs	r3, r3, #16
 801fdac:	d424      	bmi.n	801fdf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801fdae:	3301      	adds	r3, #1
 801fdb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdb2:	429a      	cmp	r2, r3
 801fdb4:	dd20      	ble.n	801fdf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801fdb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fdb8:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801fdbc:	f103 0e03 	add.w	lr, r3, #3
 801fdc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdc2:	9315      	str	r3, [sp, #84]	; 0x54
 801fdc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	f300 81de 	bgt.w	8020188 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801fdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fdd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fdd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fdd8:	441a      	add	r2, r3
 801fdda:	920d      	str	r2, [sp, #52]	; 0x34
 801fddc:	e16b      	b.n	80200b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801fdde:	1c51      	adds	r1, r2, #1
 801fde0:	f040 8158 	bne.w	8020094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801fde4:	42a2      	cmp	r2, r4
 801fde6:	f280 8155 	bge.w	8020094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801fdea:	1c5a      	adds	r2, r3, #1
 801fdec:	f2c0 8152 	blt.w	8020094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801fdf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdf2:	4293      	cmp	r3, r2
 801fdf4:	f280 814e 	bge.w	8020094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801fdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdfa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801fdfc:	9316      	str	r3, [sp, #88]	; 0x58
 801fdfe:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801fe02:	9315      	str	r3, [sp, #84]	; 0x54
 801fe04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	dde0      	ble.n	801fdcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801fe0a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fe0c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fe0e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801fe12:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801fe14:	141b      	asrs	r3, r3, #16
 801fe16:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fe1a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fe1c:	1412      	asrs	r2, r2, #16
 801fe1e:	f100 819a 	bmi.w	8020156 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801fe22:	1c55      	adds	r5, r2, #1
 801fe24:	42ac      	cmp	r4, r5
 801fe26:	f340 8198 	ble.w	802015a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	f2c0 8195 	blt.w	802015a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801fe30:	1c5d      	adds	r5, r3, #1
 801fe32:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801fe34:	42af      	cmp	r7, r5
 801fe36:	f340 8190 	ble.w	802015a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801fe3a:	fb03 2304 	mla	r3, r3, r4, r2
 801fe3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fe40:	18d5      	adds	r5, r2, r3
 801fe42:	5cd3      	ldrb	r3, [r2, r3]
 801fe44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fe46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fe4a:	0e1f      	lsrs	r7, r3, #24
 801fe4c:	2800      	cmp	r0, #0
 801fe4e:	f000 8171 	beq.w	8020134 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801fe52:	f895 c001 	ldrb.w	ip, [r5, #1]
 801fe56:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801fe5a:	920e      	str	r2, [sp, #56]	; 0x38
 801fe5c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801fe60:	2900      	cmp	r1, #0
 801fe62:	f000 8172 	beq.w	802014a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801fe66:	eb05 0c04 	add.w	ip, r5, r4
 801fe6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fe6c:	5d2d      	ldrb	r5, [r5, r4]
 801fe6e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801fe72:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fe76:	950b      	str	r5, [sp, #44]	; 0x2c
 801fe78:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fe7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fe7e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fe82:	0e15      	lsrs	r5, r2, #24
 801fe84:	920f      	str	r2, [sp, #60]	; 0x3c
 801fe86:	b280      	uxth	r0, r0
 801fe88:	b289      	uxth	r1, r1
 801fe8a:	fb00 fa01 	mul.w	sl, r0, r1
 801fe8e:	0100      	lsls	r0, r0, #4
 801fe90:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801fe94:	eba0 080a 	sub.w	r8, r0, sl
 801fe98:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801fe9c:	b289      	uxth	r1, r1
 801fe9e:	fa1f f888 	uxth.w	r8, r8
 801fea2:	1a52      	subs	r2, r2, r1
 801fea4:	fb08 f00e 	mul.w	r0, r8, lr
 801fea8:	b292      	uxth	r2, r2
 801feaa:	fb02 0007 	mla	r0, r2, r7, r0
 801feae:	fb01 0009 	mla	r0, r1, r9, r0
 801feb2:	fb0a 0005 	mla	r0, sl, r5, r0
 801feb6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801feba:	2800      	cmp	r0, #0
 801febc:	f000 80dd 	beq.w	802007a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801fec0:	2fff      	cmp	r7, #255	; 0xff
 801fec2:	d01a      	beq.n	801fefa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801fec4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fec8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fecc:	fb07 fc0c 	mul.w	ip, r7, ip
 801fed0:	435f      	muls	r7, r3
 801fed2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801fed6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801feda:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801fede:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fee2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801fee6:	4463      	add	r3, ip
 801fee8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801feec:	0a1b      	lsrs	r3, r3, #8
 801feee:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801fef2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fef6:	ea43 030b 	orr.w	r3, r3, fp
 801fefa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fefe:	d01e      	beq.n	801ff3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801ff00:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801ff02:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801ff06:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ff0a:	fb0e fb0b 	mul.w	fp, lr, fp
 801ff0e:	fb0e fe07 	mul.w	lr, lr, r7
 801ff12:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ff16:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ff1a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801ff1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff22:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801ff26:	44dc      	add	ip, fp
 801ff28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff30:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ff34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff38:	ea4c 070e 	orr.w	r7, ip, lr
 801ff3c:	970e      	str	r7, [sp, #56]	; 0x38
 801ff3e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ff42:	d01e      	beq.n	801ff82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801ff44:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ff46:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801ff4a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ff4e:	fb09 fe0e 	mul.w	lr, r9, lr
 801ff52:	fb09 f907 	mul.w	r9, r9, r7
 801ff56:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ff5a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ff5e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801ff62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff66:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ff6a:	44f4      	add	ip, lr
 801ff6c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ff70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff74:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ff78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff7c:	ea4c 0709 	orr.w	r7, ip, r9
 801ff80:	970b      	str	r7, [sp, #44]	; 0x2c
 801ff82:	2dff      	cmp	r5, #255	; 0xff
 801ff84:	d01c      	beq.n	801ffc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801ff86:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ff88:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801ff8c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ff90:	fb05 fe0e 	mul.w	lr, r5, lr
 801ff94:	437d      	muls	r5, r7
 801ff96:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ff9a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ff9e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801ffa2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffa6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801ffaa:	44f4      	add	ip, lr
 801ffac:	0a2d      	lsrs	r5, r5, #8
 801ffae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffb2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ffb6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffba:	ea4c 0505 	orr.w	r5, ip, r5
 801ffbe:	950f      	str	r5, [sp, #60]	; 0x3c
 801ffc0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ffc2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ffc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ffca:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ffce:	fb08 f505 	mul.w	r5, r8, r5
 801ffd2:	fb02 5507 	mla	r5, r2, r7, r5
 801ffd6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ffd8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ffdc:	fb01 5507 	mla	r5, r1, r7, r5
 801ffe0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ffe2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ffe6:	fb0a 5507 	mla	r5, sl, r7, r5
 801ffea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801ffec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fff0:	0a2d      	lsrs	r5, r5, #8
 801fff2:	fb08 f807 	mul.w	r8, r8, r7
 801fff6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fffa:	fb02 8303 	mla	r3, r2, r3, r8
 801fffe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020000:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020006:	fb01 330c 	mla	r3, r1, ip, r3
 802000a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802000e:	fb0a 3a01 	mla	sl, sl, r1, r3
 8020012:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020014:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020016:	4343      	muls	r3, r0
 8020018:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802001c:	1c58      	adds	r0, r3, #1
 802001e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020022:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020026:	ea45 050a 	orr.w	r5, r5, sl
 802002a:	7833      	ldrb	r3, [r6, #0]
 802002c:	b2ea      	uxtb	r2, r5
 802002e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020032:	fb12 f201 	smulbb	r2, r2, r1
 8020036:	b2c0      	uxtb	r0, r0
 8020038:	fb03 2300 	mla	r3, r3, r0, r2
 802003c:	b29b      	uxth	r3, r3
 802003e:	1c5a      	adds	r2, r3, #1
 8020040:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020044:	7872      	ldrb	r2, [r6, #1]
 8020046:	fb12 f200 	smulbb	r2, r2, r0
 802004a:	121b      	asrs	r3, r3, #8
 802004c:	7033      	strb	r3, [r6, #0]
 802004e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020052:	0c2d      	lsrs	r5, r5, #16
 8020054:	fb03 2301 	mla	r3, r3, r1, r2
 8020058:	b29b      	uxth	r3, r3
 802005a:	1c5a      	adds	r2, r3, #1
 802005c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020060:	121b      	asrs	r3, r3, #8
 8020062:	7073      	strb	r3, [r6, #1]
 8020064:	78b3      	ldrb	r3, [r6, #2]
 8020066:	fb13 f000 	smulbb	r0, r3, r0
 802006a:	fb05 0501 	mla	r5, r5, r1, r0
 802006e:	b2ad      	uxth	r5, r5
 8020070:	1c6b      	adds	r3, r5, #1
 8020072:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020076:	122d      	asrs	r5, r5, #8
 8020078:	70b5      	strb	r5, [r6, #2]
 802007a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802007c:	3603      	adds	r6, #3
 802007e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020080:	4413      	add	r3, r2
 8020082:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020084:	932d      	str	r3, [sp, #180]	; 0xb4
 8020086:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020088:	4413      	add	r3, r2
 802008a:	932e      	str	r3, [sp, #184]	; 0xb8
 802008c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802008e:	3b01      	subs	r3, #1
 8020090:	9316      	str	r3, [sp, #88]	; 0x58
 8020092:	e6b7      	b.n	801fe04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020094:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020096:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8020098:	4413      	add	r3, r2
 802009a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802009c:	932d      	str	r3, [sp, #180]	; 0xb4
 802009e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80200a0:	4413      	add	r3, r2
 80200a2:	932e      	str	r3, [sp, #184]	; 0xb8
 80200a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80200a6:	3b01      	subs	r3, #1
 80200a8:	930a      	str	r3, [sp, #40]	; 0x28
 80200aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80200ac:	3303      	adds	r3, #3
 80200ae:	930d      	str	r3, [sp, #52]	; 0x34
 80200b0:	e659      	b.n	801fd66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80200b2:	f47f ae6b 	bne.w	801fd8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80200b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80200b8:	2b00      	cmp	r3, #0
 80200ba:	f340 81a6 	ble.w	802040a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80200be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80200c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80200c4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80200c8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80200cc:	eef0 6a48 	vmov.f32	s13, s16
 80200d0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80200d4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80200d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200dc:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80200e0:	eef0 6a68 	vmov.f32	s13, s17
 80200e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200e8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80200ec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80200f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80200f4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80200f8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80200fc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020100:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020104:	ee18 2a10 	vmov	r2, s16
 8020108:	eeb0 8a47 	vmov.f32	s16, s14
 802010c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020110:	ee18 2a90 	vmov	r2, s17
 8020114:	932f      	str	r3, [sp, #188]	; 0xbc
 8020116:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020118:	eef0 8a67 	vmov.f32	s17, s15
 802011c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020120:	9330      	str	r3, [sp, #192]	; 0xc0
 8020122:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020124:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020126:	3b01      	subs	r3, #1
 8020128:	9314      	str	r3, [sp, #80]	; 0x50
 802012a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802012c:	bf08      	it	eq
 802012e:	4613      	moveq	r3, r2
 8020130:	930a      	str	r3, [sp, #40]	; 0x28
 8020132:	e611      	b.n	801fd58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020134:	b161      	cbz	r1, 8020150 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8020136:	5d2a      	ldrb	r2, [r5, r4]
 8020138:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802013a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802013e:	25ff      	movs	r5, #255	; 0xff
 8020140:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8020144:	920b      	str	r2, [sp, #44]	; 0x2c
 8020146:	46ae      	mov	lr, r5
 8020148:	e69d      	b.n	801fe86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802014a:	25ff      	movs	r5, #255	; 0xff
 802014c:	46a9      	mov	r9, r5
 802014e:	e69a      	b.n	801fe86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8020150:	25ff      	movs	r5, #255	; 0xff
 8020152:	46a9      	mov	r9, r5
 8020154:	e7f7      	b.n	8020146 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8020156:	1c57      	adds	r7, r2, #1
 8020158:	d18f      	bne.n	802007a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802015a:	4294      	cmp	r4, r2
 802015c:	dd8d      	ble.n	802007a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802015e:	1c5d      	adds	r5, r3, #1
 8020160:	db8b      	blt.n	802007a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020162:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020164:	429d      	cmp	r5, r3
 8020166:	dd88      	ble.n	802007a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020168:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802016a:	9202      	str	r2, [sp, #8]
 802016c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802016e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8020172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020174:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020176:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802017a:	e9cd 4300 	strd	r4, r3, [sp]
 802017e:	4631      	mov	r1, r6
 8020180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020182:	f7ff fc63 	bl	801fa4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020186:	e778      	b.n	802007a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8020188:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802018a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802018c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020190:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020192:	1412      	asrs	r2, r2, #16
 8020194:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020198:	141b      	asrs	r3, r3, #16
 802019a:	fb04 2303 	mla	r3, r4, r3, r2
 802019e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80201a0:	18d5      	adds	r5, r2, r3
 80201a2:	5cd3      	ldrb	r3, [r2, r3]
 80201a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80201a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80201aa:	0e1e      	lsrs	r6, r3, #24
 80201ac:	2900      	cmp	r1, #0
 80201ae:	f000 811b 	beq.w	80203e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 80201b2:	786a      	ldrb	r2, [r5, #1]
 80201b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80201b6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80201ba:	9210      	str	r2, [sp, #64]	; 0x40
 80201bc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80201c0:	2800      	cmp	r0, #0
 80201c2:	f000 811c 	beq.w	80203fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80201c6:	192a      	adds	r2, r5, r4
 80201c8:	5d2d      	ldrb	r5, [r5, r4]
 80201ca:	7852      	ldrb	r2, [r2, #1]
 80201cc:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80201d0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80201d4:	950c      	str	r5, [sp, #48]	; 0x30
 80201d6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80201da:	0e15      	lsrs	r5, r2, #24
 80201dc:	9211      	str	r2, [sp, #68]	; 0x44
 80201de:	b289      	uxth	r1, r1
 80201e0:	b280      	uxth	r0, r0
 80201e2:	fb01 fa00 	mul.w	sl, r1, r0
 80201e6:	0109      	lsls	r1, r1, #4
 80201e8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80201ec:	eba1 080a 	sub.w	r8, r1, sl
 80201f0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80201f4:	b280      	uxth	r0, r0
 80201f6:	fa1f f888 	uxth.w	r8, r8
 80201fa:	1a12      	subs	r2, r2, r0
 80201fc:	fb08 f10c 	mul.w	r1, r8, ip
 8020200:	b292      	uxth	r2, r2
 8020202:	fb02 1106 	mla	r1, r2, r6, r1
 8020206:	fb00 1109 	mla	r1, r0, r9, r1
 802020a:	fb0a 1105 	mla	r1, sl, r5, r1
 802020e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020212:	2900      	cmp	r1, #0
 8020214:	f000 80da 	beq.w	80203cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8020218:	2eff      	cmp	r6, #255	; 0xff
 802021a:	d016      	beq.n	802024a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 802021c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020220:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020224:	4377      	muls	r7, r6
 8020226:	435e      	muls	r6, r3
 8020228:	0a3b      	lsrs	r3, r7, #8
 802022a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802022e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020232:	443b      	add	r3, r7
 8020234:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020238:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802023c:	0a1b      	lsrs	r3, r3, #8
 802023e:	0a3f      	lsrs	r7, r7, #8
 8020240:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020244:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020248:	433b      	orrs	r3, r7
 802024a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802024e:	d01d      	beq.n	802028c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8020250:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020252:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020254:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020258:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802025c:	fb0c f606 	mul.w	r6, ip, r6
 8020260:	fb0c fc07 	mul.w	ip, ip, r7
 8020264:	0a37      	lsrs	r7, r6, #8
 8020266:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802026a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802026e:	4437      	add	r7, r6
 8020270:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8020274:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8020278:	0a3f      	lsrs	r7, r7, #8
 802027a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802027e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020282:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020286:	ea47 060c 	orr.w	r6, r7, ip
 802028a:	9610      	str	r6, [sp, #64]	; 0x40
 802028c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020290:	d01d      	beq.n	80202ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8020292:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020294:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020298:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802029c:	fb09 fc0c 	mul.w	ip, r9, ip
 80202a0:	fb09 f906 	mul.w	r9, r9, r6
 80202a4:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80202a8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80202ac:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80202b0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80202b4:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80202b8:	4467      	add	r7, ip
 80202ba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80202be:	0a3f      	lsrs	r7, r7, #8
 80202c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80202c4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80202c8:	ea47 0609 	orr.w	r6, r7, r9
 80202cc:	960c      	str	r6, [sp, #48]	; 0x30
 80202ce:	2dff      	cmp	r5, #255	; 0xff
 80202d0:	d01a      	beq.n	8020308 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80202d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80202d4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80202d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80202dc:	fb05 fc0c 	mul.w	ip, r5, ip
 80202e0:	4375      	muls	r5, r6
 80202e2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80202e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80202ea:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80202ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80202f2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80202f6:	4467      	add	r7, ip
 80202f8:	0a2d      	lsrs	r5, r5, #8
 80202fa:	0a3f      	lsrs	r7, r7, #8
 80202fc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020300:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020304:	433d      	orrs	r5, r7
 8020306:	9511      	str	r5, [sp, #68]	; 0x44
 8020308:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802030a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802030e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020312:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020316:	fb08 f505 	mul.w	r5, r8, r5
 802031a:	fb02 5506 	mla	r5, r2, r6, r5
 802031e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020320:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020324:	fb00 5506 	mla	r5, r0, r6, r5
 8020328:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802032a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802032e:	fb0a 5506 	mla	r5, sl, r6, r5
 8020332:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020334:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020338:	0a2d      	lsrs	r5, r5, #8
 802033a:	fb08 f806 	mul.w	r8, r8, r6
 802033e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020342:	fb02 8303 	mla	r3, r2, r3, r8
 8020346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020348:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802034c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802034e:	fb00 3307 	mla	r3, r0, r7, r3
 8020352:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020356:	fb0a 3c0c 	mla	ip, sl, ip, r3
 802035a:	fb01 f30b 	mul.w	r3, r1, fp
 802035e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020362:	1c59      	adds	r1, r3, #1
 8020364:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020368:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802036c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020370:	ea45 050c 	orr.w	r5, r5, ip
 8020374:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020378:	b2ea      	uxtb	r2, r5
 802037a:	b2c9      	uxtb	r1, r1
 802037c:	fb12 f20b 	smulbb	r2, r2, fp
 8020380:	fb03 2301 	mla	r3, r3, r1, r2
 8020384:	b29b      	uxth	r3, r3
 8020386:	1c5a      	adds	r2, r3, #1
 8020388:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802038c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020390:	fb12 f201 	smulbb	r2, r2, r1
 8020394:	121b      	asrs	r3, r3, #8
 8020396:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802039a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802039e:	0c2d      	lsrs	r5, r5, #16
 80203a0:	fb03 230b 	mla	r3, r3, fp, r2
 80203a4:	b29b      	uxth	r3, r3
 80203a6:	1c5a      	adds	r2, r3, #1
 80203a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80203ac:	121b      	asrs	r3, r3, #8
 80203ae:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80203b2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80203b6:	fb13 f101 	smulbb	r1, r3, r1
 80203ba:	fb05 150b 	mla	r5, r5, fp, r1
 80203be:	b2ad      	uxth	r5, r5
 80203c0:	1c69      	adds	r1, r5, #1
 80203c2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80203c6:	122d      	asrs	r5, r5, #8
 80203c8:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80203cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80203ce:	f10e 0e03 	add.w	lr, lr, #3
 80203d2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80203d4:	4413      	add	r3, r2
 80203d6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80203d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80203da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80203dc:	4413      	add	r3, r2
 80203de:	932e      	str	r3, [sp, #184]	; 0xb8
 80203e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80203e2:	3b01      	subs	r3, #1
 80203e4:	9315      	str	r3, [sp, #84]	; 0x54
 80203e6:	e4ed      	b.n	801fdc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80203e8:	b160      	cbz	r0, 8020404 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80203ea:	5d2a      	ldrb	r2, [r5, r4]
 80203ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80203ee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80203f2:	25ff      	movs	r5, #255	; 0xff
 80203f4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80203f8:	920c      	str	r2, [sp, #48]	; 0x30
 80203fa:	46ac      	mov	ip, r5
 80203fc:	e6ef      	b.n	80201de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80203fe:	25ff      	movs	r5, #255	; 0xff
 8020400:	46a9      	mov	r9, r5
 8020402:	e6ec      	b.n	80201de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8020404:	25ff      	movs	r5, #255	; 0xff
 8020406:	46a9      	mov	r9, r5
 8020408:	e7f7      	b.n	80203fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 802040a:	b01b      	add	sp, #108	; 0x6c
 802040c:	ecbd 8b08 	vpop	{d8-d11}
 8020410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020414 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020418:	b085      	sub	sp, #20
 802041a:	7888      	ldrb	r0, [r1, #2]
 802041c:	4692      	mov	sl, r2
 802041e:	4698      	mov	r8, r3
 8020420:	9000      	str	r0, [sp, #0]
 8020422:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020426:	7848      	ldrb	r0, [r1, #1]
 8020428:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802042c:	9001      	str	r0, [sp, #4]
 802042e:	7808      	ldrb	r0, [r1, #0]
 8020430:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020434:	9002      	str	r0, [sp, #8]
 8020436:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802043a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802043e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8020442:	fb04 560c 	mla	r6, r4, ip, r5
 8020446:	2c00      	cmp	r4, #0
 8020448:	eb02 0e06 	add.w	lr, r2, r6
 802044c:	9a00      	ldr	r2, [sp, #0]
 802044e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020452:	9a01      	ldr	r2, [sp, #4]
 8020454:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8020458:	db3e      	blt.n	80204d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802045a:	45a1      	cmp	r9, r4
 802045c:	dd3c      	ble.n	80204d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 802045e:	2d00      	cmp	r5, #0
 8020460:	db38      	blt.n	80204d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020462:	45ac      	cmp	ip, r5
 8020464:	dd36      	ble.n	80204d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8020466:	f81a 2006 	ldrb.w	r2, [sl, r6]
 802046a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802046e:	1c6e      	adds	r6, r5, #1
 8020470:	d435      	bmi.n	80204de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020472:	45b4      	cmp	ip, r6
 8020474:	dd33      	ble.n	80204de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020476:	b393      	cbz	r3, 80204de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8020478:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802047c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8020480:	3401      	adds	r4, #1
 8020482:	d430      	bmi.n	80204e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020484:	45a1      	cmp	r9, r4
 8020486:	dd2e      	ble.n	80204e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8020488:	b36f      	cbz	r7, 80204e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802048a:	2d00      	cmp	r5, #0
 802048c:	db29      	blt.n	80204e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 802048e:	45ac      	cmp	ip, r5
 8020490:	dd27      	ble.n	80204e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8020492:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020496:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802049a:	3501      	adds	r5, #1
 802049c:	d407      	bmi.n	80204ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802049e:	45ac      	cmp	ip, r5
 80204a0:	dd05      	ble.n	80204ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80204a2:	b123      	cbz	r3, 80204ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80204a4:	44f4      	add	ip, lr
 80204a6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80204aa:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80204ae:	2b0f      	cmp	r3, #15
 80204b0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80204b4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80204b8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80204bc:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80204c0:	d801      	bhi.n	80204c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80204c2:	2f0f      	cmp	r7, #15
 80204c4:	d911      	bls.n	80204ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 80204c6:	4b76      	ldr	r3, [pc, #472]	; (80206a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80204c8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80204cc:	4a75      	ldr	r2, [pc, #468]	; (80206a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80204ce:	4876      	ldr	r0, [pc, #472]	; (80206a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80204d0:	f004 ff94 	bl	80253fc <__assert_func>
 80204d4:	4602      	mov	r2, r0
 80204d6:	e7ca      	b.n	802046e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 80204d8:	4606      	mov	r6, r0
 80204da:	4602      	mov	r2, r0
 80204dc:	e7d0      	b.n	8020480 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80204de:	4606      	mov	r6, r0
 80204e0:	e7ce      	b.n	8020480 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 80204e2:	4604      	mov	r4, r0
 80204e4:	e7d9      	b.n	802049a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 80204e6:	4604      	mov	r4, r0
 80204e8:	e7e1      	b.n	80204ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 80204ea:	b29b      	uxth	r3, r3
 80204ec:	b2bf      	uxth	r7, r7
 80204ee:	fb07 fe03 	mul.w	lr, r7, r3
 80204f2:	011b      	lsls	r3, r3, #4
 80204f4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80204f8:	eba3 0c0e 	sub.w	ip, r3, lr
 80204fc:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8020500:	b2bf      	uxth	r7, r7
 8020502:	fa1f fc8c 	uxth.w	ip, ip
 8020506:	1bed      	subs	r5, r5, r7
 8020508:	fb0c f30a 	mul.w	r3, ip, sl
 802050c:	b2ad      	uxth	r5, r5
 802050e:	fb05 330b 	mla	r3, r5, fp, r3
 8020512:	fb07 3309 	mla	r3, r7, r9, r3
 8020516:	fb0e 3308 	mla	r3, lr, r8, r3
 802051a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802051e:	9303      	str	r3, [sp, #12]
 8020520:	2b00      	cmp	r3, #0
 8020522:	f000 80b9 	beq.w	8020698 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8020526:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802052a:	d018      	beq.n	802055e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 802052c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020530:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020534:	fb0b f303 	mul.w	r3, fp, r3
 8020538:	fb0b fb02 	mul.w	fp, fp, r2
 802053c:	0a1a      	lsrs	r2, r3, #8
 802053e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8020542:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020546:	441a      	add	r2, r3
 8020548:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 802054c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8020550:	0a12      	lsrs	r2, r2, #8
 8020552:	0a1b      	lsrs	r3, r3, #8
 8020554:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020558:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802055c:	431a      	orrs	r2, r3
 802055e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020562:	d019      	beq.n	8020598 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8020564:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8020568:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802056c:	fb0a fb0b 	mul.w	fp, sl, fp
 8020570:	fb0a fa06 	mul.w	sl, sl, r6
 8020574:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8020578:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802057c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8020580:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020584:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020588:	445e      	add	r6, fp
 802058a:	0a1b      	lsrs	r3, r3, #8
 802058c:	0a36      	lsrs	r6, r6, #8
 802058e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020592:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020596:	431e      	orrs	r6, r3
 8020598:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802059c:	d019      	beq.n	80205d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 802059e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80205a2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80205a6:	fb09 fa0a 	mul.w	sl, r9, sl
 80205aa:	fb09 f904 	mul.w	r9, r9, r4
 80205ae:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80205b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80205b6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80205ba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80205be:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80205c2:	4454      	add	r4, sl
 80205c4:	0a1b      	lsrs	r3, r3, #8
 80205c6:	0a24      	lsrs	r4, r4, #8
 80205c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80205cc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80205d0:	431c      	orrs	r4, r3
 80205d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80205d6:	d019      	beq.n	802060c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 80205d8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80205dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80205e0:	fb08 f909 	mul.w	r9, r8, r9
 80205e4:	fb08 f800 	mul.w	r8, r8, r0
 80205e8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80205ec:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80205f0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80205f4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80205f8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80205fc:	4448      	add	r0, r9
 80205fe:	0a1b      	lsrs	r3, r3, #8
 8020600:	0a00      	lsrs	r0, r0, #8
 8020602:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020606:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802060a:	4318      	orrs	r0, r3
 802060c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8020610:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020614:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020618:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802061c:	fb0c f808 	mul.w	r8, ip, r8
 8020620:	fb0c f606 	mul.w	r6, ip, r6
 8020624:	fb05 8803 	mla	r8, r5, r3, r8
 8020628:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802062c:	fb05 6202 	mla	r2, r5, r2, r6
 8020630:	fb07 8803 	mla	r8, r7, r3, r8
 8020634:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8020638:	fb0e 8303 	mla	r3, lr, r3, r8
 802063c:	0a1b      	lsrs	r3, r3, #8
 802063e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8020642:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8020646:	9c02      	ldr	r4, [sp, #8]
 8020648:	fb07 2703 	mla	r7, r7, r3, r2
 802064c:	9a03      	ldr	r2, [sp, #12]
 802064e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8020652:	43d2      	mvns	r2, r2
 8020654:	fb0e 7303 	mla	r3, lr, r3, r7
 8020658:	b2d2      	uxtb	r2, r2
 802065a:	0a1b      	lsrs	r3, r3, #8
 802065c:	4354      	muls	r4, r2
 802065e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020662:	1c60      	adds	r0, r4, #1
 8020664:	ea48 0303 	orr.w	r3, r8, r3
 8020668:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802066c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020670:	7008      	strb	r0, [r1, #0]
 8020672:	9801      	ldr	r0, [sp, #4]
 8020674:	4350      	muls	r0, r2
 8020676:	1c44      	adds	r4, r0, #1
 8020678:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 802067c:	0a18      	lsrs	r0, r3, #8
 802067e:	0c1b      	lsrs	r3, r3, #16
 8020680:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8020684:	7048      	strb	r0, [r1, #1]
 8020686:	9800      	ldr	r0, [sp, #0]
 8020688:	4350      	muls	r0, r2
 802068a:	4602      	mov	r2, r0
 802068c:	3001      	adds	r0, #1
 802068e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020692:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020696:	708b      	strb	r3, [r1, #2]
 8020698:	b005      	add	sp, #20
 802069a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802069e:	bf00      	nop
 80206a0:	08029ec7 	.word	0x08029ec7
 80206a4:	0802a3be 	.word	0x0802a3be
 80206a8:	08029f90 	.word	0x08029f90

080206ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80206ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206b0:	ed2d 8b08 	vpush	{d8-d11}
 80206b4:	b097      	sub	sp, #92	; 0x5c
 80206b6:	eeb0 aa40 	vmov.f32	s20, s0
 80206ba:	eef0 9a60 	vmov.f32	s19, s1
 80206be:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80206c0:	eeb0 9a41 	vmov.f32	s18, s2
 80206c4:	9308      	str	r3, [sp, #32]
 80206c6:	eeb0 8a62 	vmov.f32	s16, s5
 80206ca:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80206ce:	eef0 8a43 	vmov.f32	s17, s6
 80206d2:	9015      	str	r0, [sp, #84]	; 0x54
 80206d4:	eef0 ba44 	vmov.f32	s23, s8
 80206d8:	6868      	ldr	r0, [r5, #4]
 80206da:	eeb0 ba64 	vmov.f32	s22, s9
 80206de:	9112      	str	r1, [sp, #72]	; 0x48
 80206e0:	eef0 aa45 	vmov.f32	s21, s10
 80206e4:	9310      	str	r3, [sp, #64]	; 0x40
 80206e6:	9214      	str	r2, [sp, #80]	; 0x50
 80206e8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80206ea:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80206ee:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80206f2:	fb00 1303 	mla	r3, r0, r3, r1
 80206f6:	6829      	ldr	r1, [r5, #0]
 80206f8:	6855      	ldr	r5, [r2, #4]
 80206fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206fe:	3504      	adds	r5, #4
 8020700:	18cb      	adds	r3, r1, r3
 8020702:	930b      	str	r3, [sp, #44]	; 0x2c
 8020704:	6813      	ldr	r3, [r2, #0]
 8020706:	9311      	str	r3, [sp, #68]	; 0x44
 8020708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802070a:	2b00      	cmp	r3, #0
 802070c:	dc03      	bgt.n	8020716 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802070e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020710:	2b00      	cmp	r3, #0
 8020712:	f340 8333 	ble.w	8020d7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020716:	9b08      	ldr	r3, [sp, #32]
 8020718:	2b00      	cmp	r3, #0
 802071a:	f340 8190 	ble.w	8020a3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802071e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020720:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020722:	1412      	asrs	r2, r2, #16
 8020724:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020728:	d42f      	bmi.n	802078a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802072a:	1c51      	adds	r1, r2, #1
 802072c:	428c      	cmp	r4, r1
 802072e:	dd2f      	ble.n	8020790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020730:	2b00      	cmp	r3, #0
 8020732:	db2d      	blt.n	8020790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020734:	1c59      	adds	r1, r3, #1
 8020736:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020738:	4288      	cmp	r0, r1
 802073a:	dd29      	ble.n	8020790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802073c:	9b08      	ldr	r3, [sp, #32]
 802073e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020740:	3b01      	subs	r3, #1
 8020742:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020744:	fb02 1203 	mla	r2, r2, r3, r1
 8020748:	1412      	asrs	r2, r2, #16
 802074a:	d42b      	bmi.n	80207a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802074c:	3201      	adds	r2, #1
 802074e:	4294      	cmp	r4, r2
 8020750:	dd28      	ble.n	80207a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020752:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020754:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020756:	fb02 1303 	mla	r3, r2, r3, r1
 802075a:	141b      	asrs	r3, r3, #16
 802075c:	d422      	bmi.n	80207a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802075e:	3301      	adds	r3, #1
 8020760:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020762:	429a      	cmp	r2, r3
 8020764:	dd1e      	ble.n	80207a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020768:	f103 0803 	add.w	r8, r3, #3
 802076c:	9b08      	ldr	r3, [sp, #32]
 802076e:	9307      	str	r3, [sp, #28]
 8020770:	9b07      	ldr	r3, [sp, #28]
 8020772:	2b00      	cmp	r3, #0
 8020774:	f300 81ca 	bgt.w	8020b0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8020778:	9b08      	ldr	r3, [sp, #32]
 802077a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802077c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020784:	441a      	add	r2, r3
 8020786:	920b      	str	r2, [sp, #44]	; 0x2c
 8020788:	e15b      	b.n	8020a42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 802078a:	1c51      	adds	r1, r2, #1
 802078c:	f040 8148 	bne.w	8020a20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020790:	42a2      	cmp	r2, r4
 8020792:	f280 8145 	bge.w	8020a20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020796:	1c5a      	adds	r2, r3, #1
 8020798:	f2c0 8142 	blt.w	8020a20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802079c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802079e:	4293      	cmp	r3, r2
 80207a0:	f280 813e 	bge.w	8020a20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80207a4:	9b08      	ldr	r3, [sp, #32]
 80207a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80207a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80207aa:	9307      	str	r3, [sp, #28]
 80207ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80207ae:	2b00      	cmp	r3, #0
 80207b0:	dde2      	ble.n	8020778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80207b2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80207b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80207b6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80207ba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80207bc:	141b      	asrs	r3, r3, #16
 80207be:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80207c2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80207c4:	1412      	asrs	r2, r2, #16
 80207c6:	f100 818b 	bmi.w	8020ae0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 80207ca:	1c56      	adds	r6, r2, #1
 80207cc:	42b4      	cmp	r4, r6
 80207ce:	f340 8189 	ble.w	8020ae4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	f2c0 8186 	blt.w	8020ae4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80207d8:	1c5e      	adds	r6, r3, #1
 80207da:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80207dc:	42b7      	cmp	r7, r6
 80207de:	f340 8181 	ble.w	8020ae4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 80207e2:	fb03 2304 	mla	r3, r3, r4, r2
 80207e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80207e8:	18d6      	adds	r6, r2, r3
 80207ea:	5cd3      	ldrb	r3, [r2, r3]
 80207ec:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80207f0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80207f4:	2900      	cmp	r1, #0
 80207f6:	f000 8163 	beq.w	8020ac0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80207fa:	7872      	ldrb	r2, [r6, #1]
 80207fc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020800:	920c      	str	r2, [sp, #48]	; 0x30
 8020802:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020806:	2800      	cmp	r0, #0
 8020808:	f000 8164 	beq.w	8020ad4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 802080c:	1932      	adds	r2, r6, r4
 802080e:	5d36      	ldrb	r6, [r6, r4]
 8020810:	7852      	ldrb	r2, [r2, #1]
 8020812:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020816:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802081a:	9609      	str	r6, [sp, #36]	; 0x24
 802081c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020820:	0e16      	lsrs	r6, r2, #24
 8020822:	920d      	str	r2, [sp, #52]	; 0x34
 8020824:	b289      	uxth	r1, r1
 8020826:	b280      	uxth	r0, r0
 8020828:	fb01 fb00 	mul.w	fp, r1, r0
 802082c:	0109      	lsls	r1, r1, #4
 802082e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020832:	eba1 090b 	sub.w	r9, r1, fp
 8020836:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802083a:	b280      	uxth	r0, r0
 802083c:	fa1f f989 	uxth.w	r9, r9
 8020840:	1a12      	subs	r2, r2, r0
 8020842:	fb09 f108 	mul.w	r1, r9, r8
 8020846:	b292      	uxth	r2, r2
 8020848:	fb02 110c 	mla	r1, r2, ip, r1
 802084c:	fb00 110a 	mla	r1, r0, sl, r1
 8020850:	fb0b 1106 	mla	r1, fp, r6, r1
 8020854:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020858:	2900      	cmp	r1, #0
 802085a:	f000 80d2 	beq.w	8020a02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802085e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020862:	d01b      	beq.n	802089c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8020864:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020868:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802086c:	fb0c fe0e 	mul.w	lr, ip, lr
 8020870:	fb0c fc03 	mul.w	ip, ip, r3
 8020874:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020878:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802087c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020880:	4473      	add	r3, lr
 8020882:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8020886:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802088a:	0a1b      	lsrs	r3, r3, #8
 802088c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020890:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020894:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020898:	ea43 030e 	orr.w	r3, r3, lr
 802089c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80208a0:	d01e      	beq.n	80208e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 80208a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80208a4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80208a8:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80208ac:	fb08 fc0c 	mul.w	ip, r8, ip
 80208b0:	fb08 f80e 	mul.w	r8, r8, lr
 80208b4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80208b8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80208bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80208c0:	44e6      	add	lr, ip
 80208c2:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80208c6:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80208ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208ce:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80208d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80208d6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80208da:	ea4e 0708 	orr.w	r7, lr, r8
 80208de:	970c      	str	r7, [sp, #48]	; 0x30
 80208e0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80208e4:	d01e      	beq.n	8020924 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80208e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80208e8:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80208ec:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80208f0:	fb0a f808 	mul.w	r8, sl, r8
 80208f4:	fb0a fa0c 	mul.w	sl, sl, ip
 80208f8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80208fc:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020900:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020904:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020908:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802090c:	44c6      	add	lr, r8
 802090e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020912:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020916:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802091a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802091e:	ea4e 070a 	orr.w	r7, lr, sl
 8020922:	9709      	str	r7, [sp, #36]	; 0x24
 8020924:	2eff      	cmp	r6, #255	; 0xff
 8020926:	d01d      	beq.n	8020964 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020928:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802092a:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802092e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020932:	fb06 f808 	mul.w	r8, r6, r8
 8020936:	fb06 f60c 	mul.w	r6, r6, ip
 802093a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802093e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8020942:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020946:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802094a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802094e:	44c6      	add	lr, r8
 8020950:	0a36      	lsrs	r6, r6, #8
 8020952:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020956:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802095a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802095e:	ea4e 0606 	orr.w	r6, lr, r6
 8020962:	960d      	str	r6, [sp, #52]	; 0x34
 8020964:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020966:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802096a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802096c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020970:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020974:	43c9      	mvns	r1, r1
 8020976:	fb09 f606 	mul.w	r6, r9, r6
 802097a:	b2c9      	uxtb	r1, r1
 802097c:	fb02 660c 	mla	r6, r2, ip, r6
 8020980:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020984:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020986:	fb00 660c 	mla	r6, r0, ip, r6
 802098a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802098e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020990:	fb0b 660c 	mla	r6, fp, ip, r6
 8020994:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8020998:	fb09 f90c 	mul.w	r9, r9, ip
 802099c:	0a36      	lsrs	r6, r6, #8
 802099e:	fb02 9303 	mla	r3, r2, r3, r9
 80209a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80209a4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80209a8:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80209ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80209ae:	fb00 330e 	mla	r3, r0, lr, r3
 80209b2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80209b6:	fb0b 3b00 	mla	fp, fp, r0, r3
 80209ba:	9b07      	ldr	r3, [sp, #28]
 80209bc:	781b      	ldrb	r3, [r3, #0]
 80209be:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80209c2:	fb03 f201 	mul.w	r2, r3, r1
 80209c6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80209ca:	1c53      	adds	r3, r2, #1
 80209cc:	ea46 060b 	orr.w	r6, r6, fp
 80209d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80209d4:	9a07      	ldr	r2, [sp, #28]
 80209d6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80209da:	7013      	strb	r3, [r2, #0]
 80209dc:	7853      	ldrb	r3, [r2, #1]
 80209de:	434b      	muls	r3, r1
 80209e0:	1c5a      	adds	r2, r3, #1
 80209e2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80209e6:	0a33      	lsrs	r3, r6, #8
 80209e8:	0c36      	lsrs	r6, r6, #16
 80209ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80209ee:	9a07      	ldr	r2, [sp, #28]
 80209f0:	7053      	strb	r3, [r2, #1]
 80209f2:	7893      	ldrb	r3, [r2, #2]
 80209f4:	4359      	muls	r1, r3
 80209f6:	1c4b      	adds	r3, r1, #1
 80209f8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80209fc:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8020a00:	7096      	strb	r6, [r2, #2]
 8020a02:	9b07      	ldr	r3, [sp, #28]
 8020a04:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020a06:	3303      	adds	r3, #3
 8020a08:	9307      	str	r3, [sp, #28]
 8020a0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a0c:	4413      	add	r3, r2
 8020a0e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020a10:	9329      	str	r3, [sp, #164]	; 0xa4
 8020a12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a14:	4413      	add	r3, r2
 8020a16:	932a      	str	r3, [sp, #168]	; 0xa8
 8020a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020a1a:	3b01      	subs	r3, #1
 8020a1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8020a1e:	e6c5      	b.n	80207ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020a20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a22:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020a24:	4413      	add	r3, r2
 8020a26:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020a28:	9329      	str	r3, [sp, #164]	; 0xa4
 8020a2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a2c:	4413      	add	r3, r2
 8020a2e:	932a      	str	r3, [sp, #168]	; 0xa8
 8020a30:	9b08      	ldr	r3, [sp, #32]
 8020a32:	3b01      	subs	r3, #1
 8020a34:	9308      	str	r3, [sp, #32]
 8020a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a38:	3303      	adds	r3, #3
 8020a3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020a3c:	e66b      	b.n	8020716 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020a3e:	f47f ae7d 	bne.w	802073c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	f340 8199 	ble.w	8020d7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8020a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020a50:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020a54:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020a58:	eef0 6a48 	vmov.f32	s13, s16
 8020a5c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020a60:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020a64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a68:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8020a6c:	eef0 6a68 	vmov.f32	s13, s17
 8020a70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a74:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8020a78:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020a7c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020a80:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020a84:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020a88:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020a8c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020a90:	ee18 2a10 	vmov	r2, s16
 8020a94:	eeb0 8a47 	vmov.f32	s16, s14
 8020a98:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a9c:	ee18 2a90 	vmov	r2, s17
 8020aa0:	932b      	str	r3, [sp, #172]	; 0xac
 8020aa2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020aa4:	eef0 8a67 	vmov.f32	s17, s15
 8020aa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020aac:	932c      	str	r3, [sp, #176]	; 0xb0
 8020aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020ab0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020ab2:	3b01      	subs	r3, #1
 8020ab4:	9312      	str	r3, [sp, #72]	; 0x48
 8020ab6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ab8:	bf08      	it	eq
 8020aba:	4613      	moveq	r3, r2
 8020abc:	9308      	str	r3, [sp, #32]
 8020abe:	e623      	b.n	8020708 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020ac0:	b158      	cbz	r0, 8020ada <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020ac2:	5d32      	ldrb	r2, [r6, r4]
 8020ac4:	26ff      	movs	r6, #255	; 0xff
 8020ac6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020aca:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8020ace:	9209      	str	r2, [sp, #36]	; 0x24
 8020ad0:	46b0      	mov	r8, r6
 8020ad2:	e6a7      	b.n	8020824 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020ad4:	26ff      	movs	r6, #255	; 0xff
 8020ad6:	46b2      	mov	sl, r6
 8020ad8:	e6a4      	b.n	8020824 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020ada:	26ff      	movs	r6, #255	; 0xff
 8020adc:	46b2      	mov	sl, r6
 8020ade:	e7f7      	b.n	8020ad0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8020ae0:	1c57      	adds	r7, r2, #1
 8020ae2:	d18e      	bne.n	8020a02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ae4:	4294      	cmp	r4, r2
 8020ae6:	dd8c      	ble.n	8020a02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020ae8:	1c5e      	adds	r6, r3, #1
 8020aea:	db8a      	blt.n	8020a02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020aec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020aee:	429e      	cmp	r6, r3
 8020af0:	dd87      	ble.n	8020a02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020af2:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020af6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020afa:	e9cd 4600 	strd	r4, r6, [sp]
 8020afe:	462b      	mov	r3, r5
 8020b00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020b02:	9907      	ldr	r1, [sp, #28]
 8020b04:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020b06:	f7ff fc85 	bl	8020414 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020b0a:	e77a      	b.n	8020a02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020b0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020b0e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8020b10:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020b14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020b16:	1409      	asrs	r1, r1, #16
 8020b18:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020b1c:	141b      	asrs	r3, r3, #16
 8020b1e:	fb04 1303 	mla	r3, r4, r3, r1
 8020b22:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020b24:	18ce      	adds	r6, r1, r3
 8020b26:	5ccb      	ldrb	r3, [r1, r3]
 8020b28:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020b2c:	0e1f      	lsrs	r7, r3, #24
 8020b2e:	2a00      	cmp	r2, #0
 8020b30:	f000 8114 	beq.w	8020d5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020b34:	7871      	ldrb	r1, [r6, #1]
 8020b36:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020b3a:	910e      	str	r1, [sp, #56]	; 0x38
 8020b3c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020b40:	2800      	cmp	r0, #0
 8020b42:	f000 8115 	beq.w	8020d70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8020b46:	1931      	adds	r1, r6, r4
 8020b48:	5d36      	ldrb	r6, [r6, r4]
 8020b4a:	7849      	ldrb	r1, [r1, #1]
 8020b4c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020b50:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020b54:	960a      	str	r6, [sp, #40]	; 0x28
 8020b56:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020b5a:	0e0e      	lsrs	r6, r1, #24
 8020b5c:	910f      	str	r1, [sp, #60]	; 0x3c
 8020b5e:	b292      	uxth	r2, r2
 8020b60:	b280      	uxth	r0, r0
 8020b62:	fb02 fb00 	mul.w	fp, r2, r0
 8020b66:	0112      	lsls	r2, r2, #4
 8020b68:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8020b6c:	eba2 090b 	sub.w	r9, r2, fp
 8020b70:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020b74:	b280      	uxth	r0, r0
 8020b76:	fa1f f989 	uxth.w	r9, r9
 8020b7a:	1a09      	subs	r1, r1, r0
 8020b7c:	fb09 f20e 	mul.w	r2, r9, lr
 8020b80:	b289      	uxth	r1, r1
 8020b82:	fb01 2207 	mla	r2, r1, r7, r2
 8020b86:	fb00 220a 	mla	r2, r0, sl, r2
 8020b8a:	fb0b 2206 	mla	r2, fp, r6, r2
 8020b8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020b92:	9213      	str	r2, [sp, #76]	; 0x4c
 8020b94:	2a00      	cmp	r2, #0
 8020b96:	f000 80d4 	beq.w	8020d42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8020b9a:	2fff      	cmp	r7, #255	; 0xff
 8020b9c:	d01a      	beq.n	8020bd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8020b9e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020ba2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ba6:	fb07 fc0c 	mul.w	ip, r7, ip
 8020baa:	435f      	muls	r7, r3
 8020bac:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020bb0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020bb4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020bb8:	4463      	add	r3, ip
 8020bba:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020bbe:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020bc2:	0a1b      	lsrs	r3, r3, #8
 8020bc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020bc8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020bcc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020bd0:	ea43 030c 	orr.w	r3, r3, ip
 8020bd4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020bd8:	d01f      	beq.n	8020c1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020bda:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020bde:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020be2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020be6:	fb0e f707 	mul.w	r7, lr, r7
 8020bea:	fb0e fe0c 	mul.w	lr, lr, ip
 8020bee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020bf2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020bf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020bfa:	44bc      	add	ip, r7
 8020bfc:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020c00:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020c04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c10:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020c14:	ea4c 020e 	orr.w	r2, ip, lr
 8020c18:	920e      	str	r2, [sp, #56]	; 0x38
 8020c1a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020c1e:	d01e      	beq.n	8020c5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8020c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020c22:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020c26:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020c2a:	fb0a fe0e 	mul.w	lr, sl, lr
 8020c2e:	fb0a fa07 	mul.w	sl, sl, r7
 8020c32:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020c36:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020c3a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020c3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c42:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020c46:	44f4      	add	ip, lr
 8020c48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c50:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c58:	ea4c 020a 	orr.w	r2, ip, sl
 8020c5c:	920a      	str	r2, [sp, #40]	; 0x28
 8020c5e:	2eff      	cmp	r6, #255	; 0xff
 8020c60:	d01c      	beq.n	8020c9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8020c62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c64:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020c68:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020c6c:	fb06 fe0e 	mul.w	lr, r6, lr
 8020c70:	437e      	muls	r6, r7
 8020c72:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020c76:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020c7a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8020c7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c82:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020c86:	44f4      	add	ip, lr
 8020c88:	0a36      	lsrs	r6, r6, #8
 8020c8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c8e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c96:	ea4c 0206 	orr.w	r2, ip, r6
 8020c9a:	920f      	str	r2, [sp, #60]	; 0x3c
 8020c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020c9e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020ca2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020ca6:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020cac:	fb09 f606 	mul.w	r6, r9, r6
 8020cb0:	fb01 6607 	mla	r6, r1, r7, r6
 8020cb4:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020cba:	fb00 6607 	mla	r6, r0, r7, r6
 8020cbe:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020cc4:	fb0b 6607 	mla	r6, fp, r7, r6
 8020cc8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020cce:	fb09 f907 	mul.w	r9, r9, r7
 8020cd2:	0a36      	lsrs	r6, r6, #8
 8020cd4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020cd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020cda:	fb01 9303 	mla	r3, r1, r3, r9
 8020cde:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020ce2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020ce6:	fb00 330c 	mla	r3, r0, ip, r3
 8020cea:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8020cee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020cf0:	43da      	mvns	r2, r3
 8020cf2:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8020cf6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020cfa:	b2d2      	uxtb	r2, r2
 8020cfc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020d00:	fb03 f102 	mul.w	r1, r3, r2
 8020d04:	ea46 060e 	orr.w	r6, r6, lr
 8020d08:	1c4b      	adds	r3, r1, #1
 8020d0a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020d0e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020d12:	f808 3c03 	strb.w	r3, [r8, #-3]
 8020d16:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8020d1a:	4353      	muls	r3, r2
 8020d1c:	1c59      	adds	r1, r3, #1
 8020d1e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020d22:	0a33      	lsrs	r3, r6, #8
 8020d24:	0c36      	lsrs	r6, r6, #16
 8020d26:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020d2a:	f808 3c02 	strb.w	r3, [r8, #-2]
 8020d2e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8020d32:	435a      	muls	r2, r3
 8020d34:	1c53      	adds	r3, r2, #1
 8020d36:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020d3a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8020d3e:	f808 6c01 	strb.w	r6, [r8, #-1]
 8020d42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020d44:	f108 0803 	add.w	r8, r8, #3
 8020d48:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020d4a:	4413      	add	r3, r2
 8020d4c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020d4e:	9329      	str	r3, [sp, #164]	; 0xa4
 8020d50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d52:	4413      	add	r3, r2
 8020d54:	932a      	str	r3, [sp, #168]	; 0xa8
 8020d56:	9b07      	ldr	r3, [sp, #28]
 8020d58:	3b01      	subs	r3, #1
 8020d5a:	e508      	b.n	802076e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8020d5c:	b158      	cbz	r0, 8020d76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8020d5e:	5d31      	ldrb	r1, [r6, r4]
 8020d60:	26ff      	movs	r6, #255	; 0xff
 8020d62:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020d66:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020d6a:	910a      	str	r1, [sp, #40]	; 0x28
 8020d6c:	46b6      	mov	lr, r6
 8020d6e:	e6f6      	b.n	8020b5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8020d70:	26ff      	movs	r6, #255	; 0xff
 8020d72:	46b2      	mov	sl, r6
 8020d74:	e6f3      	b.n	8020b5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8020d76:	26ff      	movs	r6, #255	; 0xff
 8020d78:	46b2      	mov	sl, r6
 8020d7a:	e7f7      	b.n	8020d6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8020d7c:	b017      	add	sp, #92	; 0x5c
 8020d7e:	ecbd 8b08 	vpop	{d8-d11}
 8020d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020d88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d8c:	b08d      	sub	sp, #52	; 0x34
 8020d8e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8020d92:	9103      	str	r1, [sp, #12]
 8020d94:	fb07 5803 	mla	r8, r7, r3, r5
 8020d98:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8020d9c:	9803      	ldr	r0, [sp, #12]
 8020d9e:	2f00      	cmp	r7, #0
 8020da0:	910b      	str	r1, [sp, #44]	; 0x2c
 8020da2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020da6:	9903      	ldr	r1, [sp, #12]
 8020da8:	9c03      	ldr	r4, [sp, #12]
 8020daa:	eb02 0608 	add.w	r6, r2, r8
 8020dae:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8020db2:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8020db6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8020dba:	7809      	ldrb	r1, [r1, #0]
 8020dbc:	7840      	ldrb	r0, [r0, #1]
 8020dbe:	78a4      	ldrb	r4, [r4, #2]
 8020dc0:	db51      	blt.n	8020e66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8020dc2:	45be      	cmp	lr, r7
 8020dc4:	dd4f      	ble.n	8020e66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8020dc6:	2d00      	cmp	r5, #0
 8020dc8:	db49      	blt.n	8020e5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020dca:	42ab      	cmp	r3, r5
 8020dcc:	dd47      	ble.n	8020e5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020dce:	f812 2008 	ldrb.w	r2, [r2, r8]
 8020dd2:	9204      	str	r2, [sp, #16]
 8020dd4:	7872      	ldrb	r2, [r6, #1]
 8020dd6:	9205      	str	r2, [sp, #20]
 8020dd8:	78b2      	ldrb	r2, [r6, #2]
 8020dda:	9206      	str	r2, [sp, #24]
 8020ddc:	1c6a      	adds	r2, r5, #1
 8020dde:	d449      	bmi.n	8020e74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020de0:	4293      	cmp	r3, r2
 8020de2:	dd47      	ble.n	8020e74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020de4:	f1bc 0f00 	cmp.w	ip, #0
 8020de8:	d044      	beq.n	8020e74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020dea:	7972      	ldrb	r2, [r6, #5]
 8020dec:	f896 b003 	ldrb.w	fp, [r6, #3]
 8020df0:	f896 a004 	ldrb.w	sl, [r6, #4]
 8020df4:	9201      	str	r2, [sp, #4]
 8020df6:	3701      	adds	r7, #1
 8020df8:	d444      	bmi.n	8020e84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020dfa:	45be      	cmp	lr, r7
 8020dfc:	dd42      	ble.n	8020e84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020dfe:	f1b9 0f00 	cmp.w	r9, #0
 8020e02:	f000 80c1 	beq.w	8020f88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8020e06:	2d00      	cmp	r5, #0
 8020e08:	db38      	blt.n	8020e7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020e0a:	42ab      	cmp	r3, r5
 8020e0c:	dd36      	ble.n	8020e7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020e0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020e12:	f816 8002 	ldrb.w	r8, [r6, r2]
 8020e16:	2203      	movs	r2, #3
 8020e18:	fb03 6702 	mla	r7, r3, r2, r6
 8020e1c:	fb03 6202 	mla	r2, r3, r2, r6
 8020e20:	787f      	ldrb	r7, [r7, #1]
 8020e22:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020e26:	9702      	str	r7, [sp, #8]
 8020e28:	3501      	adds	r5, #1
 8020e2a:	d432      	bmi.n	8020e92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020e2c:	42ab      	cmp	r3, r5
 8020e2e:	dd30      	ble.n	8020e92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020e30:	f1bc 0f00 	cmp.w	ip, #0
 8020e34:	d031      	beq.n	8020e9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8020e36:	2703      	movs	r7, #3
 8020e38:	fb13 7207 	smlabb	r2, r3, r7, r7
 8020e3c:	5cb5      	ldrb	r5, [r6, r2]
 8020e3e:	fb03 6207 	mla	r2, r3, r7, r6
 8020e42:	fb03 6307 	mla	r3, r3, r7, r6
 8020e46:	7912      	ldrb	r2, [r2, #4]
 8020e48:	795e      	ldrb	r6, [r3, #5]
 8020e4a:	f1bc 0f0f 	cmp.w	ip, #15
 8020e4e:	d927      	bls.n	8020ea0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8020e50:	4b53      	ldr	r3, [pc, #332]	; (8020fa0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8020e52:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020e56:	4a53      	ldr	r2, [pc, #332]	; (8020fa4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8020e58:	4853      	ldr	r0, [pc, #332]	; (8020fa8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8020e5a:	f004 facf 	bl	80253fc <__assert_func>
 8020e5e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020e62:	9104      	str	r1, [sp, #16]
 8020e64:	e7ba      	b.n	8020ddc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8020e66:	9401      	str	r4, [sp, #4]
 8020e68:	4682      	mov	sl, r0
 8020e6a:	468b      	mov	fp, r1
 8020e6c:	9104      	str	r1, [sp, #16]
 8020e6e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8020e72:	e7c0      	b.n	8020df6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020e74:	9401      	str	r4, [sp, #4]
 8020e76:	4682      	mov	sl, r0
 8020e78:	468b      	mov	fp, r1
 8020e7a:	e7bc      	b.n	8020df6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8020e7c:	46a6      	mov	lr, r4
 8020e7e:	9002      	str	r0, [sp, #8]
 8020e80:	4688      	mov	r8, r1
 8020e82:	e7d1      	b.n	8020e28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8020e84:	4626      	mov	r6, r4
 8020e86:	4602      	mov	r2, r0
 8020e88:	460d      	mov	r5, r1
 8020e8a:	46a6      	mov	lr, r4
 8020e8c:	9002      	str	r0, [sp, #8]
 8020e8e:	4688      	mov	r8, r1
 8020e90:	e7db      	b.n	8020e4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8020e92:	4626      	mov	r6, r4
 8020e94:	4602      	mov	r2, r0
 8020e96:	460d      	mov	r5, r1
 8020e98:	e7d7      	b.n	8020e4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8020e9a:	4626      	mov	r6, r4
 8020e9c:	4602      	mov	r2, r0
 8020e9e:	460d      	mov	r5, r1
 8020ea0:	f1b9 0f0f 	cmp.w	r9, #15
 8020ea4:	d8d4      	bhi.n	8020e50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020ea6:	fa1f f38c 	uxth.w	r3, ip
 8020eaa:	fa1f fc89 	uxth.w	ip, r9
 8020eae:	fb03 f70c 	mul.w	r7, r3, ip
 8020eb2:	011b      	lsls	r3, r3, #4
 8020eb4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020eb8:	9707      	str	r7, [sp, #28]
 8020eba:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020ebe:	fa1f fc8c 	uxth.w	ip, ip
 8020ec2:	eba7 070c 	sub.w	r7, r7, ip
 8020ec6:	b2bf      	uxth	r7, r7
 8020ec8:	9709      	str	r7, [sp, #36]	; 0x24
 8020eca:	9f07      	ldr	r7, [sp, #28]
 8020ecc:	1bdb      	subs	r3, r3, r7
 8020ece:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8020ed2:	b29b      	uxth	r3, r3
 8020ed4:	9708      	str	r7, [sp, #32]
 8020ed6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8020eda:	ea6f 0907 	mvn.w	r9, r7
 8020ede:	fb03 fb0b 	mul.w	fp, r3, fp
 8020ee2:	9f04      	ldr	r7, [sp, #16]
 8020ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ee6:	fa5f f989 	uxtb.w	r9, r9
 8020eea:	fb03 bb07 	mla	fp, r3, r7, fp
 8020eee:	9f07      	ldr	r7, [sp, #28]
 8020ef0:	fb11 f109 	smulbb	r1, r1, r9
 8020ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ef6:	fb0c b808 	mla	r8, ip, r8, fp
 8020efa:	fb10 f009 	smulbb	r0, r0, r9
 8020efe:	fb14 f409 	smulbb	r4, r4, r9
 8020f02:	fb07 8805 	mla	r8, r7, r5, r8
 8020f06:	9d08      	ldr	r5, [sp, #32]
 8020f08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020f0a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020f0e:	fb08 1805 	mla	r8, r8, r5, r1
 8020f12:	9d05      	ldr	r5, [sp, #20]
 8020f14:	fa1f f888 	uxth.w	r8, r8
 8020f18:	f108 0101 	add.w	r1, r8, #1
 8020f1c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8020f20:	9903      	ldr	r1, [sp, #12]
 8020f22:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020f26:	f881 8000 	strb.w	r8, [r1]
 8020f2a:	fb03 f10a 	mul.w	r1, r3, sl
 8020f2e:	fb07 1105 	mla	r1, r7, r5, r1
 8020f32:	9d02      	ldr	r5, [sp, #8]
 8020f34:	fb0c 1105 	mla	r1, ip, r5, r1
 8020f38:	9d07      	ldr	r5, [sp, #28]
 8020f3a:	fb05 1102 	mla	r1, r5, r2, r1
 8020f3e:	9a08      	ldr	r2, [sp, #32]
 8020f40:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f44:	fb01 0102 	mla	r1, r1, r2, r0
 8020f48:	9a03      	ldr	r2, [sp, #12]
 8020f4a:	b289      	uxth	r1, r1
 8020f4c:	1c48      	adds	r0, r1, #1
 8020f4e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020f52:	1209      	asrs	r1, r1, #8
 8020f54:	7051      	strb	r1, [r2, #1]
 8020f56:	9a01      	ldr	r2, [sp, #4]
 8020f58:	4353      	muls	r3, r2
 8020f5a:	9a06      	ldr	r2, [sp, #24]
 8020f5c:	fb07 3702 	mla	r7, r7, r2, r3
 8020f60:	9b08      	ldr	r3, [sp, #32]
 8020f62:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8020f66:	fb05 c606 	mla	r6, r5, r6, ip
 8020f6a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020f6e:	fb06 4603 	mla	r6, r6, r3, r4
 8020f72:	9b03      	ldr	r3, [sp, #12]
 8020f74:	b2b6      	uxth	r6, r6
 8020f76:	f106 0e01 	add.w	lr, r6, #1
 8020f7a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020f7e:	1236      	asrs	r6, r6, #8
 8020f80:	709e      	strb	r6, [r3, #2]
 8020f82:	b00d      	add	sp, #52	; 0x34
 8020f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f88:	f1bc 0f0f 	cmp.w	ip, #15
 8020f8c:	f63f af60 	bhi.w	8020e50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020f90:	4626      	mov	r6, r4
 8020f92:	4602      	mov	r2, r0
 8020f94:	460d      	mov	r5, r1
 8020f96:	46a6      	mov	lr, r4
 8020f98:	9002      	str	r0, [sp, #8]
 8020f9a:	4688      	mov	r8, r1
 8020f9c:	e783      	b.n	8020ea6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8020f9e:	bf00      	nop
 8020fa0:	08029ec7 	.word	0x08029ec7
 8020fa4:	0802a3be 	.word	0x0802a3be
 8020fa8:	08029f90 	.word	0x08029f90

08020fac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fb0:	ed2d 8b08 	vpush	{d8-d11}
 8020fb4:	b0a1      	sub	sp, #132	; 0x84
 8020fb6:	eeb0 aa40 	vmov.f32	s20, s0
 8020fba:	eef0 9a60 	vmov.f32	s19, s1
 8020fbe:	9307      	str	r3, [sp, #28]
 8020fc0:	eeb0 9a41 	vmov.f32	s18, s2
 8020fc4:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8020fc8:	eeb0 8a62 	vmov.f32	s16, s5
 8020fcc:	9210      	str	r2, [sp, #64]	; 0x40
 8020fce:	eef0 8a43 	vmov.f32	s17, s6
 8020fd2:	9308      	str	r3, [sp, #32]
 8020fd4:	eef0 ba44 	vmov.f32	s23, s8
 8020fd8:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8020fdc:	eeb0 ba64 	vmov.f32	s22, s9
 8020fe0:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8020fe2:	eef0 aa45 	vmov.f32	s21, s10
 8020fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8020fe8:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8020fec:	901f      	str	r0, [sp, #124]	; 0x7c
 8020fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ff0:	6850      	ldr	r0, [r2, #4]
 8020ff2:	910e      	str	r1, [sp, #56]	; 0x38
 8020ff4:	6812      	ldr	r2, [r2, #0]
 8020ff6:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8020ffa:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8020ffe:	fb00 1303 	mla	r3, r0, r3, r1
 8021002:	9908      	ldr	r1, [sp, #32]
 8021004:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021008:	18d3      	adds	r3, r2, r3
 802100a:	2203      	movs	r2, #3
 802100c:	9309      	str	r3, [sp, #36]	; 0x24
 802100e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8021010:	681b      	ldr	r3, [r3, #0]
 8021012:	930c      	str	r3, [sp, #48]	; 0x30
 8021014:	f06f 0304 	mvn.w	r3, #4
 8021018:	fb11 3302 	smlabb	r3, r1, r2, r3
 802101c:	930d      	str	r3, [sp, #52]	; 0x34
 802101e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021020:	43db      	mvns	r3, r3
 8021022:	b2db      	uxtb	r3, r3
 8021024:	930b      	str	r3, [sp, #44]	; 0x2c
 8021026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021028:	2b00      	cmp	r3, #0
 802102a:	dc03      	bgt.n	8021034 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802102c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802102e:	2b00      	cmp	r3, #0
 8021030:	f340 81df 	ble.w	80213f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8021034:	9b07      	ldr	r3, [sp, #28]
 8021036:	2b00      	cmp	r3, #0
 8021038:	f340 80f2 	ble.w	8021220 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802103c:	ea5f 4228 	movs.w	r2, r8, asr #16
 8021040:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021044:	d430      	bmi.n	80210a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021046:	1c51      	adds	r1, r2, #1
 8021048:	9808      	ldr	r0, [sp, #32]
 802104a:	4281      	cmp	r1, r0
 802104c:	da2f      	bge.n	80210ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802104e:	2b00      	cmp	r3, #0
 8021050:	db2d      	blt.n	80210ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8021052:	1c59      	adds	r1, r3, #1
 8021054:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021056:	4288      	cmp	r0, r1
 8021058:	dd29      	ble.n	80210ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802105a:	9b07      	ldr	r3, [sp, #28]
 802105c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802105e:	3b01      	subs	r3, #1
 8021060:	fb02 8203 	mla	r2, r2, r3, r8
 8021064:	1412      	asrs	r2, r2, #16
 8021066:	d42d      	bmi.n	80210c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021068:	3201      	adds	r2, #1
 802106a:	9908      	ldr	r1, [sp, #32]
 802106c:	4291      	cmp	r1, r2
 802106e:	dd29      	ble.n	80210c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021070:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021072:	fb02 b303 	mla	r3, r2, r3, fp
 8021076:	141b      	asrs	r3, r3, #16
 8021078:	d424      	bmi.n	80210c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802107a:	3301      	adds	r3, #1
 802107c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802107e:	429a      	cmp	r2, r3
 8021080:	dd20      	ble.n	80210c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8021082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021084:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021088:	1cde      	adds	r6, r3, #3
 802108a:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802108e:	f1bc 0f00 	cmp.w	ip, #0
 8021092:	f300 811f 	bgt.w	80212d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8021096:	9b07      	ldr	r3, [sp, #28]
 8021098:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802109c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802109e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80210a2:	4423      	add	r3, r4
 80210a4:	9309      	str	r3, [sp, #36]	; 0x24
 80210a6:	e0bd      	b.n	8021224 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80210a8:	1c57      	adds	r7, r2, #1
 80210aa:	f040 80ae 	bne.w	802120a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80210ae:	9908      	ldr	r1, [sp, #32]
 80210b0:	428a      	cmp	r2, r1
 80210b2:	f280 80aa 	bge.w	802120a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80210b6:	1c5e      	adds	r6, r3, #1
 80210b8:	f2c0 80a7 	blt.w	802120a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80210bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80210be:	4293      	cmp	r3, r2
 80210c0:	f280 80a3 	bge.w	802120a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80210c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80210c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80210ca:	f1ba 0f00 	cmp.w	sl, #0
 80210ce:	dde2      	ble.n	8021096 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80210d0:	ea5f 4028 	movs.w	r0, r8, asr #16
 80210d4:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80210d8:	ea4f 412b 	mov.w	r1, fp, asr #16
 80210dc:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80210e0:	f100 80df 	bmi.w	80212a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80210e4:	1c45      	adds	r5, r0, #1
 80210e6:	9f08      	ldr	r7, [sp, #32]
 80210e8:	42af      	cmp	r7, r5
 80210ea:	f340 80dc 	ble.w	80212a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80210ee:	2900      	cmp	r1, #0
 80210f0:	f2c0 80d9 	blt.w	80212a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80210f4:	1c4d      	adds	r5, r1, #1
 80210f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80210f8:	42af      	cmp	r7, r5
 80210fa:	f340 80d4 	ble.w	80212a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80210fe:	9d08      	ldr	r5, [sp, #32]
 8021100:	fb05 0101 	mla	r1, r5, r1, r0
 8021104:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021106:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802110a:	1845      	adds	r5, r0, r1
 802110c:	5c40      	ldrb	r0, [r0, r1]
 802110e:	792f      	ldrb	r7, [r5, #4]
 8021110:	7869      	ldrb	r1, [r5, #1]
 8021112:	9711      	str	r7, [sp, #68]	; 0x44
 8021114:	796f      	ldrb	r7, [r5, #5]
 8021116:	f895 e002 	ldrb.w	lr, [r5, #2]
 802111a:	f895 9003 	ldrb.w	r9, [r5, #3]
 802111e:	9712      	str	r7, [sp, #72]	; 0x48
 8021120:	b17a      	cbz	r2, 8021142 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8021122:	3505      	adds	r5, #5
 8021124:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021126:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021128:	19ef      	adds	r7, r5, r7
 802112a:	5d2d      	ldrb	r5, [r5, r4]
 802112c:	787c      	ldrb	r4, [r7, #1]
 802112e:	9513      	str	r5, [sp, #76]	; 0x4c
 8021130:	9415      	str	r4, [sp, #84]	; 0x54
 8021132:	78bc      	ldrb	r4, [r7, #2]
 8021134:	9417      	str	r4, [sp, #92]	; 0x5c
 8021136:	78fc      	ldrb	r4, [r7, #3]
 8021138:	9414      	str	r4, [sp, #80]	; 0x50
 802113a:	793c      	ldrb	r4, [r7, #4]
 802113c:	9416      	str	r4, [sp, #88]	; 0x58
 802113e:	797c      	ldrb	r4, [r7, #5]
 8021140:	9418      	str	r4, [sp, #96]	; 0x60
 8021142:	b29b      	uxth	r3, r3
 8021144:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021146:	b292      	uxth	r2, r2
 8021148:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802114c:	fb03 f702 	mul.w	r7, r3, r2
 8021150:	011b      	lsls	r3, r3, #4
 8021152:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8021156:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802115a:	1bdb      	subs	r3, r3, r7
 802115c:	b292      	uxth	r2, r2
 802115e:	b29b      	uxth	r3, r3
 8021160:	ebac 0c02 	sub.w	ip, ip, r2
 8021164:	fb03 f909 	mul.w	r9, r3, r9
 8021168:	fa1f fc8c 	uxth.w	ip, ip
 802116c:	fb0c 9000 	mla	r0, ip, r0, r9
 8021170:	f896 9000 	ldrb.w	r9, [r6]
 8021174:	fb02 0004 	mla	r0, r2, r4, r0
 8021178:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802117a:	fb07 0004 	mla	r0, r7, r4, r0
 802117e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021180:	fb19 f904 	smulbb	r9, r9, r4
 8021184:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021188:	fb00 9005 	mla	r0, r0, r5, r9
 802118c:	b280      	uxth	r0, r0
 802118e:	f100 0901 	add.w	r9, r0, #1
 8021192:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021196:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021198:	4358      	muls	r0, r3
 802119a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802119e:	fb0c 0101 	mla	r1, ip, r1, r0
 80211a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80211a4:	f886 9000 	strb.w	r9, [r6]
 80211a8:	fb02 1100 	mla	r1, r2, r0, r1
 80211ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 80211ae:	fb07 1100 	mla	r1, r7, r0, r1
 80211b2:	7870      	ldrb	r0, [r6, #1]
 80211b4:	fb10 f004 	smulbb	r0, r0, r4
 80211b8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80211bc:	fb01 0105 	mla	r1, r1, r5, r0
 80211c0:	b289      	uxth	r1, r1
 80211c2:	1c48      	adds	r0, r1, #1
 80211c4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80211c8:	1209      	asrs	r1, r1, #8
 80211ca:	7071      	strb	r1, [r6, #1]
 80211cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80211ce:	434b      	muls	r3, r1
 80211d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80211d2:	fb0c 330e 	mla	r3, ip, lr, r3
 80211d6:	fb02 3201 	mla	r2, r2, r1, r3
 80211da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80211dc:	fb07 2703 	mla	r7, r7, r3, r2
 80211e0:	78b2      	ldrb	r2, [r6, #2]
 80211e2:	fb12 f204 	smulbb	r2, r2, r4
 80211e6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80211ea:	fb07 2505 	mla	r5, r7, r5, r2
 80211ee:	b2ad      	uxth	r5, r5
 80211f0:	1c6f      	adds	r7, r5, #1
 80211f2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80211f6:	122d      	asrs	r5, r5, #8
 80211f8:	70b5      	strb	r5, [r6, #2]
 80211fa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80211fc:	3603      	adds	r6, #3
 80211fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021202:	4498      	add	r8, r3
 8021204:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021206:	449b      	add	fp, r3
 8021208:	e75f      	b.n	80210ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 802120a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 802120c:	4498      	add	r8, r3
 802120e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021210:	449b      	add	fp, r3
 8021212:	9b07      	ldr	r3, [sp, #28]
 8021214:	3b01      	subs	r3, #1
 8021216:	9307      	str	r3, [sp, #28]
 8021218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802121a:	3303      	adds	r3, #3
 802121c:	9309      	str	r3, [sp, #36]	; 0x24
 802121e:	e709      	b.n	8021034 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8021220:	f47f af1b 	bne.w	802105a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8021224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021226:	2b00      	cmp	r3, #0
 8021228:	f340 80e3 	ble.w	80213f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802122c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021230:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021232:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021236:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802123a:	eef0 6a48 	vmov.f32	s13, s16
 802123e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021242:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021246:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802124a:	ee16 8a90 	vmov	r8, s13
 802124e:	eef0 6a68 	vmov.f32	s13, s17
 8021252:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021256:	ee16 ba90 	vmov	fp, s13
 802125a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802125e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021262:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021266:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802126a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802126e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021272:	ee18 2a10 	vmov	r2, s16
 8021276:	eeb0 8a47 	vmov.f32	s16, s14
 802127a:	fb92 f3f3 	sdiv	r3, r2, r3
 802127e:	ee18 2a90 	vmov	r2, s17
 8021282:	9335      	str	r3, [sp, #212]	; 0xd4
 8021284:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021286:	eef0 8a67 	vmov.f32	s17, s15
 802128a:	fb92 f3f3 	sdiv	r3, r2, r3
 802128e:	9336      	str	r3, [sp, #216]	; 0xd8
 8021290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021292:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021294:	3b01      	subs	r3, #1
 8021296:	930e      	str	r3, [sp, #56]	; 0x38
 8021298:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802129a:	bf08      	it	eq
 802129c:	4613      	moveq	r3, r2
 802129e:	9307      	str	r3, [sp, #28]
 80212a0:	e6c1      	b.n	8021026 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80212a2:	1c45      	adds	r5, r0, #1
 80212a4:	d1a9      	bne.n	80211fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80212a6:	9c08      	ldr	r4, [sp, #32]
 80212a8:	42a0      	cmp	r0, r4
 80212aa:	daa6      	bge.n	80211fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80212ac:	1c4c      	adds	r4, r1, #1
 80212ae:	dba4      	blt.n	80211fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80212b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80212b2:	428c      	cmp	r4, r1
 80212b4:	dda1      	ble.n	80211fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80212b6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80212b8:	9001      	str	r0, [sp, #4]
 80212ba:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80212bc:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80212c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212c2:	4631      	mov	r1, r6
 80212c4:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80212c8:	9300      	str	r3, [sp, #0]
 80212ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80212cc:	9b08      	ldr	r3, [sp, #32]
 80212ce:	f7ff fd5b 	bl	8020d88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80212d2:	e792      	b.n	80211fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80212d4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80212d8:	9c08      	ldr	r4, [sp, #32]
 80212da:	ea4f 402b 	mov.w	r0, fp, asr #16
 80212de:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80212e2:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80212e6:	fb04 2000 	mla	r0, r4, r0, r2
 80212ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80212ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80212ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80212f2:	4402      	add	r2, r0
 80212f4:	5c25      	ldrb	r5, [r4, r0]
 80212f6:	7894      	ldrb	r4, [r2, #2]
 80212f8:	7850      	ldrb	r0, [r2, #1]
 80212fa:	9411      	str	r4, [sp, #68]	; 0x44
 80212fc:	7954      	ldrb	r4, [r2, #5]
 80212fe:	f892 a003 	ldrb.w	sl, [r2, #3]
 8021302:	f892 9004 	ldrb.w	r9, [r2, #4]
 8021306:	9412      	str	r4, [sp, #72]	; 0x48
 8021308:	b171      	cbz	r1, 8021328 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802130a:	3205      	adds	r2, #5
 802130c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802130e:	1917      	adds	r7, r2, r4
 8021310:	5d12      	ldrb	r2, [r2, r4]
 8021312:	9219      	str	r2, [sp, #100]	; 0x64
 8021314:	787a      	ldrb	r2, [r7, #1]
 8021316:	921b      	str	r2, [sp, #108]	; 0x6c
 8021318:	78ba      	ldrb	r2, [r7, #2]
 802131a:	921d      	str	r2, [sp, #116]	; 0x74
 802131c:	78fa      	ldrb	r2, [r7, #3]
 802131e:	921a      	str	r2, [sp, #104]	; 0x68
 8021320:	793a      	ldrb	r2, [r7, #4]
 8021322:	921c      	str	r2, [sp, #112]	; 0x70
 8021324:	797a      	ldrb	r2, [r7, #5]
 8021326:	921e      	str	r2, [sp, #120]	; 0x78
 8021328:	b29b      	uxth	r3, r3
 802132a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802132c:	b289      	uxth	r1, r1
 802132e:	3603      	adds	r6, #3
 8021330:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021334:	fb03 f201 	mul.w	r2, r3, r1
 8021338:	011b      	lsls	r3, r3, #4
 802133a:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802133e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021342:	1a9b      	subs	r3, r3, r2
 8021344:	b289      	uxth	r1, r1
 8021346:	b29b      	uxth	r3, r3
 8021348:	1a7f      	subs	r7, r7, r1
 802134a:	fb03 fa0a 	mul.w	sl, r3, sl
 802134e:	b2bf      	uxth	r7, r7
 8021350:	fb03 f909 	mul.w	r9, r3, r9
 8021354:	fb07 a505 	mla	r5, r7, r5, sl
 8021358:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 802135c:	fb07 9000 	mla	r0, r7, r0, r9
 8021360:	fb01 5504 	mla	r5, r1, r4, r5
 8021364:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021366:	fb02 5504 	mla	r5, r2, r4, r5
 802136a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802136c:	fb1a fa04 	smulbb	sl, sl, r4
 8021370:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8021374:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8021376:	fb05 a50e 	mla	r5, r5, lr, sl
 802137a:	fb01 0004 	mla	r0, r1, r4, r0
 802137e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021380:	b2ad      	uxth	r5, r5
 8021382:	fb02 0004 	mla	r0, r2, r4, r0
 8021386:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021388:	f105 0a01 	add.w	sl, r5, #1
 802138c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021390:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8021394:	122d      	asrs	r5, r5, #8
 8021396:	f806 5c06 	strb.w	r5, [r6, #-6]
 802139a:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802139e:	fb15 f504 	smulbb	r5, r5, r4
 80213a2:	fb00 500e 	mla	r0, r0, lr, r5
 80213a6:	b280      	uxth	r0, r0
 80213a8:	1c45      	adds	r5, r0, #1
 80213aa:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80213ae:	1200      	asrs	r0, r0, #8
 80213b0:	f806 0c05 	strb.w	r0, [r6, #-5]
 80213b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80213b6:	4343      	muls	r3, r0
 80213b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80213ba:	fb07 3300 	mla	r3, r7, r0, r3
 80213be:	981d      	ldr	r0, [sp, #116]	; 0x74
 80213c0:	fb01 3100 	mla	r1, r1, r0, r3
 80213c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80213c6:	fb02 1203 	mla	r2, r2, r3, r1
 80213ca:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80213ce:	fb11 f104 	smulbb	r1, r1, r4
 80213d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80213d6:	fb02 120e 	mla	r2, r2, lr, r1
 80213da:	b292      	uxth	r2, r2
 80213dc:	1c53      	adds	r3, r2, #1
 80213de:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80213e2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80213e4:	1212      	asrs	r2, r2, #8
 80213e6:	4498      	add	r8, r3
 80213e8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80213ea:	f806 2c04 	strb.w	r2, [r6, #-4]
 80213ee:	449b      	add	fp, r3
 80213f0:	e64d      	b.n	802108e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80213f2:	b021      	add	sp, #132	; 0x84
 80213f4:	ecbd 8b08 	vpop	{d8-d11}
 80213f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080213fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80213fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021400:	b085      	sub	sp, #20
 8021402:	784d      	ldrb	r5, [r1, #1]
 8021404:	788e      	ldrb	r6, [r1, #2]
 8021406:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802140a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 802140e:	9403      	str	r4, [sp, #12]
 8021410:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021414:	780c      	ldrb	r4, [r1, #0]
 8021416:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802141a:	fb07 ce03 	mla	lr, r7, r3, ip
 802141e:	2f00      	cmp	r7, #0
 8021420:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021424:	eb02 0b0e 	add.w	fp, r2, lr
 8021428:	db56      	blt.n	80214d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802142a:	45b9      	cmp	r9, r7
 802142c:	dd54      	ble.n	80214d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802142e:	f1bc 0f00 	cmp.w	ip, #0
 8021432:	db4d      	blt.n	80214d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021434:	4563      	cmp	r3, ip
 8021436:	dd4b      	ble.n	80214d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021438:	f812 200e 	ldrb.w	r2, [r2, lr]
 802143c:	9200      	str	r2, [sp, #0]
 802143e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8021442:	9201      	str	r2, [sp, #4]
 8021444:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021448:	9202      	str	r2, [sp, #8]
 802144a:	f11c 0201 	adds.w	r2, ip, #1
 802144e:	d44a      	bmi.n	80214e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021450:	4293      	cmp	r3, r2
 8021452:	dd48      	ble.n	80214e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021454:	2800      	cmp	r0, #0
 8021456:	d046      	beq.n	80214e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021458:	f89b e003 	ldrb.w	lr, [fp, #3]
 802145c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8021460:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021464:	3701      	adds	r7, #1
 8021466:	d446      	bmi.n	80214f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021468:	45b9      	cmp	r9, r7
 802146a:	dd44      	ble.n	80214f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802146c:	9a03      	ldr	r2, [sp, #12]
 802146e:	2a00      	cmp	r2, #0
 8021470:	d045      	beq.n	80214fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8021472:	f1bc 0f00 	cmp.w	ip, #0
 8021476:	db3a      	blt.n	80214ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021478:	4563      	cmp	r3, ip
 802147a:	dd38      	ble.n	80214ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802147c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021480:	f04f 0903 	mov.w	r9, #3
 8021484:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021488:	fb03 b209 	mla	r2, r3, r9, fp
 802148c:	fb03 b909 	mla	r9, r3, r9, fp
 8021490:	7852      	ldrb	r2, [r2, #1]
 8021492:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021496:	f11c 0c01 	adds.w	ip, ip, #1
 802149a:	d40d      	bmi.n	80214b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802149c:	4563      	cmp	r3, ip
 802149e:	dd0b      	ble.n	80214b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80214a0:	b160      	cbz	r0, 80214bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80214a2:	2603      	movs	r6, #3
 80214a4:	fb13 6406 	smlabb	r4, r3, r6, r6
 80214a8:	fb03 b506 	mla	r5, r3, r6, fp
 80214ac:	fb03 b306 	mla	r3, r3, r6, fp
 80214b0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80214b4:	792d      	ldrb	r5, [r5, #4]
 80214b6:	795e      	ldrb	r6, [r3, #5]
 80214b8:	280f      	cmp	r0, #15
 80214ba:	d802      	bhi.n	80214c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80214bc:	9b03      	ldr	r3, [sp, #12]
 80214be:	2b0f      	cmp	r3, #15
 80214c0:	d922      	bls.n	8021508 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80214c2:	4b2f      	ldr	r3, [pc, #188]	; (8021580 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80214c4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80214c8:	4a2e      	ldr	r2, [pc, #184]	; (8021584 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80214ca:	482f      	ldr	r0, [pc, #188]	; (8021588 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80214cc:	f003 ff96 	bl	80253fc <__assert_func>
 80214d0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80214d4:	9400      	str	r4, [sp, #0]
 80214d6:	e7b8      	b.n	802144a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80214d8:	46b2      	mov	sl, r6
 80214da:	46a8      	mov	r8, r5
 80214dc:	46a6      	mov	lr, r4
 80214de:	9400      	str	r4, [sp, #0]
 80214e0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80214e4:	e7be      	b.n	8021464 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80214e6:	46b2      	mov	sl, r6
 80214e8:	46a8      	mov	r8, r5
 80214ea:	46a6      	mov	lr, r4
 80214ec:	e7ba      	b.n	8021464 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80214ee:	46b1      	mov	r9, r6
 80214f0:	462a      	mov	r2, r5
 80214f2:	4627      	mov	r7, r4
 80214f4:	e7cf      	b.n	8021496 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80214f6:	46b1      	mov	r9, r6
 80214f8:	462a      	mov	r2, r5
 80214fa:	4627      	mov	r7, r4
 80214fc:	e7dc      	b.n	80214b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80214fe:	280f      	cmp	r0, #15
 8021500:	d8df      	bhi.n	80214c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021502:	46b1      	mov	r9, r6
 8021504:	462a      	mov	r2, r5
 8021506:	4627      	mov	r7, r4
 8021508:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 802150c:	b280      	uxth	r0, r0
 802150e:	fb00 f30b 	mul.w	r3, r0, fp
 8021512:	0100      	lsls	r0, r0, #4
 8021514:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8021518:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 802151c:	1ac0      	subs	r0, r0, r3
 802151e:	fa1f fb8b 	uxth.w	fp, fp
 8021522:	b280      	uxth	r0, r0
 8021524:	ebac 0c0b 	sub.w	ip, ip, fp
 8021528:	9003      	str	r0, [sp, #12]
 802152a:	fa1f fc8c 	uxth.w	ip, ip
 802152e:	fb00 fe0e 	mul.w	lr, r0, lr
 8021532:	9800      	ldr	r0, [sp, #0]
 8021534:	fb0c ee00 	mla	lr, ip, r0, lr
 8021538:	9803      	ldr	r0, [sp, #12]
 802153a:	fb00 f808 	mul.w	r8, r0, r8
 802153e:	9801      	ldr	r0, [sp, #4]
 8021540:	fb0b ee07 	mla	lr, fp, r7, lr
 8021544:	fb0c 8800 	mla	r8, ip, r0, r8
 8021548:	fb03 ee04 	mla	lr, r3, r4, lr
 802154c:	fb0b 8202 	mla	r2, fp, r2, r8
 8021550:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021554:	fb03 2505 	mla	r5, r3, r5, r2
 8021558:	9a03      	ldr	r2, [sp, #12]
 802155a:	f881 e000 	strb.w	lr, [r1]
 802155e:	fb02 f00a 	mul.w	r0, r2, sl
 8021562:	9a02      	ldr	r2, [sp, #8]
 8021564:	122d      	asrs	r5, r5, #8
 8021566:	fb0c 0c02 	mla	ip, ip, r2, r0
 802156a:	704d      	strb	r5, [r1, #1]
 802156c:	fb0b c909 	mla	r9, fp, r9, ip
 8021570:	fb03 9606 	mla	r6, r3, r6, r9
 8021574:	1236      	asrs	r6, r6, #8
 8021576:	708e      	strb	r6, [r1, #2]
 8021578:	b005      	add	sp, #20
 802157a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802157e:	bf00      	nop
 8021580:	08029ec7 	.word	0x08029ec7
 8021584:	0802a3be 	.word	0x0802a3be
 8021588:	08029f90 	.word	0x08029f90

0802158c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021590:	ed2d 8b0a 	vpush	{d8-d12}
 8021594:	b09d      	sub	sp, #116	; 0x74
 8021596:	eeb0 aa40 	vmov.f32	s20, s0
 802159a:	eef0 9a60 	vmov.f32	s19, s1
 802159e:	9306      	str	r3, [sp, #24]
 80215a0:	eeb0 9a41 	vmov.f32	s18, s2
 80215a4:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80215a8:	eeb0 8a62 	vmov.f32	s16, s5
 80215ac:	901b      	str	r0, [sp, #108]	; 0x6c
 80215ae:	eef0 8a43 	vmov.f32	s17, s6
 80215b2:	9307      	str	r3, [sp, #28]
 80215b4:	eeb0 ca44 	vmov.f32	s24, s8
 80215b8:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80215bc:	eef0 ba64 	vmov.f32	s23, s9
 80215c0:	eeb0 ba45 	vmov.f32	s22, s10
 80215c4:	9309      	str	r3, [sp, #36]	; 0x24
 80215c6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80215ca:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 80215ce:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80215d0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80215d4:	6850      	ldr	r0, [r2, #4]
 80215d6:	6812      	ldr	r2, [r2, #0]
 80215d8:	fb00 1303 	mla	r3, r0, r3, r1
 80215dc:	9907      	ldr	r1, [sp, #28]
 80215de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80215e2:	18d3      	adds	r3, r2, r3
 80215e4:	2203      	movs	r2, #3
 80215e6:	9308      	str	r3, [sp, #32]
 80215e8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80215ea:	681b      	ldr	r3, [r3, #0]
 80215ec:	930a      	str	r3, [sp, #40]	; 0x28
 80215ee:	f06f 0304 	mvn.w	r3, #4
 80215f2:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 80215f6:	fb11 3302 	smlabb	r3, r1, r2, r3
 80215fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80215fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80215fe:	2b00      	cmp	r3, #0
 8021600:	dc03      	bgt.n	802160a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021604:	2b00      	cmp	r3, #0
 8021606:	f340 8193 	ble.w	8021930 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802160a:	9b06      	ldr	r3, [sp, #24]
 802160c:	2b00      	cmp	r3, #0
 802160e:	f340 80d0 	ble.w	80217b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8021612:	1432      	asrs	r2, r6, #16
 8021614:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021618:	d42f      	bmi.n	802167a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802161a:	1c51      	adds	r1, r2, #1
 802161c:	9807      	ldr	r0, [sp, #28]
 802161e:	4281      	cmp	r1, r0
 8021620:	da2e      	bge.n	8021680 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021622:	2b00      	cmp	r3, #0
 8021624:	db2c      	blt.n	8021680 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021626:	1c59      	adds	r1, r3, #1
 8021628:	9809      	ldr	r0, [sp, #36]	; 0x24
 802162a:	4288      	cmp	r0, r1
 802162c:	dd28      	ble.n	8021680 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802162e:	9b06      	ldr	r3, [sp, #24]
 8021630:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8021632:	3b01      	subs	r3, #1
 8021634:	fb02 6203 	mla	r2, r2, r3, r6
 8021638:	1412      	asrs	r2, r2, #16
 802163a:	d42c      	bmi.n	8021696 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802163c:	3201      	adds	r2, #1
 802163e:	9907      	ldr	r1, [sp, #28]
 8021640:	4291      	cmp	r1, r2
 8021642:	dd28      	ble.n	8021696 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021644:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021646:	fb02 5303 	mla	r3, r2, r3, r5
 802164a:	141b      	asrs	r3, r3, #16
 802164c:	d423      	bmi.n	8021696 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802164e:	3301      	adds	r3, #1
 8021650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021652:	429a      	cmp	r2, r3
 8021654:	dd1f      	ble.n	8021696 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8021656:	9b08      	ldr	r3, [sp, #32]
 8021658:	f8dd e018 	ldr.w	lr, [sp, #24]
 802165c:	f103 0c03 	add.w	ip, r3, #3
 8021660:	f1be 0f00 	cmp.w	lr, #0
 8021664:	f300 80fa 	bgt.w	802185c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021668:	9b06      	ldr	r3, [sp, #24]
 802166a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802166e:	9b08      	ldr	r3, [sp, #32]
 8021670:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021674:	4423      	add	r3, r4
 8021676:	9308      	str	r3, [sp, #32]
 8021678:	e09d      	b.n	80217b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802167a:	1c51      	adds	r1, r2, #1
 802167c:	f040 808e 	bne.w	802179c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021680:	9907      	ldr	r1, [sp, #28]
 8021682:	428a      	cmp	r2, r1
 8021684:	f280 808a 	bge.w	802179c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021688:	1c5f      	adds	r7, r3, #1
 802168a:	f2c0 8087 	blt.w	802179c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802168e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021690:	4293      	cmp	r3, r2
 8021692:	f280 8083 	bge.w	802179c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8021696:	9f06      	ldr	r7, [sp, #24]
 8021698:	f8dd a020 	ldr.w	sl, [sp, #32]
 802169c:	2f00      	cmp	r7, #0
 802169e:	dde3      	ble.n	8021668 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80216a0:	1432      	asrs	r2, r6, #16
 80216a2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80216a6:	ea4f 4325 	mov.w	r3, r5, asr #16
 80216aa:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80216ae:	f100 80bf 	bmi.w	8021830 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80216b2:	1c50      	adds	r0, r2, #1
 80216b4:	9c07      	ldr	r4, [sp, #28]
 80216b6:	4284      	cmp	r4, r0
 80216b8:	f340 80bc 	ble.w	8021834 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80216bc:	2b00      	cmp	r3, #0
 80216be:	f2c0 80b9 	blt.w	8021834 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80216c2:	1c58      	adds	r0, r3, #1
 80216c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80216c6:	4284      	cmp	r4, r0
 80216c8:	f340 80b4 	ble.w	8021834 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80216cc:	9807      	ldr	r0, [sp, #28]
 80216ce:	fb00 2303 	mla	r3, r0, r3, r2
 80216d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80216d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80216d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80216da:	441a      	add	r2, r3
 80216dc:	f810 c003 	ldrb.w	ip, [r0, r3]
 80216e0:	7953      	ldrb	r3, [r2, #5]
 80216e2:	7850      	ldrb	r0, [r2, #1]
 80216e4:	f892 e002 	ldrb.w	lr, [r2, #2]
 80216e8:	f892 9003 	ldrb.w	r9, [r2, #3]
 80216ec:	f892 8004 	ldrb.w	r8, [r2, #4]
 80216f0:	930e      	str	r3, [sp, #56]	; 0x38
 80216f2:	f1bb 0f00 	cmp.w	fp, #0
 80216f6:	d00f      	beq.n	8021718 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 80216f8:	3205      	adds	r2, #5
 80216fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80216fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80216fe:	18d3      	adds	r3, r2, r3
 8021700:	5d12      	ldrb	r2, [r2, r4]
 8021702:	920f      	str	r2, [sp, #60]	; 0x3c
 8021704:	785a      	ldrb	r2, [r3, #1]
 8021706:	9211      	str	r2, [sp, #68]	; 0x44
 8021708:	789a      	ldrb	r2, [r3, #2]
 802170a:	9213      	str	r2, [sp, #76]	; 0x4c
 802170c:	78da      	ldrb	r2, [r3, #3]
 802170e:	9210      	str	r2, [sp, #64]	; 0x40
 8021710:	791a      	ldrb	r2, [r3, #4]
 8021712:	795b      	ldrb	r3, [r3, #5]
 8021714:	9212      	str	r2, [sp, #72]	; 0x48
 8021716:	9314      	str	r3, [sp, #80]	; 0x50
 8021718:	b28b      	uxth	r3, r1
 802171a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802171c:	fa1f f28b 	uxth.w	r2, fp
 8021720:	fb03 fb02 	mul.w	fp, r3, r2
 8021724:	011b      	lsls	r3, r3, #4
 8021726:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802172a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 802172e:	eba3 030b 	sub.w	r3, r3, fp
 8021732:	b292      	uxth	r2, r2
 8021734:	b29b      	uxth	r3, r3
 8021736:	1a89      	subs	r1, r1, r2
 8021738:	fb03 f808 	mul.w	r8, r3, r8
 802173c:	b289      	uxth	r1, r1
 802173e:	fb03 f909 	mul.w	r9, r3, r9
 8021742:	fb01 8800 	mla	r8, r1, r0, r8
 8021746:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021748:	fb01 990c 	mla	r9, r1, ip, r9
 802174c:	fb02 8800 	mla	r8, r2, r0, r8
 8021750:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021752:	fb02 9904 	mla	r9, r2, r4, r9
 8021756:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021758:	fb0b 8800 	mla	r8, fp, r0, r8
 802175c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802175e:	fb0b 9904 	mla	r9, fp, r4, r9
 8021762:	4343      	muls	r3, r0
 8021764:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021768:	ea4f 2929 	mov.w	r9, r9, asr #8
 802176c:	fb01 330e 	mla	r3, r1, lr, r3
 8021770:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021772:	f88a 9000 	strb.w	r9, [sl]
 8021776:	fb02 3201 	mla	r2, r2, r1, r3
 802177a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802177c:	f88a 8001 	strb.w	r8, [sl, #1]
 8021780:	fb0b 2b03 	mla	fp, fp, r3, r2
 8021784:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021788:	f88a b002 	strb.w	fp, [sl, #2]
 802178c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802178e:	f10a 0a03 	add.w	sl, sl, #3
 8021792:	3f01      	subs	r7, #1
 8021794:	441e      	add	r6, r3
 8021796:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021798:	441d      	add	r5, r3
 802179a:	e77f      	b.n	802169c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 802179c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802179e:	441e      	add	r6, r3
 80217a0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80217a2:	441d      	add	r5, r3
 80217a4:	9b06      	ldr	r3, [sp, #24]
 80217a6:	3b01      	subs	r3, #1
 80217a8:	9306      	str	r3, [sp, #24]
 80217aa:	9b08      	ldr	r3, [sp, #32]
 80217ac:	3303      	adds	r3, #3
 80217ae:	9308      	str	r3, [sp, #32]
 80217b0:	e72b      	b.n	802160a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80217b2:	f47f af3c 	bne.w	802162e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80217b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	f340 80b9 	ble.w	8021930 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80217be:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80217c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80217c4:	ee79 9aab 	vadd.f32	s19, s19, s23
 80217c8:	eef0 6a48 	vmov.f32	s13, s16
 80217cc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80217d0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80217d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217d8:	ee16 6a90 	vmov	r6, s13
 80217dc:	eef0 6a68 	vmov.f32	s13, s17
 80217e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217e4:	ee16 5a90 	vmov	r5, s13
 80217e8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80217ec:	ee69 7a27 	vmul.f32	s15, s18, s15
 80217f0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80217f4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80217f8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80217fc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021800:	ee18 2a10 	vmov	r2, s16
 8021804:	eeb0 8a47 	vmov.f32	s16, s14
 8021808:	fb92 f3f3 	sdiv	r3, r2, r3
 802180c:	ee18 2a90 	vmov	r2, s17
 8021810:	9333      	str	r3, [sp, #204]	; 0xcc
 8021812:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021814:	eef0 8a67 	vmov.f32	s17, s15
 8021818:	fb92 f3f3 	sdiv	r3, r2, r3
 802181c:	9334      	str	r3, [sp, #208]	; 0xd0
 802181e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021822:	3b01      	subs	r3, #1
 8021824:	930c      	str	r3, [sp, #48]	; 0x30
 8021826:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021828:	bf08      	it	eq
 802182a:	4613      	moveq	r3, r2
 802182c:	9306      	str	r3, [sp, #24]
 802182e:	e6e5      	b.n	80215fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021830:	1c54      	adds	r4, r2, #1
 8021832:	d1ab      	bne.n	802178c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021834:	9807      	ldr	r0, [sp, #28]
 8021836:	4282      	cmp	r2, r0
 8021838:	daa8      	bge.n	802178c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802183a:	1c58      	adds	r0, r3, #1
 802183c:	dba6      	blt.n	802178c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802183e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021840:	4298      	cmp	r0, r3
 8021842:	dda3      	ble.n	802178c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021844:	9000      	str	r0, [sp, #0]
 8021846:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021848:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802184c:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8021850:	9b07      	ldr	r3, [sp, #28]
 8021852:	4651      	mov	r1, sl
 8021854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021856:	f7ff fdd1 	bl	80213fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802185a:	e797      	b.n	802178c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802185c:	1431      	asrs	r1, r6, #16
 802185e:	9c07      	ldr	r4, [sp, #28]
 8021860:	1428      	asrs	r0, r5, #16
 8021862:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021866:	f3c6 3303 	ubfx	r3, r6, #12, #4
 802186a:	fb04 1000 	mla	r0, r4, r0, r1
 802186e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021870:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021872:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021876:	4401      	add	r1, r0
 8021878:	5c20      	ldrb	r0, [r4, r0]
 802187a:	f891 8002 	ldrb.w	r8, [r1, #2]
 802187e:	900e      	str	r0, [sp, #56]	; 0x38
 8021880:	f891 a003 	ldrb.w	sl, [r1, #3]
 8021884:	7848      	ldrb	r0, [r1, #1]
 8021886:	f891 9004 	ldrb.w	r9, [r1, #4]
 802188a:	f891 b005 	ldrb.w	fp, [r1, #5]
 802188e:	b172      	cbz	r2, 80218ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8021890:	3105      	adds	r1, #5
 8021892:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021894:	190f      	adds	r7, r1, r4
 8021896:	5d09      	ldrb	r1, [r1, r4]
 8021898:	9115      	str	r1, [sp, #84]	; 0x54
 802189a:	7879      	ldrb	r1, [r7, #1]
 802189c:	9117      	str	r1, [sp, #92]	; 0x5c
 802189e:	78b9      	ldrb	r1, [r7, #2]
 80218a0:	9119      	str	r1, [sp, #100]	; 0x64
 80218a2:	78f9      	ldrb	r1, [r7, #3]
 80218a4:	9116      	str	r1, [sp, #88]	; 0x58
 80218a6:	7939      	ldrb	r1, [r7, #4]
 80218a8:	9118      	str	r1, [sp, #96]	; 0x60
 80218aa:	7979      	ldrb	r1, [r7, #5]
 80218ac:	911a      	str	r1, [sp, #104]	; 0x68
 80218ae:	b29b      	uxth	r3, r3
 80218b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80218b2:	b292      	uxth	r2, r2
 80218b4:	f10c 0c03 	add.w	ip, ip, #3
 80218b8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80218bc:	fb03 f102 	mul.w	r1, r3, r2
 80218c0:	011b      	lsls	r3, r3, #4
 80218c2:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 80218c6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80218ca:	1a5b      	subs	r3, r3, r1
 80218cc:	b292      	uxth	r2, r2
 80218ce:	b29b      	uxth	r3, r3
 80218d0:	1abf      	subs	r7, r7, r2
 80218d2:	fb03 f909 	mul.w	r9, r3, r9
 80218d6:	b2bf      	uxth	r7, r7
 80218d8:	fb03 fa0a 	mul.w	sl, r3, sl
 80218dc:	fb03 f30b 	mul.w	r3, r3, fp
 80218e0:	fb07 9900 	mla	r9, r7, r0, r9
 80218e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80218e6:	fb07 aa04 	mla	sl, r7, r4, sl
 80218ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80218ec:	fb02 9900 	mla	r9, r2, r0, r9
 80218f0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80218f2:	fb07 3308 	mla	r3, r7, r8, r3
 80218f6:	fb01 9900 	mla	r9, r1, r0, r9
 80218fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80218fc:	fb02 aa04 	mla	sl, r2, r4, sl
 8021900:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021902:	fb02 3200 	mla	r2, r2, r0, r3
 8021906:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021908:	fb01 aa04 	mla	sl, r1, r4, sl
 802190c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021910:	fb01 2103 	mla	r1, r1, r3, r2
 8021914:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021916:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802191a:	f80c 9c05 	strb.w	r9, [ip, #-5]
 802191e:	1209      	asrs	r1, r1, #8
 8021920:	441e      	add	r6, r3
 8021922:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021924:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021928:	f80c 1c04 	strb.w	r1, [ip, #-4]
 802192c:	441d      	add	r5, r3
 802192e:	e697      	b.n	8021660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021930:	b01d      	add	sp, #116	; 0x74
 8021932:	ecbd 8b0a 	vpop	{d8-d12}
 8021936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802193c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 802193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021940:	b085      	sub	sp, #20
 8021942:	7888      	ldrb	r0, [r1, #2]
 8021944:	4691      	mov	r9, r2
 8021946:	9000      	str	r0, [sp, #0]
 8021948:	7848      	ldrb	r0, [r1, #1]
 802194a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802194e:	9001      	str	r0, [sp, #4]
 8021950:	7808      	ldrb	r0, [r1, #0]
 8021952:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021956:	9002      	str	r0, [sp, #8]
 8021958:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802195c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021960:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021964:	fb04 c603 	mla	r6, r4, r3, ip
 8021968:	2c00      	cmp	r4, #0
 802196a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802196e:	9a00      	ldr	r2, [sp, #0]
 8021970:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021974:	9a01      	ldr	r2, [sp, #4]
 8021976:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802197a:	db3a      	blt.n	80219f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 802197c:	45a0      	cmp	r8, r4
 802197e:	dd38      	ble.n	80219f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8021980:	f1bc 0f00 	cmp.w	ip, #0
 8021984:	db33      	blt.n	80219ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8021986:	4563      	cmp	r3, ip
 8021988:	dd31      	ble.n	80219ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 802198a:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802198e:	f11c 0601 	adds.w	r6, ip, #1
 8021992:	d431      	bmi.n	80219f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021994:	42b3      	cmp	r3, r6
 8021996:	dd2f      	ble.n	80219f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8021998:	b375      	cbz	r5, 80219f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 802199a:	f8de 6004 	ldr.w	r6, [lr, #4]
 802199e:	3401      	adds	r4, #1
 80219a0:	d42e      	bmi.n	8021a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80219a2:	45a0      	cmp	r8, r4
 80219a4:	dd2c      	ble.n	8021a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80219a6:	b35f      	cbz	r7, 8021a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80219a8:	f1bc 0f00 	cmp.w	ip, #0
 80219ac:	db26      	blt.n	80219fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80219ae:	4563      	cmp	r3, ip
 80219b0:	dd24      	ble.n	80219fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80219b2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80219b6:	f11c 0c01 	adds.w	ip, ip, #1
 80219ba:	d405      	bmi.n	80219c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80219bc:	4563      	cmp	r3, ip
 80219be:	dd03      	ble.n	80219c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80219c0:	b115      	cbz	r5, 80219c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80219c2:	3301      	adds	r3, #1
 80219c4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80219c8:	2d0f      	cmp	r5, #15
 80219ca:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80219ce:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80219d2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80219d6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80219da:	d801      	bhi.n	80219e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 80219dc:	2f0f      	cmp	r7, #15
 80219de:	d911      	bls.n	8021a04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 80219e0:	4b80      	ldr	r3, [pc, #512]	; (8021be4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80219e2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80219e6:	4a80      	ldr	r2, [pc, #512]	; (8021be8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80219e8:	4880      	ldr	r0, [pc, #512]	; (8021bec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 80219ea:	f003 fd07 	bl	80253fc <__assert_func>
 80219ee:	4602      	mov	r2, r0
 80219f0:	e7cd      	b.n	802198e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80219f2:	4606      	mov	r6, r0
 80219f4:	4602      	mov	r2, r0
 80219f6:	e7d2      	b.n	802199e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80219f8:	4606      	mov	r6, r0
 80219fa:	e7d0      	b.n	802199e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 80219fc:	4604      	mov	r4, r0
 80219fe:	e7da      	b.n	80219b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8021a00:	4604      	mov	r4, r0
 8021a02:	e7e1      	b.n	80219c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021a04:	b2ab      	uxth	r3, r5
 8021a06:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021a0a:	b2bf      	uxth	r7, r7
 8021a0c:	fb03 fe07 	mul.w	lr, r3, r7
 8021a10:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021a14:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021a18:	eba3 0c0e 	sub.w	ip, r3, lr
 8021a1c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021a20:	b2bf      	uxth	r7, r7
 8021a22:	fa1f fc8c 	uxth.w	ip, ip
 8021a26:	eba5 0507 	sub.w	r5, r5, r7
 8021a2a:	fb0c f30a 	mul.w	r3, ip, sl
 8021a2e:	b2ad      	uxth	r5, r5
 8021a30:	fb05 330b 	mla	r3, r5, fp, r3
 8021a34:	fb07 3309 	mla	r3, r7, r9, r3
 8021a38:	fb0e 3308 	mla	r3, lr, r8, r3
 8021a3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021a40:	9303      	str	r3, [sp, #12]
 8021a42:	d018      	beq.n	8021a76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8021a44:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021a48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021a4c:	fb0b f303 	mul.w	r3, fp, r3
 8021a50:	fb0b fb02 	mul.w	fp, fp, r2
 8021a54:	0a1a      	lsrs	r2, r3, #8
 8021a56:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021a5a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021a5e:	441a      	add	r2, r3
 8021a60:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021a64:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021a68:	0a12      	lsrs	r2, r2, #8
 8021a6a:	0a1b      	lsrs	r3, r3, #8
 8021a6c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021a70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a74:	431a      	orrs	r2, r3
 8021a76:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021a7a:	d019      	beq.n	8021ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8021a7c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021a80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a84:	fb0a fb0b 	mul.w	fp, sl, fp
 8021a88:	fb0a fa06 	mul.w	sl, sl, r6
 8021a8c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021a90:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021a94:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021a98:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a9c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021aa0:	445e      	add	r6, fp
 8021aa2:	0a1b      	lsrs	r3, r3, #8
 8021aa4:	0a36      	lsrs	r6, r6, #8
 8021aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021aaa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021aae:	431e      	orrs	r6, r3
 8021ab0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ab4:	d019      	beq.n	8021aea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021ab6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021aba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021abe:	fb09 fa0a 	mul.w	sl, r9, sl
 8021ac2:	fb09 f904 	mul.w	r9, r9, r4
 8021ac6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021aca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021ace:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021ad2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ad6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021ada:	4454      	add	r4, sl
 8021adc:	0a1b      	lsrs	r3, r3, #8
 8021ade:	0a24      	lsrs	r4, r4, #8
 8021ae0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ae4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ae8:	431c      	orrs	r4, r3
 8021aea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021aee:	d019      	beq.n	8021b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8021af0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021af4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021af8:	fb08 f909 	mul.w	r9, r8, r9
 8021afc:	fb08 f800 	mul.w	r8, r8, r0
 8021b00:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021b04:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021b08:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021b0c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021b10:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021b14:	4448      	add	r0, r9
 8021b16:	0a1b      	lsrs	r3, r3, #8
 8021b18:	0a00      	lsrs	r0, r0, #8
 8021b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021b1e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021b22:	4318      	orrs	r0, r3
 8021b24:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021b28:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b2c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021b30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021b34:	fb0c f808 	mul.w	r8, ip, r8
 8021b38:	fb0c f606 	mul.w	r6, ip, r6
 8021b3c:	fb05 8803 	mla	r8, r5, r3, r8
 8021b40:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021b44:	fb05 6202 	mla	r2, r5, r2, r6
 8021b48:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021b4c:	fb07 8803 	mla	r8, r7, r3, r8
 8021b50:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021b54:	fb07 2704 	mla	r7, r7, r4, r2
 8021b58:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021b5c:	fb0e 8303 	mla	r3, lr, r3, r8
 8021b60:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8021b64:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021b68:	9803      	ldr	r0, [sp, #12]
 8021b6a:	b292      	uxth	r2, r2
 8021b6c:	9c02      	ldr	r4, [sp, #8]
 8021b6e:	0a1b      	lsrs	r3, r3, #8
 8021b70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b74:	4350      	muls	r0, r2
 8021b76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021b7a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021b7e:	ea43 0e0e 	orr.w	lr, r3, lr
 8021b82:	1c43      	adds	r3, r0, #1
 8021b84:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021b88:	fa5f f08e 	uxtb.w	r0, lr
 8021b8c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021b90:	b2db      	uxtb	r3, r3
 8021b92:	fb14 f403 	smulbb	r4, r4, r3
 8021b96:	fb00 4002 	mla	r0, r0, r2, r4
 8021b9a:	b280      	uxth	r0, r0
 8021b9c:	1c44      	adds	r4, r0, #1
 8021b9e:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021ba2:	9c01      	ldr	r4, [sp, #4]
 8021ba4:	fb14 f403 	smulbb	r4, r4, r3
 8021ba8:	1200      	asrs	r0, r0, #8
 8021baa:	7008      	strb	r0, [r1, #0]
 8021bac:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8021bb0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021bb4:	fb00 4002 	mla	r0, r0, r2, r4
 8021bb8:	b280      	uxth	r0, r0
 8021bba:	1c44      	adds	r4, r0, #1
 8021bbc:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021bc0:	1200      	asrs	r0, r0, #8
 8021bc2:	7048      	strb	r0, [r1, #1]
 8021bc4:	9800      	ldr	r0, [sp, #0]
 8021bc6:	fb10 f303 	smulbb	r3, r0, r3
 8021bca:	fb0e 3202 	mla	r2, lr, r2, r3
 8021bce:	b292      	uxth	r2, r2
 8021bd0:	f102 0e01 	add.w	lr, r2, #1
 8021bd4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021bd8:	1212      	asrs	r2, r2, #8
 8021bda:	708a      	strb	r2, [r1, #2]
 8021bdc:	b005      	add	sp, #20
 8021bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021be2:	bf00      	nop
 8021be4:	08029ec7 	.word	0x08029ec7
 8021be8:	0802a3be 	.word	0x0802a3be
 8021bec:	08029f90 	.word	0x08029f90

08021bf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bf4:	ed2d 8b08 	vpush	{d8-d11}
 8021bf8:	b099      	sub	sp, #100	; 0x64
 8021bfa:	eeb0 aa40 	vmov.f32	s20, s0
 8021bfe:	eef0 9a60 	vmov.f32	s19, s1
 8021c02:	9306      	str	r3, [sp, #24]
 8021c04:	eeb0 9a41 	vmov.f32	s18, s2
 8021c08:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8021c0c:	eeb0 8a62 	vmov.f32	s16, s5
 8021c10:	9216      	str	r2, [sp, #88]	; 0x58
 8021c12:	eef0 8a43 	vmov.f32	s17, s6
 8021c16:	9307      	str	r3, [sp, #28]
 8021c18:	eef0 ba44 	vmov.f32	s23, s8
 8021c1c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8021c20:	eeb0 ba64 	vmov.f32	s22, s9
 8021c24:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021c26:	eef0 aa45 	vmov.f32	s21, s10
 8021c2a:	9310      	str	r3, [sp, #64]	; 0x40
 8021c2c:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8021c30:	9017      	str	r0, [sp, #92]	; 0x5c
 8021c32:	9112      	str	r1, [sp, #72]	; 0x48
 8021c34:	6850      	ldr	r0, [r2, #4]
 8021c36:	9315      	str	r3, [sp, #84]	; 0x54
 8021c38:	6812      	ldr	r2, [r2, #0]
 8021c3a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021c3c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021c40:	fb00 1303 	mla	r3, r0, r3, r1
 8021c44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c48:	18d3      	adds	r3, r2, r3
 8021c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8021c4c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021c4e:	681b      	ldr	r3, [r3, #0]
 8021c50:	9311      	str	r3, [sp, #68]	; 0x44
 8021c52:	9b07      	ldr	r3, [sp, #28]
 8021c54:	009b      	lsls	r3, r3, #2
 8021c56:	930e      	str	r3, [sp, #56]	; 0x38
 8021c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021c5a:	2b00      	cmp	r3, #0
 8021c5c:	dc03      	bgt.n	8021c66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021c5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021c60:	2b00      	cmp	r3, #0
 8021c62:	f340 833b 	ble.w	80222dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021c66:	9b06      	ldr	r3, [sp, #24]
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	f340 8197 	ble.w	8021f9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8021c6e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021c70:	1423      	asrs	r3, r4, #16
 8021c72:	1412      	asrs	r2, r2, #16
 8021c74:	d432      	bmi.n	8021cdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8021c76:	1c51      	adds	r1, r2, #1
 8021c78:	9807      	ldr	r0, [sp, #28]
 8021c7a:	4288      	cmp	r0, r1
 8021c7c:	dd31      	ble.n	8021ce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	db2f      	blt.n	8021ce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021c82:	1c59      	adds	r1, r3, #1
 8021c84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021c86:	4288      	cmp	r0, r1
 8021c88:	dd2b      	ble.n	8021ce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021c8a:	9b06      	ldr	r3, [sp, #24]
 8021c8c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021c8e:	3b01      	subs	r3, #1
 8021c90:	992b      	ldr	r1, [sp, #172]	; 0xac
 8021c92:	fb02 1203 	mla	r2, r2, r3, r1
 8021c96:	1412      	asrs	r2, r2, #16
 8021c98:	d42e      	bmi.n	8021cf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021c9a:	3201      	adds	r2, #1
 8021c9c:	9907      	ldr	r1, [sp, #28]
 8021c9e:	4291      	cmp	r1, r2
 8021ca0:	dd2a      	ble.n	8021cf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021ca2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021ca4:	fb02 4303 	mla	r3, r2, r3, r4
 8021ca8:	141b      	asrs	r3, r3, #16
 8021caa:	d425      	bmi.n	8021cf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021cac:	3301      	adds	r3, #1
 8021cae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021cb0:	429a      	cmp	r2, r3
 8021cb2:	dd21      	ble.n	8021cf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021cb6:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8021cba:	f103 0e03 	add.w	lr, r3, #3
 8021cbe:	9b06      	ldr	r3, [sp, #24]
 8021cc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8021cc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	f300 81d2 	bgt.w	802206e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8021cca:	9b06      	ldr	r3, [sp, #24]
 8021ccc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021cd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021cd6:	4423      	add	r3, r4
 8021cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8021cda:	e161      	b.n	8021fa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8021cdc:	1c51      	adds	r1, r2, #1
 8021cde:	f040 8150 	bne.w	8021f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021ce2:	9907      	ldr	r1, [sp, #28]
 8021ce4:	428a      	cmp	r2, r1
 8021ce6:	f280 814c 	bge.w	8021f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021cea:	1c5a      	adds	r2, r3, #1
 8021cec:	f2c0 8149 	blt.w	8021f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021cf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021cf2:	4293      	cmp	r3, r2
 8021cf4:	f280 8145 	bge.w	8021f82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021cf8:	9b06      	ldr	r3, [sp, #24]
 8021cfa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021cfc:	9314      	str	r3, [sp, #80]	; 0x50
 8021cfe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8021d02:	9313      	str	r3, [sp, #76]	; 0x4c
 8021d04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	dddf      	ble.n	8021cca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8021d0a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021d0c:	1423      	asrs	r3, r4, #16
 8021d0e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021d12:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021d16:	1412      	asrs	r2, r2, #16
 8021d18:	f100 8190 	bmi.w	802203c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8021d1c:	1c55      	adds	r5, r2, #1
 8021d1e:	9f07      	ldr	r7, [sp, #28]
 8021d20:	42af      	cmp	r7, r5
 8021d22:	f340 818d 	ble.w	8022040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	f2c0 818a 	blt.w	8022040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021d2c:	1c5d      	adds	r5, r3, #1
 8021d2e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021d30:	42af      	cmp	r7, r5
 8021d32:	f340 8185 	ble.w	8022040 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021d36:	9d07      	ldr	r5, [sp, #28]
 8021d38:	fb03 2305 	mla	r3, r3, r5, r2
 8021d3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021d3e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021d46:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021d4a:	2800      	cmp	r0, #0
 8021d4c:	f000 8167 	beq.w	802201e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021d50:	686a      	ldr	r2, [r5, #4]
 8021d52:	920b      	str	r2, [sp, #44]	; 0x2c
 8021d54:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021d58:	2900      	cmp	r1, #0
 8021d5a:	f000 8169 	beq.w	8022030 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8021d5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021d60:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021d62:	18aa      	adds	r2, r5, r2
 8021d64:	59ed      	ldr	r5, [r5, r7]
 8021d66:	6852      	ldr	r2, [r2, #4]
 8021d68:	9508      	str	r5, [sp, #32]
 8021d6a:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8021d6e:	0e15      	lsrs	r5, r2, #24
 8021d70:	920c      	str	r2, [sp, #48]	; 0x30
 8021d72:	b280      	uxth	r0, r0
 8021d74:	b289      	uxth	r1, r1
 8021d76:	fb00 fb01 	mul.w	fp, r0, r1
 8021d7a:	0100      	lsls	r0, r0, #4
 8021d7c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8021d80:	eba0 090b 	sub.w	r9, r0, fp
 8021d84:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8021d88:	b289      	uxth	r1, r1
 8021d8a:	fa1f f989 	uxth.w	r9, r9
 8021d8e:	1a52      	subs	r2, r2, r1
 8021d90:	fb09 f008 	mul.w	r0, r9, r8
 8021d94:	b292      	uxth	r2, r2
 8021d96:	fb02 000c 	mla	r0, r2, ip, r0
 8021d9a:	fb01 000a 	mla	r0, r1, sl, r0
 8021d9e:	fb0b 0005 	mla	r0, fp, r5, r0
 8021da2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021da6:	2800      	cmp	r0, #0
 8021da8:	f000 80e0 	beq.w	8021f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021dac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021db0:	d01b      	beq.n	8021dea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8021db2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021db6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021dba:	fb0c fe0e 	mul.w	lr, ip, lr
 8021dbe:	fb0c fc03 	mul.w	ip, ip, r3
 8021dc2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021dc6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021dca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021dce:	4473      	add	r3, lr
 8021dd0:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8021dd4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021dd8:	0a1b      	lsrs	r3, r3, #8
 8021dda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021dde:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021de2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021de6:	ea43 030e 	orr.w	r3, r3, lr
 8021dea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021dee:	d01e      	beq.n	8021e2e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8021df0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021df2:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021df6:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8021dfa:	fb08 fc0c 	mul.w	ip, r8, ip
 8021dfe:	fb08 f80e 	mul.w	r8, r8, lr
 8021e02:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021e06:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021e0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e0e:	44e6      	add	lr, ip
 8021e10:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021e14:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021e18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e1c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021e20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e24:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021e28:	ea4e 0708 	orr.w	r7, lr, r8
 8021e2c:	970b      	str	r7, [sp, #44]	; 0x2c
 8021e2e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021e32:	d01e      	beq.n	8021e72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021e34:	9f08      	ldr	r7, [sp, #32]
 8021e36:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021e3a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021e3e:	fb0a f808 	mul.w	r8, sl, r8
 8021e42:	fb0a fa0c 	mul.w	sl, sl, ip
 8021e46:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021e4a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021e4e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021e52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021e5a:	44c6      	add	lr, r8
 8021e5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021e68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e6c:	ea4e 070a 	orr.w	r7, lr, sl
 8021e70:	9708      	str	r7, [sp, #32]
 8021e72:	2dff      	cmp	r5, #255	; 0xff
 8021e74:	d01d      	beq.n	8021eb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8021e76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021e78:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021e7c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021e80:	fb05 f808 	mul.w	r8, r5, r8
 8021e84:	fb05 f50c 	mul.w	r5, r5, ip
 8021e88:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8021e8c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8021e90:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8021e94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e98:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021e9c:	44c6      	add	lr, r8
 8021e9e:	0a2d      	lsrs	r5, r5, #8
 8021ea0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ea4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021ea8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021eac:	ea4e 0505 	orr.w	r5, lr, r5
 8021eb0:	950c      	str	r5, [sp, #48]	; 0x30
 8021eb2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021eb4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021eb8:	9f08      	ldr	r7, [sp, #32]
 8021eba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021ebe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021ec2:	fb09 f505 	mul.w	r5, r9, r5
 8021ec6:	fb02 550c 	mla	r5, r2, ip, r5
 8021eca:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021ece:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021ed0:	fb01 550c 	mla	r5, r1, ip, r5
 8021ed4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021ed8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021eda:	fb0b 550c 	mla	r5, fp, ip, r5
 8021ede:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021ee2:	fb09 f90c 	mul.w	r9, r9, ip
 8021ee6:	0a2d      	lsrs	r5, r5, #8
 8021ee8:	fb02 9303 	mla	r3, r2, r3, r9
 8021eec:	9a08      	ldr	r2, [sp, #32]
 8021eee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021ef2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8021ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021ef8:	fb01 330e 	mla	r3, r1, lr, r3
 8021efc:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021f00:	fb0b 3b01 	mla	fp, fp, r1, r3
 8021f04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021f06:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021f08:	4343      	muls	r3, r0
 8021f0a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021f0e:	1c58      	adds	r0, r3, #1
 8021f10:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021f14:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021f18:	ea45 050b 	orr.w	r5, r5, fp
 8021f1c:	7833      	ldrb	r3, [r6, #0]
 8021f1e:	b2ea      	uxtb	r2, r5
 8021f20:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021f24:	fb12 f201 	smulbb	r2, r2, r1
 8021f28:	b2c0      	uxtb	r0, r0
 8021f2a:	fb03 2300 	mla	r3, r3, r0, r2
 8021f2e:	b29b      	uxth	r3, r3
 8021f30:	1c5a      	adds	r2, r3, #1
 8021f32:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021f36:	7872      	ldrb	r2, [r6, #1]
 8021f38:	fb12 f200 	smulbb	r2, r2, r0
 8021f3c:	121b      	asrs	r3, r3, #8
 8021f3e:	7033      	strb	r3, [r6, #0]
 8021f40:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021f44:	0c2d      	lsrs	r5, r5, #16
 8021f46:	fb03 2301 	mla	r3, r3, r1, r2
 8021f4a:	b29b      	uxth	r3, r3
 8021f4c:	1c5a      	adds	r2, r3, #1
 8021f4e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021f52:	121b      	asrs	r3, r3, #8
 8021f54:	7073      	strb	r3, [r6, #1]
 8021f56:	78b3      	ldrb	r3, [r6, #2]
 8021f58:	fb13 f000 	smulbb	r0, r3, r0
 8021f5c:	fb05 0501 	mla	r5, r5, r1, r0
 8021f60:	b2ad      	uxth	r5, r5
 8021f62:	1c6b      	adds	r3, r5, #1
 8021f64:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021f68:	122d      	asrs	r5, r5, #8
 8021f6a:	70b5      	strb	r5, [r6, #2]
 8021f6c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021f6e:	3603      	adds	r6, #3
 8021f70:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021f72:	4413      	add	r3, r2
 8021f74:	932b      	str	r3, [sp, #172]	; 0xac
 8021f76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021f78:	441c      	add	r4, r3
 8021f7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021f7c:	3b01      	subs	r3, #1
 8021f7e:	9314      	str	r3, [sp, #80]	; 0x50
 8021f80:	e6c0      	b.n	8021d04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8021f82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021f84:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021f86:	4413      	add	r3, r2
 8021f88:	932b      	str	r3, [sp, #172]	; 0xac
 8021f8a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021f8c:	441c      	add	r4, r3
 8021f8e:	9b06      	ldr	r3, [sp, #24]
 8021f90:	3b01      	subs	r3, #1
 8021f92:	9306      	str	r3, [sp, #24]
 8021f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f96:	3303      	adds	r3, #3
 8021f98:	930a      	str	r3, [sp, #40]	; 0x28
 8021f9a:	e664      	b.n	8021c66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8021f9c:	f47f ae75 	bne.w	8021c8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8021fa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021fa2:	2b00      	cmp	r3, #0
 8021fa4:	f340 819a 	ble.w	80222dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021fac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021fae:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021fb2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021fb6:	eef0 6a48 	vmov.f32	s13, s16
 8021fba:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021fbe:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021fc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021fc6:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8021fca:	eef0 6a68 	vmov.f32	s13, s17
 8021fce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021fd2:	ee16 4a90 	vmov	r4, s13
 8021fd6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021fda:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021fde:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021fe2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021fe6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021fea:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021fee:	ee18 2a10 	vmov	r2, s16
 8021ff2:	eeb0 8a47 	vmov.f32	s16, s14
 8021ff6:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ffa:	ee18 2a90 	vmov	r2, s17
 8021ffe:	932d      	str	r3, [sp, #180]	; 0xb4
 8022000:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022002:	eef0 8a67 	vmov.f32	s17, s15
 8022006:	fb92 f3f3 	sdiv	r3, r2, r3
 802200a:	932e      	str	r3, [sp, #184]	; 0xb8
 802200c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802200e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022010:	3b01      	subs	r3, #1
 8022012:	9312      	str	r3, [sp, #72]	; 0x48
 8022014:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022016:	bf08      	it	eq
 8022018:	4613      	moveq	r3, r2
 802201a:	9306      	str	r3, [sp, #24]
 802201c:	e61c      	b.n	8021c58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802201e:	b151      	cbz	r1, 8022036 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022022:	58aa      	ldr	r2, [r5, r2]
 8022024:	25ff      	movs	r5, #255	; 0xff
 8022026:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802202a:	9208      	str	r2, [sp, #32]
 802202c:	46a8      	mov	r8, r5
 802202e:	e6a0      	b.n	8021d72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022030:	25ff      	movs	r5, #255	; 0xff
 8022032:	46aa      	mov	sl, r5
 8022034:	e69d      	b.n	8021d72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8022036:	25ff      	movs	r5, #255	; 0xff
 8022038:	46aa      	mov	sl, r5
 802203a:	e7f7      	b.n	802202c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 802203c:	1c57      	adds	r7, r2, #1
 802203e:	d195      	bne.n	8021f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022040:	9d07      	ldr	r5, [sp, #28]
 8022042:	4295      	cmp	r5, r2
 8022044:	dd92      	ble.n	8021f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022046:	1c5d      	adds	r5, r3, #1
 8022048:	db90      	blt.n	8021f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802204a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802204c:	429d      	cmp	r5, r3
 802204e:	dd8d      	ble.n	8021f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022050:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022052:	9201      	str	r2, [sp, #4]
 8022054:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022056:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802205a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802205c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802205e:	9300      	str	r3, [sp, #0]
 8022060:	9b07      	ldr	r3, [sp, #28]
 8022062:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8022066:	4631      	mov	r1, r6
 8022068:	f7ff fc68 	bl	802193c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802206c:	e77e      	b.n	8021f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802206e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022070:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022074:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022076:	9d07      	ldr	r5, [sp, #28]
 8022078:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802207c:	1412      	asrs	r2, r2, #16
 802207e:	1423      	asrs	r3, r4, #16
 8022080:	fb05 2303 	mla	r3, r5, r3, r2
 8022084:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022086:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802208e:	0e1e      	lsrs	r6, r3, #24
 8022090:	2900      	cmp	r1, #0
 8022092:	f000 8114 	beq.w	80222be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8022096:	686a      	ldr	r2, [r5, #4]
 8022098:	920d      	str	r2, [sp, #52]	; 0x34
 802209a:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802209e:	2800      	cmp	r0, #0
 80220a0:	f000 8116 	beq.w	80222d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80220a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80220a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80220a8:	18aa      	adds	r2, r5, r2
 80220aa:	59ed      	ldr	r5, [r5, r7]
 80220ac:	6852      	ldr	r2, [r2, #4]
 80220ae:	9509      	str	r5, [sp, #36]	; 0x24
 80220b0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80220b4:	0e15      	lsrs	r5, r2, #24
 80220b6:	920f      	str	r2, [sp, #60]	; 0x3c
 80220b8:	b289      	uxth	r1, r1
 80220ba:	b280      	uxth	r0, r0
 80220bc:	fb01 fa00 	mul.w	sl, r1, r0
 80220c0:	0109      	lsls	r1, r1, #4
 80220c2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80220c6:	eba1 080a 	sub.w	r8, r1, sl
 80220ca:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80220ce:	b280      	uxth	r0, r0
 80220d0:	fa1f f888 	uxth.w	r8, r8
 80220d4:	1a12      	subs	r2, r2, r0
 80220d6:	fb08 f10c 	mul.w	r1, r8, ip
 80220da:	b292      	uxth	r2, r2
 80220dc:	fb02 1106 	mla	r1, r2, r6, r1
 80220e0:	fb00 1109 	mla	r1, r0, r9, r1
 80220e4:	fb0a 1105 	mla	r1, sl, r5, r1
 80220e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80220ec:	2900      	cmp	r1, #0
 80220ee:	f000 80da 	beq.w	80222a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80220f2:	2eff      	cmp	r6, #255	; 0xff
 80220f4:	d016      	beq.n	8022124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80220f6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80220fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80220fe:	4377      	muls	r7, r6
 8022100:	435e      	muls	r6, r3
 8022102:	0a3b      	lsrs	r3, r7, #8
 8022104:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022108:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802210c:	443b      	add	r3, r7
 802210e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022112:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022116:	0a1b      	lsrs	r3, r3, #8
 8022118:	0a3f      	lsrs	r7, r7, #8
 802211a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802211e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022122:	433b      	orrs	r3, r7
 8022124:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022128:	d01d      	beq.n	8022166 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802212a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802212c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802212e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022132:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022136:	fb0c f606 	mul.w	r6, ip, r6
 802213a:	fb0c fc07 	mul.w	ip, ip, r7
 802213e:	0a37      	lsrs	r7, r6, #8
 8022140:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022144:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022148:	4437      	add	r7, r6
 802214a:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802214e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8022152:	0a3f      	lsrs	r7, r7, #8
 8022154:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022158:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802215c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022160:	ea47 060c 	orr.w	r6, r7, ip
 8022164:	960d      	str	r6, [sp, #52]	; 0x34
 8022166:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802216a:	d01d      	beq.n	80221a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 802216c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802216e:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022172:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022176:	fb09 fc0c 	mul.w	ip, r9, ip
 802217a:	fb09 f906 	mul.w	r9, r9, r6
 802217e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022182:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022186:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802218a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802218e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022192:	4467      	add	r7, ip
 8022194:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022198:	0a3f      	lsrs	r7, r7, #8
 802219a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802219e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80221a2:	ea47 0609 	orr.w	r6, r7, r9
 80221a6:	9609      	str	r6, [sp, #36]	; 0x24
 80221a8:	2dff      	cmp	r5, #255	; 0xff
 80221aa:	d01a      	beq.n	80221e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80221ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80221ae:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80221b2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80221b6:	fb05 fc0c 	mul.w	ip, r5, ip
 80221ba:	4375      	muls	r5, r6
 80221bc:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80221c0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80221c4:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80221c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80221cc:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80221d0:	4467      	add	r7, ip
 80221d2:	0a2d      	lsrs	r5, r5, #8
 80221d4:	0a3f      	lsrs	r7, r7, #8
 80221d6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80221da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80221de:	433d      	orrs	r5, r7
 80221e0:	950f      	str	r5, [sp, #60]	; 0x3c
 80221e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80221e4:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80221e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221ec:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80221f0:	fb08 f505 	mul.w	r5, r8, r5
 80221f4:	fb02 5506 	mla	r5, r2, r6, r5
 80221f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80221fa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80221fe:	fb00 5506 	mla	r5, r0, r6, r5
 8022202:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022204:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022208:	fb0a 5506 	mla	r5, sl, r6, r5
 802220c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802220e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022212:	0a2d      	lsrs	r5, r5, #8
 8022214:	fb08 f806 	mul.w	r8, r8, r6
 8022218:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802221c:	fb02 8303 	mla	r3, r2, r3, r8
 8022220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022222:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022228:	fb00 3307 	mla	r3, r0, r7, r3
 802222c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022230:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8022234:	fb01 f30b 	mul.w	r3, r1, fp
 8022238:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802223c:	1c59      	adds	r1, r3, #1
 802223e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022242:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022246:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802224a:	ea45 050c 	orr.w	r5, r5, ip
 802224e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022252:	b2ea      	uxtb	r2, r5
 8022254:	b2c9      	uxtb	r1, r1
 8022256:	fb12 f20b 	smulbb	r2, r2, fp
 802225a:	fb03 2301 	mla	r3, r3, r1, r2
 802225e:	b29b      	uxth	r3, r3
 8022260:	1c5a      	adds	r2, r3, #1
 8022262:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022266:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802226a:	fb12 f201 	smulbb	r2, r2, r1
 802226e:	121b      	asrs	r3, r3, #8
 8022270:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022274:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022278:	0c2d      	lsrs	r5, r5, #16
 802227a:	fb03 230b 	mla	r3, r3, fp, r2
 802227e:	b29b      	uxth	r3, r3
 8022280:	1c5a      	adds	r2, r3, #1
 8022282:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022286:	121b      	asrs	r3, r3, #8
 8022288:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802228c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022290:	fb13 f101 	smulbb	r1, r3, r1
 8022294:	fb05 150b 	mla	r5, r5, fp, r1
 8022298:	b2ad      	uxth	r5, r5
 802229a:	1c69      	adds	r1, r5, #1
 802229c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80222a0:	122d      	asrs	r5, r5, #8
 80222a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80222a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80222a8:	f10e 0e03 	add.w	lr, lr, #3
 80222ac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80222ae:	4413      	add	r3, r2
 80222b0:	932b      	str	r3, [sp, #172]	; 0xac
 80222b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80222b4:	441c      	add	r4, r3
 80222b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80222b8:	3b01      	subs	r3, #1
 80222ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80222bc:	e501      	b.n	8021cc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80222be:	b150      	cbz	r0, 80222d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80222c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80222c2:	58aa      	ldr	r2, [r5, r2]
 80222c4:	25ff      	movs	r5, #255	; 0xff
 80222c6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80222ca:	9209      	str	r2, [sp, #36]	; 0x24
 80222cc:	46ac      	mov	ip, r5
 80222ce:	e6f3      	b.n	80220b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80222d0:	25ff      	movs	r5, #255	; 0xff
 80222d2:	46a9      	mov	r9, r5
 80222d4:	e6f0      	b.n	80220b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80222d6:	25ff      	movs	r5, #255	; 0xff
 80222d8:	46a9      	mov	r9, r5
 80222da:	e7f7      	b.n	80222cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80222dc:	b019      	add	sp, #100	; 0x64
 80222de:	ecbd 8b08 	vpop	{d8-d11}
 80222e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080222e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80222e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222ec:	b085      	sub	sp, #20
 80222ee:	7888      	ldrb	r0, [r1, #2]
 80222f0:	4691      	mov	r9, r2
 80222f2:	9000      	str	r0, [sp, #0]
 80222f4:	7848      	ldrb	r0, [r1, #1]
 80222f6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80222fa:	9001      	str	r0, [sp, #4]
 80222fc:	7808      	ldrb	r0, [r1, #0]
 80222fe:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8022302:	9002      	str	r0, [sp, #8]
 8022304:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022308:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802230c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8022310:	fb04 c603 	mla	r6, r4, r3, ip
 8022314:	2c00      	cmp	r4, #0
 8022316:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802231a:	9a00      	ldr	r2, [sp, #0]
 802231c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022320:	9a01      	ldr	r2, [sp, #4]
 8022322:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8022326:	db3a      	blt.n	802239e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8022328:	45a0      	cmp	r8, r4
 802232a:	dd38      	ble.n	802239e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802232c:	f1bc 0f00 	cmp.w	ip, #0
 8022330:	db33      	blt.n	802239a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8022332:	4563      	cmp	r3, ip
 8022334:	dd31      	ble.n	802239a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8022336:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802233a:	f11c 0601 	adds.w	r6, ip, #1
 802233e:	d431      	bmi.n	80223a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022340:	42b3      	cmp	r3, r6
 8022342:	dd2f      	ble.n	80223a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022344:	b375      	cbz	r5, 80223a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8022346:	f8de 6004 	ldr.w	r6, [lr, #4]
 802234a:	3401      	adds	r4, #1
 802234c:	d42e      	bmi.n	80223ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802234e:	45a0      	cmp	r8, r4
 8022350:	dd2c      	ble.n	80223ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022352:	b35f      	cbz	r7, 80223ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8022354:	f1bc 0f00 	cmp.w	ip, #0
 8022358:	db26      	blt.n	80223a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802235a:	4563      	cmp	r3, ip
 802235c:	dd24      	ble.n	80223a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802235e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8022362:	f11c 0c01 	adds.w	ip, ip, #1
 8022366:	d405      	bmi.n	8022374 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022368:	4563      	cmp	r3, ip
 802236a:	dd03      	ble.n	8022374 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802236c:	b115      	cbz	r5, 8022374 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802236e:	3301      	adds	r3, #1
 8022370:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8022374:	2d0f      	cmp	r5, #15
 8022376:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802237a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802237e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022382:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022386:	d801      	bhi.n	802238c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8022388:	2f0f      	cmp	r7, #15
 802238a:	d911      	bls.n	80223b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 802238c:	4b77      	ldr	r3, [pc, #476]	; (802256c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802238e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022392:	4a77      	ldr	r2, [pc, #476]	; (8022570 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8022394:	4877      	ldr	r0, [pc, #476]	; (8022574 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8022396:	f003 f831 	bl	80253fc <__assert_func>
 802239a:	4602      	mov	r2, r0
 802239c:	e7cd      	b.n	802233a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802239e:	4606      	mov	r6, r0
 80223a0:	4602      	mov	r2, r0
 80223a2:	e7d2      	b.n	802234a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80223a4:	4606      	mov	r6, r0
 80223a6:	e7d0      	b.n	802234a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 80223a8:	4604      	mov	r4, r0
 80223aa:	e7da      	b.n	8022362 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 80223ac:	4604      	mov	r4, r0
 80223ae:	e7e1      	b.n	8022374 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80223b0:	b2ab      	uxth	r3, r5
 80223b2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80223b6:	b2bf      	uxth	r7, r7
 80223b8:	fb03 fe07 	mul.w	lr, r3, r7
 80223bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80223c0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80223c4:	eba3 0c0e 	sub.w	ip, r3, lr
 80223c8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80223cc:	b2bf      	uxth	r7, r7
 80223ce:	fa1f fc8c 	uxth.w	ip, ip
 80223d2:	eba5 0507 	sub.w	r5, r5, r7
 80223d6:	fb0c f30a 	mul.w	r3, ip, sl
 80223da:	b2ad      	uxth	r5, r5
 80223dc:	fb05 330b 	mla	r3, r5, fp, r3
 80223e0:	fb07 3309 	mla	r3, r7, r9, r3
 80223e4:	fb0e 3308 	mla	r3, lr, r8, r3
 80223e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80223ec:	9303      	str	r3, [sp, #12]
 80223ee:	d018      	beq.n	8022422 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80223f0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80223f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80223f8:	fb0b f303 	mul.w	r3, fp, r3
 80223fc:	fb0b fb02 	mul.w	fp, fp, r2
 8022400:	0a1a      	lsrs	r2, r3, #8
 8022402:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8022406:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802240a:	441a      	add	r2, r3
 802240c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8022410:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8022414:	0a12      	lsrs	r2, r2, #8
 8022416:	0a1b      	lsrs	r3, r3, #8
 8022418:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802241c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022420:	431a      	orrs	r2, r3
 8022422:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022426:	d019      	beq.n	802245c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8022428:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802242c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022430:	fb0a fb0b 	mul.w	fp, sl, fp
 8022434:	fb0a fa06 	mul.w	sl, sl, r6
 8022438:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802243c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022440:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8022444:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022448:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802244c:	445e      	add	r6, fp
 802244e:	0a1b      	lsrs	r3, r3, #8
 8022450:	0a36      	lsrs	r6, r6, #8
 8022452:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022456:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802245a:	431e      	orrs	r6, r3
 802245c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022460:	d019      	beq.n	8022496 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8022462:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022466:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802246a:	fb09 fa0a 	mul.w	sl, r9, sl
 802246e:	fb09 f904 	mul.w	r9, r9, r4
 8022472:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022476:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802247a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802247e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022482:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8022486:	4454      	add	r4, sl
 8022488:	0a1b      	lsrs	r3, r3, #8
 802248a:	0a24      	lsrs	r4, r4, #8
 802248c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022490:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022494:	431c      	orrs	r4, r3
 8022496:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802249a:	d019      	beq.n	80224d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 802249c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80224a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80224a4:	fb08 f909 	mul.w	r9, r8, r9
 80224a8:	fb08 f800 	mul.w	r8, r8, r0
 80224ac:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80224b0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80224b4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80224b8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80224bc:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80224c0:	4448      	add	r0, r9
 80224c2:	0a1b      	lsrs	r3, r3, #8
 80224c4:	0a00      	lsrs	r0, r0, #8
 80224c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80224ca:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80224ce:	4318      	orrs	r0, r3
 80224d0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80224d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80224d8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80224dc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80224e0:	fb0c f808 	mul.w	r8, ip, r8
 80224e4:	fb0c f606 	mul.w	r6, ip, r6
 80224e8:	fb05 8803 	mla	r8, r5, r3, r8
 80224ec:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80224f0:	fb05 6202 	mla	r2, r5, r2, r6
 80224f4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80224f8:	fb07 8803 	mla	r8, r7, r3, r8
 80224fc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022500:	fb07 2704 	mla	r7, r7, r4, r2
 8022504:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022508:	fb0e 8303 	mla	r3, lr, r3, r8
 802250c:	fb0e 7e00 	mla	lr, lr, r0, r7
 8022510:	9802      	ldr	r0, [sp, #8]
 8022512:	0a1b      	lsrs	r3, r3, #8
 8022514:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022518:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802251c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022520:	ea43 0e0e 	orr.w	lr, r3, lr
 8022524:	9b03      	ldr	r3, [sp, #12]
 8022526:	43db      	mvns	r3, r3
 8022528:	b2db      	uxtb	r3, r3
 802252a:	4358      	muls	r0, r3
 802252c:	1c42      	adds	r2, r0, #1
 802252e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022532:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022536:	700a      	strb	r2, [r1, #0]
 8022538:	9a01      	ldr	r2, [sp, #4]
 802253a:	435a      	muls	r2, r3
 802253c:	1c50      	adds	r0, r2, #1
 802253e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022542:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022546:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802254a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802254e:	704a      	strb	r2, [r1, #1]
 8022550:	9a00      	ldr	r2, [sp, #0]
 8022552:	435a      	muls	r2, r3
 8022554:	4613      	mov	r3, r2
 8022556:	3201      	adds	r2, #1
 8022558:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802255c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022560:	f881 e002 	strb.w	lr, [r1, #2]
 8022564:	b005      	add	sp, #20
 8022566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802256a:	bf00      	nop
 802256c:	08029ec7 	.word	0x08029ec7
 8022570:	0802a3be 	.word	0x0802a3be
 8022574:	08029f90 	.word	0x08029f90

08022578 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802257c:	ed2d 8b08 	vpush	{d8-d11}
 8022580:	b097      	sub	sp, #92	; 0x5c
 8022582:	eeb0 aa40 	vmov.f32	s20, s0
 8022586:	eef0 9a60 	vmov.f32	s19, s1
 802258a:	9306      	str	r3, [sp, #24]
 802258c:	eeb0 9a41 	vmov.f32	s18, s2
 8022590:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8022594:	eeb0 8a62 	vmov.f32	s16, s5
 8022598:	9214      	str	r2, [sp, #80]	; 0x50
 802259a:	eef0 8a43 	vmov.f32	s17, s6
 802259e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80225a0:	eef0 ba44 	vmov.f32	s23, s8
 80225a4:	9307      	str	r3, [sp, #28]
 80225a6:	eeb0 ba64 	vmov.f32	s22, s9
 80225aa:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80225ae:	eef0 aa45 	vmov.f32	s21, s10
 80225b2:	9015      	str	r0, [sp, #84]	; 0x54
 80225b4:	9112      	str	r1, [sp, #72]	; 0x48
 80225b6:	6850      	ldr	r0, [r2, #4]
 80225b8:	9310      	str	r3, [sp, #64]	; 0x40
 80225ba:	6812      	ldr	r2, [r2, #0]
 80225bc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80225be:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80225c2:	fb00 1303 	mla	r3, r0, r3, r1
 80225c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225ca:	18d3      	adds	r3, r2, r3
 80225cc:	930a      	str	r3, [sp, #40]	; 0x28
 80225ce:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80225d0:	681b      	ldr	r3, [r3, #0]
 80225d2:	9311      	str	r3, [sp, #68]	; 0x44
 80225d4:	9b07      	ldr	r3, [sp, #28]
 80225d6:	009b      	lsls	r3, r3, #2
 80225d8:	930e      	str	r3, [sp, #56]	; 0x38
 80225da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80225dc:	2b00      	cmp	r3, #0
 80225de:	dc03      	bgt.n	80225e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80225e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	f340 832e 	ble.w	8022c44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80225e8:	9b06      	ldr	r3, [sp, #24]
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	f340 8186 	ble.w	80228fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 80225f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80225f2:	1423      	asrs	r3, r4, #16
 80225f4:	1412      	asrs	r2, r2, #16
 80225f6:	d42f      	bmi.n	8022658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80225f8:	1c51      	adds	r1, r2, #1
 80225fa:	9807      	ldr	r0, [sp, #28]
 80225fc:	4288      	cmp	r0, r1
 80225fe:	dd2e      	ble.n	802265e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022600:	2b00      	cmp	r3, #0
 8022602:	db2c      	blt.n	802265e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022604:	1c59      	adds	r1, r3, #1
 8022606:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022608:	4288      	cmp	r0, r1
 802260a:	dd28      	ble.n	802265e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802260c:	9b06      	ldr	r3, [sp, #24]
 802260e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022610:	3b01      	subs	r3, #1
 8022612:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022614:	fb02 1203 	mla	r2, r2, r3, r1
 8022618:	1412      	asrs	r2, r2, #16
 802261a:	d42b      	bmi.n	8022674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802261c:	3201      	adds	r2, #1
 802261e:	9907      	ldr	r1, [sp, #28]
 8022620:	4291      	cmp	r1, r2
 8022622:	dd27      	ble.n	8022674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022624:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022626:	fb02 4303 	mla	r3, r2, r3, r4
 802262a:	141b      	asrs	r3, r3, #16
 802262c:	d422      	bmi.n	8022674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802262e:	3301      	adds	r3, #1
 8022630:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022632:	429a      	cmp	r2, r3
 8022634:	dd1e      	ble.n	8022674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022638:	f8dd b018 	ldr.w	fp, [sp, #24]
 802263c:	1cdd      	adds	r5, r3, #3
 802263e:	f1bb 0f00 	cmp.w	fp, #0
 8022642:	f300 81c4 	bgt.w	80229ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022646:	9b06      	ldr	r3, [sp, #24]
 8022648:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802264c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802264e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022652:	4423      	add	r3, r4
 8022654:	930a      	str	r3, [sp, #40]	; 0x28
 8022656:	e153      	b.n	8022900 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8022658:	1c51      	adds	r1, r2, #1
 802265a:	f040 8142 	bne.w	80228e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802265e:	9907      	ldr	r1, [sp, #28]
 8022660:	428a      	cmp	r2, r1
 8022662:	f280 813e 	bge.w	80228e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022666:	1c5a      	adds	r2, r3, #1
 8022668:	f2c0 813b 	blt.w	80228e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802266c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802266e:	4293      	cmp	r3, r2
 8022670:	f280 8137 	bge.w	80228e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8022674:	9b06      	ldr	r3, [sp, #24]
 8022676:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022678:	9313      	str	r3, [sp, #76]	; 0x4c
 802267a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802267c:	2b00      	cmp	r3, #0
 802267e:	dde2      	ble.n	8022646 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8022680:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022682:	1423      	asrs	r3, r4, #16
 8022684:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022686:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802268a:	1409      	asrs	r1, r1, #16
 802268c:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8022690:	f100 8187 	bmi.w	80229a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8022694:	1c4e      	adds	r6, r1, #1
 8022696:	9f07      	ldr	r7, [sp, #28]
 8022698:	42b7      	cmp	r7, r6
 802269a:	f340 8184 	ble.w	80229a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802269e:	2b00      	cmp	r3, #0
 80226a0:	f2c0 8181 	blt.w	80229a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80226a4:	1c5e      	adds	r6, r3, #1
 80226a6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80226a8:	42b7      	cmp	r7, r6
 80226aa:	f340 817c 	ble.w	80229a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80226ae:	9e07      	ldr	r6, [sp, #28]
 80226b0:	fb03 1306 	mla	r3, r3, r6, r1
 80226b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80226b6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80226ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80226be:	0e1f      	lsrs	r7, r3, #24
 80226c0:	2a00      	cmp	r2, #0
 80226c2:	f000 815c 	beq.w	802297e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80226c6:	6871      	ldr	r1, [r6, #4]
 80226c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80226ca:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80226ce:	2800      	cmp	r0, #0
 80226d0:	f000 815e 	beq.w	8022990 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 80226d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80226d6:	eb06 0c01 	add.w	ip, r6, r1
 80226da:	5876      	ldr	r6, [r6, r1]
 80226dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80226e0:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80226e4:	9608      	str	r6, [sp, #32]
 80226e6:	0e0e      	lsrs	r6, r1, #24
 80226e8:	910c      	str	r1, [sp, #48]	; 0x30
 80226ea:	b292      	uxth	r2, r2
 80226ec:	b280      	uxth	r0, r0
 80226ee:	fb02 fa00 	mul.w	sl, r2, r0
 80226f2:	0112      	lsls	r2, r2, #4
 80226f4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80226f8:	eba2 080a 	sub.w	r8, r2, sl
 80226fc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022700:	b280      	uxth	r0, r0
 8022702:	fa1f f888 	uxth.w	r8, r8
 8022706:	1a09      	subs	r1, r1, r0
 8022708:	fb08 f20e 	mul.w	r2, r8, lr
 802270c:	b289      	uxth	r1, r1
 802270e:	fb01 2207 	mla	r2, r1, r7, r2
 8022712:	fb00 2209 	mla	r2, r0, r9, r2
 8022716:	fb0a 2206 	mla	r2, sl, r6, r2
 802271a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802271e:	2a00      	cmp	r2, #0
 8022720:	f000 80d4 	beq.w	80228cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022724:	2fff      	cmp	r7, #255	; 0xff
 8022726:	d01a      	beq.n	802275e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8022728:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802272c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022730:	fb07 fc0c 	mul.w	ip, r7, ip
 8022734:	435f      	muls	r7, r3
 8022736:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802273a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802273e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022742:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022746:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 802274a:	4463      	add	r3, ip
 802274c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022750:	0a1b      	lsrs	r3, r3, #8
 8022752:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022756:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802275a:	ea43 030b 	orr.w	r3, r3, fp
 802275e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022762:	d01e      	beq.n	80227a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022764:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022766:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802276a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802276e:	fb0e fb0b 	mul.w	fp, lr, fp
 8022772:	fb0e fe07 	mul.w	lr, lr, r7
 8022776:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802277a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802277e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022782:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022786:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802278a:	44dc      	add	ip, fp
 802278c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022790:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022794:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022798:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802279c:	ea4c 070e 	orr.w	r7, ip, lr
 80227a0:	970b      	str	r7, [sp, #44]	; 0x2c
 80227a2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80227a6:	d01e      	beq.n	80227e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80227a8:	9f08      	ldr	r7, [sp, #32]
 80227aa:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80227ae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80227b2:	fb09 fe0e 	mul.w	lr, r9, lr
 80227b6:	fb09 f907 	mul.w	r9, r9, r7
 80227ba:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80227be:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80227c2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80227c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80227ca:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80227ce:	44f4      	add	ip, lr
 80227d0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80227d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227d8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80227dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80227e0:	ea4c 0709 	orr.w	r7, ip, r9
 80227e4:	9708      	str	r7, [sp, #32]
 80227e6:	2eff      	cmp	r6, #255	; 0xff
 80227e8:	d01c      	beq.n	8022824 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80227ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80227ec:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80227f0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80227f4:	fb06 fe0e 	mul.w	lr, r6, lr
 80227f8:	437e      	muls	r6, r7
 80227fa:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80227fe:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022802:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022806:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802280a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802280e:	44f4      	add	ip, lr
 8022810:	0a36      	lsrs	r6, r6, #8
 8022812:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022816:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802281a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802281e:	ea4c 0606 	orr.w	r6, ip, r6
 8022822:	960c      	str	r6, [sp, #48]	; 0x30
 8022824:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022826:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802282a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802282e:	2aff      	cmp	r2, #255	; 0xff
 8022830:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022834:	fb08 f606 	mul.w	r6, r8, r6
 8022838:	fb01 6607 	mla	r6, r1, r7, r6
 802283c:	9f08      	ldr	r7, [sp, #32]
 802283e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022842:	fb00 6607 	mla	r6, r0, r7, r6
 8022846:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022848:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802284c:	fb0a 6607 	mla	r6, sl, r7, r6
 8022850:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022852:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022856:	ea4f 2616 	mov.w	r6, r6, lsr #8
 802285a:	fb08 f807 	mul.w	r8, r8, r7
 802285e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022862:	fb01 8303 	mla	r3, r1, r3, r8
 8022866:	9908      	ldr	r1, [sp, #32]
 8022868:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802286c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802286e:	fb00 330c 	mla	r3, r0, ip, r3
 8022872:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022876:	fb0a 3a00 	mla	sl, sl, r0, r3
 802287a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802287e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022882:	ea46 060a 	orr.w	r6, r6, sl
 8022886:	b2f0      	uxtb	r0, r6
 8022888:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802288c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022890:	f000 8084 	beq.w	802299c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8022894:	43d2      	mvns	r2, r2
 8022896:	782b      	ldrb	r3, [r5, #0]
 8022898:	b2d2      	uxtb	r2, r2
 802289a:	fb03 f702 	mul.w	r7, r3, r2
 802289e:	1c7b      	adds	r3, r7, #1
 80228a0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80228a4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80228a8:	702b      	strb	r3, [r5, #0]
 80228aa:	786b      	ldrb	r3, [r5, #1]
 80228ac:	fb03 f002 	mul.w	r0, r3, r2
 80228b0:	1c43      	adds	r3, r0, #1
 80228b2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80228b6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80228ba:	706b      	strb	r3, [r5, #1]
 80228bc:	78ab      	ldrb	r3, [r5, #2]
 80228be:	4353      	muls	r3, r2
 80228c0:	1c5a      	adds	r2, r3, #1
 80228c2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80228c6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80228ca:	70ae      	strb	r6, [r5, #2]
 80228cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80228ce:	3503      	adds	r5, #3
 80228d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80228d2:	4413      	add	r3, r2
 80228d4:	9329      	str	r3, [sp, #164]	; 0xa4
 80228d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228d8:	441c      	add	r4, r3
 80228da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80228dc:	3b01      	subs	r3, #1
 80228de:	9313      	str	r3, [sp, #76]	; 0x4c
 80228e0:	e6cb      	b.n	802267a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80228e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80228e4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80228e6:	4413      	add	r3, r2
 80228e8:	9329      	str	r3, [sp, #164]	; 0xa4
 80228ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228ec:	441c      	add	r4, r3
 80228ee:	9b06      	ldr	r3, [sp, #24]
 80228f0:	3b01      	subs	r3, #1
 80228f2:	9306      	str	r3, [sp, #24]
 80228f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228f6:	3303      	adds	r3, #3
 80228f8:	930a      	str	r3, [sp, #40]	; 0x28
 80228fa:	e675      	b.n	80225e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80228fc:	f47f ae86 	bne.w	802260c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022902:	2b00      	cmp	r3, #0
 8022904:	f340 819e 	ble.w	8022c44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802290c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802290e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022912:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022916:	eef0 6a48 	vmov.f32	s13, s16
 802291a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802291e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022922:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022926:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802292a:	eef0 6a68 	vmov.f32	s13, s17
 802292e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022932:	ee16 4a90 	vmov	r4, s13
 8022936:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802293a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802293e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022942:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022946:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802294a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802294e:	ee18 2a10 	vmov	r2, s16
 8022952:	eeb0 8a47 	vmov.f32	s16, s14
 8022956:	fb92 f3f3 	sdiv	r3, r2, r3
 802295a:	ee18 2a90 	vmov	r2, s17
 802295e:	932b      	str	r3, [sp, #172]	; 0xac
 8022960:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022962:	eef0 8a67 	vmov.f32	s17, s15
 8022966:	fb92 f3f3 	sdiv	r3, r2, r3
 802296a:	932c      	str	r3, [sp, #176]	; 0xb0
 802296c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802296e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022970:	3b01      	subs	r3, #1
 8022972:	9312      	str	r3, [sp, #72]	; 0x48
 8022974:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022976:	bf08      	it	eq
 8022978:	4613      	moveq	r3, r2
 802297a:	9306      	str	r3, [sp, #24]
 802297c:	e62d      	b.n	80225da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 802297e:	b150      	cbz	r0, 8022996 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8022980:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022982:	5871      	ldr	r1, [r6, r1]
 8022984:	26ff      	movs	r6, #255	; 0xff
 8022986:	ea4f 6911 	mov.w	r9, r1, lsr #24
 802298a:	9108      	str	r1, [sp, #32]
 802298c:	46b6      	mov	lr, r6
 802298e:	e6ac      	b.n	80226ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022990:	26ff      	movs	r6, #255	; 0xff
 8022992:	46b1      	mov	r9, r6
 8022994:	e6a9      	b.n	80226ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8022996:	26ff      	movs	r6, #255	; 0xff
 8022998:	46b1      	mov	r9, r6
 802299a:	e7f7      	b.n	802298c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802299c:	7028      	strb	r0, [r5, #0]
 802299e:	7069      	strb	r1, [r5, #1]
 80229a0:	e793      	b.n	80228ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 80229a2:	1c4f      	adds	r7, r1, #1
 80229a4:	d192      	bne.n	80228cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80229a6:	9e07      	ldr	r6, [sp, #28]
 80229a8:	428e      	cmp	r6, r1
 80229aa:	dd8f      	ble.n	80228cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80229ac:	1c5e      	adds	r6, r3, #1
 80229ae:	db8d      	blt.n	80228cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80229b0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80229b2:	429e      	cmp	r6, r3
 80229b4:	dd8a      	ble.n	80228cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80229b6:	9600      	str	r6, [sp, #0]
 80229b8:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80229bc:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80229c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80229c2:	4629      	mov	r1, r5
 80229c4:	9b07      	ldr	r3, [sp, #28]
 80229c6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80229c8:	f7ff fc8e 	bl	80222e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80229cc:	e77e      	b.n	80228cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80229ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80229d0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80229d4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80229d6:	9e07      	ldr	r6, [sp, #28]
 80229d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80229dc:	1409      	asrs	r1, r1, #16
 80229de:	1423      	asrs	r3, r4, #16
 80229e0:	fb06 1303 	mla	r3, r6, r3, r1
 80229e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80229e6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80229ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80229ee:	0e1f      	lsrs	r7, r3, #24
 80229f0:	2a00      	cmp	r2, #0
 80229f2:	f000 8113 	beq.w	8022c1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 80229f6:	6871      	ldr	r1, [r6, #4]
 80229f8:	910d      	str	r1, [sp, #52]	; 0x34
 80229fa:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80229fe:	2800      	cmp	r0, #0
 8022a00:	f000 8115 	beq.w	8022c2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022a04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022a06:	eb06 0c01 	add.w	ip, r6, r1
 8022a0a:	5876      	ldr	r6, [r6, r1]
 8022a0c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022a10:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022a14:	9609      	str	r6, [sp, #36]	; 0x24
 8022a16:	0e0e      	lsrs	r6, r1, #24
 8022a18:	910f      	str	r1, [sp, #60]	; 0x3c
 8022a1a:	b292      	uxth	r2, r2
 8022a1c:	b280      	uxth	r0, r0
 8022a1e:	fb02 fa00 	mul.w	sl, r2, r0
 8022a22:	0112      	lsls	r2, r2, #4
 8022a24:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022a28:	eba2 080a 	sub.w	r8, r2, sl
 8022a2c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022a30:	b280      	uxth	r0, r0
 8022a32:	fa1f f888 	uxth.w	r8, r8
 8022a36:	1a09      	subs	r1, r1, r0
 8022a38:	fb08 f20e 	mul.w	r2, r8, lr
 8022a3c:	b289      	uxth	r1, r1
 8022a3e:	fb01 2207 	mla	r2, r1, r7, r2
 8022a42:	fb00 2209 	mla	r2, r0, r9, r2
 8022a46:	fb0a 2206 	mla	r2, sl, r6, r2
 8022a4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022a4e:	2a00      	cmp	r2, #0
 8022a50:	f000 80da 	beq.w	8022c08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8022a54:	2fff      	cmp	r7, #255	; 0xff
 8022a56:	d01a      	beq.n	8022a8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8022a58:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022a5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a60:	fb07 fc0c 	mul.w	ip, r7, ip
 8022a64:	435f      	muls	r7, r3
 8022a66:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022a6a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022a6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a72:	4463      	add	r3, ip
 8022a74:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8022a78:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8022a7c:	0a1b      	lsrs	r3, r3, #8
 8022a7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a86:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022a8a:	ea43 030c 	orr.w	r3, r3, ip
 8022a8e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022a92:	d021      	beq.n	8022ad8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8022a94:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022a96:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022a9a:	fb0e f707 	mul.w	r7, lr, r7
 8022a9e:	9713      	str	r7, [sp, #76]	; 0x4c
 8022aa0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022aa2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022aa6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022aa8:	fb0e fe0c 	mul.w	lr, lr, ip
 8022aac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022ab0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022ab4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ab8:	44bc      	add	ip, r7
 8022aba:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022abe:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022ac2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ac6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022aca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ace:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022ad2:	ea4c 070e 	orr.w	r7, ip, lr
 8022ad6:	970d      	str	r7, [sp, #52]	; 0x34
 8022ad8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022adc:	d01e      	beq.n	8022b1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8022ade:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022ae0:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022ae4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022ae8:	fb09 fe0e 	mul.w	lr, r9, lr
 8022aec:	fb09 f907 	mul.w	r9, r9, r7
 8022af0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022af4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022af8:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022afc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b00:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022b04:	44f4      	add	ip, lr
 8022b06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022b0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b0e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022b12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b16:	ea4c 0709 	orr.w	r7, ip, r9
 8022b1a:	9709      	str	r7, [sp, #36]	; 0x24
 8022b1c:	2eff      	cmp	r6, #255	; 0xff
 8022b1e:	d01c      	beq.n	8022b5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8022b20:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022b22:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022b26:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022b2a:	fb06 fe0e 	mul.w	lr, r6, lr
 8022b2e:	437e      	muls	r6, r7
 8022b30:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022b34:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022b38:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022b3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b40:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022b44:	44f4      	add	ip, lr
 8022b46:	0a36      	lsrs	r6, r6, #8
 8022b48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b4c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022b50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b54:	ea4c 0606 	orr.w	r6, ip, r6
 8022b58:	960f      	str	r6, [sp, #60]	; 0x3c
 8022b5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022b5c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022b60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b64:	2aff      	cmp	r2, #255	; 0xff
 8022b66:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b6a:	fb08 f606 	mul.w	r6, r8, r6
 8022b6e:	fb01 6607 	mla	r6, r1, r7, r6
 8022b72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022b74:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b78:	fb00 6607 	mla	r6, r0, r7, r6
 8022b7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022b7e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b82:	fb0a 6607 	mla	r6, sl, r7, r6
 8022b86:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022b88:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022b8c:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8022b90:	fb08 f807 	mul.w	r8, r8, r7
 8022b94:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b98:	fb01 8303 	mla	r3, r1, r3, r8
 8022b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022b9e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022ba2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022ba4:	fb00 330c 	mla	r3, r0, ip, r3
 8022ba8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022bac:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8022bb0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022bb4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022bb8:	ea46 060e 	orr.w	r6, r6, lr
 8022bbc:	b2f0      	uxtb	r0, r6
 8022bbe:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8022bc2:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022bc6:	d038      	beq.n	8022c3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022bc8:	43d2      	mvns	r2, r2
 8022bca:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8022bce:	b2d2      	uxtb	r2, r2
 8022bd0:	4357      	muls	r7, r2
 8022bd2:	1c7b      	adds	r3, r7, #1
 8022bd4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022bd8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022bdc:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022be0:	4350      	muls	r0, r2
 8022be2:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022be6:	1c43      	adds	r3, r0, #1
 8022be8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022bec:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022bf0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022bf4:	4353      	muls	r3, r2
 8022bf6:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022bfa:	1c5a      	adds	r2, r3, #1
 8022bfc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022c00:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022c04:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022c08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022c0a:	3503      	adds	r5, #3
 8022c0c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022c0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022c12:	4413      	add	r3, r2
 8022c14:	9329      	str	r3, [sp, #164]	; 0xa4
 8022c16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022c18:	441c      	add	r4, r3
 8022c1a:	e510      	b.n	802263e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8022c1c:	b150      	cbz	r0, 8022c34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8022c1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022c20:	5871      	ldr	r1, [r6, r1]
 8022c22:	26ff      	movs	r6, #255	; 0xff
 8022c24:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022c28:	9109      	str	r1, [sp, #36]	; 0x24
 8022c2a:	46b6      	mov	lr, r6
 8022c2c:	e6f5      	b.n	8022a1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022c2e:	26ff      	movs	r6, #255	; 0xff
 8022c30:	46b1      	mov	r9, r6
 8022c32:	e6f2      	b.n	8022a1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022c34:	26ff      	movs	r6, #255	; 0xff
 8022c36:	46b1      	mov	r9, r6
 8022c38:	e7f7      	b.n	8022c2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8022c3a:	f805 0c03 	strb.w	r0, [r5, #-3]
 8022c3e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022c42:	e7df      	b.n	8022c04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8022c44:	b017      	add	sp, #92	; 0x5c
 8022c46:	ecbd 8b08 	vpop	{d8-d11}
 8022c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022c50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c54:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022c58:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022c5c:	2800      	cmp	r0, #0
 8022c5e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022c62:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022c66:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022c6a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022c6e:	db6b      	blt.n	8022d48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022c70:	4580      	cmp	r8, r0
 8022c72:	dd69      	ble.n	8022d48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022c74:	f1bc 0f00 	cmp.w	ip, #0
 8022c78:	db66      	blt.n	8022d48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022c7a:	45e1      	cmp	r9, ip
 8022c7c:	dd64      	ble.n	8022d48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8022c7e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022c82:	f01e 0f01 	tst.w	lr, #1
 8022c86:	5d16      	ldrb	r6, [r2, r4]
 8022c88:	bf0c      	ite	eq
 8022c8a:	f006 060f 	andeq.w	r6, r6, #15
 8022c8e:	1136      	asrne	r6, r6, #4
 8022c90:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022c94:	b2f6      	uxtb	r6, r6
 8022c96:	f110 0a01 	adds.w	sl, r0, #1
 8022c9a:	d457      	bmi.n	8022d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022c9c:	45d0      	cmp	r8, sl
 8022c9e:	dd55      	ble.n	8022d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022ca0:	f1bc 0f00 	cmp.w	ip, #0
 8022ca4:	db52      	blt.n	8022d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022ca6:	45e1      	cmp	r9, ip
 8022ca8:	dd50      	ble.n	8022d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022caa:	2f00      	cmp	r7, #0
 8022cac:	f000 80ac 	beq.w	8022e08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8022cb0:	f10e 0b01 	add.w	fp, lr, #1
 8022cb4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022cb8:	f01b 0f01 	tst.w	fp, #1
 8022cbc:	5d14      	ldrb	r4, [r2, r4]
 8022cbe:	bf0c      	ite	eq
 8022cc0:	f004 040f 	andeq.w	r4, r4, #15
 8022cc4:	1124      	asrne	r4, r4, #4
 8022cc6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022cca:	b2e4      	uxtb	r4, r4
 8022ccc:	2d00      	cmp	r5, #0
 8022cce:	f000 8096 	beq.w	8022dfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8022cd2:	2800      	cmp	r0, #0
 8022cd4:	f10c 0c01 	add.w	ip, ip, #1
 8022cd8:	db3c      	blt.n	8022d54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022cda:	4580      	cmp	r8, r0
 8022cdc:	dd3a      	ble.n	8022d54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022cde:	f1bc 0f00 	cmp.w	ip, #0
 8022ce2:	db37      	blt.n	8022d54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022ce4:	45e1      	cmp	r9, ip
 8022ce6:	dd35      	ble.n	8022d54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022ce8:	eb03 0b0e 	add.w	fp, r3, lr
 8022cec:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022cf0:	f01b 0f01 	tst.w	fp, #1
 8022cf4:	5c10      	ldrb	r0, [r2, r0]
 8022cf6:	bf0c      	ite	eq
 8022cf8:	f000 000f 	andeq.w	r0, r0, #15
 8022cfc:	1100      	asrne	r0, r0, #4
 8022cfe:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022d02:	b2c0      	uxtb	r0, r0
 8022d04:	f1ba 0f00 	cmp.w	sl, #0
 8022d08:	db26      	blt.n	8022d58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022d0a:	45d0      	cmp	r8, sl
 8022d0c:	dd24      	ble.n	8022d58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022d0e:	f1bc 0f00 	cmp.w	ip, #0
 8022d12:	db21      	blt.n	8022d58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022d14:	45e1      	cmp	r9, ip
 8022d16:	dd1f      	ble.n	8022d58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022d18:	b307      	cbz	r7, 8022d5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8022d1a:	3301      	adds	r3, #1
 8022d1c:	449e      	add	lr, r3
 8022d1e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022d22:	f01e 0f01 	tst.w	lr, #1
 8022d26:	5cd3      	ldrb	r3, [r2, r3]
 8022d28:	bf0c      	ite	eq
 8022d2a:	f003 030f 	andeq.w	r3, r3, #15
 8022d2e:	111b      	asrne	r3, r3, #4
 8022d30:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022d34:	b2db      	uxtb	r3, r3
 8022d36:	2f0f      	cmp	r7, #15
 8022d38:	d911      	bls.n	8022d5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8022d3a:	4b35      	ldr	r3, [pc, #212]	; (8022e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8022d3c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022d40:	4a34      	ldr	r2, [pc, #208]	; (8022e14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8022d42:	4835      	ldr	r0, [pc, #212]	; (8022e18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8022d44:	f002 fb5a 	bl	80253fc <__assert_func>
 8022d48:	2600      	movs	r6, #0
 8022d4a:	e7a4      	b.n	8022c96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8022d4c:	2400      	movs	r4, #0
 8022d4e:	e7bd      	b.n	8022ccc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8022d50:	463c      	mov	r4, r7
 8022d52:	e7be      	b.n	8022cd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8022d54:	2000      	movs	r0, #0
 8022d56:	e7d5      	b.n	8022d04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8022d58:	2300      	movs	r3, #0
 8022d5a:	e7ec      	b.n	8022d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8022d5c:	463b      	mov	r3, r7
 8022d5e:	2d0f      	cmp	r5, #15
 8022d60:	d8eb      	bhi.n	8022d3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022d62:	b2bf      	uxth	r7, r7
 8022d64:	b2ad      	uxth	r5, r5
 8022d66:	fb07 f205 	mul.w	r2, r7, r5
 8022d6a:	013f      	lsls	r7, r7, #4
 8022d6c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022d70:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022d74:	1abf      	subs	r7, r7, r2
 8022d76:	b2ad      	uxth	r5, r5
 8022d78:	b2bf      	uxth	r7, r7
 8022d7a:	ebac 0c05 	sub.w	ip, ip, r5
 8022d7e:	437c      	muls	r4, r7
 8022d80:	fa1f fc8c 	uxth.w	ip, ip
 8022d84:	fb06 440c 	mla	r4, r6, ip, r4
 8022d88:	fb05 4400 	mla	r4, r5, r0, r4
 8022d8c:	fb02 4203 	mla	r2, r2, r3, r4
 8022d90:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022d94:	b38a      	cbz	r2, 8022dfa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8022d96:	4b21      	ldr	r3, [pc, #132]	; (8022e1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8022d98:	681c      	ldr	r4, [r3, #0]
 8022d9a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8022d9e:	b2e5      	uxtb	r5, r4
 8022da0:	4353      	muls	r3, r2
 8022da2:	1c5a      	adds	r2, r3, #1
 8022da4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022da8:	1212      	asrs	r2, r2, #8
 8022daa:	b290      	uxth	r0, r2
 8022dac:	43d2      	mvns	r2, r2
 8022dae:	fb15 f500 	smulbb	r5, r5, r0
 8022db2:	b2d3      	uxtb	r3, r2
 8022db4:	780a      	ldrb	r2, [r1, #0]
 8022db6:	fb02 5203 	mla	r2, r2, r3, r5
 8022dba:	b292      	uxth	r2, r2
 8022dbc:	1c55      	adds	r5, r2, #1
 8022dbe:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022dc2:	784d      	ldrb	r5, [r1, #1]
 8022dc4:	fb15 f503 	smulbb	r5, r5, r3
 8022dc8:	1212      	asrs	r2, r2, #8
 8022dca:	700a      	strb	r2, [r1, #0]
 8022dcc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022dd0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022dd4:	fb02 5200 	mla	r2, r2, r0, r5
 8022dd8:	b292      	uxth	r2, r2
 8022dda:	1c55      	adds	r5, r2, #1
 8022ddc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022de0:	1212      	asrs	r2, r2, #8
 8022de2:	704a      	strb	r2, [r1, #1]
 8022de4:	788a      	ldrb	r2, [r1, #2]
 8022de6:	fb12 f303 	smulbb	r3, r2, r3
 8022dea:	fb04 3300 	mla	r3, r4, r0, r3
 8022dee:	b29b      	uxth	r3, r3
 8022df0:	1c5a      	adds	r2, r3, #1
 8022df2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022df6:	121b      	asrs	r3, r3, #8
 8022df8:	708b      	strb	r3, [r1, #2]
 8022dfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dfe:	2f0f      	cmp	r7, #15
 8022e00:	d89b      	bhi.n	8022d3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8022e02:	462b      	mov	r3, r5
 8022e04:	4628      	mov	r0, r5
 8022e06:	e7ac      	b.n	8022d62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8022e08:	2d00      	cmp	r5, #0
 8022e0a:	d1a1      	bne.n	8022d50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8022e0c:	462c      	mov	r4, r5
 8022e0e:	e7f8      	b.n	8022e02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8022e10:	08029ec7 	.word	0x08029ec7
 8022e14:	0802a3be 	.word	0x0802a3be
 8022e18:	08029f90 	.word	0x08029f90
 8022e1c:	2000c58c 	.word	0x2000c58c

08022e20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e24:	ed2d 8b08 	vpush	{d8-d11}
 8022e28:	b097      	sub	sp, #92	; 0x5c
 8022e2a:	eeb0 aa40 	vmov.f32	s20, s0
 8022e2e:	eef0 9a60 	vmov.f32	s19, s1
 8022e32:	9308      	str	r3, [sp, #32]
 8022e34:	eeb0 9a41 	vmov.f32	s18, s2
 8022e38:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8022e3c:	eeb0 8a62 	vmov.f32	s16, s5
 8022e40:	9214      	str	r2, [sp, #80]	; 0x50
 8022e42:	eef0 8a43 	vmov.f32	s17, s6
 8022e46:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022e48:	eef0 ba44 	vmov.f32	s23, s8
 8022e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8022e4e:	eeb0 ba64 	vmov.f32	s22, s9
 8022e52:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022e56:	eef0 aa45 	vmov.f32	s21, s10
 8022e5a:	9015      	str	r0, [sp, #84]	; 0x54
 8022e5c:	910c      	str	r1, [sp, #48]	; 0x30
 8022e5e:	930e      	str	r3, [sp, #56]	; 0x38
 8022e60:	6850      	ldr	r0, [r2, #4]
 8022e62:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8022e66:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022e6a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8022e6e:	fb00 1803 	mla	r8, r0, r3, r1
 8022e72:	6813      	ldr	r3, [r2, #0]
 8022e74:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022e78:	4498      	add	r8, r3
 8022e7a:	f10b 0301 	add.w	r3, fp, #1
 8022e7e:	f023 0301 	bic.w	r3, r3, #1
 8022e82:	930f      	str	r3, [sp, #60]	; 0x3c
 8022e84:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022e86:	681f      	ldr	r7, [r3, #0]
 8022e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	dc03      	bgt.n	8022e96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022e8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022e90:	2b00      	cmp	r3, #0
 8022e92:	f340 8238 	ble.w	8023306 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8022e96:	9b08      	ldr	r3, [sp, #32]
 8022e98:	2b00      	cmp	r3, #0
 8022e9a:	f340 810c 	ble.w	80230b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8022e9e:	142a      	asrs	r2, r5, #16
 8022ea0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022ea4:	d42c      	bmi.n	8022f00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022ea6:	1c51      	adds	r1, r2, #1
 8022ea8:	458b      	cmp	fp, r1
 8022eaa:	dd2c      	ble.n	8022f06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022eac:	2b00      	cmp	r3, #0
 8022eae:	db2a      	blt.n	8022f06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022eb0:	1c59      	adds	r1, r3, #1
 8022eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022eb4:	4288      	cmp	r0, r1
 8022eb6:	dd26      	ble.n	8022f06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022eb8:	9b08      	ldr	r3, [sp, #32]
 8022eba:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022ebc:	3b01      	subs	r3, #1
 8022ebe:	fb02 5203 	mla	r2, r2, r3, r5
 8022ec2:	1412      	asrs	r2, r2, #16
 8022ec4:	d429      	bmi.n	8022f1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022ec6:	3201      	adds	r2, #1
 8022ec8:	4593      	cmp	fp, r2
 8022eca:	dd26      	ble.n	8022f1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022ecc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022ece:	fb02 6303 	mla	r3, r2, r3, r6
 8022ed2:	141b      	asrs	r3, r3, #16
 8022ed4:	d421      	bmi.n	8022f1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022ed6:	3301      	adds	r3, #1
 8022ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022eda:	429a      	cmp	r2, r3
 8022edc:	dd1d      	ble.n	8022f1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022ede:	f108 0e03 	add.w	lr, r8, #3
 8022ee2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022ee6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022eea:	f1b9 0f00 	cmp.w	r9, #0
 8022eee:	f300 814f 	bgt.w	8023190 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8022ef2:	9b08      	ldr	r3, [sp, #32]
 8022ef4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022ef8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022efc:	44a0      	add	r8, r4
 8022efe:	e0dc      	b.n	80230ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8022f00:	1c51      	adds	r1, r2, #1
 8022f02:	f040 80ce 	bne.w	80230a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022f06:	4593      	cmp	fp, r2
 8022f08:	f340 80cb 	ble.w	80230a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022f0c:	1c5a      	adds	r2, r3, #1
 8022f0e:	f2c0 80c8 	blt.w	80230a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f14:	4293      	cmp	r3, r2
 8022f16:	f280 80c4 	bge.w	80230a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022f1a:	9b08      	ldr	r3, [sp, #32]
 8022f1c:	46c1      	mov	r9, r8
 8022f1e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022f22:	930d      	str	r3, [sp, #52]	; 0x34
 8022f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f26:	2b00      	cmp	r3, #0
 8022f28:	dde3      	ble.n	8022ef2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8022f2a:	1428      	asrs	r0, r5, #16
 8022f2c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022f30:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022f34:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022f38:	f100 8111 	bmi.w	802315e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8022f3c:	f100 0c01 	add.w	ip, r0, #1
 8022f40:	45e3      	cmp	fp, ip
 8022f42:	f340 810e 	ble.w	8023162 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022f46:	2b00      	cmp	r3, #0
 8022f48:	f2c0 810b 	blt.w	8023162 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022f4c:	f103 0c01 	add.w	ip, r3, #1
 8022f50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022f52:	4564      	cmp	r4, ip
 8022f54:	f340 8105 	ble.w	8023162 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022f58:	fb03 030a 	mla	r3, r3, sl, r0
 8022f5c:	0858      	lsrs	r0, r3, #1
 8022f5e:	07dc      	lsls	r4, r3, #31
 8022f60:	5c38      	ldrb	r0, [r7, r0]
 8022f62:	bf54      	ite	pl
 8022f64:	f000 000f 	andpl.w	r0, r0, #15
 8022f68:	1100      	asrmi	r0, r0, #4
 8022f6a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022f6e:	b2c0      	uxtb	r0, r0
 8022f70:	2a00      	cmp	r2, #0
 8022f72:	f000 80e1 	beq.w	8023138 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8022f76:	f103 0e01 	add.w	lr, r3, #1
 8022f7a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022f7e:	f01e 0f01 	tst.w	lr, #1
 8022f82:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022f86:	bf0c      	ite	eq
 8022f88:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022f8c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022f90:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022f94:	fa5f f48c 	uxtb.w	r4, ip
 8022f98:	9410      	str	r4, [sp, #64]	; 0x40
 8022f9a:	b1f9      	cbz	r1, 8022fdc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8022f9c:	4453      	add	r3, sl
 8022f9e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022fa2:	07dc      	lsls	r4, r3, #31
 8022fa4:	f103 0301 	add.w	r3, r3, #1
 8022fa8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022fac:	bf54      	ite	pl
 8022fae:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022fb2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022fb6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022fba:	fa5f f48c 	uxtb.w	r4, ip
 8022fbe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022fc2:	940a      	str	r4, [sp, #40]	; 0x28
 8022fc4:	07dc      	lsls	r4, r3, #31
 8022fc6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022fca:	bf54      	ite	pl
 8022fcc:	f00c 030f 	andpl.w	r3, ip, #15
 8022fd0:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022fd4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022fd8:	b2db      	uxtb	r3, r3
 8022fda:	9311      	str	r3, [sp, #68]	; 0x44
 8022fdc:	b292      	uxth	r2, r2
 8022fde:	b289      	uxth	r1, r1
 8022fe0:	0113      	lsls	r3, r2, #4
 8022fe2:	fb02 fc01 	mul.w	ip, r2, r1
 8022fe6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022fe8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022fec:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8022ff0:	eba3 030c 	sub.w	r3, r3, ip
 8022ff4:	b289      	uxth	r1, r1
 8022ff6:	b29b      	uxth	r3, r3
 8022ff8:	ebae 0e01 	sub.w	lr, lr, r1
 8022ffc:	4353      	muls	r3, r2
 8022ffe:	fa1f fe8e 	uxth.w	lr, lr
 8023002:	fb00 320e 	mla	r2, r0, lr, r3
 8023006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023008:	fb01 2203 	mla	r2, r1, r3, r2
 802300c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802300e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023012:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023016:	2a00      	cmp	r2, #0
 8023018:	d039      	beq.n	802308e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802301a:	4bbd      	ldr	r3, [pc, #756]	; (8023310 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802301c:	6819      	ldr	r1, [r3, #0]
 802301e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023020:	fa5f fc81 	uxtb.w	ip, r1
 8023024:	435a      	muls	r2, r3
 8023026:	1c53      	adds	r3, r2, #1
 8023028:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802302c:	1212      	asrs	r2, r2, #8
 802302e:	b290      	uxth	r0, r2
 8023030:	43d2      	mvns	r2, r2
 8023032:	fb1c fc00 	smulbb	ip, ip, r0
 8023036:	b2d3      	uxtb	r3, r2
 8023038:	f899 2000 	ldrb.w	r2, [r9]
 802303c:	fb02 c203 	mla	r2, r2, r3, ip
 8023040:	b292      	uxth	r2, r2
 8023042:	f102 0c01 	add.w	ip, r2, #1
 8023046:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802304a:	f899 c001 	ldrb.w	ip, [r9, #1]
 802304e:	fb1c fc03 	smulbb	ip, ip, r3
 8023052:	1212      	asrs	r2, r2, #8
 8023054:	f889 2000 	strb.w	r2, [r9]
 8023058:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802305c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023060:	fb02 c200 	mla	r2, r2, r0, ip
 8023064:	b292      	uxth	r2, r2
 8023066:	f102 0c01 	add.w	ip, r2, #1
 802306a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802306e:	1212      	asrs	r2, r2, #8
 8023070:	f889 2001 	strb.w	r2, [r9, #1]
 8023074:	f899 2002 	ldrb.w	r2, [r9, #2]
 8023078:	fb12 f303 	smulbb	r3, r2, r3
 802307c:	fb01 3300 	mla	r3, r1, r0, r3
 8023080:	b29b      	uxth	r3, r3
 8023082:	1c5a      	adds	r2, r3, #1
 8023084:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023088:	121b      	asrs	r3, r3, #8
 802308a:	f889 3002 	strb.w	r3, [r9, #2]
 802308e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023090:	f109 0903 	add.w	r9, r9, #3
 8023094:	441d      	add	r5, r3
 8023096:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023098:	441e      	add	r6, r3
 802309a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802309c:	3b01      	subs	r3, #1
 802309e:	930d      	str	r3, [sp, #52]	; 0x34
 80230a0:	e740      	b.n	8022f24 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80230a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80230a4:	f108 0803 	add.w	r8, r8, #3
 80230a8:	441d      	add	r5, r3
 80230aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80230ac:	441e      	add	r6, r3
 80230ae:	9b08      	ldr	r3, [sp, #32]
 80230b0:	3b01      	subs	r3, #1
 80230b2:	9308      	str	r3, [sp, #32]
 80230b4:	e6ef      	b.n	8022e96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80230b6:	f47f aeff 	bne.w	8022eb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80230ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80230bc:	2b00      	cmp	r3, #0
 80230be:	f340 8122 	ble.w	8023306 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80230c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80230c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80230c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80230cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80230d0:	eef0 6a48 	vmov.f32	s13, s16
 80230d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80230d8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80230dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230e0:	ee16 5a90 	vmov	r5, s13
 80230e4:	eef0 6a68 	vmov.f32	s13, s17
 80230e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230ec:	ee16 6a90 	vmov	r6, s13
 80230f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80230f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80230f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80230fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023100:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023104:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023108:	ee18 2a10 	vmov	r2, s16
 802310c:	eeb0 8a47 	vmov.f32	s16, s14
 8023110:	fb92 f3f3 	sdiv	r3, r2, r3
 8023114:	ee18 2a90 	vmov	r2, s17
 8023118:	932b      	str	r3, [sp, #172]	; 0xac
 802311a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802311c:	eef0 8a67 	vmov.f32	s17, s15
 8023120:	fb92 f3f3 	sdiv	r3, r2, r3
 8023124:	932c      	str	r3, [sp, #176]	; 0xb0
 8023126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023128:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802312a:	3b01      	subs	r3, #1
 802312c:	930c      	str	r3, [sp, #48]	; 0x30
 802312e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023130:	bf08      	it	eq
 8023132:	4613      	moveq	r3, r2
 8023134:	9308      	str	r3, [sp, #32]
 8023136:	e6a7      	b.n	8022e88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023138:	2900      	cmp	r1, #0
 802313a:	f43f af4f 	beq.w	8022fdc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802313e:	4453      	add	r3, sl
 8023140:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023144:	07db      	lsls	r3, r3, #31
 8023146:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802314a:	bf54      	ite	pl
 802314c:	f00c 030f 	andpl.w	r3, ip, #15
 8023150:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023154:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023158:	b2db      	uxtb	r3, r3
 802315a:	930a      	str	r3, [sp, #40]	; 0x28
 802315c:	e73e      	b.n	8022fdc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802315e:	1c44      	adds	r4, r0, #1
 8023160:	d195      	bne.n	802308e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023162:	4583      	cmp	fp, r0
 8023164:	dd93      	ble.n	802308e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023166:	1c5c      	adds	r4, r3, #1
 8023168:	db91      	blt.n	802308e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802316a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802316c:	429c      	cmp	r4, r3
 802316e:	dd8e      	ble.n	802308e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023170:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023172:	9002      	str	r0, [sp, #8]
 8023174:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023176:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802317a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802317c:	463a      	mov	r2, r7
 802317e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023182:	e9cd b300 	strd	fp, r3, [sp]
 8023186:	4649      	mov	r1, r9
 8023188:	4653      	mov	r3, sl
 802318a:	f7ff fd61 	bl	8022c50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802318e:	e77e      	b.n	802308e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023190:	142a      	asrs	r2, r5, #16
 8023192:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023196:	1433      	asrs	r3, r6, #16
 8023198:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802319c:	fb0a 2303 	mla	r3, sl, r3, r2
 80231a0:	085a      	lsrs	r2, r3, #1
 80231a2:	07dc      	lsls	r4, r3, #31
 80231a4:	5cba      	ldrb	r2, [r7, r2]
 80231a6:	bf54      	ite	pl
 80231a8:	f002 020f 	andpl.w	r2, r2, #15
 80231ac:	1112      	asrmi	r2, r2, #4
 80231ae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80231b2:	b2d2      	uxtb	r2, r2
 80231b4:	2900      	cmp	r1, #0
 80231b6:	f000 8093 	beq.w	80232e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80231ba:	1c5c      	adds	r4, r3, #1
 80231bc:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80231c0:	07e4      	lsls	r4, r4, #31
 80231c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80231c6:	bf54      	ite	pl
 80231c8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80231cc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80231d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80231d4:	fa5f f48c 	uxtb.w	r4, ip
 80231d8:	9412      	str	r4, [sp, #72]	; 0x48
 80231da:	b300      	cbz	r0, 802321e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80231dc:	4453      	add	r3, sl
 80231de:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80231e2:	07dc      	lsls	r4, r3, #31
 80231e4:	f103 0301 	add.w	r3, r3, #1
 80231e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80231ec:	bf54      	ite	pl
 80231ee:	f00c 0c0f 	andpl.w	ip, ip, #15
 80231f2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80231f6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80231fa:	fa5f f48c 	uxtb.w	r4, ip
 80231fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023202:	940b      	str	r4, [sp, #44]	; 0x2c
 8023204:	07dc      	lsls	r4, r3, #31
 8023206:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802320a:	bf54      	ite	pl
 802320c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023210:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023214:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023218:	fa5f f38c 	uxtb.w	r3, ip
 802321c:	9313      	str	r3, [sp, #76]	; 0x4c
 802321e:	b289      	uxth	r1, r1
 8023220:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023222:	b280      	uxth	r0, r0
 8023224:	fb01 f300 	mul.w	r3, r1, r0
 8023228:	0109      	lsls	r1, r1, #4
 802322a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802322e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8023232:	1ac9      	subs	r1, r1, r3
 8023234:	b280      	uxth	r0, r0
 8023236:	b289      	uxth	r1, r1
 8023238:	ebac 0c00 	sub.w	ip, ip, r0
 802323c:	4361      	muls	r1, r4
 802323e:	fa1f fc8c 	uxth.w	ip, ip
 8023242:	fb02 120c 	mla	r2, r2, ip, r1
 8023246:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023248:	fb00 2001 	mla	r0, r0, r1, r2
 802324c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802324e:	fb03 0302 	mla	r3, r3, r2, r0
 8023252:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023256:	2b00      	cmp	r3, #0
 8023258:	d039      	beq.n	80232ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 802325a:	4a2d      	ldr	r2, [pc, #180]	; (8023310 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 802325c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023260:	6810      	ldr	r0, [r2, #0]
 8023262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023264:	fa5f fc80 	uxtb.w	ip, r0
 8023268:	4353      	muls	r3, r2
 802326a:	1c5a      	adds	r2, r3, #1
 802326c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023270:	121b      	asrs	r3, r3, #8
 8023272:	b29a      	uxth	r2, r3
 8023274:	43db      	mvns	r3, r3
 8023276:	fb1c fc02 	smulbb	ip, ip, r2
 802327a:	b2db      	uxtb	r3, r3
 802327c:	fb01 c103 	mla	r1, r1, r3, ip
 8023280:	b289      	uxth	r1, r1
 8023282:	f101 0c01 	add.w	ip, r1, #1
 8023286:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802328a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802328e:	fb1c fc03 	smulbb	ip, ip, r3
 8023292:	1209      	asrs	r1, r1, #8
 8023294:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023298:	f3c0 2107 	ubfx	r1, r0, #8, #8
 802329c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80232a0:	fb01 c102 	mla	r1, r1, r2, ip
 80232a4:	b289      	uxth	r1, r1
 80232a6:	f101 0c01 	add.w	ip, r1, #1
 80232aa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80232ae:	1209      	asrs	r1, r1, #8
 80232b0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80232b4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80232b8:	fb11 f303 	smulbb	r3, r1, r3
 80232bc:	fb00 3002 	mla	r0, r0, r2, r3
 80232c0:	b280      	uxth	r0, r0
 80232c2:	1c42      	adds	r2, r0, #1
 80232c4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80232c8:	1200      	asrs	r0, r0, #8
 80232ca:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80232ce:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80232d0:	f10e 0e03 	add.w	lr, lr, #3
 80232d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80232d8:	441d      	add	r5, r3
 80232da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80232dc:	441e      	add	r6, r3
 80232de:	e604      	b.n	8022eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80232e0:	2800      	cmp	r0, #0
 80232e2:	d09c      	beq.n	802321e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80232e4:	4453      	add	r3, sl
 80232e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80232ea:	07db      	lsls	r3, r3, #31
 80232ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80232f0:	bf54      	ite	pl
 80232f2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80232f6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80232fa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80232fe:	fa5f f38c 	uxtb.w	r3, ip
 8023302:	930b      	str	r3, [sp, #44]	; 0x2c
 8023304:	e78b      	b.n	802321e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8023306:	b017      	add	sp, #92	; 0x5c
 8023308:	ecbd 8b08 	vpop	{d8-d11}
 802330c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023310:	2000c58c 	.word	0x2000c58c

08023314 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023318:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802331c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023320:	2800      	cmp	r0, #0
 8023322:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023326:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802332a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802332e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023332:	db6b      	blt.n	802340c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023334:	4580      	cmp	r8, r0
 8023336:	dd69      	ble.n	802340c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023338:	f1bc 0f00 	cmp.w	ip, #0
 802333c:	db66      	blt.n	802340c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802333e:	45e1      	cmp	r9, ip
 8023340:	dd64      	ble.n	802340c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023342:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023346:	f01e 0f01 	tst.w	lr, #1
 802334a:	5d16      	ldrb	r6, [r2, r4]
 802334c:	bf0c      	ite	eq
 802334e:	f006 060f 	andeq.w	r6, r6, #15
 8023352:	1136      	asrne	r6, r6, #4
 8023354:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023358:	b2f6      	uxtb	r6, r6
 802335a:	f110 0a01 	adds.w	sl, r0, #1
 802335e:	d457      	bmi.n	8023410 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023360:	45d0      	cmp	r8, sl
 8023362:	dd55      	ble.n	8023410 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023364:	f1bc 0f00 	cmp.w	ip, #0
 8023368:	db52      	blt.n	8023410 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802336a:	45e1      	cmp	r9, ip
 802336c:	dd50      	ble.n	8023410 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802336e:	2f00      	cmp	r7, #0
 8023370:	f000 80a5 	beq.w	80234be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8023374:	f10e 0b01 	add.w	fp, lr, #1
 8023378:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802337c:	f01b 0f01 	tst.w	fp, #1
 8023380:	5d14      	ldrb	r4, [r2, r4]
 8023382:	bf0c      	ite	eq
 8023384:	f004 040f 	andeq.w	r4, r4, #15
 8023388:	1124      	asrne	r4, r4, #4
 802338a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802338e:	b2e4      	uxtb	r4, r4
 8023390:	2d00      	cmp	r5, #0
 8023392:	f000 808f 	beq.w	80234b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023396:	2800      	cmp	r0, #0
 8023398:	f10c 0c01 	add.w	ip, ip, #1
 802339c:	db3c      	blt.n	8023418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802339e:	4580      	cmp	r8, r0
 80233a0:	dd3a      	ble.n	8023418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80233a2:	f1bc 0f00 	cmp.w	ip, #0
 80233a6:	db37      	blt.n	8023418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80233a8:	45e1      	cmp	r9, ip
 80233aa:	dd35      	ble.n	8023418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80233ac:	eb03 0b0e 	add.w	fp, r3, lr
 80233b0:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80233b4:	f01b 0f01 	tst.w	fp, #1
 80233b8:	5c10      	ldrb	r0, [r2, r0]
 80233ba:	bf0c      	ite	eq
 80233bc:	f000 000f 	andeq.w	r0, r0, #15
 80233c0:	1100      	asrne	r0, r0, #4
 80233c2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80233c6:	b2c0      	uxtb	r0, r0
 80233c8:	f1ba 0f00 	cmp.w	sl, #0
 80233cc:	db26      	blt.n	802341c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80233ce:	45d0      	cmp	r8, sl
 80233d0:	dd24      	ble.n	802341c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80233d2:	f1bc 0f00 	cmp.w	ip, #0
 80233d6:	db21      	blt.n	802341c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80233d8:	45e1      	cmp	r9, ip
 80233da:	dd1f      	ble.n	802341c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80233dc:	b307      	cbz	r7, 8023420 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80233de:	3301      	adds	r3, #1
 80233e0:	449e      	add	lr, r3
 80233e2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80233e6:	f01e 0f01 	tst.w	lr, #1
 80233ea:	5cd3      	ldrb	r3, [r2, r3]
 80233ec:	bf0c      	ite	eq
 80233ee:	f003 030f 	andeq.w	r3, r3, #15
 80233f2:	111b      	asrne	r3, r3, #4
 80233f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80233f8:	b2db      	uxtb	r3, r3
 80233fa:	2f0f      	cmp	r7, #15
 80233fc:	d911      	bls.n	8023422 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80233fe:	4b32      	ldr	r3, [pc, #200]	; (80234c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8023400:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023404:	4a31      	ldr	r2, [pc, #196]	; (80234cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8023406:	4832      	ldr	r0, [pc, #200]	; (80234d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8023408:	f001 fff8 	bl	80253fc <__assert_func>
 802340c:	2600      	movs	r6, #0
 802340e:	e7a4      	b.n	802335a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8023410:	2400      	movs	r4, #0
 8023412:	e7bd      	b.n	8023390 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023414:	463c      	mov	r4, r7
 8023416:	e7be      	b.n	8023396 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8023418:	2000      	movs	r0, #0
 802341a:	e7d5      	b.n	80233c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 802341c:	2300      	movs	r3, #0
 802341e:	e7ec      	b.n	80233fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8023420:	463b      	mov	r3, r7
 8023422:	2d0f      	cmp	r5, #15
 8023424:	d8eb      	bhi.n	80233fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023426:	b2bf      	uxth	r7, r7
 8023428:	b2ad      	uxth	r5, r5
 802342a:	fb07 f205 	mul.w	r2, r7, r5
 802342e:	013f      	lsls	r7, r7, #4
 8023430:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023434:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023438:	1abf      	subs	r7, r7, r2
 802343a:	b2ad      	uxth	r5, r5
 802343c:	b2bf      	uxth	r7, r7
 802343e:	ebac 0c05 	sub.w	ip, ip, r5
 8023442:	437c      	muls	r4, r7
 8023444:	fa1f fc8c 	uxth.w	ip, ip
 8023448:	fb06 440c 	mla	r4, r6, ip, r4
 802344c:	fb05 4400 	mla	r4, r5, r0, r4
 8023450:	fb02 4303 	mla	r3, r2, r3, r4
 8023454:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023458:	b353      	cbz	r3, 80234b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 802345a:	4a1e      	ldr	r2, [pc, #120]	; (80234d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 802345c:	7808      	ldrb	r0, [r1, #0]
 802345e:	6814      	ldr	r4, [r2, #0]
 8023460:	b29a      	uxth	r2, r3
 8023462:	43db      	mvns	r3, r3
 8023464:	b2e5      	uxtb	r5, r4
 8023466:	b2db      	uxtb	r3, r3
 8023468:	fb15 f502 	smulbb	r5, r5, r2
 802346c:	fb00 5003 	mla	r0, r0, r3, r5
 8023470:	b280      	uxth	r0, r0
 8023472:	1c45      	adds	r5, r0, #1
 8023474:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023478:	784d      	ldrb	r5, [r1, #1]
 802347a:	fb15 f503 	smulbb	r5, r5, r3
 802347e:	1200      	asrs	r0, r0, #8
 8023480:	7008      	strb	r0, [r1, #0]
 8023482:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023486:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802348a:	fb00 5002 	mla	r0, r0, r2, r5
 802348e:	b280      	uxth	r0, r0
 8023490:	1c45      	adds	r5, r0, #1
 8023492:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023496:	1200      	asrs	r0, r0, #8
 8023498:	7048      	strb	r0, [r1, #1]
 802349a:	7888      	ldrb	r0, [r1, #2]
 802349c:	fb10 f303 	smulbb	r3, r0, r3
 80234a0:	fb04 3202 	mla	r2, r4, r2, r3
 80234a4:	b292      	uxth	r2, r2
 80234a6:	1c53      	adds	r3, r2, #1
 80234a8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80234ac:	1212      	asrs	r2, r2, #8
 80234ae:	708a      	strb	r2, [r1, #2]
 80234b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234b4:	2f0f      	cmp	r7, #15
 80234b6:	d8a2      	bhi.n	80233fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80234b8:	462b      	mov	r3, r5
 80234ba:	4628      	mov	r0, r5
 80234bc:	e7b3      	b.n	8023426 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80234be:	2d00      	cmp	r5, #0
 80234c0:	d1a8      	bne.n	8023414 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80234c2:	462c      	mov	r4, r5
 80234c4:	e7f8      	b.n	80234b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80234c6:	bf00      	nop
 80234c8:	08029ec7 	.word	0x08029ec7
 80234cc:	0802a3be 	.word	0x0802a3be
 80234d0:	08029f90 	.word	0x08029f90
 80234d4:	2000c58c 	.word	0x2000c58c

080234d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80234d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234dc:	ed2d 8b08 	vpush	{d8-d11}
 80234e0:	b095      	sub	sp, #84	; 0x54
 80234e2:	461c      	mov	r4, r3
 80234e4:	eeb0 aa40 	vmov.f32	s20, s0
 80234e8:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 80234ec:	eef0 9a60 	vmov.f32	s19, s1
 80234f0:	920e      	str	r2, [sp, #56]	; 0x38
 80234f2:	eeb0 9a41 	vmov.f32	s18, s2
 80234f6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80234f8:	eeb0 8a62 	vmov.f32	s16, s5
 80234fc:	9307      	str	r3, [sp, #28]
 80234fe:	eef0 8a43 	vmov.f32	s17, s6
 8023502:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8023506:	eef0 ba44 	vmov.f32	s23, s8
 802350a:	9013      	str	r0, [sp, #76]	; 0x4c
 802350c:	eeb0 ba64 	vmov.f32	s22, s9
 8023510:	9109      	str	r1, [sp, #36]	; 0x24
 8023512:	eef0 aa45 	vmov.f32	s21, s10
 8023516:	9308      	str	r3, [sp, #32]
 8023518:	6850      	ldr	r0, [r2, #4]
 802351a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802351e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8023522:	fb00 1803 	mla	r8, r0, r3, r1
 8023526:	6813      	ldr	r3, [r2, #0]
 8023528:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802352c:	4498      	add	r8, r3
 802352e:	9b07      	ldr	r3, [sp, #28]
 8023530:	3301      	adds	r3, #1
 8023532:	f023 0301 	bic.w	r3, r3, #1
 8023536:	930b      	str	r3, [sp, #44]	; 0x2c
 8023538:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802353a:	681f      	ldr	r7, [r3, #0]
 802353c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802353e:	2b00      	cmp	r3, #0
 8023540:	dc03      	bgt.n	802354a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023544:	2b00      	cmp	r3, #0
 8023546:	f340 8238 	ble.w	80239ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802354a:	2c00      	cmp	r4, #0
 802354c:	f340 8109 	ble.w	8023762 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8023550:	142a      	asrs	r2, r5, #16
 8023552:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023556:	d42b      	bmi.n	80235b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023558:	1c51      	adds	r1, r2, #1
 802355a:	9807      	ldr	r0, [sp, #28]
 802355c:	4288      	cmp	r0, r1
 802355e:	dd2a      	ble.n	80235b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023560:	2b00      	cmp	r3, #0
 8023562:	db28      	blt.n	80235b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023564:	1c59      	adds	r1, r3, #1
 8023566:	9808      	ldr	r0, [sp, #32]
 8023568:	4288      	cmp	r0, r1
 802356a:	dd24      	ble.n	80235b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802356c:	1e63      	subs	r3, r4, #1
 802356e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023570:	fb02 5203 	mla	r2, r2, r3, r5
 8023574:	1412      	asrs	r2, r2, #16
 8023576:	d429      	bmi.n	80235cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023578:	3201      	adds	r2, #1
 802357a:	9907      	ldr	r1, [sp, #28]
 802357c:	4291      	cmp	r1, r2
 802357e:	dd25      	ble.n	80235cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023580:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023582:	fb02 6303 	mla	r3, r2, r3, r6
 8023586:	141b      	asrs	r3, r3, #16
 8023588:	d420      	bmi.n	80235cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802358a:	3301      	adds	r3, #1
 802358c:	9a08      	ldr	r2, [sp, #32]
 802358e:	429a      	cmp	r2, r3
 8023590:	dd1c      	ble.n	80235cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023592:	f108 0e03 	add.w	lr, r8, #3
 8023596:	46a1      	mov	r9, r4
 8023598:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802359c:	f1b9 0f00 	cmp.w	r9, #0
 80235a0:	f300 8155 	bgt.w	802384e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80235a4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80235a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80235ac:	44a0      	add	r8, r4
 80235ae:	e0da      	b.n	8023766 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80235b0:	1c50      	adds	r0, r2, #1
 80235b2:	f040 80ce 	bne.w	8023752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80235b6:	9907      	ldr	r1, [sp, #28]
 80235b8:	4291      	cmp	r1, r2
 80235ba:	f340 80ca 	ble.w	8023752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80235be:	1c59      	adds	r1, r3, #1
 80235c0:	f2c0 80c7 	blt.w	8023752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80235c4:	9a08      	ldr	r2, [sp, #32]
 80235c6:	4293      	cmp	r3, r2
 80235c8:	f280 80c3 	bge.w	8023752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80235cc:	46a3      	mov	fp, r4
 80235ce:	46c1      	mov	r9, r8
 80235d0:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80235d4:	f1bb 0f00 	cmp.w	fp, #0
 80235d8:	dde4      	ble.n	80235a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80235da:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80235de:	1428      	asrs	r0, r5, #16
 80235e0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80235e4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80235e8:	920a      	str	r2, [sp, #40]	; 0x28
 80235ea:	f100 8116 	bmi.w	802381a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80235ee:	f100 0c01 	add.w	ip, r0, #1
 80235f2:	9a07      	ldr	r2, [sp, #28]
 80235f4:	4562      	cmp	r2, ip
 80235f6:	f340 8112 	ble.w	802381e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80235fa:	2b00      	cmp	r3, #0
 80235fc:	f2c0 810f 	blt.w	802381e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8023600:	f103 0c01 	add.w	ip, r3, #1
 8023604:	9a08      	ldr	r2, [sp, #32]
 8023606:	4562      	cmp	r2, ip
 8023608:	f340 8109 	ble.w	802381e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802360c:	fb03 030a 	mla	r3, r3, sl, r0
 8023610:	0858      	lsrs	r0, r3, #1
 8023612:	07da      	lsls	r2, r3, #31
 8023614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023616:	5c38      	ldrb	r0, [r7, r0]
 8023618:	bf54      	ite	pl
 802361a:	f000 000f 	andpl.w	r0, r0, #15
 802361e:	1100      	asrmi	r0, r0, #4
 8023620:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023624:	b2c0      	uxtb	r0, r0
 8023626:	2a00      	cmp	r2, #0
 8023628:	f000 80dd 	beq.w	80237e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 802362c:	f103 0e01 	add.w	lr, r3, #1
 8023630:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8023634:	f01e 0f01 	tst.w	lr, #1
 8023638:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802363c:	bf0c      	ite	eq
 802363e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023642:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023646:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802364a:	fa5f fc8c 	uxtb.w	ip, ip
 802364e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8023652:	b301      	cbz	r1, 8023696 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023654:	4453      	add	r3, sl
 8023656:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802365a:	07da      	lsls	r2, r3, #31
 802365c:	f103 0301 	add.w	r3, r3, #1
 8023660:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023664:	bf54      	ite	pl
 8023666:	f00c 0c0f 	andpl.w	ip, ip, #15
 802366a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802366e:	07da      	lsls	r2, r3, #31
 8023670:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023674:	fa5f fc8c 	uxtb.w	ip, ip
 8023678:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 802367c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023680:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023684:	bf54      	ite	pl
 8023686:	f00c 030f 	andpl.w	r3, ip, #15
 802368a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802368e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023692:	b2db      	uxtb	r3, r3
 8023694:	9310      	str	r3, [sp, #64]	; 0x40
 8023696:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802369a:	b289      	uxth	r1, r1
 802369c:	fb02 f301 	mul.w	r3, r2, r1
 80236a0:	0112      	lsls	r2, r2, #4
 80236a2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80236a6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80236aa:	1ad2      	subs	r2, r2, r3
 80236ac:	fa1f fe81 	uxth.w	lr, r1
 80236b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80236b2:	b292      	uxth	r2, r2
 80236b4:	ebac 0c0e 	sub.w	ip, ip, lr
 80236b8:	434a      	muls	r2, r1
 80236ba:	fa1f fc8c 	uxth.w	ip, ip
 80236be:	fb00 200c 	mla	r0, r0, ip, r2
 80236c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80236c4:	fb0e 0002 	mla	r0, lr, r2, r0
 80236c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236ca:	fb03 0002 	mla	r0, r3, r2, r0
 80236ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80236d2:	b3a8      	cbz	r0, 8023740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80236d4:	4bbb      	ldr	r3, [pc, #748]	; (80239c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80236d6:	28ff      	cmp	r0, #255	; 0xff
 80236d8:	681b      	ldr	r3, [r3, #0]
 80236da:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80236de:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80236e2:	b2db      	uxtb	r3, r3
 80236e4:	f000 8092 	beq.w	802380c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 80236e8:	b282      	uxth	r2, r0
 80236ea:	43c0      	mvns	r0, r0
 80236ec:	f899 e000 	ldrb.w	lr, [r9]
 80236f0:	fb13 f302 	smulbb	r3, r3, r2
 80236f4:	b2c0      	uxtb	r0, r0
 80236f6:	fb11 f102 	smulbb	r1, r1, r2
 80236fa:	fb0e 3300 	mla	r3, lr, r0, r3
 80236fe:	fb1c f202 	smulbb	r2, ip, r2
 8023702:	b29b      	uxth	r3, r3
 8023704:	f103 0e01 	add.w	lr, r3, #1
 8023708:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802370c:	121b      	asrs	r3, r3, #8
 802370e:	f889 3000 	strb.w	r3, [r9]
 8023712:	f899 3001 	ldrb.w	r3, [r9, #1]
 8023716:	fb03 1100 	mla	r1, r3, r0, r1
 802371a:	b289      	uxth	r1, r1
 802371c:	1c4b      	adds	r3, r1, #1
 802371e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023722:	f899 3002 	ldrb.w	r3, [r9, #2]
 8023726:	fb03 2000 	mla	r0, r3, r0, r2
 802372a:	1209      	asrs	r1, r1, #8
 802372c:	b280      	uxth	r0, r0
 802372e:	f889 1001 	strb.w	r1, [r9, #1]
 8023732:	f100 0c01 	add.w	ip, r0, #1
 8023736:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802373a:	1200      	asrs	r0, r0, #8
 802373c:	f889 0002 	strb.w	r0, [r9, #2]
 8023740:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023742:	f109 0903 	add.w	r9, r9, #3
 8023746:	f10b 3bff 	add.w	fp, fp, #4294967295
 802374a:	441d      	add	r5, r3
 802374c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802374e:	441e      	add	r6, r3
 8023750:	e740      	b.n	80235d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023752:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023754:	3c01      	subs	r4, #1
 8023756:	f108 0803 	add.w	r8, r8, #3
 802375a:	441d      	add	r5, r3
 802375c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802375e:	441e      	add	r6, r3
 8023760:	e6f3      	b.n	802354a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023762:	f47f af03 	bne.w	802356c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023768:	2b00      	cmp	r3, #0
 802376a:	f340 8126 	ble.w	80239ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802376e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023774:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023778:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802377c:	eef0 6a48 	vmov.f32	s13, s16
 8023780:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023784:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023788:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802378c:	ee16 5a90 	vmov	r5, s13
 8023790:	eef0 6a68 	vmov.f32	s13, s17
 8023794:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023798:	ee16 6a90 	vmov	r6, s13
 802379c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80237a0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80237a4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80237a8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80237ac:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80237b0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80237b4:	ee18 2a10 	vmov	r2, s16
 80237b8:	eeb0 8a47 	vmov.f32	s16, s14
 80237bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80237c0:	ee18 2a90 	vmov	r2, s17
 80237c4:	9329      	str	r3, [sp, #164]	; 0xa4
 80237c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80237c8:	eef0 8a67 	vmov.f32	s17, s15
 80237cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80237d0:	932a      	str	r3, [sp, #168]	; 0xa8
 80237d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80237d6:	3b01      	subs	r3, #1
 80237d8:	9309      	str	r3, [sp, #36]	; 0x24
 80237da:	bf08      	it	eq
 80237dc:	4614      	moveq	r4, r2
 80237de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80237e0:	bf18      	it	ne
 80237e2:	461c      	movne	r4, r3
 80237e4:	e6aa      	b.n	802353c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80237e6:	2900      	cmp	r1, #0
 80237e8:	f43f af55 	beq.w	8023696 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80237ec:	4453      	add	r3, sl
 80237ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80237f2:	07db      	lsls	r3, r3, #31
 80237f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80237f8:	bf54      	ite	pl
 80237fa:	f00c 030f 	andpl.w	r3, ip, #15
 80237fe:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8023802:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023806:	b2db      	uxtb	r3, r3
 8023808:	930c      	str	r3, [sp, #48]	; 0x30
 802380a:	e744      	b.n	8023696 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 802380c:	f889 3000 	strb.w	r3, [r9]
 8023810:	f889 1001 	strb.w	r1, [r9, #1]
 8023814:	f889 c002 	strb.w	ip, [r9, #2]
 8023818:	e792      	b.n	8023740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802381a:	1c42      	adds	r2, r0, #1
 802381c:	d190      	bne.n	8023740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802381e:	9a07      	ldr	r2, [sp, #28]
 8023820:	4282      	cmp	r2, r0
 8023822:	dd8d      	ble.n	8023740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023824:	1c5a      	adds	r2, r3, #1
 8023826:	db8b      	blt.n	8023740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023828:	9a08      	ldr	r2, [sp, #32]
 802382a:	429a      	cmp	r2, r3
 802382c:	dd88      	ble.n	8023740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802382e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023830:	9105      	str	r1, [sp, #20]
 8023832:	4649      	mov	r1, r9
 8023834:	9002      	str	r0, [sp, #8]
 8023836:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023838:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802383c:	9b08      	ldr	r3, [sp, #32]
 802383e:	463a      	mov	r2, r7
 8023840:	9301      	str	r3, [sp, #4]
 8023842:	9b07      	ldr	r3, [sp, #28]
 8023844:	9300      	str	r3, [sp, #0]
 8023846:	4653      	mov	r3, sl
 8023848:	f7ff fd64 	bl	8023314 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 802384c:	e778      	b.n	8023740 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802384e:	142a      	asrs	r2, r5, #16
 8023850:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023854:	1433      	asrs	r3, r6, #16
 8023856:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802385a:	fb0a 2303 	mla	r3, sl, r3, r2
 802385e:	085a      	lsrs	r2, r3, #1
 8023860:	07d9      	lsls	r1, r3, #31
 8023862:	5cba      	ldrb	r2, [r7, r2]
 8023864:	bf54      	ite	pl
 8023866:	f002 020f 	andpl.w	r2, r2, #15
 802386a:	1112      	asrmi	r2, r2, #4
 802386c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023870:	b2d2      	uxtb	r2, r2
 8023872:	2800      	cmp	r0, #0
 8023874:	f000 808a 	beq.w	802398c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8023878:	f103 0b01 	add.w	fp, r3, #1
 802387c:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8023880:	f01b 0f01 	tst.w	fp, #1
 8023884:	5c79      	ldrb	r1, [r7, r1]
 8023886:	bf0c      	ite	eq
 8023888:	f001 010f 	andeq.w	r1, r1, #15
 802388c:	1109      	asrne	r1, r1, #4
 802388e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023892:	b2c9      	uxtb	r1, r1
 8023894:	9111      	str	r1, [sp, #68]	; 0x44
 8023896:	f1bc 0f00 	cmp.w	ip, #0
 802389a:	d019      	beq.n	80238d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802389c:	4453      	add	r3, sl
 802389e:	0859      	lsrs	r1, r3, #1
 80238a0:	f013 0f01 	tst.w	r3, #1
 80238a4:	f103 0301 	add.w	r3, r3, #1
 80238a8:	5c79      	ldrb	r1, [r7, r1]
 80238aa:	bf0c      	ite	eq
 80238ac:	f001 010f 	andeq.w	r1, r1, #15
 80238b0:	1109      	asrne	r1, r1, #4
 80238b2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80238b6:	b2c9      	uxtb	r1, r1
 80238b8:	910d      	str	r1, [sp, #52]	; 0x34
 80238ba:	0859      	lsrs	r1, r3, #1
 80238bc:	07db      	lsls	r3, r3, #31
 80238be:	5c79      	ldrb	r1, [r7, r1]
 80238c0:	bf54      	ite	pl
 80238c2:	f001 010f 	andpl.w	r1, r1, #15
 80238c6:	1109      	asrmi	r1, r1, #4
 80238c8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80238cc:	b2c9      	uxtb	r1, r1
 80238ce:	9112      	str	r1, [sp, #72]	; 0x48
 80238d0:	b280      	uxth	r0, r0
 80238d2:	fa1f fc8c 	uxth.w	ip, ip
 80238d6:	fb00 f30c 	mul.w	r3, r0, ip
 80238da:	0100      	lsls	r0, r0, #4
 80238dc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80238e0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80238e4:	1ac0      	subs	r0, r0, r3
 80238e6:	fa1f fc8c 	uxth.w	ip, ip
 80238ea:	b280      	uxth	r0, r0
 80238ec:	eba1 010c 	sub.w	r1, r1, ip
 80238f0:	fa1f fb81 	uxth.w	fp, r1
 80238f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80238f6:	4348      	muls	r0, r1
 80238f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80238fa:	fb02 020b 	mla	r2, r2, fp, r0
 80238fe:	fb0c 2c01 	mla	ip, ip, r1, r2
 8023902:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023904:	fb03 c302 	mla	r3, r3, r2, ip
 8023908:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802390c:	b3ab      	cbz	r3, 802397a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802390e:	4a2d      	ldr	r2, [pc, #180]	; (80239c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8023910:	2bff      	cmp	r3, #255	; 0xff
 8023912:	6811      	ldr	r1, [r2, #0]
 8023914:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023918:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 802391c:	b2c9      	uxtb	r1, r1
 802391e:	d045      	beq.n	80239ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023920:	b298      	uxth	r0, r3
 8023922:	43db      	mvns	r3, r3
 8023924:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023928:	fb11 f100 	smulbb	r1, r1, r0
 802392c:	b2db      	uxtb	r3, r3
 802392e:	fb1c fc00 	smulbb	ip, ip, r0
 8023932:	fb02 1103 	mla	r1, r2, r3, r1
 8023936:	fb1b f000 	smulbb	r0, fp, r0
 802393a:	b289      	uxth	r1, r1
 802393c:	1c4a      	adds	r2, r1, #1
 802393e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023942:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023946:	fb02 cc03 	mla	ip, r2, r3, ip
 802394a:	1209      	asrs	r1, r1, #8
 802394c:	fa1f fc8c 	uxth.w	ip, ip
 8023950:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023954:	f10c 0201 	add.w	r2, ip, #1
 8023958:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802395c:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8023960:	fb02 0303 	mla	r3, r2, r3, r0
 8023964:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023968:	b29b      	uxth	r3, r3
 802396a:	f80e cc02 	strb.w	ip, [lr, #-2]
 802396e:	1c5a      	adds	r2, r3, #1
 8023970:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023974:	121b      	asrs	r3, r3, #8
 8023976:	f80e 3c01 	strb.w	r3, [lr, #-1]
 802397a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802397c:	f10e 0e03 	add.w	lr, lr, #3
 8023980:	f109 39ff 	add.w	r9, r9, #4294967295
 8023984:	441d      	add	r5, r3
 8023986:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023988:	441e      	add	r6, r3
 802398a:	e607      	b.n	802359c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 802398c:	f1bc 0f00 	cmp.w	ip, #0
 8023990:	d09e      	beq.n	80238d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023992:	4453      	add	r3, sl
 8023994:	0859      	lsrs	r1, r3, #1
 8023996:	07db      	lsls	r3, r3, #31
 8023998:	5c79      	ldrb	r1, [r7, r1]
 802399a:	bf54      	ite	pl
 802399c:	f001 010f 	andpl.w	r1, r1, #15
 80239a0:	1109      	asrmi	r1, r1, #4
 80239a2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80239a6:	b2c9      	uxtb	r1, r1
 80239a8:	910d      	str	r1, [sp, #52]	; 0x34
 80239aa:	e791      	b.n	80238d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80239ac:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80239b0:	f80e cc02 	strb.w	ip, [lr, #-2]
 80239b4:	f80e bc01 	strb.w	fp, [lr, #-1]
 80239b8:	e7df      	b.n	802397a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80239ba:	b015      	add	sp, #84	; 0x54
 80239bc:	ecbd 8b08 	vpop	{d8-d11}
 80239c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239c4:	2000c58c 	.word	0x2000c58c

080239c8 <CRC_Lock>:
 80239c8:	4a1d      	ldr	r2, [pc, #116]	; (8023a40 <CRC_Lock+0x78>)
 80239ca:	b530      	push	{r4, r5, lr}
 80239cc:	6813      	ldr	r3, [r2, #0]
 80239ce:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80239d2:	f24c 2540 	movw	r5, #49728	; 0xc240
 80239d6:	f023 0301 	bic.w	r3, r3, #1
 80239da:	6013      	str	r3, [r2, #0]
 80239dc:	4b19      	ldr	r3, [pc, #100]	; (8023a44 <CRC_Lock+0x7c>)
 80239de:	681a      	ldr	r2, [r3, #0]
 80239e0:	4022      	ands	r2, r4
 80239e2:	42aa      	cmp	r2, r5
 80239e4:	d005      	beq.n	80239f2 <CRC_Lock+0x2a>
 80239e6:	681b      	ldr	r3, [r3, #0]
 80239e8:	f24c 2270 	movw	r2, #49776	; 0xc270
 80239ec:	4023      	ands	r3, r4
 80239ee:	4293      	cmp	r3, r2
 80239f0:	d11d      	bne.n	8023a2e <CRC_Lock+0x66>
 80239f2:	4b15      	ldr	r3, [pc, #84]	; (8023a48 <CRC_Lock+0x80>)
 80239f4:	681b      	ldr	r3, [r3, #0]
 80239f6:	b9d3      	cbnz	r3, 8023a2e <CRC_Lock+0x66>
 80239f8:	4a14      	ldr	r2, [pc, #80]	; (8023a4c <CRC_Lock+0x84>)
 80239fa:	6813      	ldr	r3, [r2, #0]
 80239fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023a00:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023a04:	d006      	beq.n	8023a14 <CRC_Lock+0x4c>
 8023a06:	6813      	ldr	r3, [r2, #0]
 8023a08:	f240 4283 	movw	r2, #1155	; 0x483
 8023a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023a10:	4293      	cmp	r3, r2
 8023a12:	d10c      	bne.n	8023a2e <CRC_Lock+0x66>
 8023a14:	4b0e      	ldr	r3, [pc, #56]	; (8023a50 <CRC_Lock+0x88>)
 8023a16:	2201      	movs	r2, #1
 8023a18:	601a      	str	r2, [r3, #0]
 8023a1a:	681a      	ldr	r2, [r3, #0]
 8023a1c:	2a00      	cmp	r2, #0
 8023a1e:	d1fc      	bne.n	8023a1a <CRC_Lock+0x52>
 8023a20:	4b0c      	ldr	r3, [pc, #48]	; (8023a54 <CRC_Lock+0x8c>)
 8023a22:	6018      	str	r0, [r3, #0]
 8023a24:	6818      	ldr	r0, [r3, #0]
 8023a26:	1a43      	subs	r3, r0, r1
 8023a28:	4258      	negs	r0, r3
 8023a2a:	4158      	adcs	r0, r3
 8023a2c:	bd30      	pop	{r4, r5, pc}
 8023a2e:	4b0a      	ldr	r3, [pc, #40]	; (8023a58 <CRC_Lock+0x90>)
 8023a30:	2201      	movs	r2, #1
 8023a32:	601a      	str	r2, [r3, #0]
 8023a34:	681a      	ldr	r2, [r3, #0]
 8023a36:	2a00      	cmp	r2, #0
 8023a38:	d1fc      	bne.n	8023a34 <CRC_Lock+0x6c>
 8023a3a:	4b08      	ldr	r3, [pc, #32]	; (8023a5c <CRC_Lock+0x94>)
 8023a3c:	e7f1      	b.n	8023a22 <CRC_Lock+0x5a>
 8023a3e:	bf00      	nop
 8023a40:	e0002000 	.word	0xe0002000
 8023a44:	e000ed00 	.word	0xe000ed00
 8023a48:	e0042000 	.word	0xe0042000
 8023a4c:	5c001000 	.word	0x5c001000
 8023a50:	58024c08 	.word	0x58024c08
 8023a54:	58024c00 	.word	0x58024c00
 8023a58:	40023008 	.word	0x40023008
 8023a5c:	40023000 	.word	0x40023000

08023a60 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023a60:	6101      	str	r1, [r0, #16]
 8023a62:	4770      	bx	lr

08023a64 <_ZN8touchgfx8Gestures4tickEv>:
 8023a64:	7b83      	ldrb	r3, [r0, #14]
 8023a66:	b14b      	cbz	r3, 8023a7c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023a68:	8903      	ldrh	r3, [r0, #8]
 8023a6a:	3301      	adds	r3, #1
 8023a6c:	b29b      	uxth	r3, r3
 8023a6e:	2b07      	cmp	r3, #7
 8023a70:	8103      	strh	r3, [r0, #8]
 8023a72:	bf81      	itttt	hi
 8023a74:	2300      	movhi	r3, #0
 8023a76:	8143      	strhhi	r3, [r0, #10]
 8023a78:	8183      	strhhi	r3, [r0, #12]
 8023a7a:	7383      	strbhi	r3, [r0, #14]
 8023a7c:	4770      	bx	lr
	...

08023a80 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023a80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023a84:	4604      	mov	r4, r0
 8023a86:	4698      	mov	r8, r3
 8023a88:	8880      	ldrh	r0, [r0, #4]
 8023a8a:	4617      	mov	r7, r2
 8023a8c:	4b1d      	ldr	r3, [pc, #116]	; (8023b04 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8023a8e:	460e      	mov	r6, r1
 8023a90:	f8ad 0006 	strh.w	r0, [sp, #6]
 8023a94:	eba8 0000 	sub.w	r0, r8, r0
 8023a98:	9300      	str	r3, [sp, #0]
 8023a9a:	2300      	movs	r3, #0
 8023a9c:	b280      	uxth	r0, r0
 8023a9e:	8aa2      	ldrh	r2, [r4, #20]
 8023aa0:	f88d 3004 	strb.w	r3, [sp, #4]
 8023aa4:	b203      	sxth	r3, r0
 8023aa6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023aaa:	88e1      	ldrh	r1, [r4, #6]
 8023aac:	2b00      	cmp	r3, #0
 8023aae:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023ab2:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023ab6:	bfb8      	it	lt
 8023ab8:	4240      	neglt	r0, r0
 8023aba:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023abe:	bfb8      	it	lt
 8023ac0:	b203      	sxthlt	r3, r0
 8023ac2:	4293      	cmp	r3, r2
 8023ac4:	dc08      	bgt.n	8023ad8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023ac6:	1a69      	subs	r1, r5, r1
 8023ac8:	b289      	uxth	r1, r1
 8023aca:	b20b      	sxth	r3, r1
 8023acc:	2b00      	cmp	r3, #0
 8023ace:	bfbc      	itt	lt
 8023ad0:	4249      	neglt	r1, r1
 8023ad2:	b20b      	sxthlt	r3, r1
 8023ad4:	429a      	cmp	r2, r3
 8023ad6:	da13      	bge.n	8023b00 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023ad8:	6920      	ldr	r0, [r4, #16]
 8023ada:	4669      	mov	r1, sp
 8023adc:	eba8 0606 	sub.w	r6, r8, r6
 8023ae0:	1bef      	subs	r7, r5, r7
 8023ae2:	6803      	ldr	r3, [r0, #0]
 8023ae4:	685b      	ldr	r3, [r3, #4]
 8023ae6:	4798      	blx	r3
 8023ae8:	2300      	movs	r3, #0
 8023aea:	2001      	movs	r0, #1
 8023aec:	8166      	strh	r6, [r4, #10]
 8023aee:	8123      	strh	r3, [r4, #8]
 8023af0:	81a7      	strh	r7, [r4, #12]
 8023af2:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023af6:	80e5      	strh	r5, [r4, #6]
 8023af8:	73a0      	strb	r0, [r4, #14]
 8023afa:	b004      	add	sp, #16
 8023afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b00:	2000      	movs	r0, #0
 8023b02:	e7fa      	b.n	8023afa <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023b04:	08029064 	.word	0x08029064

08023b08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b0a:	461e      	mov	r6, r3
 8023b0c:	1e4b      	subs	r3, r1, #1
 8023b0e:	b085      	sub	sp, #20
 8023b10:	4604      	mov	r4, r0
 8023b12:	2b01      	cmp	r3, #1
 8023b14:	460d      	mov	r5, r1
 8023b16:	4617      	mov	r7, r2
 8023b18:	d84b      	bhi.n	8023bb2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023b1a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023b1e:	1cd3      	adds	r3, r2, #3
 8023b20:	b29b      	uxth	r3, r3
 8023b22:	2b06      	cmp	r3, #6
 8023b24:	d916      	bls.n	8023b54 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023b26:	f8df c098 	ldr.w	ip, [pc, #152]	; 8023bc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023b2a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023b2e:	f8cd c004 	str.w	ip, [sp, #4]
 8023b32:	f04f 0c00 	mov.w	ip, #0
 8023b36:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023b3a:	6900      	ldr	r0, [r0, #16]
 8023b3c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023b40:	a901      	add	r1, sp, #4
 8023b42:	f88d c008 	strb.w	ip, [sp, #8]
 8023b46:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023b4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023b4e:	6803      	ldr	r3, [r0, #0]
 8023b50:	689b      	ldr	r3, [r3, #8]
 8023b52:	4798      	blx	r3
 8023b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023b58:	1cd3      	adds	r3, r2, #3
 8023b5a:	b29b      	uxth	r3, r3
 8023b5c:	2b06      	cmp	r3, #6
 8023b5e:	d916      	bls.n	8023b8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023b60:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8023bc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023b64:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023b68:	f8cd c004 	str.w	ip, [sp, #4]
 8023b6c:	f04f 0c01 	mov.w	ip, #1
 8023b70:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023b74:	6920      	ldr	r0, [r4, #16]
 8023b76:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023b7a:	a901      	add	r1, sp, #4
 8023b7c:	f88d c008 	strb.w	ip, [sp, #8]
 8023b80:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023b84:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023b88:	6803      	ldr	r3, [r0, #0]
 8023b8a:	689b      	ldr	r3, [r3, #8]
 8023b8c:	4798      	blx	r3
 8023b8e:	4b0b      	ldr	r3, [pc, #44]	; (8023bbc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8023b90:	a901      	add	r1, sp, #4
 8023b92:	6920      	ldr	r0, [r4, #16]
 8023b94:	9301      	str	r3, [sp, #4]
 8023b96:	2300      	movs	r3, #0
 8023b98:	f88d 5008 	strb.w	r5, [sp, #8]
 8023b9c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023ba0:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023ba4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023ba8:	6803      	ldr	r3, [r0, #0]
 8023baa:	681b      	ldr	r3, [r3, #0]
 8023bac:	4798      	blx	r3
 8023bae:	b005      	add	sp, #20
 8023bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023bb2:	2900      	cmp	r1, #0
 8023bb4:	d1eb      	bne.n	8023b8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023bb6:	80a2      	strh	r2, [r4, #4]
 8023bb8:	80c6      	strh	r6, [r0, #6]
 8023bba:	e7e8      	b.n	8023b8e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023bbc:	08029050 	.word	0x08029050
 8023bc0:	08029078 	.word	0x08029078

08023bc4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8023bc4:	10c9      	asrs	r1, r1, #3
 8023bc6:	2900      	cmp	r1, #0
 8023bc8:	bfb8      	it	lt
 8023bca:	4249      	neglt	r1, r1
 8023bcc:	2801      	cmp	r0, #1
 8023bce:	d108      	bne.n	8023be2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023bd0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023bd4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023bd8:	4601      	mov	r1, r0
 8023bda:	dd02      	ble.n	8023be2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023bdc:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8023be0:	4770      	bx	lr
 8023be2:	29ff      	cmp	r1, #255	; 0xff
 8023be4:	bfa8      	it	ge
 8023be6:	21ff      	movge	r1, #255	; 0xff
 8023be8:	4608      	mov	r0, r1
 8023bea:	4770      	bx	lr

08023bec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bf0:	688c      	ldr	r4, [r1, #8]
 8023bf2:	b087      	sub	sp, #28
 8023bf4:	4607      	mov	r7, r0
 8023bf6:	2c00      	cmp	r4, #0
 8023bf8:	db2b      	blt.n	8023c52 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023bfa:	6803      	ldr	r3, [r0, #0]
 8023bfc:	68da      	ldr	r2, [r3, #12]
 8023bfe:	42a2      	cmp	r2, r4
 8023c00:	dd27      	ble.n	8023c52 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023c02:	681a      	ldr	r2, [r3, #0]
 8023c04:	691e      	ldr	r6, [r3, #16]
 8023c06:	68cd      	ldr	r5, [r1, #12]
 8023c08:	fb06 2604 	mla	r6, r6, r4, r2
 8023c0c:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8023c10:	698a      	ldr	r2, [r1, #24]
 8023c12:	f893 a004 	ldrb.w	sl, [r3, #4]
 8023c16:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023c1a:	9205      	str	r2, [sp, #20]
 8023c1c:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8023c20:	9b05      	ldr	r3, [sp, #20]
 8023c22:	6839      	ldr	r1, [r7, #0]
 8023c24:	eb03 0c02 	add.w	ip, r3, r2
 8023c28:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023c2c:	6889      	ldr	r1, [r1, #8]
 8023c2e:	1898      	adds	r0, r3, r2
 8023c30:	4288      	cmp	r0, r1
 8023c32:	db02      	blt.n	8023c3a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023c34:	1a8b      	subs	r3, r1, r2
 8023c36:	2b00      	cmp	r3, #0
 8023c38:	dd09      	ble.n	8023c4e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023c3a:	6878      	ldr	r0, [r7, #4]
 8023c3c:	6801      	ldr	r1, [r0, #0]
 8023c3e:	9400      	str	r4, [sp, #0]
 8023c40:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8023c44:	4653      	mov	r3, sl
 8023c46:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8023c4a:	4631      	mov	r1, r6
 8023c4c:	47d8      	blx	fp
 8023c4e:	3d01      	subs	r5, #1
 8023c50:	d1e4      	bne.n	8023c1c <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8023c52:	b007      	add	sp, #28
 8023c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023c58 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023c58:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8023c5c:	b90b      	cbnz	r3, 8023c62 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8023c5e:	f001 b974 	b.w	8024f4a <_ZN8touchgfx7Outline6lineToEii>
 8023c62:	4770      	bx	lr

08023c64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8023c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023c68:	4604      	mov	r4, r0
 8023c6a:	2600      	movs	r6, #0
 8023c6c:	4b8e      	ldr	r3, [pc, #568]	; (8023ea8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8023c6e:	f100 0518 	add.w	r5, r0, #24
 8023c72:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8023c76:	b086      	sub	sp, #24
 8023c78:	4690      	mov	r8, r2
 8023c7a:	e9c0 3100 	strd	r3, r1, [r0]
 8023c7e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8023c82:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8023c86:	4628      	mov	r0, r5
 8023c88:	f001 fb75 	bl	8025376 <_ZN8touchgfx15RenderingBufferC1Ev>
 8023c8c:	4638      	mov	r0, r7
 8023c8e:	f000 fb45 	bl	802431c <_ZN8touchgfx7OutlineC1Ev>
 8023c92:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8023c96:	f001 fb23 	bl	80252e0 <_ZN8touchgfx8ScanlineC1Ev>
 8023c9a:	2301      	movs	r3, #1
 8023c9c:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8023ca0:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8023ca4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023ca8:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8023cac:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8023cb0:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8023cb4:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8023cb8:	f7f4 fbe6 	bl	8018488 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8023cbc:	b928      	cbnz	r0, 8023cca <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8023cbe:	4b7b      	ldr	r3, [pc, #492]	; (8023eac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8023cc0:	2118      	movs	r1, #24
 8023cc2:	4a7b      	ldr	r2, [pc, #492]	; (8023eb0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023cc4:	487b      	ldr	r0, [pc, #492]	; (8023eb4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023cc6:	f001 fb99 	bl	80253fc <__assert_func>
 8023cca:	f9b8 2000 	ldrsh.w	r2, [r8]
 8023cce:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8023cd2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8023cd6:	4410      	add	r0, r2
 8023cd8:	9602      	str	r6, [sp, #8]
 8023cda:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8023cde:	b280      	uxth	r0, r0
 8023ce0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8023ce4:	fa0f fa80 	sxth.w	sl, r0
 8023ce8:	f1ba 0f00 	cmp.w	sl, #0
 8023cec:	dd70      	ble.n	8023dd0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023cee:	4591      	cmp	r9, r2
 8023cf0:	dd6e      	ble.n	8023dd0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023cf2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8023cf6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8023cfa:	440b      	add	r3, r1
 8023cfc:	b29b      	uxth	r3, r3
 8023cfe:	b21e      	sxth	r6, r3
 8023d00:	2e00      	cmp	r6, #0
 8023d02:	dd65      	ble.n	8023dd0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023d04:	458e      	cmp	lr, r1
 8023d06:	dd63      	ble.n	8023dd0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023d08:	45d1      	cmp	r9, sl
 8023d0a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8023d0e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8023d12:	bfb8      	it	lt
 8023d14:	fa1f f089 	uxthlt.w	r0, r9
 8023d18:	45b6      	cmp	lr, r6
 8023d1a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8023d1e:	bfb8      	it	lt
 8023d20:	fa1f f38e 	uxthlt.w	r3, lr
 8023d24:	1a80      	subs	r0, r0, r2
 8023d26:	f8ad 100a 	strh.w	r1, [sp, #10]
 8023d2a:	1a5b      	subs	r3, r3, r1
 8023d2c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8023d30:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023d34:	f10d 0808 	add.w	r8, sp, #8
 8023d38:	ae04      	add	r6, sp, #16
 8023d3a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023d3e:	e886 0003 	stmia.w	r6, {r0, r1}
 8023d42:	f8dc 3000 	ldr.w	r3, [ip]
 8023d46:	4660      	mov	r0, ip
 8023d48:	4631      	mov	r1, r6
 8023d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023d4c:	4798      	blx	r3
 8023d4e:	6861      	ldr	r1, [r4, #4]
 8023d50:	4640      	mov	r0, r8
 8023d52:	3104      	adds	r1, #4
 8023d54:	f7f5 fa06 	bl	8019164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023d58:	4630      	mov	r0, r6
 8023d5a:	f7f5 fa1b 	bl	8019194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023d5e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8023d62:	f7f4 fb21 	bl	80183a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8023d66:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8023d6a:	4638      	mov	r0, r7
 8023d6c:	f000 fab2 	bl	80242d4 <_ZN8touchgfx7Outline5resetEv>
 8023d70:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023d74:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8023d78:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8023d7c:	015b      	lsls	r3, r3, #5
 8023d7e:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8023d82:	0152      	lsls	r2, r2, #5
 8023d84:	60e3      	str	r3, [r4, #12]
 8023d86:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023d8a:	60a2      	str	r2, [r4, #8]
 8023d8c:	015b      	lsls	r3, r3, #5
 8023d8e:	6123      	str	r3, [r4, #16]
 8023d90:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8023d94:	015b      	lsls	r3, r3, #5
 8023d96:	6163      	str	r3, [r4, #20]
 8023d98:	4b47      	ldr	r3, [pc, #284]	; (8023eb8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8023d9a:	6818      	ldr	r0, [r3, #0]
 8023d9c:	6803      	ldr	r3, [r0, #0]
 8023d9e:	6a1b      	ldr	r3, [r3, #32]
 8023da0:	4798      	blx	r3
 8023da2:	4606      	mov	r6, r0
 8023da4:	f7eb fff0 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8023da8:	6803      	ldr	r3, [r0, #0]
 8023daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023dac:	4798      	blx	r3
 8023dae:	4607      	mov	r7, r0
 8023db0:	f7eb ffea 	bl	800fd88 <_ZN8touchgfx3HAL3lcdEv>
 8023db4:	6803      	ldr	r3, [r0, #0]
 8023db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023db8:	4798      	blx	r3
 8023dba:	280c      	cmp	r0, #12
 8023dbc:	d854      	bhi.n	8023e68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8023dbe:	e8df f000 	tbb	[pc, r0]
 8023dc2:	554b      	.short	0x554b
 8023dc4:	2b6e0a66 	.word	0x2b6e0a66
 8023dc8:	5f5f5f3b 	.word	0x5f5f5f3b
 8023dcc:	5f5f      	.short	0x5f5f
 8023dce:	6e          	.byte	0x6e
 8023dcf:	00          	.byte	0x00
 8023dd0:	2300      	movs	r3, #0
 8023dd2:	9303      	str	r3, [sp, #12]
 8023dd4:	e7ae      	b.n	8023d34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8023dd6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023dda:	2108      	movs	r1, #8
 8023ddc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023de0:	fb92 f1f1 	sdiv	r1, r2, r1
 8023de4:	fb07 1303 	mla	r3, r7, r3, r1
 8023de8:	441e      	add	r6, r3
 8023dea:	4253      	negs	r3, r2
 8023dec:	f002 0207 	and.w	r2, r2, #7
 8023df0:	f003 0307 	and.w	r3, r3, #7
 8023df4:	bf58      	it	pl
 8023df6:	425a      	negpl	r2, r3
 8023df8:	b2d2      	uxtb	r2, r2
 8023dfa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023dfe:	4628      	mov	r0, r5
 8023e00:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023e04:	66e1      	str	r1, [r4, #108]	; 0x6c
 8023e06:	e9cd 1700 	strd	r1, r7, [sp]
 8023e0a:	4631      	mov	r1, r6
 8023e0c:	f001 fabb 	bl	8025386 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8023e10:	4620      	mov	r0, r4
 8023e12:	b006      	add	sp, #24
 8023e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023e18:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023e1c:	2104      	movs	r1, #4
 8023e1e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023e22:	fb92 f1f1 	sdiv	r1, r2, r1
 8023e26:	fb07 1303 	mla	r3, r7, r3, r1
 8023e2a:	441e      	add	r6, r3
 8023e2c:	4253      	negs	r3, r2
 8023e2e:	f002 0203 	and.w	r2, r2, #3
 8023e32:	f003 0303 	and.w	r3, r3, #3
 8023e36:	e7dd      	b.n	8023df4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8023e38:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023e3c:	2102      	movs	r1, #2
 8023e3e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023e42:	2a00      	cmp	r2, #0
 8023e44:	fb92 f1f1 	sdiv	r1, r2, r1
 8023e48:	f002 0201 	and.w	r2, r2, #1
 8023e4c:	fb07 1303 	mla	r3, r7, r3, r1
 8023e50:	bfb8      	it	lt
 8023e52:	4252      	neglt	r2, r2
 8023e54:	441e      	add	r6, r3
 8023e56:	e7cf      	b.n	8023df8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8023e58:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023e5c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023e60:	437b      	muls	r3, r7
 8023e62:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023e66:	441e      	add	r6, r3
 8023e68:	2200      	movs	r2, #0
 8023e6a:	e7c6      	b.n	8023dfa <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8023e6c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023e70:	2103      	movs	r1, #3
 8023e72:	fb07 f203 	mul.w	r2, r7, r3
 8023e76:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8023e7a:	fb13 2301 	smlabb	r3, r3, r1, r2
 8023e7e:	e7f2      	b.n	8023e66 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023e80:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023e84:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023e88:	fb07 2303 	mla	r3, r7, r3, r2
 8023e8c:	e7eb      	b.n	8023e66 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023e8e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023e92:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023e96:	437b      	muls	r3, r7
 8023e98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023e9c:	e7e3      	b.n	8023e66 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8023e9e:	4b07      	ldr	r3, [pc, #28]	; (8023ebc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8023ea0:	2156      	movs	r1, #86	; 0x56
 8023ea2:	4a03      	ldr	r2, [pc, #12]	; (8023eb0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023ea4:	e70e      	b.n	8023cc4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8023ea6:	bf00      	nop
 8023ea8:	0802a6e4 	.word	0x0802a6e4
 8023eac:	0802a62e 	.word	0x0802a62e
 8023eb0:	0802a6ec 	.word	0x0802a6ec
 8023eb4:	0802a68a 	.word	0x0802a68a
 8023eb8:	2000c564 	.word	0x2000c564
 8023ebc:	0802a6be 	.word	0x0802a6be

08023ec0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8023ec0:	6812      	ldr	r2, [r2, #0]
 8023ec2:	2a00      	cmp	r2, #0
 8023ec4:	db0b      	blt.n	8023ede <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8023ec6:	9800      	ldr	r0, [sp, #0]
 8023ec8:	6800      	ldr	r0, [r0, #0]
 8023eca:	4290      	cmp	r0, r2
 8023ecc:	bfd4      	ite	le
 8023ece:	2002      	movle	r0, #2
 8023ed0:	2000      	movgt	r0, #0
 8023ed2:	680a      	ldr	r2, [r1, #0]
 8023ed4:	2a00      	cmp	r2, #0
 8023ed6:	da04      	bge.n	8023ee2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8023ed8:	f040 0004 	orr.w	r0, r0, #4
 8023edc:	4770      	bx	lr
 8023ede:	2001      	movs	r0, #1
 8023ee0:	e7f7      	b.n	8023ed2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8023ee2:	681b      	ldr	r3, [r3, #0]
 8023ee4:	4293      	cmp	r3, r2
 8023ee6:	bfd8      	it	le
 8023ee8:	f040 0008 	orrle.w	r0, r0, #8
 8023eec:	4770      	bx	lr
	...

08023ef0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8023ef0:	4b07      	ldr	r3, [pc, #28]	; (8023f10 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8023ef2:	b510      	push	{r4, lr}
 8023ef4:	781b      	ldrb	r3, [r3, #0]
 8023ef6:	2b01      	cmp	r3, #1
 8023ef8:	d108      	bne.n	8023f0c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8023efa:	6843      	ldr	r3, [r0, #4]
 8023efc:	6814      	ldr	r4, [r2, #0]
 8023efe:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8023f02:	680b      	ldr	r3, [r1, #0]
 8023f04:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8023f08:	6013      	str	r3, [r2, #0]
 8023f0a:	600c      	str	r4, [r1, #0]
 8023f0c:	bd10      	pop	{r4, pc}
 8023f0e:	bf00      	nop
 8023f10:	2000c55c 	.word	0x2000c55c

08023f14 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f16:	b085      	sub	sp, #20
 8023f18:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023f1c:	4604      	mov	r4, r0
 8023f1e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023f22:	b33b      	cbz	r3, 8023f74 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023f24:	aa02      	add	r2, sp, #8
 8023f26:	a903      	add	r1, sp, #12
 8023f28:	f7ff ffe2 	bl	8023ef0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023f2c:	68a3      	ldr	r3, [r4, #8]
 8023f2e:	9e03      	ldr	r6, [sp, #12]
 8023f30:	aa02      	add	r2, sp, #8
 8023f32:	9f02      	ldr	r7, [sp, #8]
 8023f34:	a903      	add	r1, sp, #12
 8023f36:	1af6      	subs	r6, r6, r3
 8023f38:	68e3      	ldr	r3, [r4, #12]
 8023f3a:	4620      	mov	r0, r4
 8023f3c:	1aff      	subs	r7, r7, r3
 8023f3e:	f104 0314 	add.w	r3, r4, #20
 8023f42:	9603      	str	r6, [sp, #12]
 8023f44:	9300      	str	r3, [sp, #0]
 8023f46:	f104 0310 	add.w	r3, r4, #16
 8023f4a:	9702      	str	r7, [sp, #8]
 8023f4c:	f7ff ffb8 	bl	8023ec0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8023f50:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8023f54:	4605      	mov	r5, r0
 8023f56:	b97b      	cbnz	r3, 8023f78 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8023f58:	463a      	mov	r2, r7
 8023f5a:	4631      	mov	r1, r6
 8023f5c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023f60:	f7ff fe7a 	bl	8023c58 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023f64:	9b03      	ldr	r3, [sp, #12]
 8023f66:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8023f6a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8023f6e:	9b02      	ldr	r3, [sp, #8]
 8023f70:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8023f74:	b005      	add	sp, #20
 8023f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f78:	b110      	cbz	r0, 8023f80 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8023f7a:	ea13 0200 	ands.w	r2, r3, r0
 8023f7e:	d11c      	bne.n	8023fba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8023f80:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8023f84:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8023f88:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8023f8c:	b188      	cbz	r0, 8023fb2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8023f8e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8023f92:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8023f96:	b913      	cbnz	r3, 8023f9e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8023f98:	4630      	mov	r0, r6
 8023f9a:	f001 f806 	bl	8024faa <_ZN8touchgfx7Outline6moveToEii>
 8023f9e:	2300      	movs	r3, #0
 8023fa0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023fa4:	2301      	movs	r3, #1
 8023fa6:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8023faa:	4630      	mov	r0, r6
 8023fac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8023fb0:	e7d6      	b.n	8023f60 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8023fb2:	4630      	mov	r0, r6
 8023fb4:	f7ff fe50 	bl	8023c58 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023fb8:	e7f7      	b.n	8023faa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8023fba:	4615      	mov	r5, r2
 8023fbc:	e7d2      	b.n	8023f64 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08023fbe <_ZN8touchgfx6Canvas5closeEv>:
 8023fbe:	b538      	push	{r3, r4, r5, lr}
 8023fc0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8023fc4:	4604      	mov	r4, r0
 8023fc6:	b993      	cbnz	r3, 8023fee <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023fc8:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8023fcc:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8023fd0:	4213      	tst	r3, r2
 8023fd2:	d10c      	bne.n	8023fee <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023fd4:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8023fd8:	b123      	cbz	r3, 8023fe4 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8023fda:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8023fde:	4628      	mov	r0, r5
 8023fe0:	f7ff fe3a 	bl	8023c58 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023fe4:	4628      	mov	r0, r5
 8023fe6:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8023fea:	f7ff fe35 	bl	8023c58 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023fee:	2300      	movs	r3, #0
 8023ff0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023ff4:	bd38      	pop	{r3, r4, r5, pc}

08023ff6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ff8:	b085      	sub	sp, #20
 8023ffa:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023ffe:	4604      	mov	r4, r0
 8024000:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024004:	b353      	cbz	r3, 802405c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8024006:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802400a:	b90b      	cbnz	r3, 8024010 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802400c:	f7ff ffd7 	bl	8023fbe <_ZN8touchgfx6Canvas5closeEv>
 8024010:	aa02      	add	r2, sp, #8
 8024012:	a903      	add	r1, sp, #12
 8024014:	4620      	mov	r0, r4
 8024016:	f7ff ff6b 	bl	8023ef0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802401a:	68a3      	ldr	r3, [r4, #8]
 802401c:	9d03      	ldr	r5, [sp, #12]
 802401e:	aa02      	add	r2, sp, #8
 8024020:	9e02      	ldr	r6, [sp, #8]
 8024022:	a903      	add	r1, sp, #12
 8024024:	1aed      	subs	r5, r5, r3
 8024026:	68e3      	ldr	r3, [r4, #12]
 8024028:	4620      	mov	r0, r4
 802402a:	1af6      	subs	r6, r6, r3
 802402c:	f104 0314 	add.w	r3, r4, #20
 8024030:	9503      	str	r5, [sp, #12]
 8024032:	9300      	str	r3, [sp, #0]
 8024034:	f104 0310 	add.w	r3, r4, #16
 8024038:	9602      	str	r6, [sp, #8]
 802403a:	f7ff ff41 	bl	8023ec0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802403e:	4607      	mov	r7, r0
 8024040:	b170      	cbz	r0, 8024060 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8024042:	2301      	movs	r3, #1
 8024044:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8024048:	9a03      	ldr	r2, [sp, #12]
 802404a:	9b02      	ldr	r3, [sp, #8]
 802404c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8024050:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8024054:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8024058:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 802405c:	b005      	add	sp, #20
 802405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024060:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8024064:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8024068:	b92b      	cbnz	r3, 8024076 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802406a:	4632      	mov	r2, r6
 802406c:	4629      	mov	r1, r5
 802406e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024072:	f000 ff9a 	bl	8024faa <_ZN8touchgfx7Outline6moveToEii>
 8024076:	2300      	movs	r3, #0
 8024078:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802407c:	2301      	movs	r3, #1
 802407e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8024082:	e7e1      	b.n	8024048 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08024084 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8024084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024088:	4604      	mov	r4, r0
 802408a:	b087      	sub	sp, #28
 802408c:	9105      	str	r1, [sp, #20]
 802408e:	f001 f8d0 	bl	8025232 <_ZN8touchgfx7Outline8getCellsEv>
 8024092:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8024096:	4605      	mov	r5, r0
 8024098:	f1b9 0f00 	cmp.w	r9, #0
 802409c:	d103      	bne.n	80240a6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802409e:	2001      	movs	r0, #1
 80240a0:	b007      	add	sp, #28
 80240a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240a6:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80240aa:	2e00      	cmp	r6, #0
 80240ac:	d139      	bne.n	8024122 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80240ae:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80240b2:	f105 0708 	add.w	r7, r5, #8
 80240b6:	4640      	mov	r0, r8
 80240b8:	f001 f8fd 	bl	80252b6 <_ZN8touchgfx8Scanline5resetEv>
 80240bc:	f109 33ff 	add.w	r3, r9, #4294967295
 80240c0:	9303      	str	r3, [sp, #12]
 80240c2:	f9b5 b000 	ldrsh.w	fp, [r5]
 80240c6:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80240ca:	46da      	mov	sl, fp
 80240cc:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80240d0:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80240d4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80240d8:	9b03      	ldr	r3, [sp, #12]
 80240da:	4416      	add	r6, r2
 80240dc:	9504      	str	r5, [sp, #16]
 80240de:	463d      	mov	r5, r7
 80240e0:	3b01      	subs	r3, #1
 80240e2:	9303      	str	r3, [sp, #12]
 80240e4:	3301      	adds	r3, #1
 80240e6:	d01e      	beq.n	8024126 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80240e8:	3708      	adds	r7, #8
 80240ea:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80240ee:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80240f2:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80240f6:	4290      	cmp	r0, r2
 80240f8:	d11e      	bne.n	8024138 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80240fa:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80240fe:	4411      	add	r1, r2
 8024100:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024104:	e7e8      	b.n	80240d8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8024106:	1c91      	adds	r1, r2, #2
 8024108:	f04f 0301 	mov.w	r3, #1
 802410c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802410e:	8053      	strh	r3, [r2, #2]
 8024110:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8024112:	1c91      	adds	r1, r2, #2
 8024114:	65a1      	str	r1, [r4, #88]	; 0x58
 8024116:	f8a2 b002 	strh.w	fp, [r2, #2]
 802411a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802411c:	3201      	adds	r2, #1
 802411e:	6562      	str	r2, [r4, #84]	; 0x54
 8024120:	e03a      	b.n	8024198 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8024122:	2000      	movs	r0, #0
 8024124:	e7bc      	b.n	80240a0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024126:	b951      	cbnz	r1, 802413e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024128:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802412a:	2b00      	cmp	r3, #0
 802412c:	d0b7      	beq.n	802409e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802412e:	4641      	mov	r1, r8
 8024130:	9805      	ldr	r0, [sp, #20]
 8024132:	f7ff fd5b 	bl	8023bec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024136:	e7b2      	b.n	802409e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024138:	2900      	cmp	r1, #0
 802413a:	d035      	beq.n	80241a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802413c:	9504      	str	r5, [sp, #16]
 802413e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8024142:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024146:	f7ff fd3d 	bl	8023bc4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802414a:	4605      	mov	r5, r0
 802414c:	b330      	cbz	r0, 802419c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802414e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024150:	b182      	cbz	r2, 8024174 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024152:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024154:	454a      	cmp	r2, r9
 8024156:	d00d      	beq.n	8024174 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024158:	4641      	mov	r1, r8
 802415a:	9805      	ldr	r0, [sp, #20]
 802415c:	f7ff fd46 	bl	8023bec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024160:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024164:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024166:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802416a:	65e2      	str	r2, [r4, #92]	; 0x5c
 802416c:	2300      	movs	r3, #0
 802416e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024170:	6563      	str	r3, [r4, #84]	; 0x54
 8024172:	65a2      	str	r2, [r4, #88]	; 0x58
 8024174:	f1bb 0f00 	cmp.w	fp, #0
 8024178:	db10      	blt.n	802419c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802417a:	f7f4 f993 	bl	80184a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802417e:	4583      	cmp	fp, r0
 8024180:	d20c      	bcs.n	802419c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8024182:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8024184:	f802 500b 	strb.w	r5, [r2, fp]
 8024188:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802418a:	3201      	adds	r2, #1
 802418c:	455a      	cmp	r2, fp
 802418e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8024190:	d1b9      	bne.n	8024106 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8024192:	8811      	ldrh	r1, [r2, #0]
 8024194:	3101      	adds	r1, #1
 8024196:	8011      	strh	r1, [r2, #0]
 8024198:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802419c:	9b03      	ldr	r3, [sp, #12]
 802419e:	3301      	adds	r3, #1
 80241a0:	d0c2      	beq.n	8024128 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80241a2:	f10b 0a01 	add.w	sl, fp, #1
 80241a6:	9d04      	ldr	r5, [sp, #16]
 80241a8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80241ac:	4553      	cmp	r3, sl
 80241ae:	dd88      	ble.n	80240c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80241b0:	01b1      	lsls	r1, r6, #6
 80241b2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80241b6:	f7ff fd05 	bl	8023bc4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80241ba:	4683      	mov	fp, r0
 80241bc:	2800      	cmp	r0, #0
 80241be:	d080      	beq.n	80240c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80241c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80241c2:	b183      	cbz	r3, 80241e6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80241c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80241c6:	454b      	cmp	r3, r9
 80241c8:	d00d      	beq.n	80241e6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80241ca:	4641      	mov	r1, r8
 80241cc:	9805      	ldr	r0, [sp, #20]
 80241ce:	f7ff fd0d 	bl	8023bec <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80241d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80241d6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80241da:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80241dc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80241de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80241e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80241e2:	2300      	movs	r3, #0
 80241e4:	6563      	str	r3, [r4, #84]	; 0x54
 80241e6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80241ea:	464a      	mov	r2, r9
 80241ec:	f8cd b000 	str.w	fp, [sp]
 80241f0:	4651      	mov	r1, sl
 80241f2:	eba3 030a 	sub.w	r3, r3, sl
 80241f6:	4640      	mov	r0, r8
 80241f8:	f001 f884 	bl	8025304 <_ZN8touchgfx8Scanline7addSpanEiijj>
 80241fc:	e761      	b.n	80240c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080241fe <_ZN8touchgfx6Canvas6renderEv>:
 80241fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024200:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8024204:	4604      	mov	r4, r0
 8024206:	b913      	cbnz	r3, 802420e <_ZN8touchgfx6Canvas6renderEv+0x10>
 8024208:	2001      	movs	r0, #1
 802420a:	b003      	add	sp, #12
 802420c:	bd30      	pop	{r4, r5, pc}
 802420e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8024212:	2b00      	cmp	r3, #0
 8024214:	d131      	bne.n	802427a <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8024216:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 802421a:	2b00      	cmp	r3, #0
 802421c:	d0f4      	beq.n	8024208 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802421e:	6840      	ldr	r0, [r0, #4]
 8024220:	6803      	ldr	r3, [r0, #0]
 8024222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024224:	4798      	blx	r3
 8024226:	2800      	cmp	r0, #0
 8024228:	d0ee      	beq.n	8024208 <_ZN8touchgfx6Canvas6renderEv+0xa>
 802422a:	4620      	mov	r0, r4
 802422c:	f7ff fec7 	bl	8023fbe <_ZN8touchgfx6Canvas5closeEv>
 8024230:	6860      	ldr	r0, [r4, #4]
 8024232:	6803      	ldr	r3, [r0, #0]
 8024234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024236:	4798      	blx	r3
 8024238:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 802423c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8024240:	f7f3 f8c9 	bl	80173d6 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8024244:	6860      	ldr	r0, [r4, #4]
 8024246:	6803      	ldr	r3, [r0, #0]
 8024248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802424a:	4798      	blx	r3
 802424c:	4605      	mov	r5, r0
 802424e:	6860      	ldr	r0, [r4, #4]
 8024250:	6803      	ldr	r3, [r0, #0]
 8024252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024254:	4798      	blx	r3
 8024256:	4601      	mov	r1, r0
 8024258:	4628      	mov	r0, r5
 802425a:	f7f3 f8bf 	bl	80173dc <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802425e:	6860      	ldr	r0, [r4, #4]
 8024260:	6803      	ldr	r3, [r0, #0]
 8024262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8024264:	4798      	blx	r3
 8024266:	f104 0318 	add.w	r3, r4, #24
 802426a:	4669      	mov	r1, sp
 802426c:	e9cd 3000 	strd	r3, r0, [sp]
 8024270:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024274:	f7ff ff06 	bl	8024084 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8024278:	e7c7      	b.n	802420a <_ZN8touchgfx6Canvas6renderEv+0xc>
 802427a:	2000      	movs	r0, #0
 802427c:	e7c5      	b.n	802420a <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08024280 <_ZN8touchgfx6CanvasD1Ev>:
 8024280:	b538      	push	{r3, r4, r5, lr}
 8024282:	4605      	mov	r5, r0
 8024284:	4b08      	ldr	r3, [pc, #32]	; (80242a8 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8024286:	4604      	mov	r4, r0
 8024288:	f845 3b2c 	str.w	r3, [r5], #44
 802428c:	4b07      	ldr	r3, [pc, #28]	; (80242ac <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802428e:	6818      	ldr	r0, [r3, #0]
 8024290:	6803      	ldr	r3, [r0, #0]
 8024292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024294:	4798      	blx	r3
 8024296:	4628      	mov	r0, r5
 8024298:	f000 f814 	bl	80242c4 <_ZN8touchgfx7OutlineD1Ev>
 802429c:	f104 0018 	add.w	r0, r4, #24
 80242a0:	f001 f870 	bl	8025384 <_ZN8touchgfx15RenderingBufferD1Ev>
 80242a4:	4620      	mov	r0, r4
 80242a6:	bd38      	pop	{r3, r4, r5, pc}
 80242a8:	0802a6e4 	.word	0x0802a6e4
 80242ac:	2000c564 	.word	0x2000c564

080242b0 <_ZN8touchgfx6CanvasD0Ev>:
 80242b0:	b510      	push	{r4, lr}
 80242b2:	4604      	mov	r4, r0
 80242b4:	f7ff ffe4 	bl	8024280 <_ZN8touchgfx6CanvasD1Ev>
 80242b8:	21b8      	movs	r1, #184	; 0xb8
 80242ba:	4620      	mov	r0, r4
 80242bc:	f001 f870 	bl	80253a0 <_ZdlPvj>
 80242c0:	4620      	mov	r0, r4
 80242c2:	bd10      	pop	{r4, pc}

080242c4 <_ZN8touchgfx7OutlineD1Ev>:
 80242c4:	4770      	bx	lr

080242c6 <_ZN8touchgfx7OutlineD0Ev>:
 80242c6:	b510      	push	{r4, lr}
 80242c8:	4604      	mov	r4, r0
 80242ca:	2148      	movs	r1, #72	; 0x48
 80242cc:	f001 f868 	bl	80253a0 <_ZdlPvj>
 80242d0:	4620      	mov	r0, r4
 80242d2:	bd10      	pop	{r4, pc}

080242d4 <_ZN8touchgfx7Outline5resetEv>:
 80242d4:	b510      	push	{r4, lr}
 80242d6:	4604      	mov	r4, r0
 80242d8:	f7f4 f8fc 	bl	80184d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80242dc:	60e0      	str	r0, [r4, #12]
 80242de:	f7f4 f8ff 	bl	80184e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80242e2:	68e3      	ldr	r3, [r4, #12]
 80242e4:	2200      	movs	r2, #0
 80242e6:	08c0      	lsrs	r0, r0, #3
 80242e8:	6123      	str	r3, [r4, #16]
 80242ea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80242ee:	6060      	str	r0, [r4, #4]
 80242f0:	82a3      	strh	r3, [r4, #20]
 80242f2:	82e3      	strh	r3, [r4, #22]
 80242f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80242f6:	60a2      	str	r2, [r4, #8]
 80242f8:	f023 0301 	bic.w	r3, r3, #1
 80242fc:	8322      	strh	r2, [r4, #24]
 80242fe:	8362      	strh	r2, [r4, #26]
 8024300:	f043 0302 	orr.w	r3, r3, #2
 8024304:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024308:	63e3      	str	r3, [r4, #60]	; 0x3c
 802430a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802430e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8024312:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024316:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802431a:	bd10      	pop	{r4, pc}

0802431c <_ZN8touchgfx7OutlineC1Ev>:
 802431c:	4b0f      	ldr	r3, [pc, #60]	; (802435c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802431e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024322:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8024326:	b510      	push	{r4, lr}
 8024328:	6003      	str	r3, [r0, #0]
 802432a:	2300      	movs	r3, #0
 802432c:	4604      	mov	r4, r0
 802432e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8024332:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024336:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802433a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802433e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8024342:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8024346:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802434a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802434e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8024352:	f7ff ffbf 	bl	80242d4 <_ZN8touchgfx7Outline5resetEv>
 8024356:	4620      	mov	r0, r4
 8024358:	bd10      	pop	{r4, pc}
 802435a:	bf00      	nop
 802435c:	0802a744 	.word	0x0802a744

08024360 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8024360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024364:	b093      	sub	sp, #76	; 0x4c
 8024366:	4604      	mov	r4, r0
 8024368:	1156      	asrs	r6, r2, #5
 802436a:	f002 0e1f 	and.w	lr, r2, #31
 802436e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8024370:	9305      	str	r3, [sp, #20]
 8024372:	1143      	asrs	r3, r0, #5
 8024374:	1145      	asrs	r5, r0, #5
 8024376:	930c      	str	r3, [sp, #48]	; 0x30
 8024378:	f000 031f 	and.w	r3, r0, #31
 802437c:	9303      	str	r3, [sp, #12]
 802437e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024380:	42b3      	cmp	r3, r6
 8024382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024384:	bfc8      	it	gt
 8024386:	6326      	strgt	r6, [r4, #48]	; 0x30
 8024388:	42b3      	cmp	r3, r6
 802438a:	bfdc      	itt	le
 802438c:	1c73      	addle	r3, r6, #1
 802438e:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024392:	42ab      	cmp	r3, r5
 8024394:	bfc8      	it	gt
 8024396:	462b      	movgt	r3, r5
 8024398:	ea4f 1560 	mov.w	r5, r0, asr #5
 802439c:	bfc8      	it	gt
 802439e:	6323      	strgt	r3, [r4, #48]	; 0x30
 80243a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80243a2:	42ab      	cmp	r3, r5
 80243a4:	bfd8      	it	le
 80243a6:	462b      	movle	r3, r5
 80243a8:	ea4f 1561 	mov.w	r5, r1, asr #5
 80243ac:	bfdc      	itt	le
 80243ae:	3301      	addle	r3, #1
 80243b0:	63a3      	strle	r3, [r4, #56]	; 0x38
 80243b2:	9b05      	ldr	r3, [sp, #20]
 80243b4:	eba3 0a01 	sub.w	sl, r3, r1
 80243b8:	1143      	asrs	r3, r0, #5
 80243ba:	429e      	cmp	r6, r3
 80243bc:	f040 8119 	bne.w	80245f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 80243c0:	9b05      	ldr	r3, [sp, #20]
 80243c2:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80243c6:	9b03      	ldr	r3, [sp, #12]
 80243c8:	459e      	cmp	lr, r3
 80243ca:	d12c      	bne.n	8024426 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80243cc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80243d0:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80243d4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80243d8:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80243dc:	4291      	cmp	r1, r2
 80243de:	d037      	beq.n	8024450 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80243e0:	8b61      	ldrh	r1, [r4, #26]
 80243e2:	8b22      	ldrh	r2, [r4, #24]
 80243e4:	430a      	orrs	r2, r1
 80243e6:	d00b      	beq.n	8024400 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80243e8:	2b00      	cmp	r3, #0
 80243ea:	db09      	blt.n	8024400 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80243ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80243ee:	429a      	cmp	r2, r3
 80243f0:	dd06      	ble.n	8024400 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80243f2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80243f6:	429a      	cmp	r2, r3
 80243f8:	d308      	bcc.n	802440c <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80243fa:	2301      	movs	r3, #1
 80243fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024400:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024404:	82e6      	strh	r6, [r4, #22]
 8024406:	2300      	movs	r3, #0
 8024408:	8323      	strh	r3, [r4, #24]
 802440a:	e0c6      	b.n	802459a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802440c:	f104 0314 	add.w	r3, r4, #20
 8024410:	6922      	ldr	r2, [r4, #16]
 8024412:	cb03      	ldmia	r3!, {r0, r1}
 8024414:	6010      	str	r0, [r2, #0]
 8024416:	6051      	str	r1, [r2, #4]
 8024418:	6923      	ldr	r3, [r4, #16]
 802441a:	3308      	adds	r3, #8
 802441c:	6123      	str	r3, [r4, #16]
 802441e:	68a3      	ldr	r3, [r4, #8]
 8024420:	3301      	adds	r3, #1
 8024422:	60a3      	str	r3, [r4, #8]
 8024424:	e7ec      	b.n	8024400 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8024426:	9b05      	ldr	r3, [sp, #20]
 8024428:	45ac      	cmp	ip, r5
 802442a:	f001 011f 	and.w	r1, r1, #31
 802442e:	8b20      	ldrh	r0, [r4, #24]
 8024430:	f003 031f 	and.w	r3, r3, #31
 8024434:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8024438:	9304      	str	r3, [sp, #16]
 802443a:	9b03      	ldr	r3, [sp, #12]
 802443c:	eba3 020e 	sub.w	r2, r3, lr
 8024440:	d109      	bne.n	8024456 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8024442:	9b04      	ldr	r3, [sp, #16]
 8024444:	4410      	add	r0, r2
 8024446:	4419      	add	r1, r3
 8024448:	8320      	strh	r0, [r4, #24]
 802444a:	fb02 8201 	mla	r2, r2, r1, r8
 802444e:	8362      	strh	r2, [r4, #26]
 8024450:	b013      	add	sp, #76	; 0x4c
 8024452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024456:	f1ba 0f00 	cmp.w	sl, #0
 802445a:	f2c0 80a0 	blt.w	802459e <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 802445e:	f1c1 0320 	rsb	r3, r1, #32
 8024462:	f04f 0b20 	mov.w	fp, #32
 8024466:	435a      	muls	r2, r3
 8024468:	2301      	movs	r3, #1
 802446a:	9302      	str	r3, [sp, #8]
 802446c:	4459      	add	r1, fp
 802446e:	fb92 f7fa 	sdiv	r7, r2, sl
 8024472:	fb0a 2217 	mls	r2, sl, r7, r2
 8024476:	2a00      	cmp	r2, #0
 8024478:	bfbc      	itt	lt
 802447a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802447e:	4452      	addlt	r2, sl
 8024480:	fb07 8101 	mla	r1, r7, r1, r8
 8024484:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024488:	4438      	add	r0, r7
 802448a:	b20b      	sxth	r3, r1
 802448c:	9902      	ldr	r1, [sp, #8]
 802448e:	b200      	sxth	r0, r0
 8024490:	9301      	str	r3, [sp, #4]
 8024492:	8363      	strh	r3, [r4, #26]
 8024494:	186b      	adds	r3, r5, r1
 8024496:	0435      	lsls	r5, r6, #16
 8024498:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802449c:	8320      	strh	r0, [r4, #24]
 802449e:	eb03 0905 	add.w	r9, r3, r5
 80244a2:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 80244a6:	9300      	str	r3, [sp, #0]
 80244a8:	45c1      	cmp	r9, r8
 80244aa:	9505      	str	r5, [sp, #20]
 80244ac:	d014      	beq.n	80244d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 80244ae:	9b01      	ldr	r3, [sp, #4]
 80244b0:	4303      	orrs	r3, r0
 80244b2:	d00b      	beq.n	80244cc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80244b4:	2900      	cmp	r1, #0
 80244b6:	db09      	blt.n	80244cc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80244b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80244ba:	428b      	cmp	r3, r1
 80244bc:	dd06      	ble.n	80244cc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80244be:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80244c2:	4299      	cmp	r1, r3
 80244c4:	d374      	bcc.n	80245b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 80244c6:	2301      	movs	r3, #1
 80244c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80244cc:	9b00      	ldr	r3, [sp, #0]
 80244ce:	82e6      	strh	r6, [r4, #22]
 80244d0:	82a3      	strh	r3, [r4, #20]
 80244d2:	2300      	movs	r3, #0
 80244d4:	8323      	strh	r3, [r4, #24]
 80244d6:	8363      	strh	r3, [r4, #26]
 80244d8:	9900      	ldr	r1, [sp, #0]
 80244da:	eb0e 0307 	add.w	r3, lr, r7
 80244de:	458c      	cmp	ip, r1
 80244e0:	d04e      	beq.n	8024580 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 80244e2:	9903      	ldr	r1, [sp, #12]
 80244e4:	eba2 020a 	sub.w	r2, r2, sl
 80244e8:	1ac9      	subs	r1, r1, r3
 80244ea:	9201      	str	r2, [sp, #4]
 80244ec:	440f      	add	r7, r1
 80244ee:	017f      	lsls	r7, r7, #5
 80244f0:	fb97 fefa 	sdiv	lr, r7, sl
 80244f4:	fb0a 771e 	mls	r7, sl, lr, r7
 80244f8:	2f00      	cmp	r7, #0
 80244fa:	bfbc      	itt	lt
 80244fc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024500:	4457      	addlt	r7, sl
 8024502:	f10e 0101 	add.w	r1, lr, #1
 8024506:	9106      	str	r1, [sp, #24]
 8024508:	9a01      	ldr	r2, [sp, #4]
 802450a:	8b20      	ldrh	r0, [r4, #24]
 802450c:	19d2      	adds	r2, r2, r7
 802450e:	8b61      	ldrh	r1, [r4, #26]
 8024510:	9d02      	ldr	r5, [sp, #8]
 8024512:	9201      	str	r2, [sp, #4]
 8024514:	bf5b      	ittet	pl
 8024516:	eba2 020a 	subpl.w	r2, r2, sl
 802451a:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802451e:	46f0      	movmi	r8, lr
 8024520:	9201      	strpl	r2, [sp, #4]
 8024522:	9a00      	ldr	r2, [sp, #0]
 8024524:	4440      	add	r0, r8
 8024526:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802452a:	4443      	add	r3, r8
 802452c:	442a      	add	r2, r5
 802452e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024532:	9d05      	ldr	r5, [sp, #20]
 8024534:	b200      	sxth	r0, r0
 8024536:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802453a:	b209      	sxth	r1, r1
 802453c:	4415      	add	r5, r2
 802453e:	8320      	strh	r0, [r4, #24]
 8024540:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024544:	8361      	strh	r1, [r4, #26]
 8024546:	9200      	str	r2, [sp, #0]
 8024548:	454d      	cmp	r5, r9
 802454a:	d016      	beq.n	802457a <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 802454c:	4301      	orrs	r1, r0
 802454e:	d00d      	beq.n	802456c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024550:	f1b8 0f00 	cmp.w	r8, #0
 8024554:	db0a      	blt.n	802456c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8024556:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024558:	4541      	cmp	r1, r8
 802455a:	dd07      	ble.n	802456c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802455c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024560:	4288      	cmp	r0, r1
 8024562:	d335      	bcc.n	80245d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8024564:	f04f 0101 	mov.w	r1, #1
 8024568:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802456c:	9900      	ldr	r1, [sp, #0]
 802456e:	82e6      	strh	r6, [r4, #22]
 8024570:	82a1      	strh	r1, [r4, #20]
 8024572:	f04f 0100 	mov.w	r1, #0
 8024576:	8321      	strh	r1, [r4, #24]
 8024578:	8361      	strh	r1, [r4, #26]
 802457a:	9a00      	ldr	r2, [sp, #0]
 802457c:	4594      	cmp	ip, r2
 802457e:	d1c3      	bne.n	8024508 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8024580:	9a03      	ldr	r2, [sp, #12]
 8024582:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8024586:	1ad3      	subs	r3, r2, r3
 8024588:	8b22      	ldrh	r2, [r4, #24]
 802458a:	441a      	add	r2, r3
 802458c:	8322      	strh	r2, [r4, #24]
 802458e:	9a04      	ldr	r2, [sp, #16]
 8024590:	3220      	adds	r2, #32
 8024592:	eba2 020b 	sub.w	r2, r2, fp
 8024596:	fb03 c302 	mla	r3, r3, r2, ip
 802459a:	8363      	strh	r3, [r4, #26]
 802459c:	e758      	b.n	8024450 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802459e:	f04f 33ff 	mov.w	r3, #4294967295
 80245a2:	434a      	muls	r2, r1
 80245a4:	f1ca 0a00 	rsb	sl, sl, #0
 80245a8:	f04f 0b00 	mov.w	fp, #0
 80245ac:	9302      	str	r3, [sp, #8]
 80245ae:	e75d      	b.n	802446c <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80245b0:	f104 0314 	add.w	r3, r4, #20
 80245b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80245b8:	cb03      	ldmia	r3!, {r0, r1}
 80245ba:	f8c8 0000 	str.w	r0, [r8]
 80245be:	f8c8 1004 	str.w	r1, [r8, #4]
 80245c2:	6923      	ldr	r3, [r4, #16]
 80245c4:	3308      	adds	r3, #8
 80245c6:	6123      	str	r3, [r4, #16]
 80245c8:	68a3      	ldr	r3, [r4, #8]
 80245ca:	3301      	adds	r3, #1
 80245cc:	60a3      	str	r3, [r4, #8]
 80245ce:	e77d      	b.n	80244cc <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 80245d0:	f104 0814 	add.w	r8, r4, #20
 80245d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80245d8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80245dc:	f8c9 0000 	str.w	r0, [r9]
 80245e0:	f8c9 1004 	str.w	r1, [r9, #4]
 80245e4:	6921      	ldr	r1, [r4, #16]
 80245e6:	3108      	adds	r1, #8
 80245e8:	6121      	str	r1, [r4, #16]
 80245ea:	68a1      	ldr	r1, [r4, #8]
 80245ec:	3101      	adds	r1, #1
 80245ee:	60a1      	str	r1, [r4, #8]
 80245f0:	e7bc      	b.n	802456c <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80245f2:	1a83      	subs	r3, r0, r2
 80245f4:	9301      	str	r3, [sp, #4]
 80245f6:	f1ba 0f00 	cmp.w	sl, #0
 80245fa:	f040 8094 	bne.w	8024726 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80245fe:	9a01      	ldr	r2, [sp, #4]
 8024600:	0049      	lsls	r1, r1, #1
 8024602:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8024606:	2a00      	cmp	r2, #0
 8024608:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802460c:	8b62      	ldrh	r2, [r4, #26]
 802460e:	bfaa      	itet	ge
 8024610:	f04f 0a20 	movge.w	sl, #32
 8024614:	f04f 38ff 	movlt.w	r8, #4294967295
 8024618:	f04f 0801 	movge.w	r8, #1
 802461c:	8b21      	ldrh	r1, [r4, #24]
 802461e:	ebaa 0e0e 	sub.w	lr, sl, lr
 8024622:	4471      	add	r1, lr
 8024624:	fb0e 2e03 	mla	lr, lr, r3, r2
 8024628:	eb08 0206 	add.w	r2, r8, r6
 802462c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8024630:	b209      	sxth	r1, r1
 8024632:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8024636:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 802463a:	8321      	strh	r1, [r4, #24]
 802463c:	fa0f fe8e 	sxth.w	lr, lr
 8024640:	42b7      	cmp	r7, r6
 8024642:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024646:	d013      	beq.n	8024670 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8024648:	ea51 010e 	orrs.w	r1, r1, lr
 802464c:	d00b      	beq.n	8024666 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802464e:	2800      	cmp	r0, #0
 8024650:	db09      	blt.n	8024666 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024652:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024654:	4281      	cmp	r1, r0
 8024656:	dd06      	ble.n	8024666 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8024658:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802465c:	4288      	cmp	r0, r1
 802465e:	d339      	bcc.n	80246d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8024660:	2101      	movs	r1, #1
 8024662:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024666:	2100      	movs	r1, #0
 8024668:	82a5      	strh	r5, [r4, #20]
 802466a:	82e2      	strh	r2, [r4, #22]
 802466c:	8321      	strh	r1, [r4, #24]
 802466e:	8361      	strh	r1, [r4, #26]
 8024670:	f1aa 0610 	sub.w	r6, sl, #16
 8024674:	f04f 0e00 	mov.w	lr, #0
 8024678:	f04f 0b01 	mov.w	fp, #1
 802467c:	0076      	lsls	r6, r6, #1
 802467e:	fb06 f703 	mul.w	r7, r6, r3
 8024682:	b236      	sxth	r6, r6
 8024684:	b23f      	sxth	r7, r7
 8024686:	ea46 0107 	orr.w	r1, r6, r7
 802468a:	9100      	str	r1, [sp, #0]
 802468c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802468e:	428a      	cmp	r2, r1
 8024690:	d03e      	beq.n	8024710 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8024692:	4442      	add	r2, r8
 8024694:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024698:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802469c:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 80246a0:	8326      	strh	r6, [r4, #24]
 80246a2:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80246a6:	8367      	strh	r7, [r4, #26]
 80246a8:	4584      	cmp	ip, r0
 80246aa:	d0ef      	beq.n	802468c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80246ac:	9800      	ldr	r0, [sp, #0]
 80246ae:	b150      	cbz	r0, 80246c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80246b0:	2900      	cmp	r1, #0
 80246b2:	db08      	blt.n	80246c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80246b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80246b6:	4288      	cmp	r0, r1
 80246b8:	dd05      	ble.n	80246c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80246ba:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80246be:	4288      	cmp	r0, r1
 80246c0:	d315      	bcc.n	80246ee <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80246c2:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80246c6:	82a5      	strh	r5, [r4, #20]
 80246c8:	82e2      	strh	r2, [r4, #22]
 80246ca:	f8a4 e018 	strh.w	lr, [r4, #24]
 80246ce:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80246d2:	e7db      	b.n	802468c <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80246d4:	f104 0614 	add.w	r6, r4, #20
 80246d8:	6927      	ldr	r7, [r4, #16]
 80246da:	ce03      	ldmia	r6!, {r0, r1}
 80246dc:	6038      	str	r0, [r7, #0]
 80246de:	6079      	str	r1, [r7, #4]
 80246e0:	6921      	ldr	r1, [r4, #16]
 80246e2:	3108      	adds	r1, #8
 80246e4:	6121      	str	r1, [r4, #16]
 80246e6:	68a1      	ldr	r1, [r4, #8]
 80246e8:	3101      	adds	r1, #1
 80246ea:	60a1      	str	r1, [r4, #8]
 80246ec:	e7bb      	b.n	8024666 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80246ee:	f104 0c14 	add.w	ip, r4, #20
 80246f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80246f6:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80246fa:	f8c9 0000 	str.w	r0, [r9]
 80246fe:	f8c9 1004 	str.w	r1, [r9, #4]
 8024702:	6921      	ldr	r1, [r4, #16]
 8024704:	3108      	adds	r1, #8
 8024706:	6121      	str	r1, [r4, #16]
 8024708:	68a1      	ldr	r1, [r4, #8]
 802470a:	3101      	adds	r1, #1
 802470c:	60a1      	str	r1, [r4, #8]
 802470e:	e7da      	b.n	80246c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8024710:	9a03      	ldr	r2, [sp, #12]
 8024712:	8b61      	ldrh	r1, [r4, #26]
 8024714:	f1a2 0c20 	sub.w	ip, r2, #32
 8024718:	8b22      	ldrh	r2, [r4, #24]
 802471a:	44d4      	add	ip, sl
 802471c:	4462      	add	r2, ip
 802471e:	fb0c 1303 	mla	r3, ip, r3, r1
 8024722:	8322      	strh	r2, [r4, #24]
 8024724:	e739      	b.n	802459a <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8024726:	9b01      	ldr	r3, [sp, #4]
 8024728:	2b00      	cmp	r3, #0
 802472a:	db3f      	blt.n	80247ac <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 802472c:	2201      	movs	r2, #1
 802472e:	f1ce 0320 	rsb	r3, lr, #32
 8024732:	920b      	str	r2, [sp, #44]	; 0x2c
 8024734:	2220      	movs	r2, #32
 8024736:	fb0a f303 	mul.w	r3, sl, r3
 802473a:	9202      	str	r2, [sp, #8]
 802473c:	9a01      	ldr	r2, [sp, #4]
 802473e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024742:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024746:	fb93 f7f2 	sdiv	r7, r3, r2
 802474a:	fb02 3317 	mls	r3, r2, r7, r3
 802474e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024752:	2b00      	cmp	r3, #0
 8024754:	9308      	str	r3, [sp, #32]
 8024756:	bfbc      	itt	lt
 8024758:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802475c:	189b      	addlt	r3, r3, r2
 802475e:	eb07 0b01 	add.w	fp, r7, r1
 8024762:	bfb8      	it	lt
 8024764:	9308      	strlt	r3, [sp, #32]
 8024766:	ea4f 136b 	mov.w	r3, fp, asr #5
 802476a:	9304      	str	r3, [sp, #16]
 802476c:	9b02      	ldr	r3, [sp, #8]
 802476e:	4573      	cmp	r3, lr
 8024770:	d133      	bne.n	80247da <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8024772:	9b04      	ldr	r3, [sp, #16]
 8024774:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8024778:	454b      	cmp	r3, r9
 802477a:	d045      	beq.n	8024808 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 802477c:	8b62      	ldrh	r2, [r4, #26]
 802477e:	8b23      	ldrh	r3, [r4, #24]
 8024780:	4313      	orrs	r3, r2
 8024782:	d00c      	beq.n	802479e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024784:	f1b8 0f00 	cmp.w	r8, #0
 8024788:	db09      	blt.n	802479e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802478a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802478c:	4543      	cmp	r3, r8
 802478e:	dd06      	ble.n	802479e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024790:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024794:	429a      	cmp	r2, r3
 8024796:	d313      	bcc.n	80247c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8024798:	2301      	movs	r3, #1
 802479a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802479e:	9b04      	ldr	r3, [sp, #16]
 80247a0:	82e6      	strh	r6, [r4, #22]
 80247a2:	82a3      	strh	r3, [r4, #20]
 80247a4:	2300      	movs	r3, #0
 80247a6:	8323      	strh	r3, [r4, #24]
 80247a8:	8363      	strh	r3, [r4, #26]
 80247aa:	e02d      	b.n	8024808 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80247ac:	9a01      	ldr	r2, [sp, #4]
 80247ae:	fb0a f30e 	mul.w	r3, sl, lr
 80247b2:	4252      	negs	r2, r2
 80247b4:	9201      	str	r2, [sp, #4]
 80247b6:	f04f 32ff 	mov.w	r2, #4294967295
 80247ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80247bc:	2200      	movs	r2, #0
 80247be:	e7bc      	b.n	802473a <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80247c0:	f104 0314 	add.w	r3, r4, #20
 80247c4:	6922      	ldr	r2, [r4, #16]
 80247c6:	cb03      	ldmia	r3!, {r0, r1}
 80247c8:	6010      	str	r0, [r2, #0]
 80247ca:	6051      	str	r1, [r2, #4]
 80247cc:	6923      	ldr	r3, [r4, #16]
 80247ce:	3308      	adds	r3, #8
 80247d0:	6123      	str	r3, [r4, #16]
 80247d2:	68a3      	ldr	r3, [r4, #8]
 80247d4:	3301      	adds	r3, #1
 80247d6:	60a3      	str	r3, [r4, #8]
 80247d8:	e7e1      	b.n	802479e <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80247da:	f00b 031f 	and.w	r3, fp, #31
 80247de:	f001 011f 	and.w	r1, r1, #31
 80247e2:	8b20      	ldrh	r0, [r4, #24]
 80247e4:	9309      	str	r3, [sp, #36]	; 0x24
 80247e6:	9b02      	ldr	r3, [sp, #8]
 80247e8:	eba3 020e 	sub.w	r2, r3, lr
 80247ec:	8b63      	ldrh	r3, [r4, #26]
 80247ee:	9300      	str	r3, [sp, #0]
 80247f0:	9b04      	ldr	r3, [sp, #16]
 80247f2:	42ab      	cmp	r3, r5
 80247f4:	f040 80ef 	bne.w	80249d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 80247f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247fa:	4410      	add	r0, r2
 80247fc:	4419      	add	r1, r3
 80247fe:	9b00      	ldr	r3, [sp, #0]
 8024800:	8320      	strh	r0, [r4, #24]
 8024802:	fb02 3101 	mla	r1, r2, r1, r3
 8024806:	8361      	strh	r1, [r4, #26]
 8024808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802480a:	9904      	ldr	r1, [sp, #16]
 802480c:	4433      	add	r3, r6
 802480e:	9300      	str	r3, [sp, #0]
 8024810:	9a00      	ldr	r2, [sp, #0]
 8024812:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024816:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 802481a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802481e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024822:	4288      	cmp	r0, r1
 8024824:	d018      	beq.n	8024858 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024826:	8b60      	ldrh	r0, [r4, #26]
 8024828:	8b21      	ldrh	r1, [r4, #24]
 802482a:	ea50 0201 	orrs.w	r2, r0, r1
 802482e:	d00c      	beq.n	802484a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024830:	2b00      	cmp	r3, #0
 8024832:	db0a      	blt.n	802484a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024834:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024836:	4299      	cmp	r1, r3
 8024838:	dd07      	ble.n	802484a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802483a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802483e:	4299      	cmp	r1, r3
 8024840:	f0c0 818b 	bcc.w	8024b5a <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8024844:	2301      	movs	r3, #1
 8024846:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802484a:	9b04      	ldr	r3, [sp, #16]
 802484c:	82a3      	strh	r3, [r4, #20]
 802484e:	9b00      	ldr	r3, [sp, #0]
 8024850:	82e3      	strh	r3, [r4, #22]
 8024852:	2300      	movs	r3, #0
 8024854:	8323      	strh	r3, [r4, #24]
 8024856:	8363      	strh	r3, [r4, #26]
 8024858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802485a:	9a00      	ldr	r2, [sp, #0]
 802485c:	4293      	cmp	r3, r2
 802485e:	f000 808d 	beq.w	802497c <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8024862:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024866:	9901      	ldr	r1, [sp, #4]
 8024868:	9801      	ldr	r0, [sp, #4]
 802486a:	fb93 f1f1 	sdiv	r1, r3, r1
 802486e:	fb00 3311 	mls	r3, r0, r1, r3
 8024872:	9106      	str	r1, [sp, #24]
 8024874:	2b00      	cmp	r3, #0
 8024876:	9307      	str	r3, [sp, #28]
 8024878:	da04      	bge.n	8024884 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 802487a:	1e4b      	subs	r3, r1, #1
 802487c:	9306      	str	r3, [sp, #24]
 802487e:	9b07      	ldr	r3, [sp, #28]
 8024880:	4403      	add	r3, r0
 8024882:	9307      	str	r3, [sp, #28]
 8024884:	9b08      	ldr	r3, [sp, #32]
 8024886:	f04f 0c00 	mov.w	ip, #0
 802488a:	9901      	ldr	r1, [sp, #4]
 802488c:	1a5b      	subs	r3, r3, r1
 802488e:	4659      	mov	r1, fp
 8024890:	9308      	str	r3, [sp, #32]
 8024892:	9b02      	ldr	r3, [sp, #8]
 8024894:	f1c3 0320 	rsb	r3, r3, #32
 8024898:	930a      	str	r3, [sp, #40]	; 0x28
 802489a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802489c:	9b02      	ldr	r3, [sp, #8]
 802489e:	1a1b      	subs	r3, r3, r0
 80248a0:	9309      	str	r3, [sp, #36]	; 0x24
 80248a2:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 80248a6:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80248aa:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 80248ae:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 80248b2:	181b      	adds	r3, r3, r0
 80248b4:	bf58      	it	pl
 80248b6:	9801      	ldrpl	r0, [sp, #4]
 80248b8:	9308      	str	r3, [sp, #32]
 80248ba:	bf54      	ite	pl
 80248bc:	1a1b      	subpl	r3, r3, r0
 80248be:	9d06      	ldrmi	r5, [sp, #24]
 80248c0:	9802      	ldr	r0, [sp, #8]
 80248c2:	bf5e      	ittt	pl
 80248c4:	9308      	strpl	r3, [sp, #32]
 80248c6:	9b06      	ldrpl	r3, [sp, #24]
 80248c8:	1c5d      	addpl	r5, r3, #1
 80248ca:	44ab      	add	fp, r5
 80248cc:	ea4f 136b 	mov.w	r3, fp, asr #5
 80248d0:	9304      	str	r3, [sp, #16]
 80248d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80248d4:	4283      	cmp	r3, r0
 80248d6:	f040 815a 	bne.w	8024b8e <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 80248da:	9b04      	ldr	r3, [sp, #16]
 80248dc:	9a00      	ldr	r2, [sp, #0]
 80248de:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80248e2:	4543      	cmp	r3, r8
 80248e4:	d01a      	beq.n	802491c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80248e6:	8b61      	ldrh	r1, [r4, #26]
 80248e8:	8b23      	ldrh	r3, [r4, #24]
 80248ea:	430b      	orrs	r3, r1
 80248ec:	d00e      	beq.n	802490c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80248ee:	f1be 0f00 	cmp.w	lr, #0
 80248f2:	db0b      	blt.n	802490c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80248f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80248f6:	4573      	cmp	r3, lr
 80248f8:	dd08      	ble.n	802490c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80248fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80248fe:	4299      	cmp	r1, r3
 8024900:	f0c0 8138 	bcc.w	8024b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024904:	f04f 0301 	mov.w	r3, #1
 8024908:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802490c:	9b04      	ldr	r3, [sp, #16]
 802490e:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024912:	82a3      	strh	r3, [r4, #20]
 8024914:	9b00      	ldr	r3, [sp, #0]
 8024916:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802491a:	82e3      	strh	r3, [r4, #22]
 802491c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802491e:	9a00      	ldr	r2, [sp, #0]
 8024920:	441a      	add	r2, r3
 8024922:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024926:	9200      	str	r2, [sp, #0]
 8024928:	9900      	ldr	r1, [sp, #0]
 802492a:	9a04      	ldr	r2, [sp, #16]
 802492c:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8024930:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024934:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024938:	4288      	cmp	r0, r1
 802493a:	d01a      	beq.n	8024972 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 802493c:	8b60      	ldrh	r0, [r4, #26]
 802493e:	8b21      	ldrh	r1, [r4, #24]
 8024940:	ea50 0201 	orrs.w	r2, r0, r1
 8024944:	d00d      	beq.n	8024962 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024946:	2b00      	cmp	r3, #0
 8024948:	db0b      	blt.n	8024962 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802494a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802494c:	4299      	cmp	r1, r3
 802494e:	dd08      	ble.n	8024962 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024950:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024954:	4299      	cmp	r1, r3
 8024956:	f0c0 81f9 	bcc.w	8024d4c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802495a:	f04f 0301 	mov.w	r3, #1
 802495e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024962:	9b04      	ldr	r3, [sp, #16]
 8024964:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024968:	82a3      	strh	r3, [r4, #20]
 802496a:	9b00      	ldr	r3, [sp, #0]
 802496c:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024970:	82e3      	strh	r3, [r4, #22]
 8024972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024974:	4659      	mov	r1, fp
 8024976:	9a00      	ldr	r2, [sp, #0]
 8024978:	4293      	cmp	r3, r2
 802497a:	d192      	bne.n	80248a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 802497c:	9b02      	ldr	r3, [sp, #8]
 802497e:	f1c3 0c20 	rsb	ip, r3, #32
 8024982:	9b05      	ldr	r3, [sp, #20]
 8024984:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8024988:	9b03      	ldr	r3, [sp, #12]
 802498a:	459c      	cmp	ip, r3
 802498c:	f040 81f8 	bne.w	8024d80 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8024990:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024994:	9a00      	ldr	r2, [sp, #0]
 8024996:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802499a:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 802499e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80249a2:	4288      	cmp	r0, r1
 80249a4:	f43f ad54 	beq.w	8024450 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80249a8:	8b60      	ldrh	r0, [r4, #26]
 80249aa:	8b21      	ldrh	r1, [r4, #24]
 80249ac:	ea50 0201 	orrs.w	r2, r0, r1
 80249b0:	d00c      	beq.n	80249cc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80249b2:	2b00      	cmp	r3, #0
 80249b4:	db0a      	blt.n	80249cc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80249b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80249b8:	4299      	cmp	r1, r3
 80249ba:	dd07      	ble.n	80249cc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80249bc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80249c0:	4299      	cmp	r1, r3
 80249c2:	f0c0 81d0 	bcc.w	8024d66 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 80249c6:	2301      	movs	r3, #1
 80249c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80249cc:	9b00      	ldr	r3, [sp, #0]
 80249ce:	f8a4 e014 	strh.w	lr, [r4, #20]
 80249d2:	82e3      	strh	r3, [r4, #22]
 80249d4:	e517      	b.n	8024406 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 80249d6:	2f00      	cmp	r7, #0
 80249d8:	f2c0 8097 	blt.w	8024b0a <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 80249dc:	2301      	movs	r3, #1
 80249de:	f1c1 0c20 	rsb	ip, r1, #32
 80249e2:	9307      	str	r3, [sp, #28]
 80249e4:	2320      	movs	r3, #32
 80249e6:	fb02 f20c 	mul.w	r2, r2, ip
 80249ea:	9306      	str	r3, [sp, #24]
 80249ec:	9b06      	ldr	r3, [sp, #24]
 80249ee:	fb92 fcf7 	sdiv	ip, r2, r7
 80249f2:	fb07 221c 	mls	r2, r7, ip, r2
 80249f6:	4419      	add	r1, r3
 80249f8:	9b00      	ldr	r3, [sp, #0]
 80249fa:	2a00      	cmp	r2, #0
 80249fc:	bfbc      	itt	lt
 80249fe:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024a02:	19d2      	addlt	r2, r2, r7
 8024a04:	fb0c 3101 	mla	r1, ip, r1, r3
 8024a08:	9b07      	ldr	r3, [sp, #28]
 8024a0a:	4460      	add	r0, ip
 8024a0c:	441d      	add	r5, r3
 8024a0e:	0433      	lsls	r3, r6, #16
 8024a10:	b200      	sxth	r0, r0
 8024a12:	930a      	str	r3, [sp, #40]	; 0x28
 8024a14:	18eb      	adds	r3, r5, r3
 8024a16:	b209      	sxth	r1, r1
 8024a18:	8320      	strh	r0, [r4, #24]
 8024a1a:	454b      	cmp	r3, r9
 8024a1c:	8361      	strh	r1, [r4, #26]
 8024a1e:	d014      	beq.n	8024a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8024a20:	ea50 0301 	orrs.w	r3, r0, r1
 8024a24:	d00c      	beq.n	8024a40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024a26:	f1b8 0f00 	cmp.w	r8, #0
 8024a2a:	db09      	blt.n	8024a40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024a2e:	4543      	cmp	r3, r8
 8024a30:	dd06      	ble.n	8024a40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024a32:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024a36:	4299      	cmp	r1, r3
 8024a38:	d36e      	bcc.n	8024b18 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024a3a:	2301      	movs	r3, #1
 8024a3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024a40:	2300      	movs	r3, #0
 8024a42:	82a5      	strh	r5, [r4, #20]
 8024a44:	82e6      	strh	r6, [r4, #22]
 8024a46:	8323      	strh	r3, [r4, #24]
 8024a48:	8363      	strh	r3, [r4, #26]
 8024a4a:	9904      	ldr	r1, [sp, #16]
 8024a4c:	eb0e 030c 	add.w	r3, lr, ip
 8024a50:	42a9      	cmp	r1, r5
 8024a52:	d04d      	beq.n	8024af0 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8024a54:	9902      	ldr	r1, [sp, #8]
 8024a56:	1bd2      	subs	r2, r2, r7
 8024a58:	1ac9      	subs	r1, r1, r3
 8024a5a:	9200      	str	r2, [sp, #0]
 8024a5c:	448c      	add	ip, r1
 8024a5e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024a62:	fb9c fef7 	sdiv	lr, ip, r7
 8024a66:	fb07 cc1e 	mls	ip, r7, lr, ip
 8024a6a:	f1bc 0f00 	cmp.w	ip, #0
 8024a6e:	bfbc      	itt	lt
 8024a70:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8024a74:	44bc      	addlt	ip, r7
 8024a76:	f10e 0101 	add.w	r1, lr, #1
 8024a7a:	910d      	str	r1, [sp, #52]	; 0x34
 8024a7c:	9a00      	ldr	r2, [sp, #0]
 8024a7e:	8b20      	ldrh	r0, [r4, #24]
 8024a80:	eb12 020c 	adds.w	r2, r2, ip
 8024a84:	8b61      	ldrh	r1, [r4, #26]
 8024a86:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024a8a:	9200      	str	r2, [sp, #0]
 8024a8c:	bf5b      	ittet	pl
 8024a8e:	1bd2      	subpl	r2, r2, r7
 8024a90:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8024a94:	46f0      	movmi	r8, lr
 8024a96:	9200      	strpl	r2, [sp, #0]
 8024a98:	9a07      	ldr	r2, [sp, #28]
 8024a9a:	4440      	add	r0, r8
 8024a9c:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8024aa0:	4443      	add	r3, r8
 8024aa2:	4415      	add	r5, r2
 8024aa4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024aaa:	b200      	sxth	r0, r0
 8024aac:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024ab0:	442a      	add	r2, r5
 8024ab2:	b209      	sxth	r1, r1
 8024ab4:	8320      	strh	r0, [r4, #24]
 8024ab6:	454a      	cmp	r2, r9
 8024ab8:	8361      	strh	r1, [r4, #26]
 8024aba:	d016      	beq.n	8024aea <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024abc:	ea50 0201 	orrs.w	r2, r0, r1
 8024ac0:	d00d      	beq.n	8024ade <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024ac2:	f1b8 0f00 	cmp.w	r8, #0
 8024ac6:	db0a      	blt.n	8024ade <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024ac8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024aca:	4541      	cmp	r1, r8
 8024acc:	dd07      	ble.n	8024ade <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024ace:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024ad2:	4288      	cmp	r0, r1
 8024ad4:	d330      	bcc.n	8024b38 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024ad6:	f04f 0201 	mov.w	r2, #1
 8024ada:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024ade:	f04f 0200 	mov.w	r2, #0
 8024ae2:	82a5      	strh	r5, [r4, #20]
 8024ae4:	82e6      	strh	r6, [r4, #22]
 8024ae6:	8322      	strh	r2, [r4, #24]
 8024ae8:	8362      	strh	r2, [r4, #26]
 8024aea:	9904      	ldr	r1, [sp, #16]
 8024aec:	42a9      	cmp	r1, r5
 8024aee:	d1c5      	bne.n	8024a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8024af0:	9a02      	ldr	r2, [sp, #8]
 8024af2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024af4:	1ad3      	subs	r3, r2, r3
 8024af6:	8b22      	ldrh	r2, [r4, #24]
 8024af8:	3120      	adds	r1, #32
 8024afa:	441a      	add	r2, r3
 8024afc:	8322      	strh	r2, [r4, #24]
 8024afe:	9a06      	ldr	r2, [sp, #24]
 8024b00:	1a89      	subs	r1, r1, r2
 8024b02:	8b62      	ldrh	r2, [r4, #26]
 8024b04:	fb03 2301 	mla	r3, r3, r1, r2
 8024b08:	e64e      	b.n	80247a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8024b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8024b0e:	434a      	muls	r2, r1
 8024b10:	427f      	negs	r7, r7
 8024b12:	9307      	str	r3, [sp, #28]
 8024b14:	2300      	movs	r3, #0
 8024b16:	e768      	b.n	80249ea <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8024b18:	f104 0314 	add.w	r3, r4, #20
 8024b1c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024b20:	cb03      	ldmia	r3!, {r0, r1}
 8024b22:	f8c8 0000 	str.w	r0, [r8]
 8024b26:	f8c8 1004 	str.w	r1, [r8, #4]
 8024b2a:	6923      	ldr	r3, [r4, #16]
 8024b2c:	3308      	adds	r3, #8
 8024b2e:	6123      	str	r3, [r4, #16]
 8024b30:	68a3      	ldr	r3, [r4, #8]
 8024b32:	3301      	adds	r3, #1
 8024b34:	60a3      	str	r3, [r4, #8]
 8024b36:	e783      	b.n	8024a40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024b38:	f104 0814 	add.w	r8, r4, #20
 8024b3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024b40:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024b44:	f8c9 0000 	str.w	r0, [r9]
 8024b48:	f8c9 1004 	str.w	r1, [r9, #4]
 8024b4c:	6921      	ldr	r1, [r4, #16]
 8024b4e:	3108      	adds	r1, #8
 8024b50:	6121      	str	r1, [r4, #16]
 8024b52:	68a1      	ldr	r1, [r4, #8]
 8024b54:	3101      	adds	r1, #1
 8024b56:	60a1      	str	r1, [r4, #8]
 8024b58:	e7c1      	b.n	8024ade <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024b5a:	f104 0314 	add.w	r3, r4, #20
 8024b5e:	6925      	ldr	r5, [r4, #16]
 8024b60:	cb03      	ldmia	r3!, {r0, r1}
 8024b62:	6028      	str	r0, [r5, #0]
 8024b64:	6069      	str	r1, [r5, #4]
 8024b66:	6923      	ldr	r3, [r4, #16]
 8024b68:	3308      	adds	r3, #8
 8024b6a:	6123      	str	r3, [r4, #16]
 8024b6c:	68a3      	ldr	r3, [r4, #8]
 8024b6e:	3301      	adds	r3, #1
 8024b70:	60a3      	str	r3, [r4, #8]
 8024b72:	e66a      	b.n	802484a <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024b74:	f104 0314 	add.w	r3, r4, #20
 8024b78:	6925      	ldr	r5, [r4, #16]
 8024b7a:	cb03      	ldmia	r3!, {r0, r1}
 8024b7c:	6028      	str	r0, [r5, #0]
 8024b7e:	6069      	str	r1, [r5, #4]
 8024b80:	6923      	ldr	r3, [r4, #16]
 8024b82:	3308      	adds	r3, #8
 8024b84:	6123      	str	r3, [r4, #16]
 8024b86:	68a3      	ldr	r3, [r4, #8]
 8024b88:	3301      	adds	r3, #1
 8024b8a:	60a3      	str	r3, [r4, #8]
 8024b8c:	e6be      	b.n	802490c <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024b8e:	f00b 031f 	and.w	r3, fp, #31
 8024b92:	114f      	asrs	r7, r1, #5
 8024b94:	8b20      	ldrh	r0, [r4, #24]
 8024b96:	f001 011f 	and.w	r1, r1, #31
 8024b9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8024b9c:	9b04      	ldr	r3, [sp, #16]
 8024b9e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024ba2:	429f      	cmp	r7, r3
 8024ba4:	d10a      	bne.n	8024bbc <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ba8:	4418      	add	r0, r3
 8024baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024bac:	4419      	add	r1, r3
 8024bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bb0:	8320      	strh	r0, [r4, #24]
 8024bb2:	fb03 9901 	mla	r9, r3, r1, r9
 8024bb6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024bba:	e6af      	b.n	802491c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024bbc:	2d00      	cmp	r5, #0
 8024bbe:	f2c0 809b 	blt.w	8024cf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8024bc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024bc4:	f1c1 0320 	rsb	r3, r1, #32
 8024bc8:	4373      	muls	r3, r6
 8024bca:	2601      	movs	r6, #1
 8024bcc:	960e      	str	r6, [sp, #56]	; 0x38
 8024bce:	2620      	movs	r6, #32
 8024bd0:	960d      	str	r6, [sp, #52]	; 0x34
 8024bd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024bd4:	fb93 f6f5 	sdiv	r6, r3, r5
 8024bd8:	4411      	add	r1, r2
 8024bda:	fb05 3316 	mls	r3, r5, r6, r3
 8024bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024be0:	2b00      	cmp	r3, #0
 8024be2:	4417      	add	r7, r2
 8024be4:	9a00      	ldr	r2, [sp, #0]
 8024be6:	bfbc      	itt	lt
 8024be8:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024bec:	195b      	addlt	r3, r3, r5
 8024bee:	0412      	lsls	r2, r2, #16
 8024bf0:	fb06 9101 	mla	r1, r6, r1, r9
 8024bf4:	4430      	add	r0, r6
 8024bf6:	eb07 0902 	add.w	r9, r7, r2
 8024bfa:	9210      	str	r2, [sp, #64]	; 0x40
 8024bfc:	b200      	sxth	r0, r0
 8024bfe:	b209      	sxth	r1, r1
 8024c00:	45c1      	cmp	r9, r8
 8024c02:	8320      	strh	r0, [r4, #24]
 8024c04:	8361      	strh	r1, [r4, #26]
 8024c06:	d017      	beq.n	8024c38 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8024c08:	ea50 0201 	orrs.w	r2, r0, r1
 8024c0c:	d00d      	beq.n	8024c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024c0e:	f1be 0f00 	cmp.w	lr, #0
 8024c12:	db0a      	blt.n	8024c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024c14:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c16:	4571      	cmp	r1, lr
 8024c18:	dd07      	ble.n	8024c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024c1a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024c1e:	4288      	cmp	r0, r1
 8024c20:	d372      	bcc.n	8024d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8024c22:	f04f 0201 	mov.w	r2, #1
 8024c26:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024c2a:	9a00      	ldr	r2, [sp, #0]
 8024c2c:	82a7      	strh	r7, [r4, #20]
 8024c2e:	82e2      	strh	r2, [r4, #22]
 8024c30:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024c34:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024c3a:	eb02 0e06 	add.w	lr, r2, r6
 8024c3e:	9a04      	ldr	r2, [sp, #16]
 8024c40:	42ba      	cmp	r2, r7
 8024c42:	d049      	beq.n	8024cd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8024c44:	9a02      	ldr	r2, [sp, #8]
 8024c46:	1b5b      	subs	r3, r3, r5
 8024c48:	eba2 010e 	sub.w	r1, r2, lr
 8024c4c:	440e      	add	r6, r1
 8024c4e:	0176      	lsls	r6, r6, #5
 8024c50:	fb96 f8f5 	sdiv	r8, r6, r5
 8024c54:	fb05 6618 	mls	r6, r5, r8, r6
 8024c58:	2e00      	cmp	r6, #0
 8024c5a:	bfbc      	itt	lt
 8024c5c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024c60:	1976      	addlt	r6, r6, r5
 8024c62:	f108 0201 	add.w	r2, r8, #1
 8024c66:	9211      	str	r2, [sp, #68]	; 0x44
 8024c68:	199b      	adds	r3, r3, r6
 8024c6a:	8b20      	ldrh	r0, [r4, #24]
 8024c6c:	8b61      	ldrh	r1, [r4, #26]
 8024c6e:	bf54      	ite	pl
 8024c70:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8024c74:	46c1      	movmi	r9, r8
 8024c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024c78:	bf58      	it	pl
 8024c7a:	1b5b      	subpl	r3, r3, r5
 8024c7c:	4448      	add	r0, r9
 8024c7e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024c82:	4417      	add	r7, r2
 8024c84:	44ce      	add	lr, r9
 8024c86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024c88:	b200      	sxth	r0, r0
 8024c8a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024c8e:	b209      	sxth	r1, r1
 8024c90:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024c94:	443a      	add	r2, r7
 8024c96:	8320      	strh	r0, [r4, #24]
 8024c98:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024c9c:	8361      	strh	r1, [r4, #26]
 8024c9e:	4552      	cmp	r2, sl
 8024ca0:	d017      	beq.n	8024cd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8024ca2:	ea50 0201 	orrs.w	r2, r0, r1
 8024ca6:	d00d      	beq.n	8024cc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024ca8:	f1b9 0f00 	cmp.w	r9, #0
 8024cac:	db0a      	blt.n	8024cc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024cae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024cb0:	4549      	cmp	r1, r9
 8024cb2:	dd07      	ble.n	8024cc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024cb4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024cb8:	4288      	cmp	r0, r1
 8024cba:	d336      	bcc.n	8024d2a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8024cbc:	f04f 0201 	mov.w	r2, #1
 8024cc0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024cc4:	9a00      	ldr	r2, [sp, #0]
 8024cc6:	82a7      	strh	r7, [r4, #20]
 8024cc8:	82e2      	strh	r2, [r4, #22]
 8024cca:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024cce:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024cd2:	9a04      	ldr	r2, [sp, #16]
 8024cd4:	42ba      	cmp	r2, r7
 8024cd6:	d1c7      	bne.n	8024c68 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024cd8:	9b02      	ldr	r3, [sp, #8]
 8024cda:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024cdc:	eba3 0e0e 	sub.w	lr, r3, lr
 8024ce0:	8b23      	ldrh	r3, [r4, #24]
 8024ce2:	3120      	adds	r1, #32
 8024ce4:	4473      	add	r3, lr
 8024ce6:	8323      	strh	r3, [r4, #24]
 8024ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024cea:	1ac9      	subs	r1, r1, r3
 8024cec:	8b63      	ldrh	r3, [r4, #26]
 8024cee:	fb0e 3e01 	mla	lr, lr, r1, r3
 8024cf2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024cf6:	e611      	b.n	802491c <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024cf8:	f04f 36ff 	mov.w	r6, #4294967295
 8024cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024cfe:	426d      	negs	r5, r5
 8024d00:	960e      	str	r6, [sp, #56]	; 0x38
 8024d02:	2600      	movs	r6, #0
 8024d04:	434b      	muls	r3, r1
 8024d06:	e763      	b.n	8024bd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8024d08:	f104 0e14 	add.w	lr, r4, #20
 8024d0c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024d10:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024d14:	f8c8 0000 	str.w	r0, [r8]
 8024d18:	f8c8 1004 	str.w	r1, [r8, #4]
 8024d1c:	6921      	ldr	r1, [r4, #16]
 8024d1e:	3108      	adds	r1, #8
 8024d20:	6121      	str	r1, [r4, #16]
 8024d22:	68a1      	ldr	r1, [r4, #8]
 8024d24:	3101      	adds	r1, #1
 8024d26:	60a1      	str	r1, [r4, #8]
 8024d28:	e77f      	b.n	8024c2a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024d2a:	f104 0914 	add.w	r9, r4, #20
 8024d2e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024d32:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024d36:	f8ca 0000 	str.w	r0, [sl]
 8024d3a:	f8ca 1004 	str.w	r1, [sl, #4]
 8024d3e:	6921      	ldr	r1, [r4, #16]
 8024d40:	3108      	adds	r1, #8
 8024d42:	6121      	str	r1, [r4, #16]
 8024d44:	68a1      	ldr	r1, [r4, #8]
 8024d46:	3101      	adds	r1, #1
 8024d48:	60a1      	str	r1, [r4, #8]
 8024d4a:	e7bb      	b.n	8024cc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024d4c:	f104 0314 	add.w	r3, r4, #20
 8024d50:	6925      	ldr	r5, [r4, #16]
 8024d52:	cb03      	ldmia	r3!, {r0, r1}
 8024d54:	6028      	str	r0, [r5, #0]
 8024d56:	6069      	str	r1, [r5, #4]
 8024d58:	6923      	ldr	r3, [r4, #16]
 8024d5a:	3308      	adds	r3, #8
 8024d5c:	6123      	str	r3, [r4, #16]
 8024d5e:	68a3      	ldr	r3, [r4, #8]
 8024d60:	3301      	adds	r3, #1
 8024d62:	60a3      	str	r3, [r4, #8]
 8024d64:	e5fd      	b.n	8024962 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8024d66:	f104 0314 	add.w	r3, r4, #20
 8024d6a:	6925      	ldr	r5, [r4, #16]
 8024d6c:	cb03      	ldmia	r3!, {r0, r1}
 8024d6e:	6028      	str	r0, [r5, #0]
 8024d70:	6069      	str	r1, [r5, #4]
 8024d72:	6923      	ldr	r3, [r4, #16]
 8024d74:	3308      	adds	r3, #8
 8024d76:	6123      	str	r3, [r4, #16]
 8024d78:	68a3      	ldr	r3, [r4, #8]
 8024d7a:	3301      	adds	r3, #1
 8024d7c:	60a3      	str	r3, [r4, #8]
 8024d7e:	e625      	b.n	80249cc <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024d80:	9b05      	ldr	r3, [sp, #20]
 8024d82:	ea4f 176b 	mov.w	r7, fp, asr #5
 8024d86:	f00b 081f 	and.w	r8, fp, #31
 8024d8a:	8b20      	ldrh	r0, [r4, #24]
 8024d8c:	f003 031f 	and.w	r3, r3, #31
 8024d90:	4577      	cmp	r7, lr
 8024d92:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8024d96:	9302      	str	r3, [sp, #8]
 8024d98:	9b03      	ldr	r3, [sp, #12]
 8024d9a:	eba3 050c 	sub.w	r5, r3, ip
 8024d9e:	d108      	bne.n	8024db2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8024da0:	9b02      	ldr	r3, [sp, #8]
 8024da2:	4428      	add	r0, r5
 8024da4:	4498      	add	r8, r3
 8024da6:	8320      	strh	r0, [r4, #24]
 8024da8:	fb05 9508 	mla	r5, r5, r8, r9
 8024dac:	8365      	strh	r5, [r4, #26]
 8024dae:	f7ff bb4f 	b.w	8024450 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024db2:	9b05      	ldr	r3, [sp, #20]
 8024db4:	ebb3 030b 	subs.w	r3, r3, fp
 8024db8:	f100 809c 	bmi.w	8024ef4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8024dbc:	f1c8 0120 	rsb	r1, r8, #32
 8024dc0:	2201      	movs	r2, #1
 8024dc2:	f04f 0b20 	mov.w	fp, #32
 8024dc6:	434d      	muls	r5, r1
 8024dc8:	9201      	str	r2, [sp, #4]
 8024dca:	9a01      	ldr	r2, [sp, #4]
 8024dcc:	44d8      	add	r8, fp
 8024dce:	fb95 f6f3 	sdiv	r6, r5, r3
 8024dd2:	fb03 5516 	mls	r5, r3, r6, r5
 8024dd6:	4417      	add	r7, r2
 8024dd8:	9a00      	ldr	r2, [sp, #0]
 8024dda:	2d00      	cmp	r5, #0
 8024ddc:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8024de0:	bfbc      	itt	lt
 8024de2:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024de6:	18ed      	addlt	r5, r5, r3
 8024de8:	eb07 0a02 	add.w	sl, r7, r2
 8024dec:	9204      	str	r2, [sp, #16]
 8024dee:	fb06 9808 	mla	r8, r6, r8, r9
 8024df2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024df6:	4430      	add	r0, r6
 8024df8:	fa0f f188 	sxth.w	r1, r8
 8024dfc:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024e00:	b200      	sxth	r0, r0
 8024e02:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024e06:	8361      	strh	r1, [r4, #26]
 8024e08:	8320      	strh	r0, [r4, #24]
 8024e0a:	45ca      	cmp	sl, r9
 8024e0c:	d015      	beq.n	8024e3a <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8024e0e:	ea50 0201 	orrs.w	r2, r0, r1
 8024e12:	d00c      	beq.n	8024e2e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024e14:	f1b8 0f00 	cmp.w	r8, #0
 8024e18:	db09      	blt.n	8024e2e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024e1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024e1c:	4541      	cmp	r1, r8
 8024e1e:	dd06      	ble.n	8024e2e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024e20:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024e24:	4288      	cmp	r0, r1
 8024e26:	d36e      	bcc.n	8024f06 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8024e28:	2101      	movs	r1, #1
 8024e2a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024e2e:	2100      	movs	r1, #0
 8024e30:	9a00      	ldr	r2, [sp, #0]
 8024e32:	82a7      	strh	r7, [r4, #20]
 8024e34:	82e2      	strh	r2, [r4, #22]
 8024e36:	8321      	strh	r1, [r4, #24]
 8024e38:	8361      	strh	r1, [r4, #26]
 8024e3a:	45be      	cmp	lr, r7
 8024e3c:	44b4      	add	ip, r6
 8024e3e:	d048      	beq.n	8024ed2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8024e40:	9a03      	ldr	r2, [sp, #12]
 8024e42:	1aed      	subs	r5, r5, r3
 8024e44:	eba2 010c 	sub.w	r1, r2, ip
 8024e48:	440e      	add	r6, r1
 8024e4a:	0176      	lsls	r6, r6, #5
 8024e4c:	fb96 f8f3 	sdiv	r8, r6, r3
 8024e50:	fb03 6618 	mls	r6, r3, r8, r6
 8024e54:	2e00      	cmp	r6, #0
 8024e56:	bfbc      	itt	lt
 8024e58:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8024e5c:	18f6      	addlt	r6, r6, r3
 8024e5e:	f108 0201 	add.w	r2, r8, #1
 8024e62:	9205      	str	r2, [sp, #20]
 8024e64:	19ad      	adds	r5, r5, r6
 8024e66:	8b20      	ldrh	r0, [r4, #24]
 8024e68:	8b61      	ldrh	r1, [r4, #26]
 8024e6a:	bf54      	ite	pl
 8024e6c:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8024e70:	46c1      	movmi	r9, r8
 8024e72:	9a01      	ldr	r2, [sp, #4]
 8024e74:	bf58      	it	pl
 8024e76:	1aed      	subpl	r5, r5, r3
 8024e78:	4448      	add	r0, r9
 8024e7a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8024e7e:	4417      	add	r7, r2
 8024e80:	44cc      	add	ip, r9
 8024e82:	9a04      	ldr	r2, [sp, #16]
 8024e84:	b200      	sxth	r0, r0
 8024e86:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8024e8a:	b209      	sxth	r1, r1
 8024e8c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8024e90:	443a      	add	r2, r7
 8024e92:	8320      	strh	r0, [r4, #24]
 8024e94:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8024e98:	8361      	strh	r1, [r4, #26]
 8024e9a:	4552      	cmp	r2, sl
 8024e9c:	d017      	beq.n	8024ece <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8024e9e:	ea50 0201 	orrs.w	r2, r0, r1
 8024ea2:	d00d      	beq.n	8024ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024ea4:	f1b9 0f00 	cmp.w	r9, #0
 8024ea8:	db0a      	blt.n	8024ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024eaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024eac:	4549      	cmp	r1, r9
 8024eae:	dd07      	ble.n	8024ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024eb0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024eb4:	4288      	cmp	r0, r1
 8024eb6:	d337      	bcc.n	8024f28 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8024eb8:	f04f 0201 	mov.w	r2, #1
 8024ebc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024ec0:	9a00      	ldr	r2, [sp, #0]
 8024ec2:	82a7      	strh	r7, [r4, #20]
 8024ec4:	82e2      	strh	r2, [r4, #22]
 8024ec6:	f04f 0200 	mov.w	r2, #0
 8024eca:	8322      	strh	r2, [r4, #24]
 8024ecc:	8362      	strh	r2, [r4, #26]
 8024ece:	45be      	cmp	lr, r7
 8024ed0:	d1c8      	bne.n	8024e64 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8024ed2:	9b03      	ldr	r3, [sp, #12]
 8024ed4:	8b62      	ldrh	r2, [r4, #26]
 8024ed6:	eba3 0c0c 	sub.w	ip, r3, ip
 8024eda:	8b23      	ldrh	r3, [r4, #24]
 8024edc:	4463      	add	r3, ip
 8024ede:	8323      	strh	r3, [r4, #24]
 8024ee0:	9b02      	ldr	r3, [sp, #8]
 8024ee2:	3320      	adds	r3, #32
 8024ee4:	eba3 030b 	sub.w	r3, r3, fp
 8024ee8:	fb0c 2c03 	mla	ip, ip, r3, r2
 8024eec:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024ef0:	f7ff baae 	b.w	8024450 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8024ef8:	fb05 f508 	mul.w	r5, r5, r8
 8024efc:	425b      	negs	r3, r3
 8024efe:	f04f 0b00 	mov.w	fp, #0
 8024f02:	9201      	str	r2, [sp, #4]
 8024f04:	e761      	b.n	8024dca <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8024f06:	f104 0814 	add.w	r8, r4, #20
 8024f0a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8024f0e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8024f12:	f8c9 0000 	str.w	r0, [r9]
 8024f16:	f8c9 1004 	str.w	r1, [r9, #4]
 8024f1a:	6921      	ldr	r1, [r4, #16]
 8024f1c:	3108      	adds	r1, #8
 8024f1e:	6121      	str	r1, [r4, #16]
 8024f20:	68a1      	ldr	r1, [r4, #8]
 8024f22:	3101      	adds	r1, #1
 8024f24:	60a1      	str	r1, [r4, #8]
 8024f26:	e782      	b.n	8024e2e <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024f28:	f104 0914 	add.w	r9, r4, #20
 8024f2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8024f30:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024f34:	f8ca 0000 	str.w	r0, [sl]
 8024f38:	f8ca 1004 	str.w	r1, [sl, #4]
 8024f3c:	6921      	ldr	r1, [r4, #16]
 8024f3e:	3108      	adds	r1, #8
 8024f40:	6121      	str	r1, [r4, #16]
 8024f42:	68a1      	ldr	r1, [r4, #8]
 8024f44:	3101      	adds	r1, #1
 8024f46:	60a1      	str	r1, [r4, #8]
 8024f48:	e7ba      	b.n	8024ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08024f4a <_ZN8touchgfx7Outline6lineToEii>:
 8024f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024f4c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024f4e:	4604      	mov	r4, r0
 8024f50:	460d      	mov	r5, r1
 8024f52:	4616      	mov	r6, r2
 8024f54:	079b      	lsls	r3, r3, #30
 8024f56:	d526      	bpl.n	8024fa6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024f58:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8024f5c:	ea85 0001 	eor.w	r0, r5, r1
 8024f60:	ea86 0302 	eor.w	r3, r6, r2
 8024f64:	4303      	orrs	r3, r0
 8024f66:	d01e      	beq.n	8024fa6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8024f68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024f6a:	114b      	asrs	r3, r1, #5
 8024f6c:	9600      	str	r6, [sp, #0]
 8024f6e:	4283      	cmp	r3, r0
 8024f70:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024f72:	bfb8      	it	lt
 8024f74:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024f76:	3301      	adds	r3, #1
 8024f78:	4283      	cmp	r3, r0
 8024f7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8024f7c:	bfc8      	it	gt
 8024f7e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024f80:	116b      	asrs	r3, r5, #5
 8024f82:	4283      	cmp	r3, r0
 8024f84:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8024f86:	bfb8      	it	lt
 8024f88:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8024f8a:	3301      	adds	r3, #1
 8024f8c:	4283      	cmp	r3, r0
 8024f8e:	4620      	mov	r0, r4
 8024f90:	bfc8      	it	gt
 8024f92:	6363      	strgt	r3, [r4, #52]	; 0x34
 8024f94:	462b      	mov	r3, r5
 8024f96:	f7ff f9e3 	bl	8024360 <_ZN8touchgfx7Outline10renderLineEiiii>
 8024f9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024f9c:	f043 0301 	orr.w	r3, r3, #1
 8024fa0:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8024fa4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024fa6:	b002      	add	sp, #8
 8024fa8:	bd70      	pop	{r4, r5, r6, pc}

08024faa <_ZN8touchgfx7Outline6moveToEii>:
 8024faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024fac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024fae:	4615      	mov	r5, r2
 8024fb0:	4604      	mov	r4, r0
 8024fb2:	460e      	mov	r6, r1
 8024fb4:	079a      	lsls	r2, r3, #30
 8024fb6:	d401      	bmi.n	8024fbc <_ZN8touchgfx7Outline6moveToEii+0x12>
 8024fb8:	f7ff f98c 	bl	80242d4 <_ZN8touchgfx7Outline5resetEv>
 8024fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024fbe:	07db      	lsls	r3, r3, #31
 8024fc0:	d504      	bpl.n	8024fcc <_ZN8touchgfx7Outline6moveToEii+0x22>
 8024fc2:	4620      	mov	r0, r4
 8024fc4:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8024fc8:	f7ff ffbf 	bl	8024f4a <_ZN8touchgfx7Outline6lineToEii>
 8024fcc:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8024fd0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024fd4:	116f      	asrs	r7, r5, #5
 8024fd6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024fda:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8024fde:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8024fe2:	4291      	cmp	r1, r2
 8024fe4:	d015      	beq.n	8025012 <_ZN8touchgfx7Outline6moveToEii+0x68>
 8024fe6:	8b61      	ldrh	r1, [r4, #26]
 8024fe8:	8b22      	ldrh	r2, [r4, #24]
 8024fea:	430a      	orrs	r2, r1
 8024fec:	d00b      	beq.n	8025006 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024fee:	2b00      	cmp	r3, #0
 8024ff0:	db09      	blt.n	8025006 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024ff2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024ff4:	429a      	cmp	r2, r3
 8024ff6:	dd06      	ble.n	8025006 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024ff8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024ffc:	429a      	cmp	r2, r3
 8024ffe:	d30d      	bcc.n	802501c <_ZN8touchgfx7Outline6moveToEii+0x72>
 8025000:	2301      	movs	r3, #1
 8025002:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025006:	2300      	movs	r3, #0
 8025008:	f8a4 c014 	strh.w	ip, [r4, #20]
 802500c:	82e7      	strh	r7, [r4, #22]
 802500e:	8323      	strh	r3, [r4, #24]
 8025010:	8363      	strh	r3, [r4, #26]
 8025012:	61e6      	str	r6, [r4, #28]
 8025014:	62a5      	str	r5, [r4, #40]	; 0x28
 8025016:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802501c:	f104 0314 	add.w	r3, r4, #20
 8025020:	6922      	ldr	r2, [r4, #16]
 8025022:	cb03      	ldmia	r3!, {r0, r1}
 8025024:	6010      	str	r0, [r2, #0]
 8025026:	6051      	str	r1, [r2, #4]
 8025028:	6923      	ldr	r3, [r4, #16]
 802502a:	3308      	adds	r3, #8
 802502c:	6123      	str	r3, [r4, #16]
 802502e:	68a3      	ldr	r3, [r4, #8]
 8025030:	3301      	adds	r3, #1
 8025032:	60a3      	str	r3, [r4, #8]
 8025034:	e7e7      	b.n	8025006 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08025036 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8025036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802503a:	b0d1      	sub	sp, #324	; 0x144
 802503c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8025040:	466c      	mov	r4, sp
 8025042:	1a0d      	subs	r5, r1, r0
 8025044:	f100 0208 	add.w	r2, r0, #8
 8025048:	2d48      	cmp	r5, #72	; 0x48
 802504a:	f340 80ba 	ble.w	80251c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802504e:	112d      	asrs	r5, r5, #4
 8025050:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8025054:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8025058:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802505c:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8025060:	f9b0 8000 	ldrsh.w	r8, [r0]
 8025064:	681e      	ldr	r6, [r3, #0]
 8025066:	6006      	str	r6, [r0, #0]
 8025068:	685e      	ldr	r6, [r3, #4]
 802506a:	6046      	str	r6, [r0, #4]
 802506c:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8025070:	f8a3 c004 	strh.w	ip, [r3, #4]
 8025074:	f8a3 e002 	strh.w	lr, [r3, #2]
 8025078:	80df      	strh	r7, [r3, #6]
 802507a:	f1a1 0308 	sub.w	r3, r1, #8
 802507e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8025082:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8025086:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802508a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802508e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025092:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8025096:	45ac      	cmp	ip, r5
 8025098:	dd0f      	ble.n	80250ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802509a:	681d      	ldr	r5, [r3, #0]
 802509c:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80250a0:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80250a4:	6015      	str	r5, [r2, #0]
 80250a6:	685d      	ldr	r5, [r3, #4]
 80250a8:	6055      	str	r5, [r2, #4]
 80250aa:	f821 7c08 	strh.w	r7, [r1, #-8]
 80250ae:	f821 6c06 	strh.w	r6, [r1, #-6]
 80250b2:	f821 ec04 	strh.w	lr, [r1, #-4]
 80250b6:	f821 cc02 	strh.w	ip, [r1, #-2]
 80250ba:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80250be:	f9b0 7000 	ldrsh.w	r7, [r0]
 80250c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80250c6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80250ca:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80250ce:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80250d2:	4565      	cmp	r5, ip
 80250d4:	dd0d      	ble.n	80250f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80250d6:	6815      	ldr	r5, [r2, #0]
 80250d8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80250dc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80250e0:	6005      	str	r5, [r0, #0]
 80250e2:	6855      	ldr	r5, [r2, #4]
 80250e4:	8107      	strh	r7, [r0, #8]
 80250e6:	6045      	str	r5, [r0, #4]
 80250e8:	8146      	strh	r6, [r0, #10]
 80250ea:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80250ee:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80250f2:	f9b0 7000 	ldrsh.w	r7, [r0]
 80250f6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80250fa:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80250fe:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8025102:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025106:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802510a:	45ac      	cmp	ip, r5
 802510c:	dd0f      	ble.n	802512e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802510e:	681d      	ldr	r5, [r3, #0]
 8025110:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025114:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025118:	6005      	str	r5, [r0, #0]
 802511a:	685d      	ldr	r5, [r3, #4]
 802511c:	6045      	str	r5, [r0, #4]
 802511e:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025122:	f821 6c06 	strh.w	r6, [r1, #-6]
 8025126:	f821 ec04 	strh.w	lr, [r1, #-4]
 802512a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802512e:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8025132:	f102 0508 	add.w	r5, r2, #8
 8025136:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802513a:	f9b0 e000 	ldrsh.w	lr, [r0]
 802513e:	462f      	mov	r7, r5
 8025140:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8025144:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8025148:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802514c:	45b2      	cmp	sl, r6
 802514e:	dc18      	bgt.n	8025182 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8025150:	3b08      	subs	r3, #8
 8025152:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8025156:	f9b3 6000 	ldrsh.w	r6, [r3]
 802515a:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802515e:	45b2      	cmp	sl, r6
 8025160:	dbf6      	blt.n	8025150 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8025162:	42ab      	cmp	r3, r5
 8025164:	681e      	ldr	r6, [r3, #0]
 8025166:	d30e      	bcc.n	8025186 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8025168:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802516c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8025170:	602e      	str	r6, [r5, #0]
 8025172:	685e      	ldr	r6, [r3, #4]
 8025174:	606e      	str	r6, [r5, #4]
 8025176:	f8a3 9000 	strh.w	r9, [r3]
 802517a:	f8a3 8002 	strh.w	r8, [r3, #2]
 802517e:	809f      	strh	r7, [r3, #4]
 8025180:	80da      	strh	r2, [r3, #6]
 8025182:	462a      	mov	r2, r5
 8025184:	e7d3      	b.n	802512e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025186:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802518a:	6006      	str	r6, [r0, #0]
 802518c:	685e      	ldr	r6, [r3, #4]
 802518e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8025192:	6046      	str	r6, [r0, #4]
 8025194:	1a1e      	subs	r6, r3, r0
 8025196:	80da      	strh	r2, [r3, #6]
 8025198:	1b4a      	subs	r2, r1, r5
 802519a:	f8a3 e000 	strh.w	lr, [r3]
 802519e:	10d2      	asrs	r2, r2, #3
 80251a0:	f8a3 c002 	strh.w	ip, [r3, #2]
 80251a4:	f8a3 8004 	strh.w	r8, [r3, #4]
 80251a8:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 80251ac:	bfb5      	itete	lt
 80251ae:	e9c4 0300 	strdlt	r0, r3, [r4]
 80251b2:	4607      	movge	r7, r0
 80251b4:	460b      	movlt	r3, r1
 80251b6:	e9c4 5100 	strdge	r5, r1, [r4]
 80251ba:	4638      	mov	r0, r7
 80251bc:	3408      	adds	r4, #8
 80251be:	4619      	mov	r1, r3
 80251c0:	e73f      	b.n	8025042 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80251c2:	4291      	cmp	r1, r2
 80251c4:	d925      	bls.n	8025212 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80251c6:	f1a2 0310 	sub.w	r3, r2, #16
 80251ca:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80251ce:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80251d2:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80251d6:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80251da:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80251de:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80251e2:	42b5      	cmp	r5, r6
 80251e4:	dd13      	ble.n	802520e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80251e6:	461d      	mov	r5, r3
 80251e8:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80251ec:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80251f0:	3b08      	subs	r3, #8
 80251f2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80251f6:	619e      	str	r6, [r3, #24]
 80251f8:	42a8      	cmp	r0, r5
 80251fa:	686e      	ldr	r6, [r5, #4]
 80251fc:	f8a3 c010 	strh.w	ip, [r3, #16]
 8025200:	61de      	str	r6, [r3, #28]
 8025202:	825f      	strh	r7, [r3, #18]
 8025204:	f8a3 8014 	strh.w	r8, [r3, #20]
 8025208:	f8a3 e016 	strh.w	lr, [r3, #22]
 802520c:	d1dd      	bne.n	80251ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802520e:	3208      	adds	r2, #8
 8025210:	e7d7      	b.n	80251c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8025212:	466b      	mov	r3, sp
 8025214:	429c      	cmp	r4, r3
 8025216:	d903      	bls.n	8025220 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8025218:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802521c:	3c08      	subs	r4, #8
 802521e:	e710      	b.n	8025042 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025220:	b051      	add	sp, #324	; 0x144
 8025222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025226 <_ZN8touchgfx7Outline9sortCellsEv>:
 8025226:	6881      	ldr	r1, [r0, #8]
 8025228:	b111      	cbz	r1, 8025230 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802522a:	68c0      	ldr	r0, [r0, #12]
 802522c:	f7ff bf03 	b.w	8025036 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8025230:	4770      	bx	lr

08025232 <_ZN8touchgfx7Outline8getCellsEv>:
 8025232:	b510      	push	{r4, lr}
 8025234:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025236:	4604      	mov	r4, r0
 8025238:	07da      	lsls	r2, r3, #31
 802523a:	d507      	bpl.n	802524c <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802523c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025240:	f7ff fe83 	bl	8024f4a <_ZN8touchgfx7Outline6lineToEii>
 8025244:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025246:	f023 0301 	bic.w	r3, r3, #1
 802524a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802524c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802524e:	079b      	lsls	r3, r3, #30
 8025250:	d51a      	bpl.n	8025288 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8025252:	8b62      	ldrh	r2, [r4, #26]
 8025254:	8b23      	ldrh	r3, [r4, #24]
 8025256:	4313      	orrs	r3, r2
 8025258:	d00d      	beq.n	8025276 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802525a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802525e:	2b00      	cmp	r3, #0
 8025260:	db09      	blt.n	8025276 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025262:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025264:	4293      	cmp	r3, r2
 8025266:	da06      	bge.n	8025276 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8025268:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802526c:	429a      	cmp	r2, r3
 802526e:	d80d      	bhi.n	802528c <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8025270:	2301      	movs	r3, #1
 8025272:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025276:	68a0      	ldr	r0, [r4, #8]
 8025278:	b138      	cbz	r0, 802528a <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802527a:	4620      	mov	r0, r4
 802527c:	f7ff ffd3 	bl	8025226 <_ZN8touchgfx7Outline9sortCellsEv>
 8025280:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025282:	f023 0302 	bic.w	r3, r3, #2
 8025286:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025288:	68e0      	ldr	r0, [r4, #12]
 802528a:	bd10      	pop	{r4, pc}
 802528c:	f104 0314 	add.w	r3, r4, #20
 8025290:	6922      	ldr	r2, [r4, #16]
 8025292:	cb03      	ldmia	r3!, {r0, r1}
 8025294:	6010      	str	r0, [r2, #0]
 8025296:	6051      	str	r1, [r2, #4]
 8025298:	6923      	ldr	r3, [r4, #16]
 802529a:	3308      	adds	r3, #8
 802529c:	6123      	str	r3, [r4, #16]
 802529e:	68a3      	ldr	r3, [r4, #8]
 80252a0:	3301      	adds	r3, #1
 80252a2:	60a3      	str	r3, [r4, #8]
 80252a4:	e7e7      	b.n	8025276 <_ZN8touchgfx7Outline8getCellsEv+0x44>

080252a6 <_ZN8touchgfx8ScanlineD1Ev>:
 80252a6:	4770      	bx	lr

080252a8 <_ZN8touchgfx8ScanlineD0Ev>:
 80252a8:	b510      	push	{r4, lr}
 80252aa:	4604      	mov	r4, r0
 80252ac:	2124      	movs	r1, #36	; 0x24
 80252ae:	f000 f877 	bl	80253a0 <_ZdlPvj>
 80252b2:	4620      	mov	r0, r4
 80252b4:	bd10      	pop	{r4, pc}

080252b6 <_ZN8touchgfx8Scanline5resetEv>:
 80252b6:	b510      	push	{r4, lr}
 80252b8:	4604      	mov	r4, r0
 80252ba:	f7f3 f8f9 	bl	80184b0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 80252be:	61a0      	str	r0, [r4, #24]
 80252c0:	f7f3 f8fc 	bl	80184bc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80252c4:	61e0      	str	r0, [r4, #28]
 80252c6:	f7f3 f8ff 	bl	80184c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80252ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80252ce:	6220      	str	r0, [r4, #32]
 80252d0:	6160      	str	r0, [r4, #20]
 80252d2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80252d6:	69e3      	ldr	r3, [r4, #28]
 80252d8:	6123      	str	r3, [r4, #16]
 80252da:	2300      	movs	r3, #0
 80252dc:	60e3      	str	r3, [r4, #12]
 80252de:	bd10      	pop	{r4, pc}

080252e0 <_ZN8touchgfx8ScanlineC1Ev>:
 80252e0:	4b07      	ldr	r3, [pc, #28]	; (8025300 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80252e2:	b510      	push	{r4, lr}
 80252e4:	6003      	str	r3, [r0, #0]
 80252e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80252ea:	4604      	mov	r4, r0
 80252ec:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80252f0:	2300      	movs	r3, #0
 80252f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80252f6:	6143      	str	r3, [r0, #20]
 80252f8:	f7ff ffdd 	bl	80252b6 <_ZN8touchgfx8Scanline5resetEv>
 80252fc:	4620      	mov	r0, r4
 80252fe:	bd10      	pop	{r4, pc}
 8025300:	0802a754 	.word	0x0802a754

08025304 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8025304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025308:	1e0c      	subs	r4, r1, #0
 802530a:	4605      	mov	r5, r0
 802530c:	4617      	mov	r7, r2
 802530e:	461e      	mov	r6, r3
 8025310:	da03      	bge.n	802531a <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8025312:	4426      	add	r6, r4
 8025314:	2e01      	cmp	r6, #1
 8025316:	d421      	bmi.n	802535c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025318:	2400      	movs	r4, #0
 802531a:	f7f3 f8c3 	bl	80184a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802531e:	42a0      	cmp	r0, r4
 8025320:	d91c      	bls.n	802535c <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025322:	eb04 0806 	add.w	r8, r4, r6
 8025326:	f7f3 f8bd 	bl	80184a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802532a:	4580      	cmp	r8, r0
 802532c:	d902      	bls.n	8025334 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802532e:	f7f3 f8b9 	bl	80184a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025332:	1b06      	subs	r6, r0, r4
 8025334:	69a8      	ldr	r0, [r5, #24]
 8025336:	4632      	mov	r2, r6
 8025338:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802533c:	4420      	add	r0, r4
 802533e:	f7f4 fdb0 	bl	8019ea2 <_ZN8touchgfx6memsetEPvhm>
 8025342:	686b      	ldr	r3, [r5, #4]
 8025344:	b2b2      	uxth	r2, r6
 8025346:	3301      	adds	r3, #1
 8025348:	42a3      	cmp	r3, r4
 802534a:	696b      	ldr	r3, [r5, #20]
 802534c:	d108      	bne.n	8025360 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802534e:	8819      	ldrh	r1, [r3, #0]
 8025350:	440a      	add	r2, r1
 8025352:	801a      	strh	r2, [r3, #0]
 8025354:	3c01      	subs	r4, #1
 8025356:	4434      	add	r4, r6
 8025358:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025360:	1c99      	adds	r1, r3, #2
 8025362:	6169      	str	r1, [r5, #20]
 8025364:	805a      	strh	r2, [r3, #2]
 8025366:	692b      	ldr	r3, [r5, #16]
 8025368:	1c9a      	adds	r2, r3, #2
 802536a:	612a      	str	r2, [r5, #16]
 802536c:	805c      	strh	r4, [r3, #2]
 802536e:	68eb      	ldr	r3, [r5, #12]
 8025370:	3301      	adds	r3, #1
 8025372:	60eb      	str	r3, [r5, #12]
 8025374:	e7ee      	b.n	8025354 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08025376 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8025376:	2200      	movs	r2, #0
 8025378:	6002      	str	r2, [r0, #0]
 802537a:	7102      	strb	r2, [r0, #4]
 802537c:	6102      	str	r2, [r0, #16]
 802537e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8025382:	4770      	bx	lr

08025384 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8025384:	4770      	bx	lr

08025386 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8025386:	6083      	str	r3, [r0, #8]
 8025388:	9b00      	ldr	r3, [sp, #0]
 802538a:	6001      	str	r1, [r0, #0]
 802538c:	60c3      	str	r3, [r0, #12]
 802538e:	9b01      	ldr	r3, [sp, #4]
 8025390:	7102      	strb	r2, [r0, #4]
 8025392:	6103      	str	r3, [r0, #16]
 8025394:	4770      	bx	lr

08025396 <__aeabi_atexit>:
 8025396:	460b      	mov	r3, r1
 8025398:	4601      	mov	r1, r0
 802539a:	4618      	mov	r0, r3
 802539c:	f000 b90e 	b.w	80255bc <__cxa_atexit>

080253a0 <_ZdlPvj>:
 80253a0:	f000 b812 	b.w	80253c8 <_ZdlPv>

080253a4 <__cxa_guard_acquire>:
 80253a4:	6803      	ldr	r3, [r0, #0]
 80253a6:	07db      	lsls	r3, r3, #31
 80253a8:	d406      	bmi.n	80253b8 <__cxa_guard_acquire+0x14>
 80253aa:	7843      	ldrb	r3, [r0, #1]
 80253ac:	b103      	cbz	r3, 80253b0 <__cxa_guard_acquire+0xc>
 80253ae:	deff      	udf	#255	; 0xff
 80253b0:	2301      	movs	r3, #1
 80253b2:	7043      	strb	r3, [r0, #1]
 80253b4:	4618      	mov	r0, r3
 80253b6:	4770      	bx	lr
 80253b8:	2000      	movs	r0, #0
 80253ba:	4770      	bx	lr

080253bc <__cxa_guard_release>:
 80253bc:	2301      	movs	r3, #1
 80253be:	6003      	str	r3, [r0, #0]
 80253c0:	4770      	bx	lr

080253c2 <__cxa_pure_virtual>:
 80253c2:	b508      	push	{r3, lr}
 80253c4:	f000 f80e 	bl	80253e4 <_ZSt9terminatev>

080253c8 <_ZdlPv>:
 80253c8:	f000 b844 	b.w	8025454 <free>

080253cc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80253cc:	b508      	push	{r3, lr}
 80253ce:	4780      	blx	r0
 80253d0:	f000 f80d 	bl	80253ee <abort>

080253d4 <_ZSt13get_terminatev>:
 80253d4:	4b02      	ldr	r3, [pc, #8]	; (80253e0 <_ZSt13get_terminatev+0xc>)
 80253d6:	6818      	ldr	r0, [r3, #0]
 80253d8:	f3bf 8f5b 	dmb	ish
 80253dc:	4770      	bx	lr
 80253de:	bf00      	nop
 80253e0:	200000a8 	.word	0x200000a8

080253e4 <_ZSt9terminatev>:
 80253e4:	b508      	push	{r3, lr}
 80253e6:	f7ff fff5 	bl	80253d4 <_ZSt13get_terminatev>
 80253ea:	f7ff ffef 	bl	80253cc <_ZN10__cxxabiv111__terminateEPFvvE>

080253ee <abort>:
 80253ee:	b508      	push	{r3, lr}
 80253f0:	2006      	movs	r0, #6
 80253f2:	f000 fa27 	bl	8025844 <raise>
 80253f6:	2001      	movs	r0, #1
 80253f8:	f7de fb04 	bl	8003a04 <_exit>

080253fc <__assert_func>:
 80253fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80253fe:	4614      	mov	r4, r2
 8025400:	461a      	mov	r2, r3
 8025402:	4b09      	ldr	r3, [pc, #36]	; (8025428 <__assert_func+0x2c>)
 8025404:	681b      	ldr	r3, [r3, #0]
 8025406:	4605      	mov	r5, r0
 8025408:	68d8      	ldr	r0, [r3, #12]
 802540a:	b14c      	cbz	r4, 8025420 <__assert_func+0x24>
 802540c:	4b07      	ldr	r3, [pc, #28]	; (802542c <__assert_func+0x30>)
 802540e:	9100      	str	r1, [sp, #0]
 8025410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025414:	4906      	ldr	r1, [pc, #24]	; (8025430 <__assert_func+0x34>)
 8025416:	462b      	mov	r3, r5
 8025418:	f000 f970 	bl	80256fc <fiprintf>
 802541c:	f7ff ffe7 	bl	80253ee <abort>
 8025420:	4b04      	ldr	r3, [pc, #16]	; (8025434 <__assert_func+0x38>)
 8025422:	461c      	mov	r4, r3
 8025424:	e7f3      	b.n	802540e <__assert_func+0x12>
 8025426:	bf00      	nop
 8025428:	20000104 	.word	0x20000104
 802542c:	0802a75c 	.word	0x0802a75c
 8025430:	0802a769 	.word	0x0802a769
 8025434:	0802a797 	.word	0x0802a797

08025438 <atexit>:
 8025438:	2300      	movs	r3, #0
 802543a:	4601      	mov	r1, r0
 802543c:	461a      	mov	r2, r3
 802543e:	4618      	mov	r0, r3
 8025440:	f000 baac 	b.w	802599c <__register_exitproc>

08025444 <malloc>:
 8025444:	4b02      	ldr	r3, [pc, #8]	; (8025450 <malloc+0xc>)
 8025446:	4601      	mov	r1, r0
 8025448:	6818      	ldr	r0, [r3, #0]
 802544a:	f000 b82b 	b.w	80254a4 <_malloc_r>
 802544e:	bf00      	nop
 8025450:	20000104 	.word	0x20000104

08025454 <free>:
 8025454:	4b02      	ldr	r3, [pc, #8]	; (8025460 <free+0xc>)
 8025456:	4601      	mov	r1, r0
 8025458:	6818      	ldr	r0, [r3, #0]
 802545a:	f000 bafd 	b.w	8025a58 <_free_r>
 802545e:	bf00      	nop
 8025460:	20000104 	.word	0x20000104

08025464 <sbrk_aligned>:
 8025464:	b570      	push	{r4, r5, r6, lr}
 8025466:	4e0e      	ldr	r6, [pc, #56]	; (80254a0 <sbrk_aligned+0x3c>)
 8025468:	460c      	mov	r4, r1
 802546a:	6831      	ldr	r1, [r6, #0]
 802546c:	4605      	mov	r5, r0
 802546e:	b911      	cbnz	r1, 8025476 <sbrk_aligned+0x12>
 8025470:	f000 fa38 	bl	80258e4 <_sbrk_r>
 8025474:	6030      	str	r0, [r6, #0]
 8025476:	4621      	mov	r1, r4
 8025478:	4628      	mov	r0, r5
 802547a:	f000 fa33 	bl	80258e4 <_sbrk_r>
 802547e:	1c43      	adds	r3, r0, #1
 8025480:	d00a      	beq.n	8025498 <sbrk_aligned+0x34>
 8025482:	1cc4      	adds	r4, r0, #3
 8025484:	f024 0403 	bic.w	r4, r4, #3
 8025488:	42a0      	cmp	r0, r4
 802548a:	d007      	beq.n	802549c <sbrk_aligned+0x38>
 802548c:	1a21      	subs	r1, r4, r0
 802548e:	4628      	mov	r0, r5
 8025490:	f000 fa28 	bl	80258e4 <_sbrk_r>
 8025494:	3001      	adds	r0, #1
 8025496:	d101      	bne.n	802549c <sbrk_aligned+0x38>
 8025498:	f04f 34ff 	mov.w	r4, #4294967295
 802549c:	4620      	mov	r0, r4
 802549e:	bd70      	pop	{r4, r5, r6, pc}
 80254a0:	2000c684 	.word	0x2000c684

080254a4 <_malloc_r>:
 80254a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80254a8:	1ccd      	adds	r5, r1, #3
 80254aa:	f025 0503 	bic.w	r5, r5, #3
 80254ae:	3508      	adds	r5, #8
 80254b0:	2d0c      	cmp	r5, #12
 80254b2:	bf38      	it	cc
 80254b4:	250c      	movcc	r5, #12
 80254b6:	2d00      	cmp	r5, #0
 80254b8:	4607      	mov	r7, r0
 80254ba:	db01      	blt.n	80254c0 <_malloc_r+0x1c>
 80254bc:	42a9      	cmp	r1, r5
 80254be:	d905      	bls.n	80254cc <_malloc_r+0x28>
 80254c0:	230c      	movs	r3, #12
 80254c2:	603b      	str	r3, [r7, #0]
 80254c4:	2600      	movs	r6, #0
 80254c6:	4630      	mov	r0, r6
 80254c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80254cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80255a0 <_malloc_r+0xfc>
 80254d0:	f000 f868 	bl	80255a4 <__malloc_lock>
 80254d4:	f8d8 3000 	ldr.w	r3, [r8]
 80254d8:	461c      	mov	r4, r3
 80254da:	bb5c      	cbnz	r4, 8025534 <_malloc_r+0x90>
 80254dc:	4629      	mov	r1, r5
 80254de:	4638      	mov	r0, r7
 80254e0:	f7ff ffc0 	bl	8025464 <sbrk_aligned>
 80254e4:	1c43      	adds	r3, r0, #1
 80254e6:	4604      	mov	r4, r0
 80254e8:	d155      	bne.n	8025596 <_malloc_r+0xf2>
 80254ea:	f8d8 4000 	ldr.w	r4, [r8]
 80254ee:	4626      	mov	r6, r4
 80254f0:	2e00      	cmp	r6, #0
 80254f2:	d145      	bne.n	8025580 <_malloc_r+0xdc>
 80254f4:	2c00      	cmp	r4, #0
 80254f6:	d048      	beq.n	802558a <_malloc_r+0xe6>
 80254f8:	6823      	ldr	r3, [r4, #0]
 80254fa:	4631      	mov	r1, r6
 80254fc:	4638      	mov	r0, r7
 80254fe:	eb04 0903 	add.w	r9, r4, r3
 8025502:	f000 f9ef 	bl	80258e4 <_sbrk_r>
 8025506:	4581      	cmp	r9, r0
 8025508:	d13f      	bne.n	802558a <_malloc_r+0xe6>
 802550a:	6821      	ldr	r1, [r4, #0]
 802550c:	1a6d      	subs	r5, r5, r1
 802550e:	4629      	mov	r1, r5
 8025510:	4638      	mov	r0, r7
 8025512:	f7ff ffa7 	bl	8025464 <sbrk_aligned>
 8025516:	3001      	adds	r0, #1
 8025518:	d037      	beq.n	802558a <_malloc_r+0xe6>
 802551a:	6823      	ldr	r3, [r4, #0]
 802551c:	442b      	add	r3, r5
 802551e:	6023      	str	r3, [r4, #0]
 8025520:	f8d8 3000 	ldr.w	r3, [r8]
 8025524:	2b00      	cmp	r3, #0
 8025526:	d038      	beq.n	802559a <_malloc_r+0xf6>
 8025528:	685a      	ldr	r2, [r3, #4]
 802552a:	42a2      	cmp	r2, r4
 802552c:	d12b      	bne.n	8025586 <_malloc_r+0xe2>
 802552e:	2200      	movs	r2, #0
 8025530:	605a      	str	r2, [r3, #4]
 8025532:	e00f      	b.n	8025554 <_malloc_r+0xb0>
 8025534:	6822      	ldr	r2, [r4, #0]
 8025536:	1b52      	subs	r2, r2, r5
 8025538:	d41f      	bmi.n	802557a <_malloc_r+0xd6>
 802553a:	2a0b      	cmp	r2, #11
 802553c:	d917      	bls.n	802556e <_malloc_r+0xca>
 802553e:	1961      	adds	r1, r4, r5
 8025540:	42a3      	cmp	r3, r4
 8025542:	6025      	str	r5, [r4, #0]
 8025544:	bf18      	it	ne
 8025546:	6059      	strne	r1, [r3, #4]
 8025548:	6863      	ldr	r3, [r4, #4]
 802554a:	bf08      	it	eq
 802554c:	f8c8 1000 	streq.w	r1, [r8]
 8025550:	5162      	str	r2, [r4, r5]
 8025552:	604b      	str	r3, [r1, #4]
 8025554:	4638      	mov	r0, r7
 8025556:	f104 060b 	add.w	r6, r4, #11
 802555a:	f000 f829 	bl	80255b0 <__malloc_unlock>
 802555e:	f026 0607 	bic.w	r6, r6, #7
 8025562:	1d23      	adds	r3, r4, #4
 8025564:	1af2      	subs	r2, r6, r3
 8025566:	d0ae      	beq.n	80254c6 <_malloc_r+0x22>
 8025568:	1b9b      	subs	r3, r3, r6
 802556a:	50a3      	str	r3, [r4, r2]
 802556c:	e7ab      	b.n	80254c6 <_malloc_r+0x22>
 802556e:	42a3      	cmp	r3, r4
 8025570:	6862      	ldr	r2, [r4, #4]
 8025572:	d1dd      	bne.n	8025530 <_malloc_r+0x8c>
 8025574:	f8c8 2000 	str.w	r2, [r8]
 8025578:	e7ec      	b.n	8025554 <_malloc_r+0xb0>
 802557a:	4623      	mov	r3, r4
 802557c:	6864      	ldr	r4, [r4, #4]
 802557e:	e7ac      	b.n	80254da <_malloc_r+0x36>
 8025580:	4634      	mov	r4, r6
 8025582:	6876      	ldr	r6, [r6, #4]
 8025584:	e7b4      	b.n	80254f0 <_malloc_r+0x4c>
 8025586:	4613      	mov	r3, r2
 8025588:	e7cc      	b.n	8025524 <_malloc_r+0x80>
 802558a:	230c      	movs	r3, #12
 802558c:	603b      	str	r3, [r7, #0]
 802558e:	4638      	mov	r0, r7
 8025590:	f000 f80e 	bl	80255b0 <__malloc_unlock>
 8025594:	e797      	b.n	80254c6 <_malloc_r+0x22>
 8025596:	6025      	str	r5, [r4, #0]
 8025598:	e7dc      	b.n	8025554 <_malloc_r+0xb0>
 802559a:	605b      	str	r3, [r3, #4]
 802559c:	deff      	udf	#255	; 0xff
 802559e:	bf00      	nop
 80255a0:	2000c680 	.word	0x2000c680

080255a4 <__malloc_lock>:
 80255a4:	4801      	ldr	r0, [pc, #4]	; (80255ac <__malloc_lock+0x8>)
 80255a6:	f000 b9e9 	b.w	802597c <__retarget_lock_acquire_recursive>
 80255aa:	bf00      	nop
 80255ac:	2000c7c9 	.word	0x2000c7c9

080255b0 <__malloc_unlock>:
 80255b0:	4801      	ldr	r0, [pc, #4]	; (80255b8 <__malloc_unlock+0x8>)
 80255b2:	f000 b9e4 	b.w	802597e <__retarget_lock_release_recursive>
 80255b6:	bf00      	nop
 80255b8:	2000c7c9 	.word	0x2000c7c9

080255bc <__cxa_atexit>:
 80255bc:	b510      	push	{r4, lr}
 80255be:	4c05      	ldr	r4, [pc, #20]	; (80255d4 <__cxa_atexit+0x18>)
 80255c0:	4613      	mov	r3, r2
 80255c2:	b12c      	cbz	r4, 80255d0 <__cxa_atexit+0x14>
 80255c4:	460a      	mov	r2, r1
 80255c6:	4601      	mov	r1, r0
 80255c8:	2002      	movs	r0, #2
 80255ca:	f000 f9e7 	bl	802599c <__register_exitproc>
 80255ce:	bd10      	pop	{r4, pc}
 80255d0:	4620      	mov	r0, r4
 80255d2:	e7fc      	b.n	80255ce <__cxa_atexit+0x12>
 80255d4:	0802599d 	.word	0x0802599d

080255d8 <std>:
 80255d8:	2300      	movs	r3, #0
 80255da:	b510      	push	{r4, lr}
 80255dc:	4604      	mov	r4, r0
 80255de:	e9c0 3300 	strd	r3, r3, [r0]
 80255e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80255e6:	6083      	str	r3, [r0, #8]
 80255e8:	8181      	strh	r1, [r0, #12]
 80255ea:	6643      	str	r3, [r0, #100]	; 0x64
 80255ec:	81c2      	strh	r2, [r0, #14]
 80255ee:	6183      	str	r3, [r0, #24]
 80255f0:	4619      	mov	r1, r3
 80255f2:	2208      	movs	r2, #8
 80255f4:	305c      	adds	r0, #92	; 0x5c
 80255f6:	f000 f8f4 	bl	80257e2 <memset>
 80255fa:	4b05      	ldr	r3, [pc, #20]	; (8025610 <std+0x38>)
 80255fc:	6263      	str	r3, [r4, #36]	; 0x24
 80255fe:	4b05      	ldr	r3, [pc, #20]	; (8025614 <std+0x3c>)
 8025600:	62a3      	str	r3, [r4, #40]	; 0x28
 8025602:	4b05      	ldr	r3, [pc, #20]	; (8025618 <std+0x40>)
 8025604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025606:	4b05      	ldr	r3, [pc, #20]	; (802561c <std+0x44>)
 8025608:	6224      	str	r4, [r4, #32]
 802560a:	6323      	str	r3, [r4, #48]	; 0x30
 802560c:	bd10      	pop	{r4, pc}
 802560e:	bf00      	nop
 8025610:	0802575d 	.word	0x0802575d
 8025614:	0802577f 	.word	0x0802577f
 8025618:	080257b7 	.word	0x080257b7
 802561c:	080257db 	.word	0x080257db

08025620 <stdio_exit_handler>:
 8025620:	4a02      	ldr	r2, [pc, #8]	; (802562c <stdio_exit_handler+0xc>)
 8025622:	4903      	ldr	r1, [pc, #12]	; (8025630 <stdio_exit_handler+0x10>)
 8025624:	4803      	ldr	r0, [pc, #12]	; (8025634 <stdio_exit_handler+0x14>)
 8025626:	f000 b87b 	b.w	8025720 <_fwalk_sglue>
 802562a:	bf00      	nop
 802562c:	200000ac 	.word	0x200000ac
 8025630:	080261a5 	.word	0x080261a5
 8025634:	200000b8 	.word	0x200000b8

08025638 <cleanup_stdio>:
 8025638:	6841      	ldr	r1, [r0, #4]
 802563a:	4b0c      	ldr	r3, [pc, #48]	; (802566c <cleanup_stdio+0x34>)
 802563c:	4299      	cmp	r1, r3
 802563e:	b510      	push	{r4, lr}
 8025640:	4604      	mov	r4, r0
 8025642:	d001      	beq.n	8025648 <cleanup_stdio+0x10>
 8025644:	f000 fdae 	bl	80261a4 <_fflush_r>
 8025648:	68a1      	ldr	r1, [r4, #8]
 802564a:	4b09      	ldr	r3, [pc, #36]	; (8025670 <cleanup_stdio+0x38>)
 802564c:	4299      	cmp	r1, r3
 802564e:	d002      	beq.n	8025656 <cleanup_stdio+0x1e>
 8025650:	4620      	mov	r0, r4
 8025652:	f000 fda7 	bl	80261a4 <_fflush_r>
 8025656:	68e1      	ldr	r1, [r4, #12]
 8025658:	4b06      	ldr	r3, [pc, #24]	; (8025674 <cleanup_stdio+0x3c>)
 802565a:	4299      	cmp	r1, r3
 802565c:	d004      	beq.n	8025668 <cleanup_stdio+0x30>
 802565e:	4620      	mov	r0, r4
 8025660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025664:	f000 bd9e 	b.w	80261a4 <_fflush_r>
 8025668:	bd10      	pop	{r4, pc}
 802566a:	bf00      	nop
 802566c:	2000c688 	.word	0x2000c688
 8025670:	2000c6f0 	.word	0x2000c6f0
 8025674:	2000c758 	.word	0x2000c758

08025678 <global_stdio_init.part.0>:
 8025678:	b510      	push	{r4, lr}
 802567a:	4b0b      	ldr	r3, [pc, #44]	; (80256a8 <global_stdio_init.part.0+0x30>)
 802567c:	4c0b      	ldr	r4, [pc, #44]	; (80256ac <global_stdio_init.part.0+0x34>)
 802567e:	4a0c      	ldr	r2, [pc, #48]	; (80256b0 <global_stdio_init.part.0+0x38>)
 8025680:	601a      	str	r2, [r3, #0]
 8025682:	4620      	mov	r0, r4
 8025684:	2200      	movs	r2, #0
 8025686:	2104      	movs	r1, #4
 8025688:	f7ff ffa6 	bl	80255d8 <std>
 802568c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8025690:	2201      	movs	r2, #1
 8025692:	2109      	movs	r1, #9
 8025694:	f7ff ffa0 	bl	80255d8 <std>
 8025698:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802569c:	2202      	movs	r2, #2
 802569e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80256a2:	2112      	movs	r1, #18
 80256a4:	f7ff bf98 	b.w	80255d8 <std>
 80256a8:	2000c7c0 	.word	0x2000c7c0
 80256ac:	2000c688 	.word	0x2000c688
 80256b0:	08025621 	.word	0x08025621

080256b4 <__sfp_lock_acquire>:
 80256b4:	4801      	ldr	r0, [pc, #4]	; (80256bc <__sfp_lock_acquire+0x8>)
 80256b6:	f000 b961 	b.w	802597c <__retarget_lock_acquire_recursive>
 80256ba:	bf00      	nop
 80256bc:	2000c7ca 	.word	0x2000c7ca

080256c0 <__sfp_lock_release>:
 80256c0:	4801      	ldr	r0, [pc, #4]	; (80256c8 <__sfp_lock_release+0x8>)
 80256c2:	f000 b95c 	b.w	802597e <__retarget_lock_release_recursive>
 80256c6:	bf00      	nop
 80256c8:	2000c7ca 	.word	0x2000c7ca

080256cc <__sinit>:
 80256cc:	b510      	push	{r4, lr}
 80256ce:	4604      	mov	r4, r0
 80256d0:	f7ff fff0 	bl	80256b4 <__sfp_lock_acquire>
 80256d4:	6a23      	ldr	r3, [r4, #32]
 80256d6:	b11b      	cbz	r3, 80256e0 <__sinit+0x14>
 80256d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80256dc:	f7ff bff0 	b.w	80256c0 <__sfp_lock_release>
 80256e0:	4b04      	ldr	r3, [pc, #16]	; (80256f4 <__sinit+0x28>)
 80256e2:	6223      	str	r3, [r4, #32]
 80256e4:	4b04      	ldr	r3, [pc, #16]	; (80256f8 <__sinit+0x2c>)
 80256e6:	681b      	ldr	r3, [r3, #0]
 80256e8:	2b00      	cmp	r3, #0
 80256ea:	d1f5      	bne.n	80256d8 <__sinit+0xc>
 80256ec:	f7ff ffc4 	bl	8025678 <global_stdio_init.part.0>
 80256f0:	e7f2      	b.n	80256d8 <__sinit+0xc>
 80256f2:	bf00      	nop
 80256f4:	08025639 	.word	0x08025639
 80256f8:	2000c7c0 	.word	0x2000c7c0

080256fc <fiprintf>:
 80256fc:	b40e      	push	{r1, r2, r3}
 80256fe:	b503      	push	{r0, r1, lr}
 8025700:	4601      	mov	r1, r0
 8025702:	ab03      	add	r3, sp, #12
 8025704:	4805      	ldr	r0, [pc, #20]	; (802571c <fiprintf+0x20>)
 8025706:	f853 2b04 	ldr.w	r2, [r3], #4
 802570a:	6800      	ldr	r0, [r0, #0]
 802570c:	9301      	str	r3, [sp, #4]
 802570e:	f000 fa19 	bl	8025b44 <_vfiprintf_r>
 8025712:	b002      	add	sp, #8
 8025714:	f85d eb04 	ldr.w	lr, [sp], #4
 8025718:	b003      	add	sp, #12
 802571a:	4770      	bx	lr
 802571c:	20000104 	.word	0x20000104

08025720 <_fwalk_sglue>:
 8025720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025724:	4607      	mov	r7, r0
 8025726:	4688      	mov	r8, r1
 8025728:	4614      	mov	r4, r2
 802572a:	2600      	movs	r6, #0
 802572c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025730:	f1b9 0901 	subs.w	r9, r9, #1
 8025734:	d505      	bpl.n	8025742 <_fwalk_sglue+0x22>
 8025736:	6824      	ldr	r4, [r4, #0]
 8025738:	2c00      	cmp	r4, #0
 802573a:	d1f7      	bne.n	802572c <_fwalk_sglue+0xc>
 802573c:	4630      	mov	r0, r6
 802573e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025742:	89ab      	ldrh	r3, [r5, #12]
 8025744:	2b01      	cmp	r3, #1
 8025746:	d907      	bls.n	8025758 <_fwalk_sglue+0x38>
 8025748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802574c:	3301      	adds	r3, #1
 802574e:	d003      	beq.n	8025758 <_fwalk_sglue+0x38>
 8025750:	4629      	mov	r1, r5
 8025752:	4638      	mov	r0, r7
 8025754:	47c0      	blx	r8
 8025756:	4306      	orrs	r6, r0
 8025758:	3568      	adds	r5, #104	; 0x68
 802575a:	e7e9      	b.n	8025730 <_fwalk_sglue+0x10>

0802575c <__sread>:
 802575c:	b510      	push	{r4, lr}
 802575e:	460c      	mov	r4, r1
 8025760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025764:	f000 f898 	bl	8025898 <_read_r>
 8025768:	2800      	cmp	r0, #0
 802576a:	bfab      	itete	ge
 802576c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802576e:	89a3      	ldrhlt	r3, [r4, #12]
 8025770:	181b      	addge	r3, r3, r0
 8025772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025776:	bfac      	ite	ge
 8025778:	6563      	strge	r3, [r4, #84]	; 0x54
 802577a:	81a3      	strhlt	r3, [r4, #12]
 802577c:	bd10      	pop	{r4, pc}

0802577e <__swrite>:
 802577e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025782:	461f      	mov	r7, r3
 8025784:	898b      	ldrh	r3, [r1, #12]
 8025786:	05db      	lsls	r3, r3, #23
 8025788:	4605      	mov	r5, r0
 802578a:	460c      	mov	r4, r1
 802578c:	4616      	mov	r6, r2
 802578e:	d505      	bpl.n	802579c <__swrite+0x1e>
 8025790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025794:	2302      	movs	r3, #2
 8025796:	2200      	movs	r2, #0
 8025798:	f000 f86c 	bl	8025874 <_lseek_r>
 802579c:	89a3      	ldrh	r3, [r4, #12]
 802579e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80257a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80257a6:	81a3      	strh	r3, [r4, #12]
 80257a8:	4632      	mov	r2, r6
 80257aa:	463b      	mov	r3, r7
 80257ac:	4628      	mov	r0, r5
 80257ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80257b2:	f000 b8a7 	b.w	8025904 <_write_r>

080257b6 <__sseek>:
 80257b6:	b510      	push	{r4, lr}
 80257b8:	460c      	mov	r4, r1
 80257ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80257be:	f000 f859 	bl	8025874 <_lseek_r>
 80257c2:	1c43      	adds	r3, r0, #1
 80257c4:	89a3      	ldrh	r3, [r4, #12]
 80257c6:	bf15      	itete	ne
 80257c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80257ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80257ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80257d2:	81a3      	strheq	r3, [r4, #12]
 80257d4:	bf18      	it	ne
 80257d6:	81a3      	strhne	r3, [r4, #12]
 80257d8:	bd10      	pop	{r4, pc}

080257da <__sclose>:
 80257da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80257de:	f000 b839 	b.w	8025854 <_close_r>

080257e2 <memset>:
 80257e2:	4402      	add	r2, r0
 80257e4:	4603      	mov	r3, r0
 80257e6:	4293      	cmp	r3, r2
 80257e8:	d100      	bne.n	80257ec <memset+0xa>
 80257ea:	4770      	bx	lr
 80257ec:	f803 1b01 	strb.w	r1, [r3], #1
 80257f0:	e7f9      	b.n	80257e6 <memset+0x4>

080257f2 <_raise_r>:
 80257f2:	291f      	cmp	r1, #31
 80257f4:	b538      	push	{r3, r4, r5, lr}
 80257f6:	4604      	mov	r4, r0
 80257f8:	460d      	mov	r5, r1
 80257fa:	d904      	bls.n	8025806 <_raise_r+0x14>
 80257fc:	2316      	movs	r3, #22
 80257fe:	6003      	str	r3, [r0, #0]
 8025800:	f04f 30ff 	mov.w	r0, #4294967295
 8025804:	bd38      	pop	{r3, r4, r5, pc}
 8025806:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8025808:	b112      	cbz	r2, 8025810 <_raise_r+0x1e>
 802580a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802580e:	b94b      	cbnz	r3, 8025824 <_raise_r+0x32>
 8025810:	4620      	mov	r0, r4
 8025812:	f000 f865 	bl	80258e0 <_getpid_r>
 8025816:	462a      	mov	r2, r5
 8025818:	4601      	mov	r1, r0
 802581a:	4620      	mov	r0, r4
 802581c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025820:	f000 b84c 	b.w	80258bc <_kill_r>
 8025824:	2b01      	cmp	r3, #1
 8025826:	d00a      	beq.n	802583e <_raise_r+0x4c>
 8025828:	1c59      	adds	r1, r3, #1
 802582a:	d103      	bne.n	8025834 <_raise_r+0x42>
 802582c:	2316      	movs	r3, #22
 802582e:	6003      	str	r3, [r0, #0]
 8025830:	2001      	movs	r0, #1
 8025832:	e7e7      	b.n	8025804 <_raise_r+0x12>
 8025834:	2400      	movs	r4, #0
 8025836:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802583a:	4628      	mov	r0, r5
 802583c:	4798      	blx	r3
 802583e:	2000      	movs	r0, #0
 8025840:	e7e0      	b.n	8025804 <_raise_r+0x12>
	...

08025844 <raise>:
 8025844:	4b02      	ldr	r3, [pc, #8]	; (8025850 <raise+0xc>)
 8025846:	4601      	mov	r1, r0
 8025848:	6818      	ldr	r0, [r3, #0]
 802584a:	f7ff bfd2 	b.w	80257f2 <_raise_r>
 802584e:	bf00      	nop
 8025850:	20000104 	.word	0x20000104

08025854 <_close_r>:
 8025854:	b538      	push	{r3, r4, r5, lr}
 8025856:	4d06      	ldr	r5, [pc, #24]	; (8025870 <_close_r+0x1c>)
 8025858:	2300      	movs	r3, #0
 802585a:	4604      	mov	r4, r0
 802585c:	4608      	mov	r0, r1
 802585e:	602b      	str	r3, [r5, #0]
 8025860:	f7de f913 	bl	8003a8a <_close>
 8025864:	1c43      	adds	r3, r0, #1
 8025866:	d102      	bne.n	802586e <_close_r+0x1a>
 8025868:	682b      	ldr	r3, [r5, #0]
 802586a:	b103      	cbz	r3, 802586e <_close_r+0x1a>
 802586c:	6023      	str	r3, [r4, #0]
 802586e:	bd38      	pop	{r3, r4, r5, pc}
 8025870:	2000c7c4 	.word	0x2000c7c4

08025874 <_lseek_r>:
 8025874:	b538      	push	{r3, r4, r5, lr}
 8025876:	4d07      	ldr	r5, [pc, #28]	; (8025894 <_lseek_r+0x20>)
 8025878:	4604      	mov	r4, r0
 802587a:	4608      	mov	r0, r1
 802587c:	4611      	mov	r1, r2
 802587e:	2200      	movs	r2, #0
 8025880:	602a      	str	r2, [r5, #0]
 8025882:	461a      	mov	r2, r3
 8025884:	f7de f928 	bl	8003ad8 <_lseek>
 8025888:	1c43      	adds	r3, r0, #1
 802588a:	d102      	bne.n	8025892 <_lseek_r+0x1e>
 802588c:	682b      	ldr	r3, [r5, #0]
 802588e:	b103      	cbz	r3, 8025892 <_lseek_r+0x1e>
 8025890:	6023      	str	r3, [r4, #0]
 8025892:	bd38      	pop	{r3, r4, r5, pc}
 8025894:	2000c7c4 	.word	0x2000c7c4

08025898 <_read_r>:
 8025898:	b538      	push	{r3, r4, r5, lr}
 802589a:	4d07      	ldr	r5, [pc, #28]	; (80258b8 <_read_r+0x20>)
 802589c:	4604      	mov	r4, r0
 802589e:	4608      	mov	r0, r1
 80258a0:	4611      	mov	r1, r2
 80258a2:	2200      	movs	r2, #0
 80258a4:	602a      	str	r2, [r5, #0]
 80258a6:	461a      	mov	r2, r3
 80258a8:	f7de f8b6 	bl	8003a18 <_read>
 80258ac:	1c43      	adds	r3, r0, #1
 80258ae:	d102      	bne.n	80258b6 <_read_r+0x1e>
 80258b0:	682b      	ldr	r3, [r5, #0]
 80258b2:	b103      	cbz	r3, 80258b6 <_read_r+0x1e>
 80258b4:	6023      	str	r3, [r4, #0]
 80258b6:	bd38      	pop	{r3, r4, r5, pc}
 80258b8:	2000c7c4 	.word	0x2000c7c4

080258bc <_kill_r>:
 80258bc:	b538      	push	{r3, r4, r5, lr}
 80258be:	4d07      	ldr	r5, [pc, #28]	; (80258dc <_kill_r+0x20>)
 80258c0:	2300      	movs	r3, #0
 80258c2:	4604      	mov	r4, r0
 80258c4:	4608      	mov	r0, r1
 80258c6:	4611      	mov	r1, r2
 80258c8:	602b      	str	r3, [r5, #0]
 80258ca:	f7de f88b 	bl	80039e4 <_kill>
 80258ce:	1c43      	adds	r3, r0, #1
 80258d0:	d102      	bne.n	80258d8 <_kill_r+0x1c>
 80258d2:	682b      	ldr	r3, [r5, #0]
 80258d4:	b103      	cbz	r3, 80258d8 <_kill_r+0x1c>
 80258d6:	6023      	str	r3, [r4, #0]
 80258d8:	bd38      	pop	{r3, r4, r5, pc}
 80258da:	bf00      	nop
 80258dc:	2000c7c4 	.word	0x2000c7c4

080258e0 <_getpid_r>:
 80258e0:	f7de b878 	b.w	80039d4 <_getpid>

080258e4 <_sbrk_r>:
 80258e4:	b538      	push	{r3, r4, r5, lr}
 80258e6:	4d06      	ldr	r5, [pc, #24]	; (8025900 <_sbrk_r+0x1c>)
 80258e8:	2300      	movs	r3, #0
 80258ea:	4604      	mov	r4, r0
 80258ec:	4608      	mov	r0, r1
 80258ee:	602b      	str	r3, [r5, #0]
 80258f0:	f7de f900 	bl	8003af4 <_sbrk>
 80258f4:	1c43      	adds	r3, r0, #1
 80258f6:	d102      	bne.n	80258fe <_sbrk_r+0x1a>
 80258f8:	682b      	ldr	r3, [r5, #0]
 80258fa:	b103      	cbz	r3, 80258fe <_sbrk_r+0x1a>
 80258fc:	6023      	str	r3, [r4, #0]
 80258fe:	bd38      	pop	{r3, r4, r5, pc}
 8025900:	2000c7c4 	.word	0x2000c7c4

08025904 <_write_r>:
 8025904:	b538      	push	{r3, r4, r5, lr}
 8025906:	4d07      	ldr	r5, [pc, #28]	; (8025924 <_write_r+0x20>)
 8025908:	4604      	mov	r4, r0
 802590a:	4608      	mov	r0, r1
 802590c:	4611      	mov	r1, r2
 802590e:	2200      	movs	r2, #0
 8025910:	602a      	str	r2, [r5, #0]
 8025912:	461a      	mov	r2, r3
 8025914:	f7de f89d 	bl	8003a52 <_write>
 8025918:	1c43      	adds	r3, r0, #1
 802591a:	d102      	bne.n	8025922 <_write_r+0x1e>
 802591c:	682b      	ldr	r3, [r5, #0]
 802591e:	b103      	cbz	r3, 8025922 <_write_r+0x1e>
 8025920:	6023      	str	r3, [r4, #0]
 8025922:	bd38      	pop	{r3, r4, r5, pc}
 8025924:	2000c7c4 	.word	0x2000c7c4

08025928 <__errno>:
 8025928:	4b01      	ldr	r3, [pc, #4]	; (8025930 <__errno+0x8>)
 802592a:	6818      	ldr	r0, [r3, #0]
 802592c:	4770      	bx	lr
 802592e:	bf00      	nop
 8025930:	20000104 	.word	0x20000104

08025934 <__libc_init_array>:
 8025934:	b570      	push	{r4, r5, r6, lr}
 8025936:	4d0d      	ldr	r5, [pc, #52]	; (802596c <__libc_init_array+0x38>)
 8025938:	4c0d      	ldr	r4, [pc, #52]	; (8025970 <__libc_init_array+0x3c>)
 802593a:	1b64      	subs	r4, r4, r5
 802593c:	10a4      	asrs	r4, r4, #2
 802593e:	2600      	movs	r6, #0
 8025940:	42a6      	cmp	r6, r4
 8025942:	d109      	bne.n	8025958 <__libc_init_array+0x24>
 8025944:	4d0b      	ldr	r5, [pc, #44]	; (8025974 <__libc_init_array+0x40>)
 8025946:	4c0c      	ldr	r4, [pc, #48]	; (8025978 <__libc_init_array+0x44>)
 8025948:	f000 fd6e 	bl	8026428 <_init>
 802594c:	1b64      	subs	r4, r4, r5
 802594e:	10a4      	asrs	r4, r4, #2
 8025950:	2600      	movs	r6, #0
 8025952:	42a6      	cmp	r6, r4
 8025954:	d105      	bne.n	8025962 <__libc_init_array+0x2e>
 8025956:	bd70      	pop	{r4, r5, r6, pc}
 8025958:	f855 3b04 	ldr.w	r3, [r5], #4
 802595c:	4798      	blx	r3
 802595e:	3601      	adds	r6, #1
 8025960:	e7ee      	b.n	8025940 <__libc_init_array+0xc>
 8025962:	f855 3b04 	ldr.w	r3, [r5], #4
 8025966:	4798      	blx	r3
 8025968:	3601      	adds	r6, #1
 802596a:	e7f2      	b.n	8025952 <__libc_init_array+0x1e>
 802596c:	08061b68 	.word	0x08061b68
 8025970:	08061b68 	.word	0x08061b68
 8025974:	08061b68 	.word	0x08061b68
 8025978:	08061b7c 	.word	0x08061b7c

0802597c <__retarget_lock_acquire_recursive>:
 802597c:	4770      	bx	lr

0802597e <__retarget_lock_release_recursive>:
 802597e:	4770      	bx	lr

08025980 <memcpy>:
 8025980:	440a      	add	r2, r1
 8025982:	4291      	cmp	r1, r2
 8025984:	f100 33ff 	add.w	r3, r0, #4294967295
 8025988:	d100      	bne.n	802598c <memcpy+0xc>
 802598a:	4770      	bx	lr
 802598c:	b510      	push	{r4, lr}
 802598e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025996:	4291      	cmp	r1, r2
 8025998:	d1f9      	bne.n	802598e <memcpy+0xe>
 802599a:	bd10      	pop	{r4, pc}

0802599c <__register_exitproc>:
 802599c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80259a0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8025a54 <__register_exitproc+0xb8>
 80259a4:	4606      	mov	r6, r0
 80259a6:	f8d8 0000 	ldr.w	r0, [r8]
 80259aa:	461f      	mov	r7, r3
 80259ac:	460d      	mov	r5, r1
 80259ae:	4691      	mov	r9, r2
 80259b0:	f7ff ffe4 	bl	802597c <__retarget_lock_acquire_recursive>
 80259b4:	4b23      	ldr	r3, [pc, #140]	; (8025a44 <__register_exitproc+0xa8>)
 80259b6:	681c      	ldr	r4, [r3, #0]
 80259b8:	b934      	cbnz	r4, 80259c8 <__register_exitproc+0x2c>
 80259ba:	4c23      	ldr	r4, [pc, #140]	; (8025a48 <__register_exitproc+0xac>)
 80259bc:	601c      	str	r4, [r3, #0]
 80259be:	4b23      	ldr	r3, [pc, #140]	; (8025a4c <__register_exitproc+0xb0>)
 80259c0:	b113      	cbz	r3, 80259c8 <__register_exitproc+0x2c>
 80259c2:	681b      	ldr	r3, [r3, #0]
 80259c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80259c8:	6863      	ldr	r3, [r4, #4]
 80259ca:	2b1f      	cmp	r3, #31
 80259cc:	dd07      	ble.n	80259de <__register_exitproc+0x42>
 80259ce:	f8d8 0000 	ldr.w	r0, [r8]
 80259d2:	f7ff ffd4 	bl	802597e <__retarget_lock_release_recursive>
 80259d6:	f04f 30ff 	mov.w	r0, #4294967295
 80259da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80259de:	b32e      	cbz	r6, 8025a2c <__register_exitproc+0x90>
 80259e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80259e4:	b968      	cbnz	r0, 8025a02 <__register_exitproc+0x66>
 80259e6:	4b1a      	ldr	r3, [pc, #104]	; (8025a50 <__register_exitproc+0xb4>)
 80259e8:	2b00      	cmp	r3, #0
 80259ea:	d0f0      	beq.n	80259ce <__register_exitproc+0x32>
 80259ec:	f44f 7084 	mov.w	r0, #264	; 0x108
 80259f0:	f7ff fd28 	bl	8025444 <malloc>
 80259f4:	2800      	cmp	r0, #0
 80259f6:	d0ea      	beq.n	80259ce <__register_exitproc+0x32>
 80259f8:	2300      	movs	r3, #0
 80259fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80259fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025a02:	6863      	ldr	r3, [r4, #4]
 8025a04:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025a08:	2201      	movs	r2, #1
 8025a0a:	409a      	lsls	r2, r3
 8025a0c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025a10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025a14:	4313      	orrs	r3, r2
 8025a16:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025a1a:	2e02      	cmp	r6, #2
 8025a1c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025a20:	bf02      	ittt	eq
 8025a22:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025a26:	4313      	orreq	r3, r2
 8025a28:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025a2c:	6863      	ldr	r3, [r4, #4]
 8025a2e:	f8d8 0000 	ldr.w	r0, [r8]
 8025a32:	1c5a      	adds	r2, r3, #1
 8025a34:	3302      	adds	r3, #2
 8025a36:	6062      	str	r2, [r4, #4]
 8025a38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025a3c:	f7ff ff9f 	bl	802597e <__retarget_lock_release_recursive>
 8025a40:	2000      	movs	r0, #0
 8025a42:	e7ca      	b.n	80259da <__register_exitproc+0x3e>
 8025a44:	2000c858 	.word	0x2000c858
 8025a48:	2000c7cc 	.word	0x2000c7cc
 8025a4c:	0802a798 	.word	0x0802a798
 8025a50:	08025445 	.word	0x08025445
 8025a54:	20000108 	.word	0x20000108

08025a58 <_free_r>:
 8025a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025a5a:	2900      	cmp	r1, #0
 8025a5c:	d044      	beq.n	8025ae8 <_free_r+0x90>
 8025a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025a62:	9001      	str	r0, [sp, #4]
 8025a64:	2b00      	cmp	r3, #0
 8025a66:	f1a1 0404 	sub.w	r4, r1, #4
 8025a6a:	bfb8      	it	lt
 8025a6c:	18e4      	addlt	r4, r4, r3
 8025a6e:	f7ff fd99 	bl	80255a4 <__malloc_lock>
 8025a72:	4a1e      	ldr	r2, [pc, #120]	; (8025aec <_free_r+0x94>)
 8025a74:	9801      	ldr	r0, [sp, #4]
 8025a76:	6813      	ldr	r3, [r2, #0]
 8025a78:	b933      	cbnz	r3, 8025a88 <_free_r+0x30>
 8025a7a:	6063      	str	r3, [r4, #4]
 8025a7c:	6014      	str	r4, [r2, #0]
 8025a7e:	b003      	add	sp, #12
 8025a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025a84:	f7ff bd94 	b.w	80255b0 <__malloc_unlock>
 8025a88:	42a3      	cmp	r3, r4
 8025a8a:	d908      	bls.n	8025a9e <_free_r+0x46>
 8025a8c:	6825      	ldr	r5, [r4, #0]
 8025a8e:	1961      	adds	r1, r4, r5
 8025a90:	428b      	cmp	r3, r1
 8025a92:	bf01      	itttt	eq
 8025a94:	6819      	ldreq	r1, [r3, #0]
 8025a96:	685b      	ldreq	r3, [r3, #4]
 8025a98:	1949      	addeq	r1, r1, r5
 8025a9a:	6021      	streq	r1, [r4, #0]
 8025a9c:	e7ed      	b.n	8025a7a <_free_r+0x22>
 8025a9e:	461a      	mov	r2, r3
 8025aa0:	685b      	ldr	r3, [r3, #4]
 8025aa2:	b10b      	cbz	r3, 8025aa8 <_free_r+0x50>
 8025aa4:	42a3      	cmp	r3, r4
 8025aa6:	d9fa      	bls.n	8025a9e <_free_r+0x46>
 8025aa8:	6811      	ldr	r1, [r2, #0]
 8025aaa:	1855      	adds	r5, r2, r1
 8025aac:	42a5      	cmp	r5, r4
 8025aae:	d10b      	bne.n	8025ac8 <_free_r+0x70>
 8025ab0:	6824      	ldr	r4, [r4, #0]
 8025ab2:	4421      	add	r1, r4
 8025ab4:	1854      	adds	r4, r2, r1
 8025ab6:	42a3      	cmp	r3, r4
 8025ab8:	6011      	str	r1, [r2, #0]
 8025aba:	d1e0      	bne.n	8025a7e <_free_r+0x26>
 8025abc:	681c      	ldr	r4, [r3, #0]
 8025abe:	685b      	ldr	r3, [r3, #4]
 8025ac0:	6053      	str	r3, [r2, #4]
 8025ac2:	440c      	add	r4, r1
 8025ac4:	6014      	str	r4, [r2, #0]
 8025ac6:	e7da      	b.n	8025a7e <_free_r+0x26>
 8025ac8:	d902      	bls.n	8025ad0 <_free_r+0x78>
 8025aca:	230c      	movs	r3, #12
 8025acc:	6003      	str	r3, [r0, #0]
 8025ace:	e7d6      	b.n	8025a7e <_free_r+0x26>
 8025ad0:	6825      	ldr	r5, [r4, #0]
 8025ad2:	1961      	adds	r1, r4, r5
 8025ad4:	428b      	cmp	r3, r1
 8025ad6:	bf04      	itt	eq
 8025ad8:	6819      	ldreq	r1, [r3, #0]
 8025ada:	685b      	ldreq	r3, [r3, #4]
 8025adc:	6063      	str	r3, [r4, #4]
 8025ade:	bf04      	itt	eq
 8025ae0:	1949      	addeq	r1, r1, r5
 8025ae2:	6021      	streq	r1, [r4, #0]
 8025ae4:	6054      	str	r4, [r2, #4]
 8025ae6:	e7ca      	b.n	8025a7e <_free_r+0x26>
 8025ae8:	b003      	add	sp, #12
 8025aea:	bd30      	pop	{r4, r5, pc}
 8025aec:	2000c680 	.word	0x2000c680

08025af0 <__sfputc_r>:
 8025af0:	6893      	ldr	r3, [r2, #8]
 8025af2:	3b01      	subs	r3, #1
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	b410      	push	{r4}
 8025af8:	6093      	str	r3, [r2, #8]
 8025afa:	da08      	bge.n	8025b0e <__sfputc_r+0x1e>
 8025afc:	6994      	ldr	r4, [r2, #24]
 8025afe:	42a3      	cmp	r3, r4
 8025b00:	db01      	blt.n	8025b06 <__sfputc_r+0x16>
 8025b02:	290a      	cmp	r1, #10
 8025b04:	d103      	bne.n	8025b0e <__sfputc_r+0x1e>
 8025b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025b0a:	f000 bb73 	b.w	80261f4 <__swbuf_r>
 8025b0e:	6813      	ldr	r3, [r2, #0]
 8025b10:	1c58      	adds	r0, r3, #1
 8025b12:	6010      	str	r0, [r2, #0]
 8025b14:	7019      	strb	r1, [r3, #0]
 8025b16:	4608      	mov	r0, r1
 8025b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025b1c:	4770      	bx	lr

08025b1e <__sfputs_r>:
 8025b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b20:	4606      	mov	r6, r0
 8025b22:	460f      	mov	r7, r1
 8025b24:	4614      	mov	r4, r2
 8025b26:	18d5      	adds	r5, r2, r3
 8025b28:	42ac      	cmp	r4, r5
 8025b2a:	d101      	bne.n	8025b30 <__sfputs_r+0x12>
 8025b2c:	2000      	movs	r0, #0
 8025b2e:	e007      	b.n	8025b40 <__sfputs_r+0x22>
 8025b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025b34:	463a      	mov	r2, r7
 8025b36:	4630      	mov	r0, r6
 8025b38:	f7ff ffda 	bl	8025af0 <__sfputc_r>
 8025b3c:	1c43      	adds	r3, r0, #1
 8025b3e:	d1f3      	bne.n	8025b28 <__sfputs_r+0xa>
 8025b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025b44 <_vfiprintf_r>:
 8025b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b48:	460d      	mov	r5, r1
 8025b4a:	b09d      	sub	sp, #116	; 0x74
 8025b4c:	4614      	mov	r4, r2
 8025b4e:	4698      	mov	r8, r3
 8025b50:	4606      	mov	r6, r0
 8025b52:	b118      	cbz	r0, 8025b5c <_vfiprintf_r+0x18>
 8025b54:	6a03      	ldr	r3, [r0, #32]
 8025b56:	b90b      	cbnz	r3, 8025b5c <_vfiprintf_r+0x18>
 8025b58:	f7ff fdb8 	bl	80256cc <__sinit>
 8025b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025b5e:	07d9      	lsls	r1, r3, #31
 8025b60:	d405      	bmi.n	8025b6e <_vfiprintf_r+0x2a>
 8025b62:	89ab      	ldrh	r3, [r5, #12]
 8025b64:	059a      	lsls	r2, r3, #22
 8025b66:	d402      	bmi.n	8025b6e <_vfiprintf_r+0x2a>
 8025b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025b6a:	f7ff ff07 	bl	802597c <__retarget_lock_acquire_recursive>
 8025b6e:	89ab      	ldrh	r3, [r5, #12]
 8025b70:	071b      	lsls	r3, r3, #28
 8025b72:	d501      	bpl.n	8025b78 <_vfiprintf_r+0x34>
 8025b74:	692b      	ldr	r3, [r5, #16]
 8025b76:	b99b      	cbnz	r3, 8025ba0 <_vfiprintf_r+0x5c>
 8025b78:	4629      	mov	r1, r5
 8025b7a:	4630      	mov	r0, r6
 8025b7c:	f000 fb78 	bl	8026270 <__swsetup_r>
 8025b80:	b170      	cbz	r0, 8025ba0 <_vfiprintf_r+0x5c>
 8025b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025b84:	07dc      	lsls	r4, r3, #31
 8025b86:	d504      	bpl.n	8025b92 <_vfiprintf_r+0x4e>
 8025b88:	f04f 30ff 	mov.w	r0, #4294967295
 8025b8c:	b01d      	add	sp, #116	; 0x74
 8025b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b92:	89ab      	ldrh	r3, [r5, #12]
 8025b94:	0598      	lsls	r0, r3, #22
 8025b96:	d4f7      	bmi.n	8025b88 <_vfiprintf_r+0x44>
 8025b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025b9a:	f7ff fef0 	bl	802597e <__retarget_lock_release_recursive>
 8025b9e:	e7f3      	b.n	8025b88 <_vfiprintf_r+0x44>
 8025ba0:	2300      	movs	r3, #0
 8025ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8025ba4:	2320      	movs	r3, #32
 8025ba6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8025bae:	2330      	movs	r3, #48	; 0x30
 8025bb0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8025d64 <_vfiprintf_r+0x220>
 8025bb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025bb8:	f04f 0901 	mov.w	r9, #1
 8025bbc:	4623      	mov	r3, r4
 8025bbe:	469a      	mov	sl, r3
 8025bc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025bc4:	b10a      	cbz	r2, 8025bca <_vfiprintf_r+0x86>
 8025bc6:	2a25      	cmp	r2, #37	; 0x25
 8025bc8:	d1f9      	bne.n	8025bbe <_vfiprintf_r+0x7a>
 8025bca:	ebba 0b04 	subs.w	fp, sl, r4
 8025bce:	d00b      	beq.n	8025be8 <_vfiprintf_r+0xa4>
 8025bd0:	465b      	mov	r3, fp
 8025bd2:	4622      	mov	r2, r4
 8025bd4:	4629      	mov	r1, r5
 8025bd6:	4630      	mov	r0, r6
 8025bd8:	f7ff ffa1 	bl	8025b1e <__sfputs_r>
 8025bdc:	3001      	adds	r0, #1
 8025bde:	f000 80a9 	beq.w	8025d34 <_vfiprintf_r+0x1f0>
 8025be2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025be4:	445a      	add	r2, fp
 8025be6:	9209      	str	r2, [sp, #36]	; 0x24
 8025be8:	f89a 3000 	ldrb.w	r3, [sl]
 8025bec:	2b00      	cmp	r3, #0
 8025bee:	f000 80a1 	beq.w	8025d34 <_vfiprintf_r+0x1f0>
 8025bf2:	2300      	movs	r3, #0
 8025bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8025bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025bfc:	f10a 0a01 	add.w	sl, sl, #1
 8025c00:	9304      	str	r3, [sp, #16]
 8025c02:	9307      	str	r3, [sp, #28]
 8025c04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025c08:	931a      	str	r3, [sp, #104]	; 0x68
 8025c0a:	4654      	mov	r4, sl
 8025c0c:	2205      	movs	r2, #5
 8025c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025c12:	4854      	ldr	r0, [pc, #336]	; (8025d64 <_vfiprintf_r+0x220>)
 8025c14:	f7da fafc 	bl	8000210 <memchr>
 8025c18:	9a04      	ldr	r2, [sp, #16]
 8025c1a:	b9d8      	cbnz	r0, 8025c54 <_vfiprintf_r+0x110>
 8025c1c:	06d1      	lsls	r1, r2, #27
 8025c1e:	bf44      	itt	mi
 8025c20:	2320      	movmi	r3, #32
 8025c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025c26:	0713      	lsls	r3, r2, #28
 8025c28:	bf44      	itt	mi
 8025c2a:	232b      	movmi	r3, #43	; 0x2b
 8025c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025c30:	f89a 3000 	ldrb.w	r3, [sl]
 8025c34:	2b2a      	cmp	r3, #42	; 0x2a
 8025c36:	d015      	beq.n	8025c64 <_vfiprintf_r+0x120>
 8025c38:	9a07      	ldr	r2, [sp, #28]
 8025c3a:	4654      	mov	r4, sl
 8025c3c:	2000      	movs	r0, #0
 8025c3e:	f04f 0c0a 	mov.w	ip, #10
 8025c42:	4621      	mov	r1, r4
 8025c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025c48:	3b30      	subs	r3, #48	; 0x30
 8025c4a:	2b09      	cmp	r3, #9
 8025c4c:	d94d      	bls.n	8025cea <_vfiprintf_r+0x1a6>
 8025c4e:	b1b0      	cbz	r0, 8025c7e <_vfiprintf_r+0x13a>
 8025c50:	9207      	str	r2, [sp, #28]
 8025c52:	e014      	b.n	8025c7e <_vfiprintf_r+0x13a>
 8025c54:	eba0 0308 	sub.w	r3, r0, r8
 8025c58:	fa09 f303 	lsl.w	r3, r9, r3
 8025c5c:	4313      	orrs	r3, r2
 8025c5e:	9304      	str	r3, [sp, #16]
 8025c60:	46a2      	mov	sl, r4
 8025c62:	e7d2      	b.n	8025c0a <_vfiprintf_r+0xc6>
 8025c64:	9b03      	ldr	r3, [sp, #12]
 8025c66:	1d19      	adds	r1, r3, #4
 8025c68:	681b      	ldr	r3, [r3, #0]
 8025c6a:	9103      	str	r1, [sp, #12]
 8025c6c:	2b00      	cmp	r3, #0
 8025c6e:	bfbb      	ittet	lt
 8025c70:	425b      	neglt	r3, r3
 8025c72:	f042 0202 	orrlt.w	r2, r2, #2
 8025c76:	9307      	strge	r3, [sp, #28]
 8025c78:	9307      	strlt	r3, [sp, #28]
 8025c7a:	bfb8      	it	lt
 8025c7c:	9204      	strlt	r2, [sp, #16]
 8025c7e:	7823      	ldrb	r3, [r4, #0]
 8025c80:	2b2e      	cmp	r3, #46	; 0x2e
 8025c82:	d10c      	bne.n	8025c9e <_vfiprintf_r+0x15a>
 8025c84:	7863      	ldrb	r3, [r4, #1]
 8025c86:	2b2a      	cmp	r3, #42	; 0x2a
 8025c88:	d134      	bne.n	8025cf4 <_vfiprintf_r+0x1b0>
 8025c8a:	9b03      	ldr	r3, [sp, #12]
 8025c8c:	1d1a      	adds	r2, r3, #4
 8025c8e:	681b      	ldr	r3, [r3, #0]
 8025c90:	9203      	str	r2, [sp, #12]
 8025c92:	2b00      	cmp	r3, #0
 8025c94:	bfb8      	it	lt
 8025c96:	f04f 33ff 	movlt.w	r3, #4294967295
 8025c9a:	3402      	adds	r4, #2
 8025c9c:	9305      	str	r3, [sp, #20]
 8025c9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8025d74 <_vfiprintf_r+0x230>
 8025ca2:	7821      	ldrb	r1, [r4, #0]
 8025ca4:	2203      	movs	r2, #3
 8025ca6:	4650      	mov	r0, sl
 8025ca8:	f7da fab2 	bl	8000210 <memchr>
 8025cac:	b138      	cbz	r0, 8025cbe <_vfiprintf_r+0x17a>
 8025cae:	9b04      	ldr	r3, [sp, #16]
 8025cb0:	eba0 000a 	sub.w	r0, r0, sl
 8025cb4:	2240      	movs	r2, #64	; 0x40
 8025cb6:	4082      	lsls	r2, r0
 8025cb8:	4313      	orrs	r3, r2
 8025cba:	3401      	adds	r4, #1
 8025cbc:	9304      	str	r3, [sp, #16]
 8025cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025cc2:	4829      	ldr	r0, [pc, #164]	; (8025d68 <_vfiprintf_r+0x224>)
 8025cc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025cc8:	2206      	movs	r2, #6
 8025cca:	f7da faa1 	bl	8000210 <memchr>
 8025cce:	2800      	cmp	r0, #0
 8025cd0:	d03f      	beq.n	8025d52 <_vfiprintf_r+0x20e>
 8025cd2:	4b26      	ldr	r3, [pc, #152]	; (8025d6c <_vfiprintf_r+0x228>)
 8025cd4:	bb1b      	cbnz	r3, 8025d1e <_vfiprintf_r+0x1da>
 8025cd6:	9b03      	ldr	r3, [sp, #12]
 8025cd8:	3307      	adds	r3, #7
 8025cda:	f023 0307 	bic.w	r3, r3, #7
 8025cde:	3308      	adds	r3, #8
 8025ce0:	9303      	str	r3, [sp, #12]
 8025ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ce4:	443b      	add	r3, r7
 8025ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8025ce8:	e768      	b.n	8025bbc <_vfiprintf_r+0x78>
 8025cea:	fb0c 3202 	mla	r2, ip, r2, r3
 8025cee:	460c      	mov	r4, r1
 8025cf0:	2001      	movs	r0, #1
 8025cf2:	e7a6      	b.n	8025c42 <_vfiprintf_r+0xfe>
 8025cf4:	2300      	movs	r3, #0
 8025cf6:	3401      	adds	r4, #1
 8025cf8:	9305      	str	r3, [sp, #20]
 8025cfa:	4619      	mov	r1, r3
 8025cfc:	f04f 0c0a 	mov.w	ip, #10
 8025d00:	4620      	mov	r0, r4
 8025d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025d06:	3a30      	subs	r2, #48	; 0x30
 8025d08:	2a09      	cmp	r2, #9
 8025d0a:	d903      	bls.n	8025d14 <_vfiprintf_r+0x1d0>
 8025d0c:	2b00      	cmp	r3, #0
 8025d0e:	d0c6      	beq.n	8025c9e <_vfiprintf_r+0x15a>
 8025d10:	9105      	str	r1, [sp, #20]
 8025d12:	e7c4      	b.n	8025c9e <_vfiprintf_r+0x15a>
 8025d14:	fb0c 2101 	mla	r1, ip, r1, r2
 8025d18:	4604      	mov	r4, r0
 8025d1a:	2301      	movs	r3, #1
 8025d1c:	e7f0      	b.n	8025d00 <_vfiprintf_r+0x1bc>
 8025d1e:	ab03      	add	r3, sp, #12
 8025d20:	9300      	str	r3, [sp, #0]
 8025d22:	462a      	mov	r2, r5
 8025d24:	4b12      	ldr	r3, [pc, #72]	; (8025d70 <_vfiprintf_r+0x22c>)
 8025d26:	a904      	add	r1, sp, #16
 8025d28:	4630      	mov	r0, r6
 8025d2a:	f3af 8000 	nop.w
 8025d2e:	4607      	mov	r7, r0
 8025d30:	1c78      	adds	r0, r7, #1
 8025d32:	d1d6      	bne.n	8025ce2 <_vfiprintf_r+0x19e>
 8025d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025d36:	07d9      	lsls	r1, r3, #31
 8025d38:	d405      	bmi.n	8025d46 <_vfiprintf_r+0x202>
 8025d3a:	89ab      	ldrh	r3, [r5, #12]
 8025d3c:	059a      	lsls	r2, r3, #22
 8025d3e:	d402      	bmi.n	8025d46 <_vfiprintf_r+0x202>
 8025d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025d42:	f7ff fe1c 	bl	802597e <__retarget_lock_release_recursive>
 8025d46:	89ab      	ldrh	r3, [r5, #12]
 8025d48:	065b      	lsls	r3, r3, #25
 8025d4a:	f53f af1d 	bmi.w	8025b88 <_vfiprintf_r+0x44>
 8025d4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025d50:	e71c      	b.n	8025b8c <_vfiprintf_r+0x48>
 8025d52:	ab03      	add	r3, sp, #12
 8025d54:	9300      	str	r3, [sp, #0]
 8025d56:	462a      	mov	r2, r5
 8025d58:	4b05      	ldr	r3, [pc, #20]	; (8025d70 <_vfiprintf_r+0x22c>)
 8025d5a:	a904      	add	r1, sp, #16
 8025d5c:	4630      	mov	r0, r6
 8025d5e:	f000 f879 	bl	8025e54 <_printf_i>
 8025d62:	e7e4      	b.n	8025d2e <_vfiprintf_r+0x1ea>
 8025d64:	0802a79c 	.word	0x0802a79c
 8025d68:	0802a7a6 	.word	0x0802a7a6
 8025d6c:	00000000 	.word	0x00000000
 8025d70:	08025b1f 	.word	0x08025b1f
 8025d74:	0802a7a2 	.word	0x0802a7a2

08025d78 <_printf_common>:
 8025d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025d7c:	4616      	mov	r6, r2
 8025d7e:	4699      	mov	r9, r3
 8025d80:	688a      	ldr	r2, [r1, #8]
 8025d82:	690b      	ldr	r3, [r1, #16]
 8025d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025d88:	4293      	cmp	r3, r2
 8025d8a:	bfb8      	it	lt
 8025d8c:	4613      	movlt	r3, r2
 8025d8e:	6033      	str	r3, [r6, #0]
 8025d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025d94:	4607      	mov	r7, r0
 8025d96:	460c      	mov	r4, r1
 8025d98:	b10a      	cbz	r2, 8025d9e <_printf_common+0x26>
 8025d9a:	3301      	adds	r3, #1
 8025d9c:	6033      	str	r3, [r6, #0]
 8025d9e:	6823      	ldr	r3, [r4, #0]
 8025da0:	0699      	lsls	r1, r3, #26
 8025da2:	bf42      	ittt	mi
 8025da4:	6833      	ldrmi	r3, [r6, #0]
 8025da6:	3302      	addmi	r3, #2
 8025da8:	6033      	strmi	r3, [r6, #0]
 8025daa:	6825      	ldr	r5, [r4, #0]
 8025dac:	f015 0506 	ands.w	r5, r5, #6
 8025db0:	d106      	bne.n	8025dc0 <_printf_common+0x48>
 8025db2:	f104 0a19 	add.w	sl, r4, #25
 8025db6:	68e3      	ldr	r3, [r4, #12]
 8025db8:	6832      	ldr	r2, [r6, #0]
 8025dba:	1a9b      	subs	r3, r3, r2
 8025dbc:	42ab      	cmp	r3, r5
 8025dbe:	dc26      	bgt.n	8025e0e <_printf_common+0x96>
 8025dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025dc4:	1e13      	subs	r3, r2, #0
 8025dc6:	6822      	ldr	r2, [r4, #0]
 8025dc8:	bf18      	it	ne
 8025dca:	2301      	movne	r3, #1
 8025dcc:	0692      	lsls	r2, r2, #26
 8025dce:	d42b      	bmi.n	8025e28 <_printf_common+0xb0>
 8025dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025dd4:	4649      	mov	r1, r9
 8025dd6:	4638      	mov	r0, r7
 8025dd8:	47c0      	blx	r8
 8025dda:	3001      	adds	r0, #1
 8025ddc:	d01e      	beq.n	8025e1c <_printf_common+0xa4>
 8025dde:	6823      	ldr	r3, [r4, #0]
 8025de0:	6922      	ldr	r2, [r4, #16]
 8025de2:	f003 0306 	and.w	r3, r3, #6
 8025de6:	2b04      	cmp	r3, #4
 8025de8:	bf02      	ittt	eq
 8025dea:	68e5      	ldreq	r5, [r4, #12]
 8025dec:	6833      	ldreq	r3, [r6, #0]
 8025dee:	1aed      	subeq	r5, r5, r3
 8025df0:	68a3      	ldr	r3, [r4, #8]
 8025df2:	bf0c      	ite	eq
 8025df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025df8:	2500      	movne	r5, #0
 8025dfa:	4293      	cmp	r3, r2
 8025dfc:	bfc4      	itt	gt
 8025dfe:	1a9b      	subgt	r3, r3, r2
 8025e00:	18ed      	addgt	r5, r5, r3
 8025e02:	2600      	movs	r6, #0
 8025e04:	341a      	adds	r4, #26
 8025e06:	42b5      	cmp	r5, r6
 8025e08:	d11a      	bne.n	8025e40 <_printf_common+0xc8>
 8025e0a:	2000      	movs	r0, #0
 8025e0c:	e008      	b.n	8025e20 <_printf_common+0xa8>
 8025e0e:	2301      	movs	r3, #1
 8025e10:	4652      	mov	r2, sl
 8025e12:	4649      	mov	r1, r9
 8025e14:	4638      	mov	r0, r7
 8025e16:	47c0      	blx	r8
 8025e18:	3001      	adds	r0, #1
 8025e1a:	d103      	bne.n	8025e24 <_printf_common+0xac>
 8025e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8025e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025e24:	3501      	adds	r5, #1
 8025e26:	e7c6      	b.n	8025db6 <_printf_common+0x3e>
 8025e28:	18e1      	adds	r1, r4, r3
 8025e2a:	1c5a      	adds	r2, r3, #1
 8025e2c:	2030      	movs	r0, #48	; 0x30
 8025e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025e32:	4422      	add	r2, r4
 8025e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025e3c:	3302      	adds	r3, #2
 8025e3e:	e7c7      	b.n	8025dd0 <_printf_common+0x58>
 8025e40:	2301      	movs	r3, #1
 8025e42:	4622      	mov	r2, r4
 8025e44:	4649      	mov	r1, r9
 8025e46:	4638      	mov	r0, r7
 8025e48:	47c0      	blx	r8
 8025e4a:	3001      	adds	r0, #1
 8025e4c:	d0e6      	beq.n	8025e1c <_printf_common+0xa4>
 8025e4e:	3601      	adds	r6, #1
 8025e50:	e7d9      	b.n	8025e06 <_printf_common+0x8e>
	...

08025e54 <_printf_i>:
 8025e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025e58:	7e0f      	ldrb	r7, [r1, #24]
 8025e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025e5c:	2f78      	cmp	r7, #120	; 0x78
 8025e5e:	4691      	mov	r9, r2
 8025e60:	4680      	mov	r8, r0
 8025e62:	460c      	mov	r4, r1
 8025e64:	469a      	mov	sl, r3
 8025e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025e6a:	d807      	bhi.n	8025e7c <_printf_i+0x28>
 8025e6c:	2f62      	cmp	r7, #98	; 0x62
 8025e6e:	d80a      	bhi.n	8025e86 <_printf_i+0x32>
 8025e70:	2f00      	cmp	r7, #0
 8025e72:	f000 80d4 	beq.w	802601e <_printf_i+0x1ca>
 8025e76:	2f58      	cmp	r7, #88	; 0x58
 8025e78:	f000 80c0 	beq.w	8025ffc <_printf_i+0x1a8>
 8025e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025e84:	e03a      	b.n	8025efc <_printf_i+0xa8>
 8025e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025e8a:	2b15      	cmp	r3, #21
 8025e8c:	d8f6      	bhi.n	8025e7c <_printf_i+0x28>
 8025e8e:	a101      	add	r1, pc, #4	; (adr r1, 8025e94 <_printf_i+0x40>)
 8025e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025e94:	08025eed 	.word	0x08025eed
 8025e98:	08025f01 	.word	0x08025f01
 8025e9c:	08025e7d 	.word	0x08025e7d
 8025ea0:	08025e7d 	.word	0x08025e7d
 8025ea4:	08025e7d 	.word	0x08025e7d
 8025ea8:	08025e7d 	.word	0x08025e7d
 8025eac:	08025f01 	.word	0x08025f01
 8025eb0:	08025e7d 	.word	0x08025e7d
 8025eb4:	08025e7d 	.word	0x08025e7d
 8025eb8:	08025e7d 	.word	0x08025e7d
 8025ebc:	08025e7d 	.word	0x08025e7d
 8025ec0:	08026005 	.word	0x08026005
 8025ec4:	08025f2d 	.word	0x08025f2d
 8025ec8:	08025fbf 	.word	0x08025fbf
 8025ecc:	08025e7d 	.word	0x08025e7d
 8025ed0:	08025e7d 	.word	0x08025e7d
 8025ed4:	08026027 	.word	0x08026027
 8025ed8:	08025e7d 	.word	0x08025e7d
 8025edc:	08025f2d 	.word	0x08025f2d
 8025ee0:	08025e7d 	.word	0x08025e7d
 8025ee4:	08025e7d 	.word	0x08025e7d
 8025ee8:	08025fc7 	.word	0x08025fc7
 8025eec:	682b      	ldr	r3, [r5, #0]
 8025eee:	1d1a      	adds	r2, r3, #4
 8025ef0:	681b      	ldr	r3, [r3, #0]
 8025ef2:	602a      	str	r2, [r5, #0]
 8025ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025efc:	2301      	movs	r3, #1
 8025efe:	e09f      	b.n	8026040 <_printf_i+0x1ec>
 8025f00:	6820      	ldr	r0, [r4, #0]
 8025f02:	682b      	ldr	r3, [r5, #0]
 8025f04:	0607      	lsls	r7, r0, #24
 8025f06:	f103 0104 	add.w	r1, r3, #4
 8025f0a:	6029      	str	r1, [r5, #0]
 8025f0c:	d501      	bpl.n	8025f12 <_printf_i+0xbe>
 8025f0e:	681e      	ldr	r6, [r3, #0]
 8025f10:	e003      	b.n	8025f1a <_printf_i+0xc6>
 8025f12:	0646      	lsls	r6, r0, #25
 8025f14:	d5fb      	bpl.n	8025f0e <_printf_i+0xba>
 8025f16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025f1a:	2e00      	cmp	r6, #0
 8025f1c:	da03      	bge.n	8025f26 <_printf_i+0xd2>
 8025f1e:	232d      	movs	r3, #45	; 0x2d
 8025f20:	4276      	negs	r6, r6
 8025f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025f26:	485a      	ldr	r0, [pc, #360]	; (8026090 <_printf_i+0x23c>)
 8025f28:	230a      	movs	r3, #10
 8025f2a:	e012      	b.n	8025f52 <_printf_i+0xfe>
 8025f2c:	682b      	ldr	r3, [r5, #0]
 8025f2e:	6820      	ldr	r0, [r4, #0]
 8025f30:	1d19      	adds	r1, r3, #4
 8025f32:	6029      	str	r1, [r5, #0]
 8025f34:	0605      	lsls	r5, r0, #24
 8025f36:	d501      	bpl.n	8025f3c <_printf_i+0xe8>
 8025f38:	681e      	ldr	r6, [r3, #0]
 8025f3a:	e002      	b.n	8025f42 <_printf_i+0xee>
 8025f3c:	0641      	lsls	r1, r0, #25
 8025f3e:	d5fb      	bpl.n	8025f38 <_printf_i+0xe4>
 8025f40:	881e      	ldrh	r6, [r3, #0]
 8025f42:	4853      	ldr	r0, [pc, #332]	; (8026090 <_printf_i+0x23c>)
 8025f44:	2f6f      	cmp	r7, #111	; 0x6f
 8025f46:	bf0c      	ite	eq
 8025f48:	2308      	moveq	r3, #8
 8025f4a:	230a      	movne	r3, #10
 8025f4c:	2100      	movs	r1, #0
 8025f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025f52:	6865      	ldr	r5, [r4, #4]
 8025f54:	60a5      	str	r5, [r4, #8]
 8025f56:	2d00      	cmp	r5, #0
 8025f58:	bfa2      	ittt	ge
 8025f5a:	6821      	ldrge	r1, [r4, #0]
 8025f5c:	f021 0104 	bicge.w	r1, r1, #4
 8025f60:	6021      	strge	r1, [r4, #0]
 8025f62:	b90e      	cbnz	r6, 8025f68 <_printf_i+0x114>
 8025f64:	2d00      	cmp	r5, #0
 8025f66:	d04b      	beq.n	8026000 <_printf_i+0x1ac>
 8025f68:	4615      	mov	r5, r2
 8025f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8025f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8025f72:	5dc7      	ldrb	r7, [r0, r7]
 8025f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025f78:	4637      	mov	r7, r6
 8025f7a:	42bb      	cmp	r3, r7
 8025f7c:	460e      	mov	r6, r1
 8025f7e:	d9f4      	bls.n	8025f6a <_printf_i+0x116>
 8025f80:	2b08      	cmp	r3, #8
 8025f82:	d10b      	bne.n	8025f9c <_printf_i+0x148>
 8025f84:	6823      	ldr	r3, [r4, #0]
 8025f86:	07de      	lsls	r6, r3, #31
 8025f88:	d508      	bpl.n	8025f9c <_printf_i+0x148>
 8025f8a:	6923      	ldr	r3, [r4, #16]
 8025f8c:	6861      	ldr	r1, [r4, #4]
 8025f8e:	4299      	cmp	r1, r3
 8025f90:	bfde      	ittt	le
 8025f92:	2330      	movle	r3, #48	; 0x30
 8025f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025f98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025f9c:	1b52      	subs	r2, r2, r5
 8025f9e:	6122      	str	r2, [r4, #16]
 8025fa0:	f8cd a000 	str.w	sl, [sp]
 8025fa4:	464b      	mov	r3, r9
 8025fa6:	aa03      	add	r2, sp, #12
 8025fa8:	4621      	mov	r1, r4
 8025faa:	4640      	mov	r0, r8
 8025fac:	f7ff fee4 	bl	8025d78 <_printf_common>
 8025fb0:	3001      	adds	r0, #1
 8025fb2:	d14a      	bne.n	802604a <_printf_i+0x1f6>
 8025fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8025fb8:	b004      	add	sp, #16
 8025fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025fbe:	6823      	ldr	r3, [r4, #0]
 8025fc0:	f043 0320 	orr.w	r3, r3, #32
 8025fc4:	6023      	str	r3, [r4, #0]
 8025fc6:	4833      	ldr	r0, [pc, #204]	; (8026094 <_printf_i+0x240>)
 8025fc8:	2778      	movs	r7, #120	; 0x78
 8025fca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025fce:	6823      	ldr	r3, [r4, #0]
 8025fd0:	6829      	ldr	r1, [r5, #0]
 8025fd2:	061f      	lsls	r7, r3, #24
 8025fd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8025fd8:	d402      	bmi.n	8025fe0 <_printf_i+0x18c>
 8025fda:	065f      	lsls	r7, r3, #25
 8025fdc:	bf48      	it	mi
 8025fde:	b2b6      	uxthmi	r6, r6
 8025fe0:	07df      	lsls	r7, r3, #31
 8025fe2:	bf48      	it	mi
 8025fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8025fe8:	6029      	str	r1, [r5, #0]
 8025fea:	bf48      	it	mi
 8025fec:	6023      	strmi	r3, [r4, #0]
 8025fee:	b91e      	cbnz	r6, 8025ff8 <_printf_i+0x1a4>
 8025ff0:	6823      	ldr	r3, [r4, #0]
 8025ff2:	f023 0320 	bic.w	r3, r3, #32
 8025ff6:	6023      	str	r3, [r4, #0]
 8025ff8:	2310      	movs	r3, #16
 8025ffa:	e7a7      	b.n	8025f4c <_printf_i+0xf8>
 8025ffc:	4824      	ldr	r0, [pc, #144]	; (8026090 <_printf_i+0x23c>)
 8025ffe:	e7e4      	b.n	8025fca <_printf_i+0x176>
 8026000:	4615      	mov	r5, r2
 8026002:	e7bd      	b.n	8025f80 <_printf_i+0x12c>
 8026004:	682b      	ldr	r3, [r5, #0]
 8026006:	6826      	ldr	r6, [r4, #0]
 8026008:	6961      	ldr	r1, [r4, #20]
 802600a:	1d18      	adds	r0, r3, #4
 802600c:	6028      	str	r0, [r5, #0]
 802600e:	0635      	lsls	r5, r6, #24
 8026010:	681b      	ldr	r3, [r3, #0]
 8026012:	d501      	bpl.n	8026018 <_printf_i+0x1c4>
 8026014:	6019      	str	r1, [r3, #0]
 8026016:	e002      	b.n	802601e <_printf_i+0x1ca>
 8026018:	0670      	lsls	r0, r6, #25
 802601a:	d5fb      	bpl.n	8026014 <_printf_i+0x1c0>
 802601c:	8019      	strh	r1, [r3, #0]
 802601e:	2300      	movs	r3, #0
 8026020:	6123      	str	r3, [r4, #16]
 8026022:	4615      	mov	r5, r2
 8026024:	e7bc      	b.n	8025fa0 <_printf_i+0x14c>
 8026026:	682b      	ldr	r3, [r5, #0]
 8026028:	1d1a      	adds	r2, r3, #4
 802602a:	602a      	str	r2, [r5, #0]
 802602c:	681d      	ldr	r5, [r3, #0]
 802602e:	6862      	ldr	r2, [r4, #4]
 8026030:	2100      	movs	r1, #0
 8026032:	4628      	mov	r0, r5
 8026034:	f7da f8ec 	bl	8000210 <memchr>
 8026038:	b108      	cbz	r0, 802603e <_printf_i+0x1ea>
 802603a:	1b40      	subs	r0, r0, r5
 802603c:	6060      	str	r0, [r4, #4]
 802603e:	6863      	ldr	r3, [r4, #4]
 8026040:	6123      	str	r3, [r4, #16]
 8026042:	2300      	movs	r3, #0
 8026044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026048:	e7aa      	b.n	8025fa0 <_printf_i+0x14c>
 802604a:	6923      	ldr	r3, [r4, #16]
 802604c:	462a      	mov	r2, r5
 802604e:	4649      	mov	r1, r9
 8026050:	4640      	mov	r0, r8
 8026052:	47d0      	blx	sl
 8026054:	3001      	adds	r0, #1
 8026056:	d0ad      	beq.n	8025fb4 <_printf_i+0x160>
 8026058:	6823      	ldr	r3, [r4, #0]
 802605a:	079b      	lsls	r3, r3, #30
 802605c:	d413      	bmi.n	8026086 <_printf_i+0x232>
 802605e:	68e0      	ldr	r0, [r4, #12]
 8026060:	9b03      	ldr	r3, [sp, #12]
 8026062:	4298      	cmp	r0, r3
 8026064:	bfb8      	it	lt
 8026066:	4618      	movlt	r0, r3
 8026068:	e7a6      	b.n	8025fb8 <_printf_i+0x164>
 802606a:	2301      	movs	r3, #1
 802606c:	4632      	mov	r2, r6
 802606e:	4649      	mov	r1, r9
 8026070:	4640      	mov	r0, r8
 8026072:	47d0      	blx	sl
 8026074:	3001      	adds	r0, #1
 8026076:	d09d      	beq.n	8025fb4 <_printf_i+0x160>
 8026078:	3501      	adds	r5, #1
 802607a:	68e3      	ldr	r3, [r4, #12]
 802607c:	9903      	ldr	r1, [sp, #12]
 802607e:	1a5b      	subs	r3, r3, r1
 8026080:	42ab      	cmp	r3, r5
 8026082:	dcf2      	bgt.n	802606a <_printf_i+0x216>
 8026084:	e7eb      	b.n	802605e <_printf_i+0x20a>
 8026086:	2500      	movs	r5, #0
 8026088:	f104 0619 	add.w	r6, r4, #25
 802608c:	e7f5      	b.n	802607a <_printf_i+0x226>
 802608e:	bf00      	nop
 8026090:	0802a7ad 	.word	0x0802a7ad
 8026094:	0802a7be 	.word	0x0802a7be

08026098 <__sflush_r>:
 8026098:	898a      	ldrh	r2, [r1, #12]
 802609a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802609e:	4605      	mov	r5, r0
 80260a0:	0710      	lsls	r0, r2, #28
 80260a2:	460c      	mov	r4, r1
 80260a4:	d458      	bmi.n	8026158 <__sflush_r+0xc0>
 80260a6:	684b      	ldr	r3, [r1, #4]
 80260a8:	2b00      	cmp	r3, #0
 80260aa:	dc05      	bgt.n	80260b8 <__sflush_r+0x20>
 80260ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80260ae:	2b00      	cmp	r3, #0
 80260b0:	dc02      	bgt.n	80260b8 <__sflush_r+0x20>
 80260b2:	2000      	movs	r0, #0
 80260b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80260b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80260ba:	2e00      	cmp	r6, #0
 80260bc:	d0f9      	beq.n	80260b2 <__sflush_r+0x1a>
 80260be:	2300      	movs	r3, #0
 80260c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80260c4:	682f      	ldr	r7, [r5, #0]
 80260c6:	6a21      	ldr	r1, [r4, #32]
 80260c8:	602b      	str	r3, [r5, #0]
 80260ca:	d032      	beq.n	8026132 <__sflush_r+0x9a>
 80260cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80260ce:	89a3      	ldrh	r3, [r4, #12]
 80260d0:	075a      	lsls	r2, r3, #29
 80260d2:	d505      	bpl.n	80260e0 <__sflush_r+0x48>
 80260d4:	6863      	ldr	r3, [r4, #4]
 80260d6:	1ac0      	subs	r0, r0, r3
 80260d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80260da:	b10b      	cbz	r3, 80260e0 <__sflush_r+0x48>
 80260dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80260de:	1ac0      	subs	r0, r0, r3
 80260e0:	2300      	movs	r3, #0
 80260e2:	4602      	mov	r2, r0
 80260e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80260e6:	6a21      	ldr	r1, [r4, #32]
 80260e8:	4628      	mov	r0, r5
 80260ea:	47b0      	blx	r6
 80260ec:	1c43      	adds	r3, r0, #1
 80260ee:	89a3      	ldrh	r3, [r4, #12]
 80260f0:	d106      	bne.n	8026100 <__sflush_r+0x68>
 80260f2:	6829      	ldr	r1, [r5, #0]
 80260f4:	291d      	cmp	r1, #29
 80260f6:	d82b      	bhi.n	8026150 <__sflush_r+0xb8>
 80260f8:	4a29      	ldr	r2, [pc, #164]	; (80261a0 <__sflush_r+0x108>)
 80260fa:	410a      	asrs	r2, r1
 80260fc:	07d6      	lsls	r6, r2, #31
 80260fe:	d427      	bmi.n	8026150 <__sflush_r+0xb8>
 8026100:	2200      	movs	r2, #0
 8026102:	6062      	str	r2, [r4, #4]
 8026104:	04d9      	lsls	r1, r3, #19
 8026106:	6922      	ldr	r2, [r4, #16]
 8026108:	6022      	str	r2, [r4, #0]
 802610a:	d504      	bpl.n	8026116 <__sflush_r+0x7e>
 802610c:	1c42      	adds	r2, r0, #1
 802610e:	d101      	bne.n	8026114 <__sflush_r+0x7c>
 8026110:	682b      	ldr	r3, [r5, #0]
 8026112:	b903      	cbnz	r3, 8026116 <__sflush_r+0x7e>
 8026114:	6560      	str	r0, [r4, #84]	; 0x54
 8026116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026118:	602f      	str	r7, [r5, #0]
 802611a:	2900      	cmp	r1, #0
 802611c:	d0c9      	beq.n	80260b2 <__sflush_r+0x1a>
 802611e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026122:	4299      	cmp	r1, r3
 8026124:	d002      	beq.n	802612c <__sflush_r+0x94>
 8026126:	4628      	mov	r0, r5
 8026128:	f7ff fc96 	bl	8025a58 <_free_r>
 802612c:	2000      	movs	r0, #0
 802612e:	6360      	str	r0, [r4, #52]	; 0x34
 8026130:	e7c0      	b.n	80260b4 <__sflush_r+0x1c>
 8026132:	2301      	movs	r3, #1
 8026134:	4628      	mov	r0, r5
 8026136:	47b0      	blx	r6
 8026138:	1c41      	adds	r1, r0, #1
 802613a:	d1c8      	bne.n	80260ce <__sflush_r+0x36>
 802613c:	682b      	ldr	r3, [r5, #0]
 802613e:	2b00      	cmp	r3, #0
 8026140:	d0c5      	beq.n	80260ce <__sflush_r+0x36>
 8026142:	2b1d      	cmp	r3, #29
 8026144:	d001      	beq.n	802614a <__sflush_r+0xb2>
 8026146:	2b16      	cmp	r3, #22
 8026148:	d101      	bne.n	802614e <__sflush_r+0xb6>
 802614a:	602f      	str	r7, [r5, #0]
 802614c:	e7b1      	b.n	80260b2 <__sflush_r+0x1a>
 802614e:	89a3      	ldrh	r3, [r4, #12]
 8026150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026154:	81a3      	strh	r3, [r4, #12]
 8026156:	e7ad      	b.n	80260b4 <__sflush_r+0x1c>
 8026158:	690f      	ldr	r7, [r1, #16]
 802615a:	2f00      	cmp	r7, #0
 802615c:	d0a9      	beq.n	80260b2 <__sflush_r+0x1a>
 802615e:	0793      	lsls	r3, r2, #30
 8026160:	680e      	ldr	r6, [r1, #0]
 8026162:	bf08      	it	eq
 8026164:	694b      	ldreq	r3, [r1, #20]
 8026166:	600f      	str	r7, [r1, #0]
 8026168:	bf18      	it	ne
 802616a:	2300      	movne	r3, #0
 802616c:	eba6 0807 	sub.w	r8, r6, r7
 8026170:	608b      	str	r3, [r1, #8]
 8026172:	f1b8 0f00 	cmp.w	r8, #0
 8026176:	dd9c      	ble.n	80260b2 <__sflush_r+0x1a>
 8026178:	6a21      	ldr	r1, [r4, #32]
 802617a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802617c:	4643      	mov	r3, r8
 802617e:	463a      	mov	r2, r7
 8026180:	4628      	mov	r0, r5
 8026182:	47b0      	blx	r6
 8026184:	2800      	cmp	r0, #0
 8026186:	dc06      	bgt.n	8026196 <__sflush_r+0xfe>
 8026188:	89a3      	ldrh	r3, [r4, #12]
 802618a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802618e:	81a3      	strh	r3, [r4, #12]
 8026190:	f04f 30ff 	mov.w	r0, #4294967295
 8026194:	e78e      	b.n	80260b4 <__sflush_r+0x1c>
 8026196:	4407      	add	r7, r0
 8026198:	eba8 0800 	sub.w	r8, r8, r0
 802619c:	e7e9      	b.n	8026172 <__sflush_r+0xda>
 802619e:	bf00      	nop
 80261a0:	dfbffffe 	.word	0xdfbffffe

080261a4 <_fflush_r>:
 80261a4:	b538      	push	{r3, r4, r5, lr}
 80261a6:	690b      	ldr	r3, [r1, #16]
 80261a8:	4605      	mov	r5, r0
 80261aa:	460c      	mov	r4, r1
 80261ac:	b913      	cbnz	r3, 80261b4 <_fflush_r+0x10>
 80261ae:	2500      	movs	r5, #0
 80261b0:	4628      	mov	r0, r5
 80261b2:	bd38      	pop	{r3, r4, r5, pc}
 80261b4:	b118      	cbz	r0, 80261be <_fflush_r+0x1a>
 80261b6:	6a03      	ldr	r3, [r0, #32]
 80261b8:	b90b      	cbnz	r3, 80261be <_fflush_r+0x1a>
 80261ba:	f7ff fa87 	bl	80256cc <__sinit>
 80261be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80261c2:	2b00      	cmp	r3, #0
 80261c4:	d0f3      	beq.n	80261ae <_fflush_r+0xa>
 80261c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80261c8:	07d0      	lsls	r0, r2, #31
 80261ca:	d404      	bmi.n	80261d6 <_fflush_r+0x32>
 80261cc:	0599      	lsls	r1, r3, #22
 80261ce:	d402      	bmi.n	80261d6 <_fflush_r+0x32>
 80261d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80261d2:	f7ff fbd3 	bl	802597c <__retarget_lock_acquire_recursive>
 80261d6:	4628      	mov	r0, r5
 80261d8:	4621      	mov	r1, r4
 80261da:	f7ff ff5d 	bl	8026098 <__sflush_r>
 80261de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80261e0:	07da      	lsls	r2, r3, #31
 80261e2:	4605      	mov	r5, r0
 80261e4:	d4e4      	bmi.n	80261b0 <_fflush_r+0xc>
 80261e6:	89a3      	ldrh	r3, [r4, #12]
 80261e8:	059b      	lsls	r3, r3, #22
 80261ea:	d4e1      	bmi.n	80261b0 <_fflush_r+0xc>
 80261ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80261ee:	f7ff fbc6 	bl	802597e <__retarget_lock_release_recursive>
 80261f2:	e7dd      	b.n	80261b0 <_fflush_r+0xc>

080261f4 <__swbuf_r>:
 80261f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80261f6:	460e      	mov	r6, r1
 80261f8:	4614      	mov	r4, r2
 80261fa:	4605      	mov	r5, r0
 80261fc:	b118      	cbz	r0, 8026206 <__swbuf_r+0x12>
 80261fe:	6a03      	ldr	r3, [r0, #32]
 8026200:	b90b      	cbnz	r3, 8026206 <__swbuf_r+0x12>
 8026202:	f7ff fa63 	bl	80256cc <__sinit>
 8026206:	69a3      	ldr	r3, [r4, #24]
 8026208:	60a3      	str	r3, [r4, #8]
 802620a:	89a3      	ldrh	r3, [r4, #12]
 802620c:	071a      	lsls	r2, r3, #28
 802620e:	d525      	bpl.n	802625c <__swbuf_r+0x68>
 8026210:	6923      	ldr	r3, [r4, #16]
 8026212:	b31b      	cbz	r3, 802625c <__swbuf_r+0x68>
 8026214:	6823      	ldr	r3, [r4, #0]
 8026216:	6922      	ldr	r2, [r4, #16]
 8026218:	1a98      	subs	r0, r3, r2
 802621a:	6963      	ldr	r3, [r4, #20]
 802621c:	b2f6      	uxtb	r6, r6
 802621e:	4283      	cmp	r3, r0
 8026220:	4637      	mov	r7, r6
 8026222:	dc04      	bgt.n	802622e <__swbuf_r+0x3a>
 8026224:	4621      	mov	r1, r4
 8026226:	4628      	mov	r0, r5
 8026228:	f7ff ffbc 	bl	80261a4 <_fflush_r>
 802622c:	b9e0      	cbnz	r0, 8026268 <__swbuf_r+0x74>
 802622e:	68a3      	ldr	r3, [r4, #8]
 8026230:	3b01      	subs	r3, #1
 8026232:	60a3      	str	r3, [r4, #8]
 8026234:	6823      	ldr	r3, [r4, #0]
 8026236:	1c5a      	adds	r2, r3, #1
 8026238:	6022      	str	r2, [r4, #0]
 802623a:	701e      	strb	r6, [r3, #0]
 802623c:	6962      	ldr	r2, [r4, #20]
 802623e:	1c43      	adds	r3, r0, #1
 8026240:	429a      	cmp	r2, r3
 8026242:	d004      	beq.n	802624e <__swbuf_r+0x5a>
 8026244:	89a3      	ldrh	r3, [r4, #12]
 8026246:	07db      	lsls	r3, r3, #31
 8026248:	d506      	bpl.n	8026258 <__swbuf_r+0x64>
 802624a:	2e0a      	cmp	r6, #10
 802624c:	d104      	bne.n	8026258 <__swbuf_r+0x64>
 802624e:	4621      	mov	r1, r4
 8026250:	4628      	mov	r0, r5
 8026252:	f7ff ffa7 	bl	80261a4 <_fflush_r>
 8026256:	b938      	cbnz	r0, 8026268 <__swbuf_r+0x74>
 8026258:	4638      	mov	r0, r7
 802625a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802625c:	4621      	mov	r1, r4
 802625e:	4628      	mov	r0, r5
 8026260:	f000 f806 	bl	8026270 <__swsetup_r>
 8026264:	2800      	cmp	r0, #0
 8026266:	d0d5      	beq.n	8026214 <__swbuf_r+0x20>
 8026268:	f04f 37ff 	mov.w	r7, #4294967295
 802626c:	e7f4      	b.n	8026258 <__swbuf_r+0x64>
	...

08026270 <__swsetup_r>:
 8026270:	b538      	push	{r3, r4, r5, lr}
 8026272:	4b2a      	ldr	r3, [pc, #168]	; (802631c <__swsetup_r+0xac>)
 8026274:	4605      	mov	r5, r0
 8026276:	6818      	ldr	r0, [r3, #0]
 8026278:	460c      	mov	r4, r1
 802627a:	b118      	cbz	r0, 8026284 <__swsetup_r+0x14>
 802627c:	6a03      	ldr	r3, [r0, #32]
 802627e:	b90b      	cbnz	r3, 8026284 <__swsetup_r+0x14>
 8026280:	f7ff fa24 	bl	80256cc <__sinit>
 8026284:	89a3      	ldrh	r3, [r4, #12]
 8026286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802628a:	0718      	lsls	r0, r3, #28
 802628c:	d422      	bmi.n	80262d4 <__swsetup_r+0x64>
 802628e:	06d9      	lsls	r1, r3, #27
 8026290:	d407      	bmi.n	80262a2 <__swsetup_r+0x32>
 8026292:	2309      	movs	r3, #9
 8026294:	602b      	str	r3, [r5, #0]
 8026296:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802629a:	81a3      	strh	r3, [r4, #12]
 802629c:	f04f 30ff 	mov.w	r0, #4294967295
 80262a0:	e034      	b.n	802630c <__swsetup_r+0x9c>
 80262a2:	0758      	lsls	r0, r3, #29
 80262a4:	d512      	bpl.n	80262cc <__swsetup_r+0x5c>
 80262a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80262a8:	b141      	cbz	r1, 80262bc <__swsetup_r+0x4c>
 80262aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80262ae:	4299      	cmp	r1, r3
 80262b0:	d002      	beq.n	80262b8 <__swsetup_r+0x48>
 80262b2:	4628      	mov	r0, r5
 80262b4:	f7ff fbd0 	bl	8025a58 <_free_r>
 80262b8:	2300      	movs	r3, #0
 80262ba:	6363      	str	r3, [r4, #52]	; 0x34
 80262bc:	89a3      	ldrh	r3, [r4, #12]
 80262be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80262c2:	81a3      	strh	r3, [r4, #12]
 80262c4:	2300      	movs	r3, #0
 80262c6:	6063      	str	r3, [r4, #4]
 80262c8:	6923      	ldr	r3, [r4, #16]
 80262ca:	6023      	str	r3, [r4, #0]
 80262cc:	89a3      	ldrh	r3, [r4, #12]
 80262ce:	f043 0308 	orr.w	r3, r3, #8
 80262d2:	81a3      	strh	r3, [r4, #12]
 80262d4:	6923      	ldr	r3, [r4, #16]
 80262d6:	b94b      	cbnz	r3, 80262ec <__swsetup_r+0x7c>
 80262d8:	89a3      	ldrh	r3, [r4, #12]
 80262da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80262de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80262e2:	d003      	beq.n	80262ec <__swsetup_r+0x7c>
 80262e4:	4621      	mov	r1, r4
 80262e6:	4628      	mov	r0, r5
 80262e8:	f000 f840 	bl	802636c <__smakebuf_r>
 80262ec:	89a0      	ldrh	r0, [r4, #12]
 80262ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80262f2:	f010 0301 	ands.w	r3, r0, #1
 80262f6:	d00a      	beq.n	802630e <__swsetup_r+0x9e>
 80262f8:	2300      	movs	r3, #0
 80262fa:	60a3      	str	r3, [r4, #8]
 80262fc:	6963      	ldr	r3, [r4, #20]
 80262fe:	425b      	negs	r3, r3
 8026300:	61a3      	str	r3, [r4, #24]
 8026302:	6923      	ldr	r3, [r4, #16]
 8026304:	b943      	cbnz	r3, 8026318 <__swsetup_r+0xa8>
 8026306:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802630a:	d1c4      	bne.n	8026296 <__swsetup_r+0x26>
 802630c:	bd38      	pop	{r3, r4, r5, pc}
 802630e:	0781      	lsls	r1, r0, #30
 8026310:	bf58      	it	pl
 8026312:	6963      	ldrpl	r3, [r4, #20]
 8026314:	60a3      	str	r3, [r4, #8]
 8026316:	e7f4      	b.n	8026302 <__swsetup_r+0x92>
 8026318:	2000      	movs	r0, #0
 802631a:	e7f7      	b.n	802630c <__swsetup_r+0x9c>
 802631c:	20000104 	.word	0x20000104

08026320 <__swhatbuf_r>:
 8026320:	b570      	push	{r4, r5, r6, lr}
 8026322:	460c      	mov	r4, r1
 8026324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026328:	2900      	cmp	r1, #0
 802632a:	b096      	sub	sp, #88	; 0x58
 802632c:	4615      	mov	r5, r2
 802632e:	461e      	mov	r6, r3
 8026330:	da0d      	bge.n	802634e <__swhatbuf_r+0x2e>
 8026332:	89a3      	ldrh	r3, [r4, #12]
 8026334:	f013 0f80 	tst.w	r3, #128	; 0x80
 8026338:	f04f 0100 	mov.w	r1, #0
 802633c:	bf0c      	ite	eq
 802633e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8026342:	2340      	movne	r3, #64	; 0x40
 8026344:	2000      	movs	r0, #0
 8026346:	6031      	str	r1, [r6, #0]
 8026348:	602b      	str	r3, [r5, #0]
 802634a:	b016      	add	sp, #88	; 0x58
 802634c:	bd70      	pop	{r4, r5, r6, pc}
 802634e:	466a      	mov	r2, sp
 8026350:	f000 f848 	bl	80263e4 <_fstat_r>
 8026354:	2800      	cmp	r0, #0
 8026356:	dbec      	blt.n	8026332 <__swhatbuf_r+0x12>
 8026358:	9901      	ldr	r1, [sp, #4]
 802635a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802635e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8026362:	4259      	negs	r1, r3
 8026364:	4159      	adcs	r1, r3
 8026366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802636a:	e7eb      	b.n	8026344 <__swhatbuf_r+0x24>

0802636c <__smakebuf_r>:
 802636c:	898b      	ldrh	r3, [r1, #12]
 802636e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026370:	079d      	lsls	r5, r3, #30
 8026372:	4606      	mov	r6, r0
 8026374:	460c      	mov	r4, r1
 8026376:	d507      	bpl.n	8026388 <__smakebuf_r+0x1c>
 8026378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802637c:	6023      	str	r3, [r4, #0]
 802637e:	6123      	str	r3, [r4, #16]
 8026380:	2301      	movs	r3, #1
 8026382:	6163      	str	r3, [r4, #20]
 8026384:	b002      	add	sp, #8
 8026386:	bd70      	pop	{r4, r5, r6, pc}
 8026388:	ab01      	add	r3, sp, #4
 802638a:	466a      	mov	r2, sp
 802638c:	f7ff ffc8 	bl	8026320 <__swhatbuf_r>
 8026390:	9900      	ldr	r1, [sp, #0]
 8026392:	4605      	mov	r5, r0
 8026394:	4630      	mov	r0, r6
 8026396:	f7ff f885 	bl	80254a4 <_malloc_r>
 802639a:	b948      	cbnz	r0, 80263b0 <__smakebuf_r+0x44>
 802639c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80263a0:	059a      	lsls	r2, r3, #22
 80263a2:	d4ef      	bmi.n	8026384 <__smakebuf_r+0x18>
 80263a4:	f023 0303 	bic.w	r3, r3, #3
 80263a8:	f043 0302 	orr.w	r3, r3, #2
 80263ac:	81a3      	strh	r3, [r4, #12]
 80263ae:	e7e3      	b.n	8026378 <__smakebuf_r+0xc>
 80263b0:	89a3      	ldrh	r3, [r4, #12]
 80263b2:	6020      	str	r0, [r4, #0]
 80263b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80263b8:	81a3      	strh	r3, [r4, #12]
 80263ba:	9b00      	ldr	r3, [sp, #0]
 80263bc:	6163      	str	r3, [r4, #20]
 80263be:	9b01      	ldr	r3, [sp, #4]
 80263c0:	6120      	str	r0, [r4, #16]
 80263c2:	b15b      	cbz	r3, 80263dc <__smakebuf_r+0x70>
 80263c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80263c8:	4630      	mov	r0, r6
 80263ca:	f000 f81d 	bl	8026408 <_isatty_r>
 80263ce:	b128      	cbz	r0, 80263dc <__smakebuf_r+0x70>
 80263d0:	89a3      	ldrh	r3, [r4, #12]
 80263d2:	f023 0303 	bic.w	r3, r3, #3
 80263d6:	f043 0301 	orr.w	r3, r3, #1
 80263da:	81a3      	strh	r3, [r4, #12]
 80263dc:	89a3      	ldrh	r3, [r4, #12]
 80263de:	431d      	orrs	r5, r3
 80263e0:	81a5      	strh	r5, [r4, #12]
 80263e2:	e7cf      	b.n	8026384 <__smakebuf_r+0x18>

080263e4 <_fstat_r>:
 80263e4:	b538      	push	{r3, r4, r5, lr}
 80263e6:	4d07      	ldr	r5, [pc, #28]	; (8026404 <_fstat_r+0x20>)
 80263e8:	2300      	movs	r3, #0
 80263ea:	4604      	mov	r4, r0
 80263ec:	4608      	mov	r0, r1
 80263ee:	4611      	mov	r1, r2
 80263f0:	602b      	str	r3, [r5, #0]
 80263f2:	f7dd fb56 	bl	8003aa2 <_fstat>
 80263f6:	1c43      	adds	r3, r0, #1
 80263f8:	d102      	bne.n	8026400 <_fstat_r+0x1c>
 80263fa:	682b      	ldr	r3, [r5, #0]
 80263fc:	b103      	cbz	r3, 8026400 <_fstat_r+0x1c>
 80263fe:	6023      	str	r3, [r4, #0]
 8026400:	bd38      	pop	{r3, r4, r5, pc}
 8026402:	bf00      	nop
 8026404:	2000c7c4 	.word	0x2000c7c4

08026408 <_isatty_r>:
 8026408:	b538      	push	{r3, r4, r5, lr}
 802640a:	4d06      	ldr	r5, [pc, #24]	; (8026424 <_isatty_r+0x1c>)
 802640c:	2300      	movs	r3, #0
 802640e:	4604      	mov	r4, r0
 8026410:	4608      	mov	r0, r1
 8026412:	602b      	str	r3, [r5, #0]
 8026414:	f7dd fb55 	bl	8003ac2 <_isatty>
 8026418:	1c43      	adds	r3, r0, #1
 802641a:	d102      	bne.n	8026422 <_isatty_r+0x1a>
 802641c:	682b      	ldr	r3, [r5, #0]
 802641e:	b103      	cbz	r3, 8026422 <_isatty_r+0x1a>
 8026420:	6023      	str	r3, [r4, #0]
 8026422:	bd38      	pop	{r3, r4, r5, pc}
 8026424:	2000c7c4 	.word	0x2000c7c4

08026428 <_init>:
 8026428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802642a:	bf00      	nop
 802642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802642e:	bc08      	pop	{r3}
 8026430:	469e      	mov	lr, r3
 8026432:	4770      	bx	lr

08026434 <_fini>:
 8026434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026436:	bf00      	nop
 8026438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802643a:	bc08      	pop	{r3}
 802643c:	469e      	mov	lr, r3
 802643e:	4770      	bx	lr
